// ==============================================
// ACTION SCRIPT - DOCH√ÅDZKA NOTIFIK√ÅCIE
// Verzia: 2.17 | Typ: Action Script  
// Kni≈ænica: Doch√°dzka
// ==============================================
// ‚úÖ NOV√â v2.17:
//    - Vyma≈æe star√© notifik√°cie pred vytvoren√≠m nov√Ωch
//    - Linkuje vytvoren√© notifik√°cie do poƒæa "Telegram Notifik√°cie"
//    - Pri zmene √∫dajov automaticky vyma≈æe star√© spr√°vy z Telegramu
//    - Zabezpeƒçuje konzistenciu medzi DB a Telegramom
// ‚úÖ NOV√â v2.16:
//    - Thread ID sa zapisuje do samostatn√©ho poƒæa v ASISTANTO Notifications
//    - Kompatibiln√© s aktualizovanou ≈°trukt√∫rou kni≈ænice
// ‚úÖ NOV√â v2.15:
//    - Zaznamen√°va v≈°etky odoslan√© notifik√°cie do ASISTANTO Notifications
//    - Uklad√° Message ID z Telegram API pre tracking
//    - Podporuje zaznamen√°vanie SMS a Email notifik√°ci√≠
// ‚úÖ OPRAVEN√â v2.14:
//    - Pou≈æ√≠va MementoUtils.safeGetAttribute() pre ƒç√≠tanie atrib√∫tov
//    - Spr√°vne API volania cez entry objekt s indexom
//    - Prid√°va do spr√°vy len atrib√∫ty s nenulovou hodnotou
//    - Elegantnej≈°√≠ k√≥d vyu≈æ√≠vaj√∫ci MementoUtils kni≈ænicu
// ==============================================
// üîÑ WORKFLOW:
//    1. Vyma≈æe v≈°etky star√© notifik√°cie (DB + Telegram)
//    2. Po≈°le nov√© notifik√°cie v≈°etk√Ωm zamestnancom
//    3. Zaznamen√° ich do ASISTANTO Notifications
//    4. Nalinkuje vytvoren√© z√°znamy do poƒæa "Telegram Notifik√°cie"
// ==============================================

var CONFIG = {
    debug: true,
    version: "2.17",
    scriptName: "Doch√°dzka Notifik√°cie",
    scriptType: "Action Script",
    
    // Kni≈ænice
    apiLibrary: "ASISTANTO API",
    defaultsLibrary: "ASISTANTO Defaults",
    notificationsLibrary: "ASISTANTO Notifications",
    
    // Nastavenia
    maxSMSLength: 160,
    telegramParseMode: "Markdown",
    
    // N√°zvy pol√≠
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod",
        odchod: "Odchod",
        prestavka: "Prest√°vka",
        poznamka: "Pozn√°mka",
        projekt: "Projekt/Z√°kazka",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log",
        telegramNotifikacie: "Telegram Notifik√°cie"  // Nov√© pole pre linky
    },
    
    // N√°zvy atrib√∫tov podƒæa screenshotu
    attributes: {
        // Pracovn√© √∫daje
        odpracovane: "odpracovan√©",
        
        // Mzdov√© √∫daje  
        hodinovka: "hodinovka",
        priplatok: "+pr√≠platok (‚Ç¨/h)", 
        premia: "+pr√©mia (‚Ç¨)",
        pokuta: "-pokuta (‚Ç¨)",
        dennaMzda: "denn√° mzda"
    },
    
    // Ikony pre spr√°vy
    icons: {
        start: "üöÄ",
        step: "üìã", 
        success: "‚úÖ",
        error: "üí•",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è"
    }
};

// Glob√°lne premenn√©
var currentEntry = entry();
var utils = null;
var firmaNazov = "Firma";
var vytvoreneNotifikacie = [];  // Pole pre ulo≈æenie vytvoren√Ωch notifik√°ci√≠

// ==============================================
// VYMAZANIE STAR√ùCH NOTIFIK√ÅCI√ç
// ==============================================

function vymazStareNotifikacie() {
    try {
        utils.addDebug(currentEntry, "\nüóëÔ∏è Kontrolujem star√© notifik√°cie...");
        
        // Z√≠skaj existuj√∫ce notifik√°cie
        var stareNotifikacie = utils.safeGet(currentEntry, CONFIG.fields.telegramNotifikacie, []);
        
        if (!stareNotifikacie || stareNotifikacie.length === 0) {
            utils.addDebug(currentEntry, "   ‚ÑπÔ∏è ≈Ωiadne star√© notifik√°cie");
            return;
        }
        
        utils.addDebug(currentEntry, "   üîç Na≈°iel " + stareNotifikacie.length + " star√Ωch notifik√°ci√≠");
        
        var notifLib = libByName(CONFIG.notificationsLibrary);
        if (!notifLib) {
            utils.addDebug(currentEntry, "   ‚ö†Ô∏è Notifications kni≈ænica neexistuje - ƒçist√≠m len linky");
            utils.safeSet(currentEntry, CONFIG.fields.telegramNotifikacie, []);
            return;
        }
        
        var pocetVymazanych = 0;
        var pocetTelegramVymazanych = 0;
        
        // Prejdi v≈°etky star√© notifik√°cie
        for (var i = 0; i < stareNotifikacie.length; i++) {
            var notifikacia = stareNotifikacie[i];
            
            if (notifikacia) {
                try {
                    // Z√≠skaj √∫daje pred vymazan√≠m (pre pr√≠pad ≈æe delete trigger nefunguje)
                    var chatId = utils.safeGet(notifikacia, "Chat ID", "");
                    var messageId = utils.safeGet(notifikacia, "Message ID", "");
                    var threadId = utils.safeGet(notifikacia, "Thread ID", "");
                    
                    utils.addDebug(currentEntry, "   üóëÔ∏è Ma≈æem notifik√°ciu ID " + notifikacia.field("ID"));
                    
                    // Vyma≈æ z√°znam - toto by malo spusti≈• Before Delete trigger
                    notifikacia.trash();
                    pocetVymazanych++;
                    
                    // Pre istotu vyma≈æ aj priamo z Telegramu ak m√°me Message ID
                    // (v pr√≠pade ≈æe trigger nefunguje pri programovom mazan√≠)
                    if (messageId && !messageId.startsWith("SMS-") && !messageId.startsWith("EMAIL-")) {
                        if (vymazTelegramSpravu(chatId, messageId)) {
                            pocetTelegramVymazanych++;
                        }
                    }
                    
                } catch (deleteError) {
                    utils.addError(currentEntry, deleteError, "vymazStareNotifikacie-delete");
                }
            }
        }
        
        // Vyƒçisti pole s notifik√°ciami
        utils.safeSet(currentEntry, CONFIG.fields.telegramNotifikacie, []);
        
        utils.addDebug(currentEntry, "   ‚úÖ Vymazan√Ωch " + pocetVymazanych + " notifik√°ci√≠");
        if (pocetTelegramVymazanych > 0) {
            utils.addDebug(currentEntry, "   ‚úÖ Z Telegramu vymazan√Ωch " + pocetTelegramVymazanych + " spr√°v");
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "vymazStareNotifikacie");
    }
}

function vymazTelegramSpravu(chatId, messageId) {
    try {
        // Z√≠skaj token
        var apiKeys = getApiKeys();
        if (!apiKeys.telegramToken || !chatId || !messageId) {
            return false;
        }
        
        var url = "https://api.telegram.org/bot" + apiKeys.telegramToken + "/deleteMessage";
        
        var httpObj = http();
        httpObj.headers({"Content-Type": "application/json"});
        
        var payload = {
            chat_id: chatId,
            message_id: parseInt(messageId)
        };
        
        var response = httpObj.post(url, JSON.stringify(payload));
        
        if (response.code === 200) {
            utils.addDebug(currentEntry, "      ‚úÖ Spr√°va " + messageId + " vymazan√° z Telegramu");
            return true;
        } else {
            utils.addDebug(currentEntry, "      ‚ö†Ô∏è Nepodarilo sa vymaza≈• spr√°vu " + messageId);
            return false;
        }
        
    } catch (error) {
        // Tich√° chyba - nie je kritick√©
        return false;
    }
}

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

function initializeUtils() {
    try {
        // Sk√∫s naƒç√≠ta≈• MementoUtils
        if (typeof MementoUtils !== 'undefined' && MementoUtils !== null) {
            utils = MementoUtils;
            utils.addDebug(currentEntry, CONFIG.icons.success + " MementoUtils v" + (utils.version || "?") + " naƒç√≠tan√©");
            return true;
        } else {
            // Fallback pre z√°kladn√© funkcie
            utils = createFallbackUtils();
            addDebugDirect(CONFIG.icons.warning + " MementoUtils nen√°jden√© - pou≈æ√≠vam fallback");
            return false;
        }
    } catch (e) {
        utils = createFallbackUtils();
        addDebugDirect(CONFIG.icons.error + " Chyba pri naƒç√≠tan√≠ MementoUtils: " + e.toString());
        return false;
    }
}

function createFallbackUtils() {
    return {
        // Z√°kladn√© fallback funkcie
        safeGet: function(entry, fieldName, defaultValue) {
            try {
                var value = entry.field(fieldName);
                return (value !== null && value !== undefined) ? value : defaultValue;
            } catch (e) {
                return defaultValue;
            }
        },
        
        safeSet: function(entry, fieldName, value) {
            try {
                entry.set(fieldName, value);
                return true;
            } catch (e) {
                return false;
            }
        },
        
        addDebug: function(entry, message) {
            addDebugDirect(message);
        },
        
        addError: function(entry, error, location) {
            addErrorDirect(error, location);
        },
        
        // Dummy funkcie pre atrib√∫ty
        safeGetAttribute: function() { return null; },
        safeSetAttribute: function() { return false; }
    };
}

// Direct log funkcie pre pr√≠pad ≈æe MementoUtils nie je dostupn√©
function addDebugDirect(message) {
    if (!CONFIG.debug) return;
    
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var debugMessage = "[" + timestamp + "] " + message;
    
    var existingDebug = currentEntry.field(CONFIG.fields.debugLog) || "";
    currentEntry.set(CONFIG.fields.debugLog, existingDebug + debugMessage + "\n");
}

function addErrorDirect(error, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var errorMessage = "[" + timestamp + "] " + CONFIG.icons.error + " ";
    
    if (location) errorMessage += "(" + location + ") ";
    errorMessage += error.toString();
    
    var existingError = currentEntry.field(CONFIG.fields.errorLog) || "";
    currentEntry.set(CONFIG.fields.errorLog, existingError + errorMessage + "\n");
}

// ==============================================
// Z√çSKAVANIE ATRIB√öTOV ZAMESTNANCA
// ==============================================

function getZamestnanecAtributy(zamestnanecIndex) {
    var atributy = {};
    
    try {
        utils.addDebug(currentEntry, "üîç Z√≠skavam atrib√∫ty pre zamestnanca #" + zamestnanecIndex);
        
        // Pou≈æitie MementoUtils pre bezpeƒçn√© z√≠skanie atrib√∫tov
        atributy.odpracovane = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, zamestnanecIndex, CONFIG.attributes.odpracovane, null);
        atributy.hodinovka = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, zamestnanecIndex, CONFIG.attributes.hodinovka, null);
        atributy.priplatok = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, zamestnanecIndex, CONFIG.attributes.priplatok, null);
        atributy.premia = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, zamestnanecIndex, CONFIG.attributes.premia, null);
        atributy.pokuta = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, zamestnanecIndex, CONFIG.attributes.pokuta, null);
        atributy.dennaMzda = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, zamestnanecIndex, CONFIG.attributes.dennaMzda, null);
        
        // Vyfiltruj len nenulov√© hodnoty
        var filtrovan√© = {};
        var pocet = 0;
        
        for (var key in atributy) {
            var hodnota = atributy[key];
            if (hodnota !== null && hodnota !== undefined && hodnota !== 0 && hodnota !== "") {
                filtrovan√©[key] = hodnota;
                pocet++;
                utils.addDebug(currentEntry, "  ‚úÖ " + key + " = " + hodnota);
            }
        }
        
        utils.addDebug(currentEntry, "  üìä Celkom nenulov√Ωch atrib√∫tov: " + pocet);
        return filtrovan√©;
        
    } catch (error) {
        utils.addError(currentEntry, error, "getZamestnanecAtributy");
        return {};
    }
}

// ==============================================
// TEMPLATE FUNKCIE PRE SPR√ÅVY
// ==============================================

function vytvorTelegramSpravu(zamestnanec, zamestnanecIndex) {
    var meno = utils.safeGet(zamestnanec, "Meno", "");
    var priezvisko = utils.safeGet(zamestnanec, "Priezvisko", "");
    var nick = utils.safeGet(zamestnanec, "Nick", "");
    
    var celeMeno = nick || (meno + " " + priezvisko).trim() || "Zamestnanec";
    
    var datum = utils.safeGet(currentEntry, CONFIG.fields.datum, null);
    var prichod = utils.safeGet(currentEntry, CONFIG.fields.prichod, null);
    var odchod = utils.safeGet(currentEntry, CONFIG.fields.odchod, null);
    var prestavka = utils.safeGet(currentEntry, CONFIG.fields.prestavka, 0);
    var poznamka = utils.safeGet(currentEntry, CONFIG.fields.poznamka, "");
    
    // Z√≠skaj atrib√∫ty cez MementoUtils
    var atributy = getZamestnanecAtributy(zamestnanecIndex);
    
    // Projekt/Z√°kazka
    var projekt = "";
    var projektField = utils.safeGet(currentEntry, CONFIG.fields.projekt, null);
    if (projektField && Array.isArray(projektField) && projektField.length > 0) {
        projekt = utils.safeGet(projektField[0], "N√°zov z√°znamu", "") || 
                 utils.safeGet(projektField[0], "ƒå√≠slo", "") || "Projekt";
    }
    
    // Vytvor spr√°vu
    var sprava = "üè¢ **Evidencia doch√°dzky**\n\n";
    sprava += "Dobr√Ω de≈à **" + celeMeno + "**!\n\n";
    
    sprava += "üìã **Doch√°dzka " + formatDate(datum) + ":**\n";
    sprava += "üïê Pr√≠chod: **" + formatTime(prichod) + "**\n";
    
    if (odchod) {
        sprava += "üïê Odchod: **" + formatTime(odchod) + "**\n";
        
        // Pridaj odpracovan√© hodiny ak existuj√∫
        if (atributy.odpracovane) {
            sprava += "‚è±Ô∏è Odpracovan√©: **" + atributy.odpracovane + "h**\n";
            
            var nadcasy = Math.max(0, atributy.odpracovane - 8);
            if (nadcasy > 0) {
                sprava += "‚ö° Nadƒçasy: **" + nadcasy.toFixed(2) + "h**\n";
            }
        }
    }
    
    if (prestavka > 0) {
        sprava += "‚òï Prest√°vka: " + prestavka + " min\n";
    }
    
    if (projekt) {
        sprava += "üì¶ Projekt: " + projekt + "\n";
    }
    
    // Pridaj len nenulov√© mzdov√© √∫daje
    var mzdoveUdaje = [];
    
    if (atributy.hodinovka) {
        mzdoveUdaje.push("‚Ä¢ Hodinovka: " + atributy.hodinovka + " ‚Ç¨/h");
    }
    if (atributy.premia) {
        mzdoveUdaje.push("‚Ä¢ Pr√©mia: **" + formatMoney(atributy.premia) + "**");
    }
    if (atributy.priplatok) {
        mzdoveUdaje.push("‚Ä¢ Pr√≠platok: " + atributy.priplatok + " ‚Ç¨/h");
    }
    if (atributy.pokuta) {
        mzdoveUdaje.push("‚Ä¢ Pokuta: **-" + formatMoney(atributy.pokuta) + "**");
    }
    if (atributy.dennaMzda) {
        mzdoveUdaje.push("‚Ä¢ **Denn√° mzda: " + formatMoney(atributy.dennaMzda) + "**");
    }
    
    if (mzdoveUdaje.length > 0) {
        sprava += "\nüí∞ **Mzdov√© √∫daje:**\n" + mzdoveUdaje.join("\n") + "\n";
    }
    
    if (poznamka) {
        sprava += "\nüìù Pozn√°mka: _" + poznamka + "_\n";
    }
    
    sprava += "\n---\n";
    sprava += firmaNazov + " | " + moment().format("DD.MM.YYYY HH:mm");
    
    return sprava;
}

// ==============================================
// HELPER FUNKCIE
// ==============================================

function formatTime(timeValue) {
    if (!timeValue) return "N/A";
    try {
        return moment(timeValue).format("HH:mm");
    } catch (e) {
        return "N/A";
    }
}

function formatDate(dateValue) {
    if (!dateValue) return "N/A";
    try {
        return moment(dateValue).format("DD.MM.YYYY");
    } catch (e) {
        return "N/A";
    }
}

function formatMoney(amount) {
    if (typeof amount !== "number") return "0.00 ‚Ç¨";
    return amount.toFixed(2) + " ‚Ç¨";
}

// ==============================================
// ZAZNAMEN√ÅVANIE NOTIFIK√ÅCI√ç
// ==============================================

function zaznamenajNotifikaciu(chatId, sprava, zamestnanec, messageId, threadId) {
    try {
        var notifLib = libByName(CONFIG.notificationsLibrary);
        if (!notifLib) {
            // Kni≈ænica neexistuje, vr√°≈• null ale nepreru≈°uj script
            return null;
        }
        
        utils.addDebug(currentEntry, "üìù Zaznamen√°vam notifik√°ciu do " + CONFIG.notificationsLibrary);
        
        var notifData = {
            "D√°tum": moment().toDate(),
            "Kni≈ænica": "Doch√°dzka",
            "Chat ID": chatId,
            "Thread ID": threadId || "",  // Samostatn√© pole pre Thread ID
            "Message ID": messageId || "",
            "Adres√°t": "Zamestnanec",
            "Zamestnanec": zamestnanec,
            "Message": sprava
        };
        
        var novyZaznam = notifLib.create(notifData);
        
        if (novyZaznam) {
            utils.addDebug(currentEntry, "  ‚úÖ Notifik√°cia zaznamenan√°: ID " + novyZaznam.field("ID"));
            return novyZaznam;  // Vr√°≈• vytvoren√Ω z√°znam
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• z√°znam notifik√°cie", "zaznamenajNotifikaciu");
            return null;
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "zaznamenajNotifikaciu");
        return null;
    }
}

// ==============================================
// NAƒå√çTANIE KONFIGUR√ÅCIE
// ==============================================

function getNazovFirmy() {
    try {
        utils.addDebug(currentEntry, "üè¢ Naƒç√≠tavam n√°zov firmy z " + CONFIG.defaultsLibrary);
        
        var defaultsLib = libByName(CONFIG.defaultsLibrary);
        if (!defaultsLib) {
            utils.addError(currentEntry, "Defaults kni≈ænica nen√°jden√°", "getNazovFirmy");
            return firmaNazov;
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (!defaultsEntries || defaultsEntries.length === 0) {
            utils.addError(currentEntry, "≈Ωiadne z√°znamy v Defaults kni≈ænici", "getNazovFirmy");
            return firmaNazov;
        }
        
        var nazov = utils.safeGet(defaultsEntries[0], "N√°zov firmy", "");
        
        if (nazov) {
            utils.addDebug(currentEntry, "‚úÖ N√°zov firmy: " + nazov);
            return nazov;
        }
        
        return firmaNazov;
        
    } catch (error) {
        utils.addError(currentEntry, error, "getNazovFirmy");
        return firmaNazov;
    }
}

function getApiKeys() {
    var result = { success: false, telegramToken: null };
    
    try {
        utils.addDebug(currentEntry, "üîë Naƒç√≠tavam API keys z " + CONFIG.apiLibrary);
        
        var apiLib = libByName(CONFIG.apiLibrary);
        if (!apiLib) {
            utils.addError(currentEntry, "API kni≈ænica nen√°jden√°", "getApiKeys");
            return result;
        }
        
        var apiEntries = apiLib.entries();
        
        for (var i = 0; i < apiEntries.length; i++) {
            var provider = utils.safeGet(apiEntries[i], "provider", "");
            
            if (provider.toLowerCase() === "telegram") {
                var token = utils.safeGet(apiEntries[i], "api", "");
                if (token) {
                    result.success = true;
                    result.telegramToken = token;
                    utils.addDebug(currentEntry, "‚úÖ Telegram API token naƒç√≠tan√Ω");
                    break;
                }
            }
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "getApiKeys");
    }
    
    return result;
}

// ==============================================
// NOTIFIKAƒåN√Å LOGIKA  
// ==============================================

function posliNotifikaciuZamestnancovi(zamestnanec, zamestnanecIndex, apiKeys) {
    var result = { success: false, pocetOdoslanych: 0 };
    
    var nick = utils.safeGet(zamestnanec, "Nick", "") || 
               utils.safeGet(zamestnanec, "Meno", "") || 
               "Zamestnanec #" + (zamestnanecIndex + 1);
    
    utils.addDebug(currentEntry, "\nüë§ Spracov√°vam notifik√°cie pre: " + nick);
    
    // Telegram notifik√°cia
    var telegramEnabled = utils.safeGet(zamestnanec, "telegram", false);
    if (telegramEnabled && apiKeys.telegramToken) {
        var chatId = utils.safeGet(zamestnanec, "Telegram ID", "");
        
        if (chatId) {
            var sprava = vytvorTelegramSpravu(zamestnanec, zamestnanecIndex);
            var telegramResult = posliTelegramSpravu(chatId, sprava, apiKeys.telegramToken);
            
            if (telegramResult.success) {
                result.pocetOdoslanych++;
                utils.addDebug(currentEntry, "  ‚úÖ Telegram spr√°va odoslan√°");
                
                // Zaznamenaj notifik√°ciu (null pre threadId pri individu√°lnych notifik√°ci√°ch)
                var notifZaznam = zaznamenajNotifikaciu(chatId, sprava, zamestnanec, telegramResult.messageId, null);
                if (notifZaznam) {
                    utils.addDebug(currentEntry, "  ‚úÖ Notifik√°cia zaznamenan√° v kni≈ænici");
                    vytvoreneNotifikacie.push(notifZaznam);  // Ulo≈æ pre neskor≈°ie linkovanie
                }
            } else {
                utils.addDebug(currentEntry, "  ‚ùå Telegram spr√°va zlyhala");
            }
        } else {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Ch√Ωba Telegram Chat ID");
        }
    }
    
    // SMS notifik√°cia (simul√°cia)
    var smsEnabled = utils.safeGet(zamestnanec, "sms", false);
    if (smsEnabled) {
        var telefon = utils.safeGet(zamestnanec, "Mobil", "");
        if (telefon) {
            utils.addDebug(currentEntry, "  üì± SMS simul√°cia na: " + telefon);
            result.pocetOdoslanych++;
            
            // Zaznamenaj SMS notifik√°ciu
            var smsSprava = "SMS: Doch√°dzka " + formatDate(utils.safeGet(currentEntry, CONFIG.fields.datum, null));
            var smsZaznam = zaznamenajNotifikaciu(telefon, smsSprava, zamestnanec, "SMS-" + moment().format("YYYYMMDDHHmmss"), null);
            if (smsZaznam) {
                vytvoreneNotifikacie.push(smsZaznam);
            }
        }
    }
    
    // Email notifik√°cia (simul√°cia)
    var emailEnabled = utils.safeGet(zamestnanec, "email", false);
    if (emailEnabled) {
        var email = utils.safeGet(zamestnanec, "Email", "");
        if (email) {
            utils.addDebug(currentEntry, "  üìß Email simul√°cia na: " + email);
            result.pocetOdoslanych++;
            
            // Zaznamenaj Email notifik√°ciu
            var emailSprava = vytvorTelegramSpravu(zamestnanec, zamestnanecIndex).replace(/\*/g, "");
            var emailZaznam = zaznamenajNotifikaciu(email, emailSprava, zamestnanec, "EMAIL-" + moment().format("YYYYMMDDHHmmss"), null);
            if (emailZaznam) {
                vytvoreneNotifikacie.push(emailZaznam);
            }
        }
    }
    
    result.success = result.pocetOdoslanych > 0;
    return result;
}

function posliTelegramSpravu(chatId, sprava, botToken) {
    try {
        var url = "https://api.telegram.org/bot" + botToken + "/sendMessage";
        
        var httpObj = http();
        httpObj.headers({"Content-Type": "application/json"});
        
        var payload = {
            chat_id: chatId,
            text: sprava,
            parse_mode: CONFIG.telegramParseMode
        };
        
        var response = httpObj.post(url, JSON.stringify(payload));
        
        if (response.code === 200) {
            try {
                var responseData = JSON.parse(response.body);
                if (responseData.ok && responseData.result && responseData.result.message_id) {
                    return {
                        success: true,
                        messageId: responseData.result.message_id.toString()
                    };
                }
            } catch (e) {
                // Ak sa nepodar√≠ parsova≈• response, aspo≈à vr√°time success
                return { success: true, messageId: null };
            }
        }
        
        return { success: false, messageId: null };
        
    } catch (error) {
        utils.addError(currentEntry, error, "posliTelegramSpravu");
        return { success: false, messageId: null };
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Inicializ√°cia
        initializeUtils();
        utils.clearLogs(currentEntry, false); // Vyƒçisti len Debug_Log
        
        utils.addDebug(currentEntry, "\n" + CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "‚úÖ POU≈Ω√çVA MementoUtils pre spr√°vne API volania");
        utils.addDebug(currentEntry, "‚úÖ ZAZNAMEN√ÅVA notifik√°cie do " + CONFIG.notificationsLibrary);
        utils.addDebug(currentEntry, "‚úÖ Thread ID sa uklad√° do samostatn√©ho poƒæa");
        utils.addDebug(currentEntry, "‚úÖ VYMA≈ΩE star√© notifik√°cie pred vytvoren√≠m nov√Ωch");
        
        // Vyma≈æ star√© notifik√°cie (v≈ædy pri spusten√≠ scriptu)
        vymazStareNotifikacie();
        
        // Skontroluj existenciu notifications kni≈ænice
        var notifLib = libByName(CONFIG.notificationsLibrary);
        if (!notifLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.notificationsLibrary + " neexistuje!", "main");
            message("‚ö†Ô∏è UPOZORNENIE!\n\nKni≈ænica " + CONFIG.notificationsLibrary + " neexistuje.\n\nNotifik√°cie sa odo≈°l√∫, ale nebud√∫ zaznamenan√©.");
        }
        
        // Naƒç√≠taj konfigur√°ciu
        firmaNazov = getNazovFirmy();
        var apiKeys = getApiKeys();
        
        if (!apiKeys.success) {
            message("‚ùå Ch√Ωba API konfigur√°cia!\n\nSkontroluj kni≈ænicu " + CONFIG.apiLibrary);
            return;
        }
        
        // Z√≠skaj zamestnancov
        var zamestnanci = utils.safeGet(currentEntry, CONFIG.fields.zamestnanci, []);
        
        if (!zamestnanci || zamestnanci.length === 0) {
            message("‚ùå ≈Ωiadni zamestnanci v z√°zname!");
            return;
        }
        
        utils.addDebug(currentEntry, "\nüìä Spracov√°vam " + zamestnanci.length + " zamestnancov");
        
        // Spracuj ka≈æd√©ho zamestnanca
        var celkomUspesnych = 0;
        
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            
            if (zamestnanec) {
                var vysledok = posliNotifikaciuZamestnancovi(zamestnanec, i, apiKeys);
                if (vysledok.success) {
                    celkomUspesnych++;
                }
            }
        }
        
        // Linkuj vytvoren√© notifik√°cie do doch√°dzky
        if (vytvoreneNotifikacie.length > 0) {
            utils.addDebug(currentEntry, "\nüîó Linkujem " + vytvoreneNotifikacie.length + " notifik√°ci√≠ do doch√°dzky");
            utils.safeSet(currentEntry, CONFIG.fields.telegramNotifikacie, vytvoreneNotifikacie);
            utils.addDebug(currentEntry, "‚úÖ Notifik√°cie nalinkovan√©");
        }
        
        // Z√°vereƒçn√° spr√°va
        var vysledokSprava = "üìß NOTIFIK√ÅCIE v" + CONFIG.version + " DOKONƒåEN√â\n\n";
        vysledokSprava += "‚úÖ Pou≈æ√≠va MementoUtils API\n";
        vysledokSprava += "‚úÖ Zaznamen√°va do " + CONFIG.notificationsLibrary + "\n";
        vysledokSprava += "‚úÖ Thread ID v samostatnom poli\n";
        vysledokSprava += "‚úÖ Automatick√© vymazanie star√Ωch notifik√°ci√≠\n\n";
        vysledokSprava += "üè¢ Firma: " + firmaNazov + "\n";
        vysledokSprava += "üìä √öspe≈°n√©: " + celkomUspesnych + "/" + zamestnanci.length + "\n";
        vysledokSprava += "üîó Nalinkovan√Ωch: " + vytvoreneNotifikacie.length + " notifik√°ci√≠\n\n";
        vysledokSprava += "üí° Pri zmene z√°znamu sa star√© notifik√°cie automaticky vyma≈æ√∫";
        
        utils.safeSet(currentEntry, CONFIG.fields.info, vysledokSprava);
        utils.addDebug(currentEntry, "\n‚úÖ === KONIEC √öSPE≈†N√ù ===");
        
        message("üéâ " + vysledokSprava);
        
    } catch (criticalError) {
        utils.addError(currentEntry, criticalError, "MAIN-CRITICAL");
        message("üí• KRITICK√Å CHYBA!\n\n" + criticalError.toString() + "\n\nSkontroluj Error_Log");
    }
}

// Spustenie hlavnej funkcie
main();