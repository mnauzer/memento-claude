// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA NOTIFIK√ÅCIE
// Verzia: 3.1 OPRAVEN√Å | D√°tum: 13.08.2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Typ: Action Script
// ==============================================

// Import MementoUtils kni≈ænice
var utils = MementoUtils;
var currentEntry = entry();

// Konfigur√°cia
var CONFIG = {
    debug: true,
    version: "3.1 OPRAVEN√Å",
    scriptName: "Doch√°dzka Notifik√°cie",
    scriptType: "Action Script",
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        apiLibrary: "ASISTANTO API",
        defaultsLibrary: "ASISTANTO Defaults"
    },
    
    // N√°zvy pol√≠ - Doch√°dzka
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod", 
        odchod: "Odchod",
        poznamka: "Pozn√°mka",
        pracovnaDoba: "Pracovn√° doba",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy pol√≠ - Zamestnanci
    zamFields: {
        nick: "Nick",
        meno: "Meno",
        priezvisko: "Priezvisko",
        mobil: "Mobil",
        email: "Email",
        telegramId: "Telegram ID",
        telegram: "telegram",
        sms: "sms",
        emailNotif: "email"
    },
    
    // Atrib√∫ty zamestnancov ktor√© chceme
    wantedAttributes: [
        "hodinovka",
        "+pr√≠platok (‚Ç¨/h)",
        "+pr√©mia (‚Ç¨)",
        "-pokuta (‚Ç¨)",
        "denn√° mzda",
        "pozn√°mka"
    ],
    
    // API konfigur√°cia
    api: {
        maxSMSLength: 160,
        telegramParseMode: "Markdown",
        maxRetries: 2,
        timeout: 30000
    },
    
    // Ikony pre spr√°vy
    icons: {
        start: "üöÄ",
        step: "üìã", 
        success: "‚úÖ",
        error: "üí•",
        warning: "‚ö†Ô∏è",
        info: "üìß",
        time: "‚è∞",
        money: "üí∞",
        person: "üë§",
        building: "üè¢"
    }
};

// ==============================================
// UTILITY FUNKCIE
// ==============================================

/**
 * Form√°tovanie ƒçasu
 */
function formatTime(timeValue) {
    if (!timeValue) return null;
    try {
        if (typeof timeValue === 'number') {
            var hours = Math.floor(timeValue);
            var minutes = Math.round((timeValue - hours) * 60);
            return (hours < 10 ? "0" : "") + hours + ":" + (minutes < 10 ? "0" : "") + minutes;
        }
        return moment(timeValue).format("HH:mm");
    } catch (e) {
        return null;
    }
}

/**
 * Form√°tovanie d√°tumu
 */
function formatDate(dateValue) {
    if (!dateValue) return null;
    try {
        return moment(dateValue).format("DD.MM.YYYY");
    } catch (e) {
        return null;
    }
}

/**
 * Form√°tovanie pe≈àaz√≠
 */
function formatMoney(amount) {
    if (!amount && amount !== 0) return null;
    try {
        return parseFloat(amount).toFixed(2) + " ‚Ç¨";
    } catch (e) {
        return null;
    }
}

/**
 * Z√≠skanie n√°zvu firmy z Defaults kni≈ænice
 */
function getNazovFirmy() {
    try {
        var defaultsLib = libByName(CONFIG.libraries.defaultsLibrary);
        if (!defaultsLib) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Defaults kni≈ænica nen√°jden√°");
            return "Firma";
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (defaultsEntries && defaultsEntries.length > 0) {
            var nazov = utils.safeGet(defaultsEntries[0], "N√°zov firmy", "Firma");
            utils.addDebug(currentEntry, "‚úÖ N√°zov firmy: " + nazov);
            return nazov;
        }
    } catch (e) {
        utils.addError(currentEntry, e, "getNazovFirmy");
    }
    
    return "Firma";
}

/**
 * Z√≠skanie mena zamestnanca
 */
function getEmployeeName(zamestnanec) {
    if (!zamestnanec) return "Zamestnanec";
    
    var nick = utils.safeGet(zamestnanec, CONFIG.zamFields.nick, "");
    var meno = utils.safeGet(zamestnanec, CONFIG.zamFields.meno, "");
    var priezvisko = utils.safeGet(zamestnanec, CONFIG.zamFields.priezvisko, "");
    
    if (nick) {
        return priezvisko ? nick + " (" + priezvisko + ")" : nick;
    }
    
    return (meno + " " + priezvisko).trim() || "Zamestnanec";
}

// ==============================================
// OPRAVEN√â API FUNKCIE
// ==============================================

/**
 * Z√≠skanie API kƒæ√∫ƒçov z ASISTANTO API kni≈ænice - OPRAVEN√â
 */
function getApiKeys() {
    var result = {
        success: false,
        telegramToken: null,
        botName: null,
        provider: null
    };
    
    try {
        utils.addDebug(currentEntry, "üîë Naƒç√≠tavam API kƒæ√∫ƒçe z " + CONFIG.libraries.apiLibrary + "...");
        
        var apiLib = libByName(CONFIG.libraries.apiLibrary);
        if (!apiLib) {
            utils.addError(currentEntry, "API kni≈ænica nen√°jden√°: " + CONFIG.libraries.apiLibrary, "getApiKeys");
            return result;
        }
        
        var apiEntries = apiLib.entries();
        if (!apiEntries || apiEntries.length === 0) {
            utils.addError(currentEntry, "≈Ωiadne API z√°znamy v kni≈ænici", "getApiKeys");
            return result;
        }
        
        // OPRAVEN√â: Hƒæad√°me Telegram provider
        var telegramEntry = null;
        for (var i = 0; i < apiEntries.length; i++) {
            var apiEntry = apiEntries[i];
            var provider = utils.safeGet(apiEntry, "provider", "") ||
                          utils.safeGet(apiEntry, "Provider", "");
            
            if (provider && provider.toLowerCase() === "telegram") {
                telegramEntry = apiEntry;
                break;
            }
        }
        
        if (telegramEntry) {
            var telegramToken = utils.safeGet(telegramEntry, "api", "") ||
                               utils.safeGet(telegramEntry, "API_Key", "") ||
                               utils.safeGet(telegramEntry, "Telegram Bot Token", "");
            var botName = utils.safeGet(telegramEntry, "n√°zov", "") ||
                         utils.safeGet(telegramEntry, "N√°zov", "");
            
            if (telegramToken && telegramToken.trim() !== "") {
                result.success = true;
                result.telegramToken = telegramToken;
                result.botName = botName;
                result.provider = "telegram";
                utils.addDebug(currentEntry, "‚úÖ Telegram API kƒæ√∫ƒç naƒç√≠tan√Ω: " + botName);
            } else {
                utils.addError(currentEntry, "Pr√°zdny Telegram API kƒæ√∫ƒç", "getApiKeys");
            }
        } else {
            utils.addError(currentEntry, "Telegram provider nen√°jden√Ω v API kni≈ænici", "getApiKeys");
        }
        
    } catch (e) {
        utils.addError(currentEntry, e, "getApiKeys");
    }
    
    return result;
}

/**
 * Username to Chat ID konverzia s fallback
 */
function getUserChatId(username, botToken) {
    try {
        if (!username || typeof username !== 'string') {
            utils.addDebug(currentEntry, "üí¨ Chat ID je pr√°zdny alebo nie je string");
            return null;
        }
        
        if (!username.startsWith('@')) {
            utils.addDebug(currentEntry, "üí¨ Chat ID je u≈æ ƒç√≠seln√Ω: " + username);
            return username;
        }
        
        utils.addDebug(currentEntry, "üîç Konvertujem username " + username + " na Chat ID...");
        
        var url = "https://api.telegram.org/bot" + botToken + "/getUpdates";
        var httpObj = http();
        var response = httpObj.get(url);
        
        if (response.code !== 200) {
            utils.addDebug(currentEntry, "‚ùå getUpdates HTTP chyba " + response.code);
            return null;
        }
        
        var data = JSON.parse(response.body);
        if (!data.ok || !data.result) {
            utils.addDebug(currentEntry, "‚ùå getUpdates response nie je OK");
            return null;
        }
        
        var updates = data.result;
        utils.addDebug(currentEntry, "üì° Naƒç√≠tan√Ωch " + updates.length + " updates");
        
        var targetUsername = username.substring(1).toLowerCase();
        for (var i = 0; i < updates.length; i++) {
            var update = updates[i];
            var chat = update.message && update.message.chat;
            if (chat && chat.username && chat.username.toLowerCase() === targetUsername) {
                var foundChatId = chat.id.toString();
                utils.addDebug(currentEntry, "‚úÖ N√°jden√Ω Chat ID: " + foundChatId + " pre " + username);
                return foundChatId;
            }
        }
        
        utils.addDebug(currentEntry, "‚ùå Username " + username + " nen√°jden√Ω v updates");
        return null;
        
    } catch (e) {
        utils.addError(currentEntry, e, "getUserChatId");
        return null;
    }
}

/**
 * Poslanie Telegram spr√°vy s fallback
 */
function posliTelegramSpravu(chatId, sprava, token) {
    if (!chatId || !sprava || !token) {
        utils.addDebug(currentEntry, "‚ö†Ô∏è Telegram: Ch√Ωbaj√∫ parametre");
        return false;
    }
    
    try {
        var finalChatId = getUserChatId(chatId, token);
        if (!finalChatId) {
            utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• platn√Ω Chat ID pre " + chatId, "posliTelegramSpravu");
            return false;
        }
        
        var url = "https://api.telegram.org/bot" + token + "/sendMessage";
        var payload = {
            chat_id: finalChatId,
            text: sprava,
            parse_mode: CONFIG.api.telegramParseMode
        };
        
        var httpObj = http();
        httpObj.headers({"Content-Type": "application/json"});
        var response = httpObj.post(url, JSON.stringify(payload));
        
        if (response.code === 200) {
            utils.addDebug(currentEntry, "‚úÖ Telegram spr√°va √∫spe≈°ne odoslan√° do " + finalChatId);
            return true;
        } else {
            utils.addError(currentEntry, "Telegram API error " + response.code + ": " + response.body, "posliTelegramSpravu");
            return false;
        }
        
    } catch (e) {
        utils.addError(currentEntry, e, "posliTelegramSpravu");
        return false;
    }
}

// ==============================================
// Z√çSKANIE ATRIB√öTOV - OPRAVEN√â A ZJEDNODU≈†EN√â
// ==============================================

/**
 * Z√≠skanie atrib√∫tov zamestnanca s nenulov√Ωmi hodnotami - OPRAVEN√â
 */
function getZamestnanecAtributy(zamestnanecIndex) {
    var atributy = {};
    
    try {
        utils.addDebug(currentEntry, "üîç Z√≠skavam atrib√∫ty pre zamestnanca #" + zamestnanecIndex);
        
        // Prech√°dzaj len po≈æadovan√© atrib√∫ty
        for (var i = 0; i < CONFIG.wantedAttributes.length; i++) {
            var attrName = CONFIG.wantedAttributes[i];
            var value = utils.safeGetAttr(currentEntry, CONFIG.fields.zamestnanci, attrName, zamestnanecIndex, null);
            
            // Pridaj len nenulov√© hodnoty
            if (value !== null && value !== undefined && value !== 0 && value !== "") {
                atributy[attrName] = value;
                utils.addDebug(currentEntry, " üìä Atrib√∫t '" + attrName + "': " + value);
            }
        }
        
    } catch (e) {
        utils.addError(currentEntry, e, "getZamestnanecAtributy");
    }
    
    return atributy;
}

// ==============================================
// VYTVORENIE SPR√ÅV - ZJEDNODU≈†EN√â
// ==============================================

/**
 * Vytvorenie Telegram spr√°vy - ZJEDNODU≈†EN√â
 */
function vytvorTelegramSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex, firmaNazov) {
    var menoZamestnanca = getEmployeeName(zamestnanec);
    
    // Z√≠skaj z√°kladn√© polia - pridaj len ak maj√∫ hodnotu
    var datum = utils.safeGet(dochadzkaZaznam, CONFIG.fields.datum, null);
    var prichod = utils.safeGet(dochadzkaZaznam, CONFIG.fields.prichod, null);
    var odchod = utils.safeGet(dochadzkaZaznam, CONFIG.fields.odchod, null);
    var poznamka = utils.safeGet(dochadzkaZaznam, CONFIG.fields.poznamka, "");
    var pracovnaDoba = utils.safeGet(dochadzkaZaznam, CONFIG.fields.pracovnaDoba, null);
    
    // Z√≠skaj atrib√∫ty zamestnanca
    var atributy = getZamestnanecAtributy(zamestnanecIndex);
    
    // Vytvor spr√°vu
    var sprava = CONFIG.icons.building + " **Evidencia doch√°dzky**\n\n";
    sprava += "Dobr√Ω de≈à **" + menoZamestnanca + "**!\n\n";
    
    // Pridaj polia len ak maj√∫ hodnotu
    if (datum) {
        sprava += CONFIG.icons.step + " **Doch√°dzka " + formatDate(datum) + ":**\n";
    }
    
    if (prichod) {
        sprava += CONFIG.icons.time + " Pr√≠chod: **" + formatTime(prichod) + "**\n";
    }
    
    if (odchod) {
        sprava += CONFIG.icons.time + " Odchod: **" + formatTime(odchod) + "**\n";
    }
    
    if (pracovnaDoba) {
        sprava += "‚è±Ô∏è Pracovn√° doba: **" + pracovnaDoba + "h**\n";
    }
    
    if (poznamka) {
        sprava += "üìù **Pozn√°mka:** _" + poznamka + "_\n";
    }
    
    // Pridaj atrib√∫ty zamestnanca ak existuj√∫
    var mzdoveUdaje = [];
    
    if (atributy["hodinovka"]) {
        mzdoveUdaje.push("‚Ä¢ Hodinovka: **" + formatMoney(atributy["hodinovka"]) + "/h**");
    }
    
    if (atributy["+pr√≠platok (‚Ç¨/h)"]) {
        mzdoveUdaje.push("‚Ä¢ Pr√≠platok: **+" + formatMoney(atributy["+pr√≠platok (‚Ç¨/h)"]) + "/h**");
    }
    
    if (atributy["+pr√©mia (‚Ç¨)"]) {
        mzdoveUdaje.push("‚Ä¢ Pr√©mia: **+" + formatMoney(atributy["+pr√©mia (‚Ç¨)"]) + "**");
    }
    
    if (atributy["-pokuta (‚Ç¨)"]) {
        mzdoveUdaje.push("‚Ä¢ Pokuta: **-" + formatMoney(atributy["-pokuta (‚Ç¨)"]) + "**");
    }
    
    if (atributy["denn√° mzda"]) {
        mzdoveUdaje.push("‚Ä¢ Denn√° mzda: **" + formatMoney(atributy["denn√° mzda"]) + "**");
    }
    
    if (mzdoveUdaje.length > 0) {
        sprava += "\n" + CONFIG.icons.money + " **Mzdov√© √∫daje:**\n";
        sprava += mzdoveUdaje.join("\n") + "\n";
    }
    
    // Pridaj pozn√°mku zamestnanca ak existuje
    if (atributy["pozn√°mka"]) {
        sprava += "\nüí≠ **Pozn√°mka zamestnanca:** _" + atributy["pozn√°mka"] + "_\n";
    }
    
    sprava += "\n---\n";
    sprava += firmaNazov + " | " + moment().format("DD.MM.YYYY HH:mm");
    
    return sprava;
}

/**
 * Vytvorenie SMS spr√°vy - ZJEDNODU≈†EN√â
 */
function vytvorSMSSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex, firmaNazov) {
    var menoZamestnanca = getEmployeeName(zamestnanec);
    var prichod = utils.safeGet(dochadzkaZaznam, CONFIG.fields.prichod, null);
    var odchod = utils.safeGet(dochadzkaZaznam, CONFIG.fields.odchod, null);
    var pracovnaDoba = utils.safeGet(dochadzkaZaznam, CONFIG.fields.pracovnaDoba, null);
    var atributy = getZamestnanecAtributy(zamestnanecIndex);
    
    var sprava = menoZamestnanca + ", ";
    
    if (prichod) {
        sprava += "pr√≠chod: " + formatTime(prichod);
        if (odchod) {
            sprava += "-" + formatTime(odchod);
        }
        if (pracovnaDoba) {
            sprava += " (" + pracovnaDoba + "h)";
        }
    }
    
    if (atributy["denn√° mzda"]) {
        sprava += ", mzda " + formatMoney(atributy["denn√° mzda"]);
    }
    
    sprava += ". " + firmaNazov;
    
    // Skr√°≈• spr√°vu ak je pr√≠li≈° dlh√°
    if (sprava.length > CONFIG.api.maxSMSLength) {
        sprava = sprava.substring(0, CONFIG.api.maxSMSLength - 3) + "...";
    }
    
    return sprava;
}

/**
 * Vytvorenie Email spr√°vy
 */
function vytvorEmailSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex, firmaNazov) {
    var telegram = vytvorTelegramSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex, firmaNazov);
    // Odstr√°≈à Markdown form√°tovanie pre email
    var email = telegram.replace(/\*\*/g, "").replace(/\*/g, "").replace(/_/g, "");
    return email;
}

// ==============================================
// NOTIFIKAƒåN√Å LOGIKA - OPRAVEN√Å
// ==============================================

/**
 * Poslanie notifik√°ci√≠ jedn√©mu zamestnancovi
 */
function posliNotifikaciuZamestnancovi(dochadzkaZaznam, zamestnanec, zamestnanecIndex, apiKeys, firmaNazov) {
    var result = {
        success: false,
        uspesnePoslane: 0,
        celkovePokusy: 0,
        detaily: []
    };
    
    var menoZamestnanca = getEmployeeName(zamestnanec);
    utils.addDebug(currentEntry, "\n" + CONFIG.icons.person + " Spracov√°vam notifik√°cie pre: " + menoZamestnanca);
    
    // TELEGRAM
    var telegramNotif = utils.safeGet(zamestnanec, CONFIG.zamFields.telegram, false);
    if (telegramNotif) {
        var chatId = utils.safeGet(zamestnanec, CONFIG.zamFields.telegramId, "");
        if (chatId && apiKeys.telegramToken) {
            result.celkovePokusy++;
            var telegramSprava = vytvorTelegramSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex, firmaNazov);
            if (posliTelegramSpravu(chatId, telegramSprava, apiKeys.telegramToken)) {
                result.uspesnePoslane++;
                result.detaily.push("Telegram ‚úÖ");
                utils.addDebug(currentEntry, " ‚úÖ Telegram spr√°va √öSPE≈†NE poslan√°");
            } else {
                result.detaily.push("Telegram ‚ùå");
                utils.addDebug(currentEntry, " ‚ùå Telegram spr√°va ZLYHALA");
            }
        } else {
            utils.addDebug(currentEntry, " ‚ö†Ô∏è Telegram zapnut√Ω ale ch√Ωba Chat ID alebo token");
        }
    }
    
    // SMS (simul√°cia)
    var smsNotif = utils.safeGet(zamestnanec, CONFIG.zamFields.sms, false);
    if (smsNotif) {
        var telefon = utils.safeGet(zamestnanec, CONFIG.zamFields.mobil, "");
        if (telefon) {
            result.celkovePokusy++;
            var smsSprava = vytvorSMSSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex, firmaNazov);
            // Simul√°cia SMS
            utils.addDebug(currentEntry, " üì± SMS simul√°cia: " + smsSprava);
            result.uspesnePoslane++;
            result.detaily.push("SMS ‚úÖ");
            utils.addDebug(currentEntry, " ‚úÖ SMS simul√°cia √∫spe≈°n√°");
        } else {
            utils.addDebug(currentEntry, " ‚ö†Ô∏è SMS zapnut√° ale ch√Ωba telef√≥nne ƒç√≠slo");
        }
    }
    
    // EMAIL (simul√°cia)
    var emailNotif = utils.safeGet(zamestnanec, CONFIG.zamFields.emailNotif, false);
    if (emailNotif) {
        var email = utils.safeGet(zamestnanec, CONFIG.zamFields.email, "");
        if (email) {
            result.celkovePokusy++;
            var emailSprava = vytvorEmailSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex, firmaNazov);
            var predmet = "Doch√°dzka " + formatDate(utils.safeGet(dochadzkaZaznam, CONFIG.fields.datum, null));
            // Simul√°cia Email
            utils.addDebug(currentEntry, " üìß Email simul√°cia: " + predmet);
            result.uspesnePoslane++;
            result.detaily.push("Email ‚úÖ");
            utils.addDebug(currentEntry, " ‚úÖ Email simul√°cia √∫spe≈°n√°");
        } else {
            utils.addDebug(currentEntry, " ‚ö†Ô∏è Email zapnut√Ω ale ch√Ωba emailov√° adresa");
        }
    }
    
    result.success = result.uspesnePoslane > 0;
    if (result.celkovePokusy === 0) {
        utils.addDebug(currentEntry, " ‚ÑπÔ∏è ≈Ωiadne notifik√°cie nie s√∫ zapnut√©");
    }
    
    return result;
}

// ==============================================
// HLAVN√Å FUNKCIA - OPRAVEN√Å
// ==============================================

function hlavnaFunkcia() {
    // Vyƒçisti logy na zaƒçiatku
    utils.clearLogs(currentEntry, false);
    
    utils.addDebug(currentEntry, "==================================================");
    utils.addDebug(currentEntry, CONFIG.icons.start + " ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version);
    utils.addDebug(currentEntry, "üìÖ ƒåas spustenia: " + moment().format("DD.MM.YYYY HH:mm:ss"));
    utils.addDebug(currentEntry, "üìö MementoUtils: v" + utils.version);
    utils.addDebug(currentEntry, "==================================================");
    
    try {
        // Z√≠skaj n√°zov firmy
        var firmaNazov = getNazovFirmy();
        
        // Z√≠skaj API kƒæ√∫ƒçe
        utils.addDebug(currentEntry, "\n" + CONFIG.icons.step + " KROK 1: Z√≠skavam API kƒæ√∫ƒçe");
        var apiKeys = getApiKeys();
        if (!apiKeys.success) {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " ≈Ωiadne API kƒæ√∫ƒçe nen√°jden√© - niektor√© notifik√°cie nebud√∫ fungova≈•");
        }
        
        // Z√≠skaj zamestnancov
        utils.addDebug(currentEntry, "\n" + CONFIG.icons.step + " KROK 2: Z√≠skavam zamestnancov");
        var zamestnanci = utils.safeGet(currentEntry, CONFIG.fields.zamestnanci, []);
        
        if (!zamestnanci || zamestnanci.length === 0) {
            utils.addError(currentEntry, "≈Ωiadni zamestnanci v z√°zname", "main");
            message("‚ùå ≈Ωiadni zamestnanci v z√°zname doch√°dzky!");
            return false;
        }
        
        utils.addDebug(currentEntry, CONFIG.icons.success + " Poƒçet zamestnancov: " + zamestnanci.length);
        
        // Spracuj notifik√°cie
        utils.addDebug(currentEntry, "\n" + CONFIG.icons.step + " KROK 3: Posielam notifik√°cie");
        var celkemUspesnych = 0;
        var celkemNeuspesnych = 0;
        var detailyNotifikacii = [];
        
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            if (zamestnanec) {
                var vysledok = posliNotifikaciuZamestnancovi(
                    currentEntry,
                    zamestnanec, 
                    i,
                    apiKeys,
                    firmaNazov
                );
                
                if (vysledok.success) {
                    celkemUspesnych++;
                } else if (vysledok.celkovePokusy > 0) {
                    celkemNeuspesnych++;
                }
                
                // Ulo≈æ detaily pre info spr√°vu
                var menoZam = getEmployeeName(zamestnanec);
                if (vysledok.detaily.length > 0) {
                    detailyNotifikacii.push(menoZam + ": " + vysledok.detaily.join(", "));
                }
            }
        }
        
        // Vytvor info spr√°vu
        utils.addDebug(currentEntry, "\n" + CONFIG.icons.step + " KROK 4: Vytv√°ram s√∫hrn");
        var infoMessage = CONFIG.icons.info + " DOCH√ÅDZKA NOTIFIK√ÅCIE v" + CONFIG.version + "\n";
        infoMessage += "=====================================\n\n";
        infoMessage += CONFIG.icons.building + " Firma: " + firmaNazov + "\n";
        
        var datum = utils.safeGet(currentEntry, CONFIG.fields.datum, null);
        if (datum) {
            infoMessage += "üìÖ D√°tum: " + formatDate(datum) + "\n";
        }
        
        var prichod = utils.safeGet(currentEntry, CONFIG.fields.prichod, null);
        if (prichod) {
            infoMessage += CONFIG.icons.time + " ƒåas: " + formatTime(prichod);
            var odchod = utils.safeGet(currentEntry, CONFIG.fields.odchod, null);
            if (odchod) {
                infoMessage += " - " + formatTime(odchod);
            }
            infoMessage += "\n";
        }
        
        infoMessage += "\n";
        infoMessage += "üìä V√ùSLEDOK NOTIFIK√ÅCI√ç:\n";
        infoMessage += "‚Ä¢ √öspe≈°n√©: " + celkemUspesnych + "/" + zamestnanci.length + "\n";
        if (celkemNeuspesnych > 0) {
            infoMessage += "‚Ä¢ Ne√∫spe≈°n√©: " + celkemNeuspesnych + "\n";
        }
        infoMessage += "\n";
        
        if (detailyNotifikacii.length > 0) {
            infoMessage += "üìù DETAILY:\n";
            for (var j = 0; j < detailyNotifikacii.length; j++) {
                infoMessage += "‚Ä¢ " + detailyNotifikacii[j] + "\n";
            }
            infoMessage += "\n";
        }
        
        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script verzia: " + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ MementoUtils: " + utils.version + "\n";
        infoMessage += "‚Ä¢ ƒåas generovania: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ Typ: " + CONFIG.scriptType + "\n\n";
        
        if (celkemUspesnych === zamestnanci.length) {
            infoMessage += CONFIG.icons.success + " V≈°etky notifik√°cie √∫spe≈°ne poslan√©!";
        } else if (celkemUspesnych > 0) {
            infoMessage += CONFIG.icons.warning + " Niektor√© notifik√°cie zlyhali";
        } else {
            infoMessage += CONFIG.icons.error + " ≈Ωiadne notifik√°cie neboli poslan√©";
        }
        
        // Ulo≈æ info
        utils.safeSet(currentEntry, CONFIG.fields.info, infoMessage);
        
        // Vytvor info z√°znam pre MementoUtils
        utils.addInfo(currentEntry, "Notifik√°cie odoslan√©", {
            method: CONFIG.scriptName,
            sourceId: utils.safeGet(currentEntry, "ID", "N/A"),
            result: "√öspe≈°ne: " + celkemUspesnych + "/" + zamestnanci.length,
            libraryName: "Doch√°dzka"
        });
        
        // Fin√°lny debug log
        utils.addDebug(currentEntry, "\n==================================================");
        if (celkemUspesnych === zamestnanci.length) {
            utils.addDebug(currentEntry, "üéâ NOTIFIK√ÅCIE DOKONƒåEN√â √öSPE≈†NE!");
        } else {
            utils.addDebug(currentEntry, "‚ö†Ô∏è NOTIFIK√ÅCIE DOKONƒåEN√â S ƒåIASTOƒåN√ùM √öSPECHOM");
        }
        utils.addDebug(currentEntry, "==================================================");
        
        // Ulo≈æ logy
        utils.saveLogs(currentEntry);
        
        // Zobraz spr√°vu pou≈æ√≠vateƒæovi
        if (celkemUspesnych === zamestnanci.length) {
            message("üéâ Notifik√°cie √∫spe≈°ne odoslan√©!\n\n" +
                    "‚úÖ V≈°etk√Ωm " + zamestnanci.length + " zamestnancom\n" +
                    "üìß Detaily v poli 'info'");
        } else if (celkemUspesnych > 0) {
            message("‚ö†Ô∏è Notifik√°cie ƒçiastoƒçne odoslan√©\n\n" +
                    "‚úÖ √öspe≈°n√©: " + celkemUspesnych + "/" + zamestnanci.length + "\n" +
                    "‚ùå Ne√∫spe≈°n√©: " + celkemNeuspesnych + "\n\n" +
                    "üìã Detaily v poli 'info'");
        } else {
            message("‚ùå Notifik√°cie neboli odoslan√©!\n\n" +
                    "üîç Skontroluj:\n" +
                    "‚Ä¢ Nastavenia notifik√°ci√≠ u zamestnancov\n" +
                    "‚Ä¢ API kƒæ√∫ƒçe v ASISTANTO API\n" +
                    "‚Ä¢ Debug_Log pre detaily");
        }
        
        return true;
        
    } catch (e) {
        utils.addError(currentEntry, e, "hlavnaFunkcia");
        utils.saveLogs(currentEntry);
        message("üí• KRITICK√Å CHYBA!\n\n" + e.toString() + "\n\nPozri Error_Log");
        return false;
    }
}

// ==============================================
// SPUSTENIE ACTION SCRIPTU
// ==============================================

try {
    utils.addDebug(currentEntry, "üé¨ Inicializ√°cia " + CONFIG.scriptName + " v" + CONFIG.version);
    utils.addDebug(currentEntry, "üìö Pou≈æ√≠vam MementoUtils v" + utils.version);
    
    // Kontrola existencie currentEntry
    if (!currentEntry) {
        utils.addError(currentEntry, "KRITICK√Å CHYBA: currentEntry neexistuje", "startup");
        message("üí• KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
    } else {
        // Spustenie hlavnej funkcie
        hlavnaFunkcia();
    }
    
} catch (kritickachyba) {
    // Posledn√° z√°chrana
    try {
        utils.addError(currentEntry, kritickachyba, "critical");
        utils.saveLogs(currentEntry);
        message("üí• KRITICK√Å CHYBA!\n\nScript zlyhal. Pozri Error_Log.");
    } catch (finalError) {
        message("üí• FAT√ÅLNA CHYBA!\n\n" + kritickachyba.toString());
    }
}
