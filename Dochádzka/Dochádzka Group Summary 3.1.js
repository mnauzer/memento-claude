// ==============================================
// DOCH√ÅDZKA GROUP SUMMARY
// Verzia: 3.1 | D√°tum: 17.08.2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// üìã FUNKCIA:
//    - Po ulo≈æen√≠ doch√°dzky vytvor√≠ s√∫hrnn√∫ notifik√°ciu
//    - Pre Telegram skupinu/t√©mu s prehƒæadom v≈°etk√Ωch zamestnancov
//    - Vyu≈æ√≠va ASISTANTO Notifications Helper
//    - Neodosiela priamo - len vytv√°ra z√°znam
// ‚úÖ v3.1 ZMENY:
//    - Pridan√° podpora pre Link to Entry pole "Telegram skupina doch√°dzky"
//    - Zachovan√° sp√§tn√° kompatibilita s textov√Ωm polom
//    - Opraven√© n√°zvy pol√≠ podƒæa GitHub verzie
// ==============================================

// Import kni≈æn√≠c
var utils = MementoUtils;
var notifHelper = ASISTANTONotifications;
var currentEntry = entry();

// Konfigur√°cia
var CONFIG = {
    debug: true,
    version: "3.1.1",
    scriptName: "Doch√°dzka Group Summary",
    
    // Kni≈ænice
    defaultsLibrary: "ASISTANTO Defaults",
    notificationsLibrary: "ASISTANTO Notifications",
    telegramGroupsLibrary: "ASISTANTO Telegram Groups",
    
    // N√°zvy pol√≠ v Defaults - UPRAVEN√â PODƒΩA TVOJICH SCREENSHOTOV
    defaultsFields: {
        dochadzkaGroupEnabled: "Doch√°dzka skupinov√© notifik√°cie",  // Upraven√©
        telegramGroupLink: "Telegram skupina doch√°dzky",                // Link to Entry pole
        telegramDochadzkaId: "Telegram Doch√°dzka ID",                   // Textov√© pole pre sp√§tn√∫ kompatibilitu
        nazovFirmy: "N√°zov firmy",
        includeFinancials: "Zahrn√∫≈• finanƒçn√© √∫daje",
        summaryDelay: "Oneskorenie s√∫hrnu (min)"
    },
    
    // N√°zvy pol√≠ v Doch√°dzke
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod",
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        mzdoveNaklady: "Mzdov√© n√°klady",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        poznamka: "Pozn√°mka",
        id: "ID"
    },
    
    // N√°zvy atrib√∫tov
    attributes: {
        odpracovane: "odpracovan√©",
        dennaMzda: "denn√° mzda",
        hodinovka: "hodinovka"
    },
    
    // Polia v ASISTANTO Telegram Groups
    telegramGroupsFields: {
        chatId: "Chat ID",
        threadId: "Thread ID",
        threadName: "T√©ma N√°zov",
        nazov: "N√°zov"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
        // 1. Kontrola ƒçi s√∫ povolen√© skupinov√© notifik√°cie
        var settings = {};
        // Naƒç√≠taj v≈°etky potrebn√© nastavenia individu√°lne
        for (var key in CONFIG.defaultsFields) {
            settings[CONFIG.defaultsFields[key]] = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields[key]);
        }
        
        utils.addDebug(currentEntry, "üìã Nastavenia naƒç√≠tan√© z " + CONFIG.defaultsLibrary);
        
        var enabled = settings[CONFIG.defaultsFields.dochadzkaGroupEnabled];
        utils.addDebug(currentEntry, "Skupinov√© notifik√°cie povolen√©: " + enabled);
        
        if (!enabled) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è Skupinov√© notifik√°cie s√∫ vypnut√©");
            return;
        }
        
        // 2. Kontrola ƒçi je nastaven√° skupina
        // Najprv sk√∫s z√≠ska≈• linknut√Ω z√°znam (preferovan√Ω sp√¥sob)
        var telegramGroupLink = settings[CONFIG.defaultsFields.telegramGroupLink];
        var targetGroup = null;
        
        if (telegramGroupLink) {
            // Pou≈æ√≠vame Link to Entry pole
            utils.addDebug(currentEntry, "üìé Kontrolujem linknut√Ω z√°znam z '" + telegramGroupLink + "'");
            targetGroup = getTargetGroupFromLink(telegramGroupLink);
        }
        
        if (!targetGroup) {
            // Fallback na star√© textov√© pole pre sp√§tn√∫ kompatibilitu
            var telegramId = settings[CONFIG.defaultsFields.telegramDochadzkaId];
            if (telegramId) {
                utils.addDebug(currentEntry, "üìù Pou≈æ√≠vam textov√© pole 'Telegram Doch√°dzka ID' (legacy): " + telegramId);
                targetGroup = findTargetGroup(telegramId);
            }
        }
        
        if (!targetGroup) {
            utils.addDebug(currentEntry, "‚ùå Nie je nastaven√° ≈æiadna Telegram skupina pre doch√°dzku");
            utils.addError(currentEntry, "Nie je nastaven√° Telegram skupina pre doch√°dzku", "main");
            return;
        }
        
        // 3. Z√≠skaj zamestnancov
        var zamestnanci = utils.safeGetLinks(currentEntry, CONFIG.fields.zamestnanci);
        if (!zamestnanci || zamestnanci.length === 0) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è ≈Ωiadni zamestnanci v z√°zname");
            return;
        }
        
        utils.addDebug(currentEntry, "üë• Poƒçet zamestnancov: " + zamestnanci.length);
        
        // 4. N√°jdi cieƒæov√∫ skupinu/t√©mu
        // (t√°to ƒças≈• u≈æ je vyrie≈°en√° vy≈°≈°ie)
        
        // 5. Priprav s√∫hrnn√∫ spr√°vu
        var summaryMessage = prepareSummaryMessage(zamestnanci);
        
        // 6. Vytvor notifik√°ciu
        var notification = createGroupNotification(summaryMessage, targetGroup);
        
        if (notification) {
            utils.addInfo(currentEntry, "Vytvoren√° skupinov√° notifik√°cia", {
                notificationId: notification.field("ID"),
                skupina: targetGroup.name,
                pocetZamestnancov: zamestnanci.length,
                datum: utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY")
            });
            
            utils.addDebug(currentEntry, "‚úÖ === KONIEC - Skupinov√° notifik√°cia vytvoren√° ===");
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• skupinov√∫ notifik√°ciu", "main");
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "main");
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================
function formatStatistics(zamestnanci, includeFinancials) {
    var stats = "";
    
    // Priemern√© odpracovan√© hodiny
    var totalHours = 0;
    var countWithHours = 0;
    
    for (var i = 0; i < zamestnanci.length; i++) {
        var hours = getEmployeeAttribute(zamestnanci[i], CONFIG.attributes.odpracovane);
        if (hours) {
            totalHours += hours;
            countWithHours++;
        }
    }
    
    if (countWithHours > 0) {
        var avgHours = totalHours / countWithHours;
        stats += "‚Ä¢ Priemern√Ω ƒças: " + utils.formatTime(avgHours) + "\n";
    }
    
    // Finanƒçn√© ≈°tatistiky
    if (includeFinancials) {
        var totalWages = 0;
        var countWithWages = 0;
        
        for (var j = 0; j < zamestnanci.length; j++) {
            var wage = getEmployeeAttribute(zamestnanci[j], CONFIG.attributes.dennaMzda);
            if (wage) {
                totalWages += wage;
                countWithWages++;
            }
        }
        
        if (countWithWages > 0) {
            var avgWage = totalWages / countWithWages;
            stats += "‚Ä¢ Priemern√° denn√° mzda: " + utils.formatMoney(avgWage) + "\n";
            stats += "‚Ä¢ N√°klady na zamestnanca: " + utils.formatMoney(totalWages / zamestnanci.length) + "\n";
        }
    }
    
    // √öƒças≈•
    var totalEmployees = getTotalActiveEmployees();
    if (totalEmployees > 0) {
        var attendanceRate = (zamestnanci.length / totalEmployees) * 100;
        stats += "‚Ä¢ √öƒças≈•: " + attendanceRate.toFixed(1) + "% (" + zamestnanci.length + "/" + totalEmployees + ")\n";
    }
    
    return stats;
}

// ==============================================
/**
 * Z√≠ska cieƒæov√∫ skupinu z Link to Entry poƒæa (nov√Ω preferovan√Ω sp√¥sob)
 */
function getTargetGroupFromLink(telegramGroupLink) {
    try {
        if (!telegramGroupLink) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Link to Entry parameter je pr√°zdny");
            return null;
        }
        
        // Pre stringov√© ID treba z√≠ska≈• settings entry priamo
        var defaultsLib = libByName(CONFIG.defaultsLibrary);
        if (!defaultsLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.defaultsLibrary + " nen√°jden√°", "getTargetGroupFromLink");
            return null;
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (!defaultsEntries || defaultsEntries.length === 0) {
            return null;
        }
        
        var defaultsEntry = defaultsEntries[0];
        var linkedGroups = utils.safeGetLinks(defaultsEntry, telegramGroupLink) || [];
        
        if (!linkedGroups || (Array.isArray(linkedGroups) && linkedGroups.length === 0)) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è ≈Ωiadne linknut√© skupiny v poli '" + telegramGroupLink + "'");
            return null;
        }
        
        // Konvertuj na pole ak nie je
        var groupsArray = Array.isArray(linkedGroups) ? linkedGroups : [linkedGroups];
        var group = groupsArray[0];
        
        if (!group) {
            return null;
        }
        
        // Z√≠skaj potrebn√© √∫daje
        var chatId = group.field(CONFIG.telegramGroupsFields.chatId);
        var threadId = group.field(CONFIG.telegramGroupsFields.threadId);
        var nazov = group.field(CONFIG.telegramGroupsFields.nazov) || 
                    group.field(CONFIG.telegramGroupsFields.threadName);
        
        if (!chatId) {
            utils.addError(currentEntry, "Linknut√° skupina nem√° Chat ID", "getTargetGroupFromLink");
            return null;
        }
        
        var result = {
            entries: [group],
            chatId: chatId,
            threadId: threadId,
            isThread: !!threadId,
            name: nazov || (threadId ? "T√©ma #" + threadId : "Skupina")
        };
        
        utils.addDebug(currentEntry, "‚úÖ Z√≠skan√° skupina z linku: " + result.name + " (Chat: " + chatId + (threadId ? ", Thread: " + threadId : "") + ")");
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, error, "getTargetGroupFromLink");
        return null;
    }
}

/**
 * N√°jde cieƒæov√∫ skupinu/t√©mu podƒæa ID (star√Ω sp√¥sob pre sp√§tn√∫ kompatibilitu)
 */
function findTargetGroup(telegramId) {
    try {
        var telegramGroups = libByName(CONFIG.telegramGroupsLibrary);
        if (!telegramGroups) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.telegramGroupsLibrary + " nen√°jden√°", "findTargetGroup");
            return null;
        }
        
        // Rozpoznaj ƒçi je to skupina alebo t√©ma
        var isThread = telegramId.indexOf("/") > -1;
        var result = {
            isThread: isThread,
            entries: []
        };
        
        if (isThread) {
            // Form√°t: "-1001234567890/123"
            var parts = telegramId.split("/");
            var chatId = parts[0];
            var threadId = parts[1];
            
            utils.addDebug(currentEntry, "üîç Hƒæad√°m t√©mu: Chat ID = " + chatId + ", Thread ID = " + threadId);
            
            // N√°jdi v≈°etky skupiny
            var allGroups = telegramGroups.entries();
            
            for (var i = 0; i < allGroups.length; i++) {
                var group = allGroups[i];
                if (group.field(CONFIG.telegramGroupsFields.chatId) === chatId && 
                    group.field(CONFIG.telegramGroupsFields.threadId) === threadId) {
                    result.entries.push(group);
                    result.name = group.field(CONFIG.telegramGroupsFields.threadName) || "T√©ma #" + threadId;
                    result.chatId = chatId;
                    result.threadId = threadId;
                    utils.addDebug(currentEntry, "‚úÖ Na≈°la sa t√©ma: " + result.name);
                    break;
                }
            }
        } else {
            // Jednoduch√° skupina
            utils.addDebug(currentEntry, "üîç Hƒæad√°m skupinu: Chat ID = " + telegramId);
            
            var groups = telegramGroups.find(CONFIG.telegramGroupsFields.chatId, telegramId);
            if (groups && groups.length > 0) {
                result.entries.push(groups[0]);
                result.name = groups[0].field(CONFIG.telegramGroupsFields.nazov) || "Skupina";
                result.chatId = telegramId;
                utils.addDebug(currentEntry, "‚úÖ Na≈°la sa skupina: " + result.name);
            }
        }
        
        return result.entries.length > 0 ? result : null;
        
    } catch (error) {
        utils.addError(currentEntry, error, "findTargetGroup");
        return null;
    }
}

/**
 * Priprav√≠ s√∫hrnn√∫ spr√°vu
 */
function prepareSummaryMessage(zamestnanci) {
    var nazovFirmy = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields.nazovFirmy) || "Firma";
    var datum = utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY");
    var prichod = currentEntry.field(CONFIG.fields.prichod);
    var odchod = currentEntry.field(CONFIG.fields.odchod);
    
    // Header
    var message = "üìä *DOCH√ÅDZKA - " + nazovFirmy + "*\n";
    message += "üìÖ " + datum + "\n";
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
    
    // Celkov√© info
    message += "üìã *S√öHRN*\n";
    message += "üë• Poƒçet pracovn√≠kov: " + zamestnanci.length + "\n";
    
    if (prichod || odchod) {
        message += "‚è∞ ƒåas: " + (prichod || "‚Äî") + " ‚Üí " + (odchod || "‚Äî") + "\n";
    }
    
    // Celkov√© odpracovan√© hodiny
    var totalHours = currentEntry.field(CONFIG.fields.odpracovane) || 0;
    if (totalHours > 0) {
        message += "‚è±Ô∏è Odpracovan√© spolu: " + utils.formatTime(totalHours) + "\n";
    }
    
    // Finanƒçn√© √∫daje ak s√∫ povolen√©
    var includeFinancials = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields.includeFinancials);
    if (includeFinancials) {
        var mzdoveNaklady = currentEntry.field(CONFIG.fields.mzdoveNaklady);
        if (mzdoveNaklady) {
            message += "üí∞ Mzdov√© n√°klady: " + utils.formatMoney(mzdoveNaklady) + "\n";
        }
    }
    
    // Detail zamestnancov
    message += "\nüë∑ *ZAMESTNANCI*\n";
    
    // Zoraƒè zamestnancov podƒæa priezviska
    var sortedEmployees = sortEmployees(zamestnanci);
    
    for (var i = 0; i < sortedEmployees.length; i++) {
        var emp = sortedEmployees[i];
        message += formatEmployeeDetail(emp, i + 1);
    }
    
    // ≈†tatistiky
    message += "\nüìà *≈†TATISTIKY*\n";
    message += formatStatistics(zamestnanci, includeFinancials);
    
    // Pozn√°mka ak existuje
    var poznamka = currentEntry.field(CONFIG.fields.poznamka);
    if (poznamka) {
        message += "\nüìù *Pozn√°mka:* " + poznamka + "\n";
    }
    
    // Footer
    message += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
    message += "_Doch√°dzka #" + currentEntry.field(CONFIG.fields.id) + "_";
    
    return message;
}

/**
 * Zorad√≠ zamestnancov podƒæa priezviska
 */
function sortEmployees(zamestnanci) {
    var sorted = zamestnanci.slice(); // K√≥pia array
    
    sorted.sort(function(a, b) {
        var priezviskoA = utils.safeGet(a, "Priezvisko", "").toLowerCase();
        var priezviskoB = utils.safeGet(b, "Priezvisko", "").toLowerCase();
        
        if (priezviskoA < priezviskoB) return -1;
        if (priezviskoA > priezviskoB) return 1;
        return 0;
    });
    
    return sorted;
}

/**
 * Form√°tuje detail zamestnanca
 */
function formatEmployeeDetail(zamestnanec, poradie) {
    var detail = poradie + ". ";
    
    // Meno
    detail += utils.formatEmployeeName(zamestnanec);
    
    // Odpracovan√© hodiny z atrib√∫tu
    var odpracovane = getEmployeeAttribute(zamestnanec, CONFIG.attributes.odpracovane);
    if (odpracovane) {
        detail += " - " + utils.formatTime(odpracovane);
    }
    
    // Denn√° mzda z atrib√∫tu
    var dennaMzda = getEmployeeAttribute(zamestnanec, CONFIG.attributes.dennaMzda);
    if (dennaMzda) {
        detail += " (" + utils.formatMoney(dennaMzda) + ")";
    }
    
    detail += "\n";
    
    return detail;
}

/**
 * Z√≠ska atrib√∫t zamestnanca z poƒæa
 */
function getEmployeeAttribute(zamestnanec, attributeName) {
    try {
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        if (zamArray && zamArray.length > 0) {
            for (var i = 0; i < zamArray.length; i++) {
                if (zamArray[i].field("ID") === zamestnanec.field("ID")) {
                    return zamArray[i].attr(attributeName);
                }
            }
        }
        
        return null;
        
    } catch (error) {
        return null;
    }
}

/**
 * Form√°tuje ≈°tatistiky
 */
function formatStatistics(zamestnanci, settings) {
    var stats = "";
    
    // Priemern√© odpracovan√© hodiny
    var totalHours = 0;
    var countWithHours = 0;
    
    for (var i = 0; i < zamestnanci.length; i++) {
        var hours = getEmployeeAttribute(zamestnanci[i], CONFIG.attributes.odpracovane);
        if (hours) {
            totalHours += hours;
            countWithHours++;
        }
    }
    
    if (countWithHours > 0) {
        var avgHours = totalHours / countWithHours;
        stats += "‚Ä¢ Priemern√Ω ƒças: " + utils.formatTime(avgHours) + "\n";
    }
    
    // Finanƒçn√© ≈°tatistiky
    if (settings[CONFIG.defaultsFields.includeFinancials]) {
        var totalWages = 0;
        var countWithWages = 0;
        
        for (var j = 0; j < zamestnanci.length; j++) {
            var wage = getEmployeeAttribute(zamestnanci[j], CONFIG.attributes.dennaMzda);
            if (wage) {
                totalWages += wage;
                countWithWages++;
            }
        }
        
        if (countWithWages > 0) {
            var avgWage = totalWages / countWithWages;
            stats += "‚Ä¢ Priemern√° denn√° mzda: " + utils.formatMoney(avgWage) + "\n";
            stats += "‚Ä¢ N√°klady na zamestnanca: " + utils.formatMoney(totalWages / zamestnanci.length) + "\n";
        }
    }
    
    // √öƒças≈•
    var totalEmployees = getTotalActiveEmployees();
    if (totalEmployees > 0) {
        var attendanceRate = (zamestnanci.length / totalEmployees) * 100;
        stats += "‚Ä¢ √öƒças≈•: " + attendanceRate.toFixed(1) + "% (" + zamestnanci.length + "/" + totalEmployees + ")\n";
    }
    
    return stats;
}

/**
 * Z√≠ska poƒçet akt√≠vnych zamestnancov
 */
function getTotalActiveEmployees() {
    try {
        var zamestnanciLib = libByName("Zamestnanci");
        if (!zamestnanciLib) return 0;
        
        var activeEmployees = zamestnanciLib.find("Status", "Akt√≠vny");
        return activeEmployees ? activeEmployees.length : 0;
        
    } catch (error) {
        return 0;
    }
}

/**
 * Vytvor√≠ skupinov√∫ notifik√°ciu
 */
function createGroupNotification(message, targetGroup) {
    try {
        // Naƒç√≠taj oneskorenie
        var delay = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields.summaryDelay) || 0;
        
        // Z√°kladn√© d√°ta notifik√°cie
        var notifData = {
            typSpravy: "Doch√°dzka",
            zdrojSpravy: "Automatick√°", 
            predmet: "Doch√°dzka - s√∫hrn " + utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY"),
            sprava: message,
            formatovanie: "Markdown",
            priorita: "Norm√°lna",
            zdrojovaKniznica: lib().title,
            zdrojovyId: currentEntry.field(CONFIG.fields.id)
        };
        
        // Nastav adres√°ta
        if (targetGroup.isThread) {
            notifData.adresat = "Skupina-T√©ma";
        } else {
            notifData.adresat = "Skupina";
        }
        
        notifData.skupinaTema = targetGroup.entries;
        
        // Nastav ƒças odoslania ak je oneskorenie
        if (delay > 0) {
            notifData.poslatO = moment().add(delay, 'minutes').toDate();
            utils.addDebug(currentEntry, "‚è∞ S√∫hrn napl√°novan√Ω o " + delay + " min√∫t");
        }
        
        // Vytvor notifik√°ciu
        var notification = notifHelper.createNotification(notifData);
        
        if (notification) {
            utils.addDebug(currentEntry, "‚úÖ Skupinov√° notifik√°cia vytvoren√° (ID: " + notification.field("ID") + ")");
        }
        
        return notification;
        
    } catch (error) {
        utils.addError(currentEntry, error, "createGroupNotification");
        return null;
    }
}

// ==============================================
// SPUSTENIE
// ==============================================

main();