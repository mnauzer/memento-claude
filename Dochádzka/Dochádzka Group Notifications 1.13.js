// ==============================================
// TRIGGER SCRIPT - DOCH√ÅDZKA GROUP NOTIFICATION
// Verzia: 1.3 | Typ: After Save Trigger
// Kni≈ænica: Doch√°dzka
// ==============================================
// üìã FUNKCIA:
//    - Po ulo≈æen√≠ z√°znamu doch√°dzky po≈°le s√∫hrnn√∫ spr√°vu
//    - Do Telegram skupiny/t√©my (thread)
//    - Obsahuje prehƒæad v≈°etk√Ωch zamestnancov a celkov√© √∫daje
//    - Kontroluje nastavenie v ASISTANTO Defaults
// ‚úÖ v1.3: Thread ID sa zapisuje do samostatn√©ho poƒæa
// ‚úÖ v1.2: Vylep≈°en√° podpora pre group/thread ID form√°ty
// ‚úÖ v1.1: Opraven√© zobrazenie ƒçasu, pridan√Ω de≈à v t√Ω≈ædni
// ==============================================
// üìå FORM√ÅTY pre "Telegram Doch√°dzka ID":
//    - Obyƒçajn√° skupina: "-1001234567890"
//    - T√©ma v supergroup: "-1001234567890/123"
//    - S√∫kromn√Ω chat: "123456789"
// 
// üîç AKO Z√çSKA≈§ ID:
//    - Group ID: Pridaj @RawDataBot do skupiny
//    - Thread ID: V t√©me klikni na spr√°vu ‚Üí Copy Link
//                 Z linku https://t.me/c/1234567890/123/456
//                 Thread ID je prostredn√© ƒç√≠slo (123)
// ==============================================

var CONFIG = {
    debug: true,
    version: "1.3",
    scriptName: "Doch√°dzka Group Notification",
    
    // Kni≈ænice
    apiLibrary: "ASISTANTO API",
    defaultsLibrary: "ASISTANTO Defaults",
    notificationsLibrary: "ASISTANTO Notifications",
    
    // N√°zvy pol√≠ v Defaults
    defaultsFields: {
        dochadzkaEnabled: "doch√°dzka",
        telegramGroupId: "Telegram Doch√°dzka ID",
        nazovFirmy: "N√°zov firmy"
    },
    
    // N√°zvy pol√≠ v Doch√°dzke
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod",
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        mzdoveNaklady: "Mzdov√© n√°klady",
        projekt: "Projekt/Z√°kazka",
        poznamka: "Pozn√°mka",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // Atrib√∫ty
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        priplatok: "+pr√≠platok (‚Ç¨/h)",
        premia: "+pr√©mia (‚Ç¨)",
        pokuta: "-pokuta (‚Ç¨)",
        dennaMzda: "denn√° mzda"
    }
};

// Glob√°lne premenn√©
var currentEntry = entry();
var utils = null;

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

function initializeUtils() {
    try {
        if (typeof MementoUtils !== 'undefined' && MementoUtils !== null) {
            utils = MementoUtils;
            return true;
        }
    } catch (e) {}
    
    // Fallback funkcie
    utils = {
        safeGet: function(entry, field, defaultValue) {
            try {
                var value = entry.field(field);
                return (value !== null && value !== undefined) ? value : defaultValue;
            } catch (e) {
                return defaultValue;
            }
        },
        
        safeGetAttribute: function(entry, field, index, attr, defaultValue) {
            try {
                var fieldValue = entry.field(field);
                if (fieldValue && fieldValue[index] && fieldValue[index].attr) {
                    var value = fieldValue[index].attr(attr);
                    return (value !== null && value !== undefined) ? value : defaultValue;
                }
            } catch (e) {}
            return defaultValue;
        },
        
        addDebug: function(entry, message) {
            if (!CONFIG.debug) return;
            var timestamp = moment().format("DD.MM.YY HH:mm:ss");
            var existing = entry.field(CONFIG.fields.debugLog) || "";
            entry.set(CONFIG.fields.debugLog, existing + "[" + timestamp + "] " + message + "\n");
        },
        
        addError: function(entry, error, location) {
            var timestamp = moment().format("DD.MM.YY HH:mm:ss");
            var msg = "[" + timestamp + "] ‚ùå " + (location ? "(" + location + ") " : "") + error.toString();
            var existing = entry.field(CONFIG.fields.errorLog) || "";
            entry.set(CONFIG.fields.errorLog, existing + msg + "\n");
        }
    };
    
    return false;
}

// ==============================================
// HELPER FUNKCIE
// ==============================================

function formatTime(timeValue) {
    if (!timeValue) return "00:00";
    
    try {
        // Ak je to Date objekt alebo timestamp
        return moment(timeValue).format("HH:mm");
    } catch (e) {
        // Ak je to ƒç√≠slo (hodiny)
        if (typeof timeValue === "number") {
            var totalMinutes = Math.round(timeValue * 60);
            var h = Math.floor(totalMinutes / 60);
            var m = totalMinutes % 60;
            return (h < 10 ? "0" : "") + h + ":" + (m < 10 ? "0" : "") + m;
        }
        return "00:00";
    }
}

function formatMoney(amount) {
    if (typeof amount !== "number") return "0.00 ‚Ç¨";
    return amount.toFixed(2) + " ‚Ç¨";
}

function getEmployeeName(zamestnanec) {
    if (!zamestnanec) return "Nezn√°my";
    
    var nick = utils.safeGet(zamestnanec, "Nick", "");
    var meno = utils.safeGet(zamestnanec, "Meno", "");
    var priezvisko = utils.safeGet(zamestnanec, "Priezvisko", "");
    
    if (nick) {
        return priezvisko ? nick + " (" + priezvisko + ")" : nick;
    }
    
    return (meno + " " + priezvisko).trim() || "Nezn√°my";
}

// ==============================================
// KONFIGUR√ÅCIA A NASTAVENIA
// ==============================================

function getDefaultsSettings() {
    try {
        utils.addDebug(currentEntry, "üìã Naƒç√≠tavam nastavenia z " + CONFIG.defaultsLibrary);
        
        var defaultsLib = libByName(CONFIG.defaultsLibrary);
        if (!defaultsLib) {
            utils.addError(currentEntry, "Defaults kni≈ænica nen√°jden√°", "getDefaultsSettings");
            return null;
        }
        
        var entries = defaultsLib.entries();
        if (!entries || entries.length === 0) {
            utils.addError(currentEntry, "≈Ωiadne z√°znamy v Defaults", "getDefaultsSettings");
            return null;
        }
        
        var defaultsEntry = entries[0];
        
        return {
            enabled: utils.safeGet(defaultsEntry, CONFIG.defaultsFields.dochadzkaEnabled, false),
            groupId: utils.safeGet(defaultsEntry, CONFIG.defaultsFields.telegramGroupId, ""),
            firmName: utils.safeGet(defaultsEntry, CONFIG.defaultsFields.nazovFirmy, "Firma")
        };
        
    } catch (error) {
        utils.addError(currentEntry, error, "getDefaultsSettings");
        return null;
    }
}

function getTelegramToken() {
    try {
        var apiLib = libByName(CONFIG.apiLibrary);
        if (!apiLib) return null;
        
        var entries = apiLib.entries();
        for (var i = 0; i < entries.length; i++) {
            var provider = utils.safeGet(entries[i], "provider", "");
            if (provider.toLowerCase() === "telegram") {
                return utils.safeGet(entries[i], "api", "");
            }
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "getTelegramToken");
    }
    
    return null;
}

// ==============================================
// VYTVORENIE S√öHRNNEJ SPR√ÅVY
// ==============================================

function vytvorSuhrnnuSpravu(settings) {
    var datum = utils.safeGet(currentEntry, CONFIG.fields.datum, new Date());
    var prichod = utils.safeGet(currentEntry, CONFIG.fields.prichod, null);
    var odchod = utils.safeGet(currentEntry, CONFIG.fields.odchod, null);
    var pracovnaDoba = utils.safeGet(currentEntry, CONFIG.fields.pracovnaDoba, 0);
    var pocetPracovnikov = utils.safeGet(currentEntry, CONFIG.fields.pocetPracovnikov, 0);
    var odpracovaneTotal = utils.safeGet(currentEntry, CONFIG.fields.odpracovane, 0);
    var mzdoveNaklady = utils.safeGet(currentEntry, CONFIG.fields.mzdoveNaklady, 0);
    var poznamka = utils.safeGet(currentEntry, CONFIG.fields.poznamka, "");
    
    // Projekt
    var projekt = "";
    var projektField = utils.safeGet(currentEntry, CONFIG.fields.projekt, null);
    if (projektField && Array.isArray(projektField) && projektField.length > 0) {
        projekt = utils.safeGet(projektField[0], "N√°zov z√°znamu", "") || 
                 utils.safeGet(projektField[0], "ƒå√≠slo", "") || "";
    }
    
    // Zaƒçiatok spr√°vy
    var sprava = "üìä **DOCH√ÅDZKA - DENN√ù S√öHRN**\n";
    sprava += "üè¢ " + settings.firmName + "\n";
    
    // D√°tum s d≈àom v t√Ω≈ædni
    var dayNames = ["Nedeƒæa", "Pondelok", "Utorok", "Streda", "≈†tvrtok", "Piatok", "Sobota"];
    var dayOfWeek = dayNames[moment(datum).day()];
    sprava += "üìÖ " + moment(datum).format("DD.MM.YYYY") + " (" + dayOfWeek + ")\n";
    
    sprava += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
    
    // Z√°kladn√© info
    sprava += "‚è∞ **Pracovn√Ω ƒças:** " + formatTime(prichod) + " - " + formatTime(odchod) + "\n";
    sprava += "‚è±Ô∏è **Pracovn√° doba:** " + pracovnaDoba + " hod√≠n\n";
    sprava += "üë• **Poƒçet pracovn√≠kov:** " + pocetPracovnikov + "\n";
    
    if (projekt) {
        sprava += "üì¶ **Projekt:** " + projekt + "\n";
    }
    
    sprava += "\n";
    
    // Detail zamestnancov
    var zamestnanci = utils.safeGet(currentEntry, CONFIG.fields.zamestnanci, []);
    
    if (zamestnanci.length > 0) {
        sprava += "üë∑ **ZAMESTNANCI:**\n";
        sprava += "```\n";
        
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            if (!zamestnanec) continue;
            
            var meno = getEmployeeName(zamestnanec);
            var odpracovane = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, i, CONFIG.attributes.odpracovane, pracovnaDoba);
            var hodinovka = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, i, CONFIG.attributes.hodinovka, 0);
            var dennaMzda = utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, i, CONFIG.attributes.dennaMzda, 0);
            
            sprava += (i + 1) + ". " + meno + "\n";
            sprava += "   ‚Ä¢ Odpracovan√©: " + odpracovane + "h\n";
            sprava += "   ‚Ä¢ Hodinovka: " + hodinovka + " ‚Ç¨/h\n";
            sprava += "   ‚Ä¢ Denn√° mzda: " + formatMoney(dennaMzda) + "\n";
            
            if (i < zamestnanci.length - 1) sprava += "\n";
        }
        
        sprava += "```\n\n";
    }
    
    // S√∫hrn
    sprava += "üí∞ **CELKOV√ù S√öHRN:**\n";
    sprava += "‚Ä¢ Odpracovan√© spolu: **" + odpracovaneTotal + " hod√≠n**\n";
    sprava += "‚Ä¢ Mzdov√© n√°klady: **" + formatMoney(mzdoveNaklady) + "**\n";
    sprava += "‚Ä¢ Priemer na osobu: **" + (pocetPracovnikov > 0 ? formatMoney(mzdoveNaklady / pocetPracovnikov) : "0 ‚Ç¨") + "**\n";
    
    if (poznamka) {
        sprava += "\nüìù _Pozn√°mka: " + poznamka + "_\n";
    }
    
    sprava += "\n---\n";
    sprava += "ü§ñ _Automatick√° notifik√°cia | " + moment().format("HH:mm:ss") + "_";
    
    return sprava;
}

// ==============================================
// TELEGRAM FUNKCIE
// ==============================================

function posliTelegramSpravu(chatId, sprava, botToken, messageThreadId) {
    try {
        var url = "https://api.telegram.org/bot" + botToken + "/sendMessage";
        
        var payload = {
            chat_id: chatId,
            text: sprava,
            parse_mode: "Markdown"
        };
        
        // Ak m√°me thread ID (pre t√©my v supergroup)
        if (messageThreadId && messageThreadId !== "" && messageThreadId !== "0") {
            payload.message_thread_id = parseInt(messageThreadId);
            utils.addDebug(currentEntry, "üìç Posielam do t√©my #" + messageThreadId);
        }
        
        var httpObj = http();
        httpObj.headers({"Content-Type": "application/json"});
        
        var response = httpObj.post(url, JSON.stringify(payload));
        
        if (response.code === 200) {
            try {
                var data = JSON.parse(response.body);
                if (data.ok && data.result) {
                    return {
                        success: true,
                        messageId: data.result.message_id ? data.result.message_id.toString() : null
                    };
                }
            } catch (e) {
                return { success: true, messageId: null };
            }
        } else {
            utils.addError(currentEntry, "Telegram API error " + response.code + ": " + response.body, "posliTelegramSpravu");
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "posliTelegramSpravu");
    }
    
    return { success: false, messageId: null };
}

function zaznamenajNotifikaciu(chatId, sprava, messageId, isGroup, threadId) {
    try {
        var notifLib = libByName(CONFIG.notificationsLibrary);
        if (!notifLib) return false;
        
        var notifData = {
            "D√°tum": moment().toDate(),
            "Kni≈ænica": "Doch√°dzka",
            "Chat ID": chatId,
            "Thread ID": threadId || "",  // Samostatn√© pole pre Thread ID
            "Message ID": messageId || "",
            "Adres√°t": isGroup ? (threadId ? "Skupina-T√©ma" : "Skupina") : "Zamestnanec",
            "Message": sprava
        };
        
        var novyZaznam = notifLib.create(notifData);
        return novyZaznam !== null;
        
    } catch (error) {
        utils.addError(currentEntry, error, "zaznamenajNotifikaciu");
        return false;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    // Zabezpeƒçenie ≈æe script be≈æ√≠ len ako After Save trigger
    if (typeof entry === 'undefined' || !entry()) {
        return;
    }
    
    try {
        initializeUtils();
        
        utils.addDebug(currentEntry, "\nüöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
        // 1. Naƒç√≠taj nastavenia
        var settings = getDefaultsSettings();
        if (!settings) {
            utils.addDebug(currentEntry, "‚ùå Nepodarilo sa naƒç√≠ta≈• nastavenia");
            return;
        }
        
        utils.addDebug(currentEntry, "üìã Nastavenia: enabled=" + settings.enabled + ", groupId=" + settings.groupId);
        
        // 2. Skontroluj ƒçi je funkcia zapnut√°
        if (!settings.enabled) {
            utils.addDebug(currentEntry, "‚è∏Ô∏è Group notifik√°cie s√∫ vypnut√©");
            return;
        }
        
        // 3. Skontroluj group ID
        if (!settings.groupId) {
            utils.addError(currentEntry, "Ch√Ωba Telegram Group ID v nastaveniach", "main");
            utils.addDebug(currentEntry, "üí° TIP: Do poƒæa 'Telegram Doch√°dzka ID' zadaj:");
            utils.addDebug(currentEntry, "   ‚Ä¢ Pre skupinu: -1001234567890");
            utils.addDebug(currentEntry, "   ‚Ä¢ Pre t√©mu: -1001234567890/123");
            return;
        }
        
        // 4. Z√≠skaj API token
        var botToken = getTelegramToken();
        if (!botToken) {
            utils.addError(currentEntry, "Telegram API token nen√°jden√Ω", "main");
            return;
        }
        
        utils.addDebug(currentEntry, "‚úÖ API token naƒç√≠tan√Ω");
        
        // 5. Vytvor s√∫hrnn√∫ spr√°vu
        var sprava = vytvorSuhrnnuSpravu(settings);
        utils.addDebug(currentEntry, "üìù S√∫hrnn√° spr√°va vytvoren√° (" + sprava.length + " znakov)");
        
        // 6. Po≈°li spr√°vu do skupiny
        // Podpora pre form√°ty: "groupId" alebo "groupId/threadId"
        var groupId = settings.groupId;
        var threadId = null;
        
        // Detekcia form√°tu s thread ID
        if (settings.groupId && settings.groupId.toString().indexOf("/") > -1) {
            var parts = settings.groupId.toString().split("/");
            groupId = parts[0].trim();
            threadId = parts[1] ? parts[1].trim() : null;
            
            utils.addDebug(currentEntry, "üìå Detekovan√° t√©ma v supergroup:");
            utils.addDebug(currentEntry, "   ‚Ä¢ Group ID: " + groupId);
            utils.addDebug(currentEntry, "   ‚Ä¢ Thread ID: " + threadId);
        } else {
            utils.addDebug(currentEntry, "üìå Obyƒçajn√° skupina: " + groupId);
        }
        
        // Valid√°cia group ID
        if (!groupId || groupId === "") {
            utils.addError(currentEntry, "Neplatn√© Group ID", "main");
            return;
        }
        
        var result = posliTelegramSpravu(groupId, sprava, botToken, threadId);
        
        if (result.success) {
            utils.addDebug(currentEntry, "‚úÖ Spr√°va √∫spe≈°ne odoslan√° do skupiny");
            utils.addDebug(currentEntry, "   ‚Ä¢ Message ID: " + (result.messageId || "N/A"));
            if (threadId) {
                utils.addDebug(currentEntry, "   ‚Ä¢ Thread ID: " + threadId);
            }
            
            // 7. Zaznamenaj notifik√°ciu
            if (zaznamenajNotifikaciu(groupId, sprava, result.messageId, true, threadId)) {
                utils.addDebug(currentEntry, "‚úÖ Notifik√°cia zaznamenan√° v kni≈ænici");
            }
            
            utils.addDebug(currentEntry, "\n‚úÖ === GROUP NOTIFICATION √öSPE≈†N√Å ===");
        } else {
            utils.addError(currentEntry, "Nepodarilo sa posla≈• spr√°vu do skupiny", "main");
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "main-critical");
    }
}

// Spustenie
main();