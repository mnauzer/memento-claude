// ==============================================
// DELETE TRIGGER - ASISTANTO NOTIFICATIONS
// Verzia: 1.0 | D√°tum: 20.08.2025 | Autor: ASISTANTO
// Kni≈ænica: ASISTANTO Notifications | Trigger: Deleting
// ==============================================
// üìã FUNKCIA:
//    - Spracov√°va vymaz√°vanie notifikaƒçn√Ωch z√°znamov
//    - Cleanup pending notifik√°ci√≠
//    - Vymaz√°vanie Telegram spr√°v (ak je mo≈æn√©)
//    - N8N workflow notifik√°cia o vymazan√≠
//    - Aktualiz√°cia statusov s√∫visiacich z√°znamov
// ‚úÖ v1.0 IMPLEMENT√ÅCIA:
//    - Vyu≈æitie ASISTANTO Notifications Helper funkci√≠
//    - Modul√°rne vyu≈æitie MementoUtils a MementoAI
//    - Support pre Before/After delete f√°zy
//    - Robustn√© error handling s rollback mo≈ænos≈•ami
// ==============================================

// Import kni≈æn√≠c
var utils = MementoUtils;
var notifHelper = ASISTANTONotifications;
var currentEntry = entry();

// ==============================================
// KONFIGUR√ÅCIA
// ==============================================

var CONFIG = {
    debug: true,
    version: "1.0",
    scriptName: "ASISTANTO Notifications Delete Trigger",
    
    // Vyu≈æ√≠vame Helper CONFIG pre konzistentnos≈•
    helperConfig: notifHelper.CONFIG,
    
    // Delete-≈°pecifick√© nastavenia
    settings: {
        cleanupTelegramMessages: true,
        notifyN8N: true,
        cleanupRelatedNotifications: true,
        backupBeforeDelete: true,
        confirmationRequired: false, // Pre future use
        maxCleanupRetries: 3
    },
    
    // Kni≈ænice
    libraries: {
        defaults: "ASISTANTO Defaults"
    },
    
    // Cleanup actions
    cleanupActions: {
        CANCEL_PENDING: "cancel_pending",
        DELETE_TELEGRAM: "delete_telegram", 
        UPDATE_RELATED: "update_related",
        NOTIFY_N8N: "notify_n8n",
        CREATE_BACKUP: "create_backup"
    }
};

// Glob√°lne premenn√© pre cleanup tracking
var cleanupResults = {
    telegramDeleted: 0,
    notificationsCancelled: 0,
    relatedUpdated: 0,
    backupCreated: false,
    n8nNotified: false,
    errors: []
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.clearLogs(currentEntry, false);
        utils.addDebug(currentEntry, "üóëÔ∏è === ≈†TART DELETE TRIGGER ===");
        utils.addDebug(currentEntry, "üìã Script: " + CONFIG.scriptName + " v" + CONFIG.version);
        utils.addDebug(currentEntry, "üÜî Entry ID: " + currentEntry.field("ID"));
        
        // 1. Valid√°cia entry a z√≠skanie z√°kladn√Ωch √∫dajov
        var entryData = gatherEntryData();
        if (!entryData) {
            utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• d√°ta entry", CONFIG.scriptName);
            return false;
        }
        
        utils.addDebug(currentEntry, "üìä Status: " + entryData.status + " | Typ: " + entryData.type);
        
        // 2. Vytvor backup ak je povolen√Ω
        if (CONFIG.settings.backupBeforeDelete) {
            createEntryBackup(entryData);
        }
        
        // 3. Cleanup Telegram spr√°v (ak boli odoslan√©)
        if (CONFIG.settings.cleanupTelegramMessages && entryData.messageId) {
            cleanupTelegramMessage(entryData);
        }
        
        // 4. Zru≈° s√∫visiace pending notifik√°cie
        if (CONFIG.settings.cleanupRelatedNotifications) {
            cleanupRelatedNotifications(entryData);
        }
        
        // 5. N8N workflow notifik√°cia
        if (CONFIG.settings.notifyN8N) {
            notifyN8NAboutDeletion(entryData);
        }
        
        // 6. Final cleanup summary
        logCleanupSummary(entryData);
        
        utils.addDebug(currentEntry, "‚úÖ === DELETE TRIGGER DOKONƒåEN√ù ===");
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v Delete Trigger: " + error.toString(), CONFIG.scriptName, error);
        
        // Pokus o emergency cleanup
        try {
            logEmergencyState(error);
        } catch (emergencyError) {
            // Posledn√° z√°chrana - aspo≈à zapisuj error
            currentEntry.set("Error_Log", "EMERGENCY: " + error.toString() + " | " + emergencyError.toString());
        }
        
        return false;
    }
}

// ==============================================
// Z√çSKANIE D√ÅT ENTRY
// ==============================================

function gatherEntryData() {
    try {
        var entryData = {
            id: currentEntry.field("ID"),
            status: utils.safeGet(currentEntry, "Status", ""),
            type: utils.safeGet(currentEntry, "Typ spr√°vy", ""),
            priority: utils.safeGet(currentEntry, "Priorita", ""),
            subject: utils.safeGet(currentEntry, "Predmet", ""),
            message: utils.safeGet(currentEntry, "Spr√°va", ""),
            
            // Telegram ≈°pecifick√©
            messageId: utils.safeGet(currentEntry, "Message ID", ""),
            chatId: utils.safeGet(currentEntry, "Chat ID", ""),
            threadId: utils.safeGet(currentEntry, "Thread ID", ""),
            messageUrl: utils.safeGet(currentEntry, "Message URL", ""),
            
            // ƒåasovanie
            created: utils.safeGet(currentEntry, "Vytvoren√©", null),
            scheduledFor: utils.safeGet(currentEntry, "Posla≈• o", null),
            sentAt: utils.safeGet(currentEntry, "Odoslan√© o", null),
            
            // Source info
            sourceLibrary: utils.safeGet(currentEntry, "Zdrojov√° kni≈ænica", ""),
            sourceId: utils.safeGet(currentEntry, "Zdrojov√Ω ID", ""),
            creator: utils.safeGet(currentEntry, "Vytvoril", ""),
            
            // Adres√°ti
            addresseeType: utils.safeGet(currentEntry, "Adres√°t", ""),
            employees: utils.safeGetLinks(currentEntry, "Zamestnanec"),
            groups: utils.safeGetLinks(currentEntry, "Skupina/T√©ma"),
            clients: utils.safeGetLinks(currentEntry, "Klient")
        };
        
        // Valid√°cia
        if (!entryData.id) {
            utils.addError(currentEntry, "Entry nem√° ID", "gatherEntryData");
            return null;
        }
        
        utils.addDebug(currentEntry, "üìã Entry d√°ta z√≠skan√© √∫spe≈°ne");
        return entryData;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ entry d√°t: " + error.toString(), "gatherEntryData", error);
        return null;
    }
}

// ==============================================
// BACKUP FUNKCIE
// ==============================================

function createEntryBackup(entryData) {
    try {
        utils.addDebug(currentEntry, "üíæ Vytv√°ranie backup entry...");
        
        // Vytvor backup z√°znam v info poli
        var backupData = {
            deletedAt: moment().toISOString(),
            deletedBy: user().name(),
            originalId: entryData.id,
            
            // Kompletn√© d√°ta
            notificationData: {
                status: entryData.status,
                type: entryData.type,
                priority: entryData.priority,
                subject: entryData.subject,
                message: entryData.message,
                addresseeType: entryData.addresseeType,
                
                telegram: {
                    messageId: entryData.messageId,
                    chatId: entryData.chatId,
                    threadId: entryData.threadId,
                    messageUrl: entryData.messageUrl
                },
                
                timing: {
                    created: entryData.created,
                    scheduledFor: entryData.scheduledFor,
                    sentAt: entryData.sentAt
                },
                
                source: {
                    library: entryData.sourceLibrary,
                    id: entryData.sourceId,
                    creator: entryData.creator
                },
                
                addressees: {
                    employees: entryData.employees.map(function(emp) {
                        return {
                            id: emp.field("ID"),
                            name: utils.formatEmployeeName(emp)
                        };
                    }),
                    groups: entryData.groups.map(function(group) {
                        return {
                            id: group.field("ID"),
                            name: utils.safeGet(group, "N√°zov skupiny", "")
                        };
                    }),
                    clients: entryData.clients.map(function(client) {
                        return {
                            id: client.field("ID"),
                            name: utils.safeGet(client, "N√°zov", "")
                        };
                    })
                }
            },
            
            // Cleanup metadata
            cleanupInfo: {
                scriptVersion: CONFIG.version,
                cleanupActions: Object.keys(CONFIG.cleanupActions),
                backupCreated: true
            }
        };
        
        // Ulo≈æ backup do info poƒæa
        var backupText = "üóëÔ∏è NOTIFICATION DELETED - BACKUP DATA\n";
        backupText += "=====================================\n";
        backupText += JSON.stringify(backupData, null, 2);
        
        var existingInfo = utils.safeGet(currentEntry, "info", "");
        utils.safeSet(currentEntry, "info", existingInfo + "\n\n" + backupText);
        
        cleanupResults.backupCreated = true;
        utils.addDebug(currentEntry, "‚úÖ Backup vytvoren√Ω √∫spe≈°ne");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Backup creation failed: " + error.toString(), "createEntryBackup", error);
        cleanupResults.errors.push("backup_failed: " + error.toString());
        return false;
    }
}

// ==============================================
// TELEGRAM CLEANUP
// ==============================================

function cleanupTelegramMessage(entryData) {
    try {
        utils.addDebug(currentEntry, "üì± Cleanup Telegram spr√°vy...");
        
        if (!entryData.messageId || !entryData.chatId) {
            utils.addDebug(currentEntry, "‚è≠Ô∏è ≈Ωiadne Telegram d√°ta na cleanup");
            return false;
        }
        
        utils.addDebug(currentEntry, "üóëÔ∏è Ma≈æem Telegram spr√°vu: " + entryData.messageId + " v chat: " + entryData.chatId);
        
        // Pok√∫s sa vymaza≈• spr√°vu cez utils (MementoTelegram)
        var deleteResult = utils.deleteTelegramMessage(entryData.chatId, entryData.messageId);
        
        if (deleteResult && deleteResult.success) {
            cleanupResults.telegramDeleted++;
            utils.addDebug(currentEntry, "‚úÖ Telegram spr√°va vymazan√° √∫spe≈°ne");
            
            // Clear Telegram fields
            utils.safeSet(currentEntry, "Message ID", "");
            utils.safeSet(currentEntry, "Message URL", "");
            
            return true;
        } else {
            var errorMsg = deleteResult ? deleteResult.error : "Unknown error";
            utils.addDebug(currentEntry, "‚ö†Ô∏è Telegram spr√°vu sa nepodarilo vymaza≈•: " + errorMsg);
            cleanupResults.errors.push("telegram_delete_failed: " + errorMsg);
            
            return false;
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Telegram cleanup error: " + error.toString(), "cleanupTelegramMessage", error);
        cleanupResults.errors.push("telegram_cleanup_error: " + error.toString());
        return false;
    }
}

// ==============================================
// CLEANUP S√öVISIACICH NOTIFIK√ÅCI√ç
// ==============================================

function cleanupRelatedNotifications(entryData) {
    try {
        utils.addDebug(currentEntry, "üîó Cleanup s√∫visiacich notifik√°ci√≠...");
        
        if (!entryData.sourceLibrary || !entryData.sourceId) {
            utils.addDebug(currentEntry, "‚è≠Ô∏è ≈Ωiadne source info - preskakujem related cleanup");
            return false;
        }
        
        // N√°jdi v≈°etky notifik√°cie z rovnak√©ho zdroja
        var notifLib = libByName(CONFIG.helperConfig.notificationsLibrary);
        if (!notifLib) {
            utils.addError(currentEntry, "Notifications library nen√°jden√°", "cleanupRelatedNotifications");
            return false;
        }
        
        var relatedNotifications = notifLib.find("Zdrojov√Ω ID", entryData.sourceId);
        var updatedCount = 0;
        
        utils.addDebug(currentEntry, "üîç Na≈°iel som " + relatedNotifications.length + " s√∫visiacich notifik√°ci√≠");
        
        for (var i = 0; i < relatedNotifications.length; i++) {
            var relatedNotif = relatedNotifications[i];
            
            // Preskaƒç seba sam√©ho
            if (relatedNotif.field("ID") === entryData.id) {
                continue;
            }
            
            var relatedStatus = relatedNotif.field("Status");
            var relatedLibrary = relatedNotif.field("Zdrojov√° kni≈ænica");
            
            // Aktualizuj len ak je z rovnakej kni≈ænice a m√° relevantn√Ω status
            if (relatedLibrary === entryData.sourceLibrary && 
                (relatedStatus === "ƒåak√°" || relatedStatus === "Napl√°novan√©")) {
                
                try {
                    // Zru≈° pending notifik√°ciu
                    utils.safeSet(relatedNotif, "Status", "Zru≈°en√©");
                    utils.safeSet(relatedNotif, "Posledn√° chyba", "Source entry deleted: " + entryData.sourceLibrary + " #" + entryData.sourceId);
                    
                    // Pridaj info o zru≈°en√≠
                    utils.addInfo(relatedNotif, "Notifik√°cia zru≈°en√°", {
                        reason: "Source entry deleted",
                        deletedEntryId: entryData.id,
                        deletedBy: user().name(),
                        deletedAt: moment().format("DD.MM.YYYY HH:mm:ss")
                    });
                    
                    updatedCount++;
                    utils.addDebug(currentEntry, "‚úÖ Zru≈°en√° notifik√°cia ID: " + relatedNotif.field("ID"));
                    
                } catch (updateError) {
                    utils.addError(currentEntry, "Chyba pri aktualiz√°cii notifik√°cie #" + relatedNotif.field("ID") + ": " + updateError.toString(), "cleanupRelatedNotifications");
                    cleanupResults.errors.push("related_update_error: " + updateError.toString());
                }
            }
        }
        
        cleanupResults.relatedUpdated = updatedCount;
        cleanupResults.notificationsCancelled = updatedCount;
        
        utils.addDebug(currentEntry, "‚úÖ Cleanup dokonƒçen√Ω - aktualizovan√Ωch " + updatedCount + " notifik√°ci√≠");
        return updatedCount > 0;
        
    } catch (error) {
        utils.addError(currentEntry, "Related notifications cleanup error: " + error.toString(), "cleanupRelatedNotifications", error);
        cleanupResults.errors.push("related_cleanup_error: " + error.toString());
        return false;
    }
}

// ==============================================
// N8N NOTIFIK√ÅCIA
// ==============================================

function notifyN8NAboutDeletion(entryData) {
    try {
        utils.addDebug(currentEntry, "üîî N8N notifik√°cia o vymazan√≠...");
        
        // Pou≈æij Helper funkciu pre N8N ak je dostupn√°
        if (notifHelper.triggerN8NIfConfigured) {
            
            // Priprav ≈°peci√°lny payload pre deletion event
            var deletionPayload = {
                event: "notification_deleted",
                deletedNotification: entryData,
                cleanup: cleanupResults,
                metadata: {
                    deletedAt: moment().toISOString(),
                    deletedBy: user().name(),
                    scriptVersion: CONFIG.version,
                    hasBackup: cleanupResults.backupCreated
                }
            };
            
            // Doƒçasne uprav current entry pre N8N call
            var originalInfo = currentEntry.field("info") || "";
            utils.safeSet(currentEntry, "info", originalInfo + "\n\nN8N_DELETION_EVENT: " + JSON.stringify(deletionPayload));
            
            var n8nResult = notifHelper.triggerN8NIfConfigured(currentEntry, {
                includeMetadata: true,
                customPayload: deletionPayload,
                scriptVersion: CONFIG.version
            });
            
            if (n8nResult && n8nResult.success) {
                cleanupResults.n8nNotified = true;
                utils.addDebug(currentEntry, "‚úÖ N8N notifikovan√Ω √∫spe≈°ne o vymazan√≠");
                return true;
            } else {
                var reason = n8nResult ? (n8nResult.reason || n8nResult.error) : "Unknown error";
                utils.addDebug(currentEntry, "‚ö†Ô∏è N8N notifik√°cia zlyhala: " + reason);
                cleanupResults.errors.push("n8n_notification_failed: " + reason);
                return false;
            }
            
        } else {
            utils.addDebug(currentEntry, "‚è≠Ô∏è N8N Helper funkcia nie je dostupn√°");
            return false;
        }
        
    } catch (error) {
        utils.addError(currentEntry, "N8N notification error: " + error.toString(), "notifyN8NAboutDeletion", error);
        cleanupResults.errors.push("n8n_notification_error: " + error.toString());
        return false;
    }
}

// ==============================================
// LOGGING A SUMMARY
// ==============================================

function logCleanupSummary(entryData) {
    try {
        utils.addDebug(currentEntry, "\nüìä === CLEANUP SUMMARY ===");
        utils.addDebug(currentEntry, "üóëÔ∏è Telegram spr√°vy vymazan√©: " + cleanupResults.telegramDeleted);
        utils.addDebug(currentEntry, "‚ùå Notifik√°cie zru≈°en√©: " + cleanupResults.notificationsCancelled);
        utils.addDebug(currentEntry, "üîÑ S√∫visiace aktualizovan√©: " + cleanupResults.relatedUpdated);
        utils.addDebug(currentEntry, "üíæ Backup vytvoren√Ω: " + (cleanupResults.backupCreated ? "√Åno" : "Nie"));
        utils.addDebug(currentEntry, "üîî N8N notifikovan√Ω: " + (cleanupResults.n8nNotified ? "√Åno" : "Nie"));
        utils.addDebug(currentEntry, "‚ö†Ô∏è Chyby: " + cleanupResults.errors.length);
        
        if (cleanupResults.errors.length > 0) {
            utils.addDebug(currentEntry, "\n‚ùå ZOZNAM CH√ùB:");
            for (var i = 0; i < cleanupResults.errors.length; i++) {
                utils.addDebug(currentEntry, "  ‚Ä¢ " + cleanupResults.errors[i]);
            }
        }
        
        // Vytvor fin√°lny info z√°znam
        var summaryInfo = "üóëÔ∏è NOTIFICATION DELETE SUMMARY\n";
        summaryInfo += "=====================================\n";
        summaryInfo += "üìÖ Vymazan√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        summaryInfo += "üë§ Vymazal: " + user().name() + "\n";
        summaryInfo += "üÜî Entry ID: " + entryData.id + "\n";
        summaryInfo += "üìã Typ: " + entryData.type + "\n";
        summaryInfo += "üìä Status: " + entryData.status + "\n\n";
        
        summaryInfo += "üßπ CLEANUP ACTIONS:\n";
        summaryInfo += "‚Ä¢ Telegram spr√°vy vymazan√©: " + cleanupResults.telegramDeleted + "\n";
        summaryInfo += "‚Ä¢ Notifik√°cie zru≈°en√©: " + cleanupResults.notificationsCancelled + "\n";
        summaryInfo += "‚Ä¢ S√∫visiace aktualizovan√©: " + cleanupResults.relatedUpdated + "\n";
        summaryInfo += "‚Ä¢ Backup vytvoren√Ω: " + (cleanupResults.backupCreated ? "‚úÖ" : "‚ùå") + "\n";
        summaryInfo += "‚Ä¢ N8N notifikovan√Ω: " + (cleanupResults.n8nNotified ? "‚úÖ" : "‚ùå") + "\n\n";
        
        if (cleanupResults.errors.length > 0) {
            summaryInfo += "‚ö†Ô∏è CHYBY (" + cleanupResults.errors.length + "):\n";
            for (var j = 0; j < cleanupResults.errors.length; j++) {
                summaryInfo += "‚Ä¢ " + cleanupResults.errors[j] + "\n";
            }
            summaryInfo += "\n";
        }
        
        summaryInfo += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        summaryInfo += "üìö Helper: " + (notifHelper ? notifHelper.version : "N/A");
        
        // Pridaj summary k existuj√∫cemu info
        var existingInfo = utils.safeGet(currentEntry, "info", "");
        utils.safeSet(currentEntry, "info", existingInfo + "\n\n" + summaryInfo);
        
        utils.addInfo(currentEntry, "Delete trigger dokonƒçen√Ω", {
            telegramDeleted: cleanupResults.telegramDeleted,
            notificationsCancelled: cleanupResults.notificationsCancelled,
            relatedUpdated: cleanupResults.relatedUpdated,
            errors: cleanupResults.errors.length,
            success: cleanupResults.errors.length === 0
        });
        
    } catch (error) {
        utils.addError(currentEntry, "Summary logging error: " + error.toString(), "logCleanupSummary", error);
    }
}

function logEmergencyState(error) {
    try {
        var emergencyInfo = "üö® EMERGENCY DELETE STATE\n";
        emergencyInfo += "========================\n";
        emergencyInfo += "‚ùå Critical Error: " + error.toString() + "\n";
        emergencyInfo += "‚è∞ Time: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        emergencyInfo += "üë§ User: " + user().name() + "\n";
        emergencyInfo += "üÜî Entry ID: " + (currentEntry.field("ID") || "unknown") + "\n";
        emergencyInfo += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n\n";
        
        emergencyInfo += "üìä Partial cleanup results:\n";
        emergencyInfo += "‚Ä¢ Telegram deleted: " + cleanupResults.telegramDeleted + "\n";
        emergencyInfo += "‚Ä¢ Notifications cancelled: " + cleanupResults.notificationsCancelled + "\n";
        emergencyInfo += "‚Ä¢ Related updated: " + cleanupResults.relatedUpdated + "\n";
        emergencyInfo += "‚Ä¢ Backup created: " + cleanupResults.backupCreated + "\n";
        emergencyInfo += "‚Ä¢ N8N notified: " + cleanupResults.n8nNotified + "\n";
        emergencyInfo += "‚Ä¢ Previous errors: " + cleanupResults.errors.length;
        
        var existingInfo = utils.safeGet(currentEntry, "info", "");
        utils.safeSet(currentEntry, "info", existingInfo + "\n\n" + emergencyInfo);
        
    } catch (emergencyError) {
        // Ak sa ani emergency logging nepodar√≠, aspo≈à do Debug_Log
        var emergencyDebug = "EMERGENCY: " + error.toString() + " | " + moment().format("HH:mm:ss");
        var existingDebug = currentEntry.field("Debug_Log") || "";
        currentEntry.set("Debug_Log", existingDebug + "\n" + emergencyDebug);
    }
}

// ==============================================
// SPUSTENIE HLAVNEJ FUNKCIE
// ==============================================

main();