// ==============================================
// MEMENTO DATABASE - MATERI√ÅL PREPOƒåET CENY ACTION
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Materi√°l | Trigger: Manual Action
// ==============================================
// üìã FUNKCIA:
//    - Manu√°lny prepoƒçet cien materi√°lu
//    - Zadanie n√°kupnej ceny cez dialogov√© okno
//    - Kontrola zmeny n√°kupnej ceny podƒæa nastaven√≠
//    - Automatick√Ω prepoƒçet predajn√Ωch cien
//    - Aktualiz√°cia ikon podƒæa zmeny ceny
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoBusiness (business logika pre ceny materi√°lu)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Materi√°l Prepoƒçet ceny Action",
    version: "1.0.0",

    // Kni≈ænice
    libraries: {
        inventory: (centralConfig.libraries && centralConfig.libraries.inventory) || "Materi√°l",
        vatRates: (centralConfig.libraries && centralConfig.libraries.vatRatesLib) || "sadzby DPH"
    },

    // Polia Materi√°l
    materialFields: {
        name: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.name) || "N√°zov",
        purchasePrice: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePrice) || "N√°kupn√° cena",
        purchasePriceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceWithVat) || "N√°kupn√° cena s DPH",
        price: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.price) || "Cena",
        priceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceWithVat) || "Cena s DPH",
        priceCalculation: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceCalculation) || "Prepoƒçet ceny",
        markupPercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.markupPercentage) || "Obchodn√° prir√°≈æka",
        priceRounding: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceRounding) || "Zaokr√∫hƒæovanie cien",
        roundingValue: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.roundingValue) || "Hodnota zaokr√∫henia",
        vatRate: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.vatRate) || "sadzba DPH",
        purchasePriceChange: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceChange) || "Zmena n√°kupnej ceny",
        changePercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.changePercentage) || "Percento zmeny",
        icons: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.icons) || "icons",

        // Spoloƒçn√© polia
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },

    // Ikony
    icons: (centralConfig.icons) || {
        start: "üöÄ",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è",
        money: "üí∞",
        calculation: "üßÆ",
        material: "üì¶"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.clearLogs(currentEntry, [CONFIG.materialFields.debugLog, CONFIG.materialFields.errorLog]);
        utils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");

        // Z√≠skanie n√°zvu materi√°lu pre dial√≥g
        var materialName = utils.safeGet(currentEntry, CONFIG.materialFields.name, "Nezn√°my materi√°l");
        var currentPurchasePrice = parseFloat(utils.safeGet(currentEntry, CONFIG.materialFields.purchasePrice, 0));

        utils.addDebug(currentEntry, CONFIG.icons.material + " Materi√°l: " + materialName);
        utils.addDebug(currentEntry, CONFIG.icons.info + " Aktu√°lna n√°kupn√° cena: " + utils.formatMoney(currentPurchasePrice));

        // Zobrazenie dial√≥gu pre zadanie novej n√°kupnej ceny
        showPurchasePriceDialog(materialName, currentPurchasePrice);

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        showErrorDialog("Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// DIAL√ìGOV√â FUNKCIE
// ==============================================

/**
 * Zobraz√≠ dial√≥g pre zadanie novej n√°kupnej ceny
 */
function showPurchasePriceDialog(materialName, currentPrice) {
    try {
        var dialogMessage = "üí∞ PREPOƒåET CENY MATERI√ÅLU\n\n";
        dialogMessage += "üì¶ Materi√°l: " + materialName + "\n";
        if (currentPrice > 0) {
            dialogMessage += "üí∂ Aktu√°lna n√°kupn√° cena: " + utils.formatMoney(currentPrice) + "\n\n";
        } else {
            dialogMessage += "üí∂ Aktu√°lna n√°kupn√° cena: nie je nastaven√°\n\n";
        }
        dialogMessage += "Zadajte nov√∫ n√°kupn√∫ cenu:";

        // Vytvorenie dial√≥gu s input poƒæom
        dialog()
            .title("Prepoƒçet ceny materi√°lu")
            .text(dialogMessage)
            .textInput("purchasePrice", "N√°kupn√° cena", currentPrice > 0 ? currentPrice.toString() : "")
            .positiveButton("PREPOƒå√çTA≈§", function(results) {
                processPriceCalculation(results.purchasePrice, materialName);
            })
            .negativeButton("ZRU≈†I≈§", function() {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Prepoƒçet zru≈°en√Ω pou≈æ√≠vateƒæom");
                showCancelDialog();
            })
            .show();

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri zobrazen√≠ dial√≥gu", "showPurchasePriceDialog", error);
        showErrorDialog("Chyba pri zobrazen√≠ dial√≥gu!\n\n" + error.toString());
    }
}

/**
 * Spracuje prepoƒçet cien s novou n√°kupnou cenou
 */
function processPriceCalculation(inputPrice, materialName) {
    try {
        // Valid√°cia vstupu
        var purchasePrice = parseFloat(inputPrice);
        if (isNaN(purchasePrice) || purchasePrice < 0) {
            showErrorDialog("‚ùå CHYBA VSTUPU\n\nN√°kupn√° cena mus√≠ by≈• ƒç√≠slo v√§ƒç≈°ie alebo rovn√© 0!\n\nZadali ste: '" + inputPrice + "'");
            return false;
        }

        utils.addDebug(currentEntry, CONFIG.icons.money + " Nov√° n√°kupn√° cena: " + utils.formatMoney(purchasePrice));

        // Zobrazenie potvrdzovacieho dial√≥gu
        var confirmMessage = "üí∞ POTVRDENIE PREPOƒåTU\n\n";
        confirmMessage += "üì¶ Materi√°l: " + materialName + "\n";
        confirmMessage += "üí∂ Nov√° n√°kupn√° cena: " + utils.formatMoney(purchasePrice) + "\n\n";
        confirmMessage += "‚öôÔ∏è Prepoƒçet sa vykon√° podƒæa nastaven√≠ materi√°lu:\n";

        var priceCalculation = utils.safeGet(currentEntry, CONFIG.materialFields.priceCalculation, "");
        if (priceCalculation) {
            confirmMessage += "‚Ä¢ Prepoƒçet ceny: " + priceCalculation + "\n";
        }

        var markupPercentage = parseFloat(utils.safeGet(currentEntry, CONFIG.materialFields.markupPercentage, 0));
        if (markupPercentage > 0) {
            confirmMessage += "‚Ä¢ Obchodn√° prir√°≈æka: " + markupPercentage + "%\n";
        }

        var vatRateType = utils.safeGet(currentEntry, CONFIG.materialFields.vatRate, "Z√°kladn√°");
        confirmMessage += "‚Ä¢ Sadzba DPH: " + vatRateType + "\n";

        var priceRounding = utils.safeGet(currentEntry, CONFIG.materialFields.priceRounding, "");
        if (priceRounding && priceRounding !== "Nezaokr√∫hƒæova≈•") {
            var roundingValue = utils.safeGet(currentEntry, CONFIG.materialFields.roundingValue, "");
            confirmMessage += "‚Ä¢ Zaokr√∫hƒæovanie: " + priceRounding + " (" + roundingValue + ")\n";
        }

        confirmMessage += "\n‚ö†Ô∏è Aktu√°lne ceny bud√∫ prep√≠san√©!\n\nPokraƒçova≈•?";

        dialog()
            .title("Potvrdenie prepoƒçtu")
            .text(confirmMessage)
            .positiveButton("√ÅNO√ç", function() {
                executeCalculation(purchasePrice, materialName);
            })
            .negativeButton("NIE", function() {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Prepoƒçet zru≈°en√Ω po potvrden√≠");
                showCancelDialog();
            })
            .show();

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ vstupu", "processPriceCalculation", error);
        showErrorDialog("Chyba pri spracovan√≠!\n\n" + error.toString());
    }
}

/**
 * Vykon√° skutoƒçn√Ω prepoƒçet cien
 */
function executeCalculation(purchasePrice, materialName) {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.calculation + " Sp√∫≈°≈•am prepoƒçet cien...");

        // Pou≈æitie funkcie z MementoBusiness modulu
        var result = utils.calculateAndUpdateMaterialPrices(
            currentEntry,
            purchasePrice,
            new Date() // Pou≈æije aktu√°lny d√°tum
        );

        if (result.success) {
            // √öspe≈°n√Ω prepoƒçet
            utils.addDebug(currentEntry, CONFIG.icons.success + " Prepoƒçet cien √∫spe≈°ne dokonƒçen√Ω");

            var successMessage = "‚úÖ PREPOƒåET √öSPE≈†N√ù!\n\n";
            successMessage += "üì¶ Materi√°l: " + materialName + "\n";
            successMessage += "üí∂ N√°kupn√° cena: " + utils.formatMoney(purchasePrice) + "\n";
            successMessage += "üí∞ Predajn√° cena: " + utils.formatMoney(result.sellingPrice) + "\n";
            successMessage += "üí∞ Cena s DPH: " + utils.formatMoney(result.priceWithVat) + "\n\n";
            successMessage += "üìä V≈°etky ceny boli aktualizovan√©!";

            if (result.updated) {
                successMessage += "\n\nüìù Info z√°znam bol vytvoren√Ω s podrobnos≈•ami prepoƒçtu.";
            }

            showSuccessDialog(successMessage);

        } else {
            // Prepoƒçet zlyhal
            utils.addError(currentEntry, "Prepoƒçet cien zlyhal", "executeCalculation");
            showErrorDialog("‚ùå CHYBA PREPOƒåTU\n\nPrepoƒçet cien sa nepodarilo dokonƒçi≈•.\n\nSkontrolujte nastavenia materi√°lu a sk√∫ste znova.");
        }

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vykon√°van√≠ prepoƒçtu", "executeCalculation", error);
        showErrorDialog("Kritick√° chyba pri prepoƒçte!\n\n" + error.toString());
    }
}

// ==============================================
// POMOCN√â DIAL√ìGY
// ==============================================

/**
 * Zobraz√≠ dial√≥g s chybou
 */
function showErrorDialog(message) {
    dialog()
        .title("CHYBA")
        .text(message)
        .positiveButton("OK", function() {})
        .show();
}

/**
 * Zobraz√≠ dial√≥g s √∫spechom
 */
function showSuccessDialog(message) {
    dialog()
        .title("√öSPECH")
        .text(message)
        .positiveButton("OK", function() {})
        .show();
}

/**
 * Zobraz√≠ dial√≥g pri zru≈°en√≠
 */
function showCancelDialog() {
    dialog()
        .title("Zru≈°en√©")
        .text("‚ùå Prepoƒçet ceny bol zru≈°en√Ω")
        .positiveButton("OK", function() {})
        .show();
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();