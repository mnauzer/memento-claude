// ==============================================
// MEMENTO DATABASE - MATERI√ÅL PREPOƒåET CENY ACTION
// Verzia: 1.2 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Materi√°l | Trigger: Manual Action
// ==============================================
// üìã FUNKCIA:
//    - Manu√°lny prepoƒçet cien materi√°lu
//    - Argumenty: "n√°kupn√° cena" (ƒç√≠slo) + "dph" (s DPH/bez DPH)
//    - Automatick√Ω prepoƒçet ceny bez DPH ak je zadan√° s DPH
//    - Kontrola zmeny n√°kupnej ceny podƒæa nastaven√≠
//    - Automatick√Ω prepoƒçet predajn√Ωch cien
//    - Aktualiz√°cia ikon podƒæa zmeny ceny
//    - Automatick√© vytvorenie/aktualiz√°cia cenovej hist√≥rie
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoBusiness (business logika pre ceny materi√°lu)
// üìù ARGUMENTY:
//    - "n√°kupn√° cena" (Number): Nov√° n√°kupn√° cena materi√°lu
//    - "dph" (Options: "s DPH", "bez DPH"): ƒåi je zadan√° cena s/bez DPH
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Materi√°l Prepoƒçet ceny Action",
    version: "1.2.0",

    // Kni≈ænice
    libraries: {
        inventory: (centralConfig.libraries && centralConfig.libraries.inventory) || "Materi√°l",
        vatRates: (centralConfig.libraries && centralConfig.libraries.vatRatesLib) || "sadzby DPH"
    },

    // Polia Materi√°l
    materialFields: {
        name: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.name) || "N√°zov",
        purchasePrice: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePrice) || "N√°kupn√° cena",
        purchasePriceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceWithVat) || "N√°kupn√° cena s DPH",
        price: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.price) || "Cena",
        priceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceWithVat) || "Cena s DPH",
        priceCalculation: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceCalculation) || "Prepoƒçet ceny",
        markupPercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.markupPercentage) || "Obchodn√° prir√°≈æka",
        priceRounding: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceRounding) || "Zaokr√∫hƒæovanie cien",
        roundingValue: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.roundingValue) || "Hodnota zaokr√∫henia",
        vatRate: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.vatRate) || "sadzba DPH",
        purchasePriceChange: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceChange) || "Zmena n√°kupnej ceny",
        changePercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.changePercentage) || "Percento zmeny",
        icons: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.icons) || "icons",

        // Spoloƒçn√© polia
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },

    // Ikony
    icons: (centralConfig.icons) || {
        start: "üöÄ",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è",
        money: "üí∞",
        calculation: "üßÆ",
        material: "üì¶"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.clearLogs(currentEntry, [CONFIG.materialFields.debugLog, CONFIG.materialFields.errorLog]);
        utils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");

        // Z√≠skanie n√°zvu materi√°lu a aktu√°lnej ceny
        var materialName = utils.safeGet(currentEntry, CONFIG.materialFields.name, "Nezn√°my materi√°l");
        var currentPurchasePrice = parseFloat(utils.safeGet(currentEntry, CONFIG.materialFields.purchasePrice, 0));

        utils.addDebug(currentEntry, CONFIG.icons.material + " Materi√°l: " + materialName);
        utils.addDebug(currentEntry, CONFIG.icons.info + " Aktu√°lna n√°kupn√° cena: " + utils.formatMoney(currentPurchasePrice));

        // Z√≠skanie argumentov
        var newPurchasePrice = arg("n√°kupn√° cena");
        var dphOption = arg("dph");

        // Valid√°cia argumentov
        if (newPurchasePrice === null || newPurchasePrice === undefined || newPurchasePrice === "") {
            showErrorDialog("‚ùå CHYBA ARGUMENTU\\n\\nArgument 'n√°kupn√° cena' nie je zadan√Ω!\\n\\nPre spustenie akcie je potrebn√© zada≈• hodnotu argumentu.");
            return false;
        }

        if (dphOption === null || dphOption === undefined || dphOption === "") {
            showErrorDialog("‚ùå CHYBA ARGUMENTU\\n\\nArgument 'dph' nie je zadan√Ω!\\n\\nVyberte: 's DPH' alebo 'bez DPH'.");
            return false;
        }

        // Valid√°cia hodnoty DPH argumentu
        if (dphOption !== "s DPH" && dphOption !== "bez DPH") {
            showErrorDialog("‚ùå CHYBA ARGUMENTU\\n\\nArgument 'dph' m√° neplatn√∫ hodnotu: '" + dphOption + "'\\n\\nPovolen√© hodnoty: 's DPH', 'bez DPH'.");
            return false;
        }

        // Spracovanie argumentov
        processPurchasePriceFromArguments(newPurchasePrice, dphOption, materialName);

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        showErrorDialog("Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// SPRACOVANIE ARGUMENTOV
// ==============================================

/**
 * Spracuje n√°kupn√∫ cenu a DPH option z argumentov akcie
 */
function processPurchasePriceFromArguments(inputPrice, dphOption, materialName) {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.info + " Argumenty - n√°kupn√° cena: " + inputPrice + ", dph: " + dphOption);

        // Valid√°cia vstupu ceny
        var inputPurchasePrice = parseFloat(inputPrice);
        if (isNaN(inputPurchasePrice) || inputPurchasePrice < 0) {
            showErrorDialog("‚ùå CHYBA ARGUMENTU\n\nN√°kupn√° cena mus√≠ by≈• ƒç√≠slo v√§ƒç≈°ie alebo rovn√© 0!\n\nZadali ste: '" + inputPrice + "'");
            return false;
        }

        var finalPurchasePrice = inputPurchasePrice;

        // Ak je zadan√° cena s DPH, prepoƒç√≠taj na cenu bez DPH
        if (dphOption === "s DPH") {
            // Z√≠skanie DPH sadzby pre materi√°l
            var vatRatePercentage = getVatRateForMaterial();
            if (vatRatePercentage === null) {
                showErrorDialog("‚ùå CHYBA DPH\n\nNie je mo≈æn√© z√≠ska≈• DPH sadzbu pre materi√°l!\n\nSkontrolujte nastavenie poƒæa 'sadzba DPH' v materi√°li.");
                return false;
            }

            // Prepoƒçet ceny bez DPH: cena s DPH / (1 + sadzba DPH)
            var vatMultiplier = 1 + (vatRatePercentage / 100);
            finalPurchasePrice = inputPurchasePrice / vatMultiplier;

            utils.addDebug(currentEntry, CONFIG.icons.calculation + " Prepoƒçet z ceny s DPH:");
            utils.addDebug(currentEntry, "  ‚Ä¢ Zadan√° cena s DPH: " + utils.formatMoney(inputPurchasePrice));
            utils.addDebug(currentEntry, "  ‚Ä¢ DPH sadzba: " + vatRatePercentage + "%");
            utils.addDebug(currentEntry, "  ‚Ä¢ Prepoƒç√≠tan√° cena bez DPH: " + utils.formatMoney(finalPurchasePrice));
        } else {
            utils.addDebug(currentEntry, CONFIG.icons.money + " N√°kupn√° cena bez DPH (priamo zadan√°): " + utils.formatMoney(finalPurchasePrice));
        }

        // Priamo vykon√°me prepoƒçet s fin√°lnou cenou bez DPH
        executeCalculation(finalPurchasePrice, materialName);

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ argumentov", "processPurchasePriceFromArguments", error);
        showErrorDialog("Chyba pri spracovan√≠ argumentov!\n\n" + error.toString());
        return false;
    }
}

/**
 * Z√≠ska DPH sadzbu pre aktu√°lny materi√°l
 * @returns {number|null} DPH sadzba v percent√°ch alebo null pri chybe
 */
function getVatRateForMaterial() {
    try {
        var vatRateType = utils.safeGet(currentEntry, CONFIG.materialFields.vatRate, "");

        if (!vatRateType || vatRateType.trim() === "") {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " DPH sadzba nie je nastaven√°, pou≈æije sa z√°kladn√° sadzba");
            return 20; // Z√°kladn√° sadzba 20% ako fallback
        }

        // Z√≠skanie kni≈ænice DPH sadzieb
        var vatLibraryName = CONFIG.libraries.vatRates;
        var vatLibrary = libByName(vatLibraryName);

        if (!vatLibrary) {
            utils.addError(currentEntry, "Kni≈ænica DPH sadzieb neexistuje", "getVatRateForMaterial");
            return 20; // Fallback na z√°kladn√∫ sadzbu
        }

        // Hƒæadanie z√°znamu DPH sadzby
        var vatEntries = vatLibrary.entries();
        for (var i = 0; i < vatEntries.length; i++) {
            var vatEntry = vatEntries[i];
            var entryName = utils.safeGet(vatEntry, (centralConfig.fields.vatRates && centralConfig.fields.vatRates.name) || "N√°zov", "");

            if (entryName === vatRateType) {
                var rate = parseFloat(utils.safeGet(vatEntry, (centralConfig.fields.vatRates && centralConfig.fields.vatRates.rate) || "Sadzba", 0));
                utils.addDebug(currentEntry, CONFIG.icons.info + " N√°jden√° DPH sadzba: " + entryName + " = " + rate + "%");
                return rate;
            }
        }

        // Ak sa nena≈°la konkr√©tna sadzba, sk√∫s parsova≈• ƒç√≠slo z n√°zvu
        var rateFromName = parseFloat(vatRateType);
        if (!isNaN(rateFromName) && rateFromName >= 0) {
            utils.addDebug(currentEntry, CONFIG.icons.info + " Parsovan√° DPH sadzba z n√°zvu: " + rateFromName + "%");
            return rateFromName;
        }

        utils.addError(currentEntry, "Nepodarilo sa urƒçi≈• DPH sadzbu pre typ: " + vatRateType, "getVatRateForMaterial");
        return 20; // Fallback na z√°kladn√∫ sadzbu

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ DPH sadzby", "getVatRateForMaterial", error);
        return 20; // Fallback na z√°kladn√∫ sadzbu
    }
}

/**
 * Vykon√° skutoƒçn√Ω prepoƒçet cien
 */
function executeCalculation(purchasePrice, materialName) {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.calculation + " Sp√∫≈°≈•am prepoƒçet cien...");

        // Pou≈æitie funkcie z MementoBusiness modulu
        var result = utils.calculateAndUpdateMaterialPrices(
            currentEntry,
            purchasePrice,
            new Date() // Pou≈æije aktu√°lny d√°tum
        );

        if (result.success) {
            // √öspe≈°n√Ω prepoƒçet
            utils.addDebug(currentEntry, CONFIG.icons.success + " Prepoƒçet cien √∫spe≈°ne dokonƒçen√Ω");

            var successMessage = "‚úÖ PREPOƒåET √öSPE≈†N√ù!\n\n";
            successMessage += "üì¶ Materi√°l: " + materialName + "\n";
            successMessage += "üí∂ N√°kupn√° cena: " + utils.formatMoney(purchasePrice) + "\n";
            successMessage += "üí∞ Predajn√° cena: " + utils.formatMoney(result.sellingPrice) + "\n";
            successMessage += "üí∞ Cena s DPH: " + utils.formatMoney(result.priceWithVat) + "\n\n";
            successMessage += "üìä V≈°etky ceny boli aktualizovan√©!";

            if (result.updated) {
                successMessage += "\n\nüìù Info z√°znam bol vytvoren√Ω s podrobnos≈•ami prepoƒçtu.";
            }

            showSuccessDialog(successMessage);

        } else {
            // Prepoƒçet zlyhal
            utils.addError(currentEntry, "Prepoƒçet cien zlyhal", "executeCalculation");
            showErrorDialog("‚ùå CHYBA PREPOƒåTU\n\nPrepoƒçet cien sa nepodarilo dokonƒçi≈•.\n\nSkontrolujte nastavenia materi√°lu a sk√∫ste znova.");
        }

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vykon√°van√≠ prepoƒçtu", "executeCalculation", error);
        showErrorDialog("Kritick√° chyba pri prepoƒçte!\n\n" + error.toString());
    }
}

// ==============================================
// POMOCN√â DIAL√ìGY
// ==============================================

/**
 * Zobraz√≠ dial√≥g s chybou
 */
function showErrorDialog(message) {
    dialog()
        .title("CHYBA")
        .text(message)
        .positiveButton("OK", function() {})
        .show();
}

/**
 * Zobraz√≠ dial√≥g s √∫spechom
 */
function showSuccessDialog(message) {
    dialog()
        .title("√öSPECH")
        .text(message)
        .positiveButton("OK", function() {})
        .show();
}


// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();