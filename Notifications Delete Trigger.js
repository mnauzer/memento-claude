// ==============================================
// NOTIFICATION DELETE TRIGGER - Vymazanie z Telegramu
// Verzia: 8.1 | D√°tum: December 2024 | Autor: ASISTANTO
// Kni≈ænica: Notifications | Trigger: Deleting an Entry
// ==============================================
// üìã FUNKCIA:
//    - Pri vymazan√≠ z√°znamu z kni≈ænice Notifications
//    - Vyma≈æe spr√°vu aj z Telegram chatu
//    - Loguje do kni≈ænice ASISTANTO Logs
//    - Podporuje skupiny aj t√©my (threads)
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0+ (agreg√°tor)
//    - MementoTelegram v8.0 (Telegram funkcie)
//    - MementoConfig v7.0+ (centr√°lny CONFIG)
//    - MementoCore v7.0+ (z√°kladn√© funkcie)
// ==============================================
// ‚úÖ REFAKTOROVAN√â v8.1:
//    - Odstr√°nen√© v≈°etky return statements
//    - Pou≈æitie shouldContinue flag logiky
//    - Kompletn√° integr√°cia s MementoUtils
//    - Logovanie do ASISTANTO Logs kni≈ænice
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================

var utils = MementoUtils;
var telegram = MementoTelegram;
var centralConfig = utils.config;
var deletedEntry = entry(); // Z√°znam ktor√Ω sa ma≈æe

var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Notification Delete Trigger",
    version: "8.1",
    
    // Referencie na centr√°lny config
    fields: centralConfig.fields,
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    constants: centralConfig.constants,
    
    // Lok√°lne nastavenia
    settings: {
        logsLibrary: "ASISTANTO Logs", // Kni≈ænica pre logovanie
        createLogEntry: true,           // Vytvori≈• log z√°znam
        deleteFromTelegram: true,       // Vymaza≈• aj z Telegramu
        logRetention: 30,              // Dni uchovania logov
        debugMode: true
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    var logEntry = null;
    var shouldContinue = true;
    
    try {
        // 1. VYTVORENIE LOG Z√ÅZNAMU
        logEntry = createLogEntry("START", "Zaƒç√≠nam spracovanie vymazania notifik√°cie");
        
        if (logEntry) {
            addLogDebug(logEntry, utils.getIcon("start") + " === NOTIFICATION DELETE TRIGGER v" + CONFIG.version + " ===");
            addLogDebug(logEntry, "ƒåas spustenia: " + utils.formatDate(moment()));
        }
        
        // 2. KONTROLA Z√ÅVISLOST√ç
        if (shouldContinue) {
            var depCheck = utils.checkDependencies(['config', 'core', 'telegram']);
            if (!depCheck.success) {
                addLogError(logEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
                updateLogStatus(logEntry, "CHYBA", "Ch√Ωbaj√∫ moduly");
                shouldContinue = false;
            }
        }
        
        // 3. Z√çSKANIE √öDAJOV Z MAZAN√âHO Z√ÅZNAMU
        var notificationData = null;
        
        if (shouldContinue) {
            addLogDebug(logEntry, utils.getIcon("search") + " Z√≠skavam √∫daje z mazan√©ho z√°znamu");
            
            notificationData = extractNotificationData();
            if (!notificationData.success) {
                addLogError(logEntry, "Nepodarilo sa z√≠ska≈• √∫daje: " + notificationData.error, "main");
                updateLogStatus(logEntry, "CHYBA", notificationData.error);
                shouldContinue = false;
            } else {
                logNotificationData(logEntry, notificationData);
            }
        }
        
        // 4. KONTROLA ƒåI M√Å BY≈§ SPR√ÅVA VYMAZAN√Å Z TELEGRAMU
        if (shouldContinue && notificationData) {
            if (!shouldDeleteFromTelegram(notificationData, logEntry)) {
                addLogDebug(logEntry, utils.getIcon("info") + " Spr√°va nebude vymazan√° z Telegramu");
                updateLogStatus(logEntry, "PRESKOƒåEN√â", "Nevy≈æaduje vymazanie z Telegramu");
                shouldContinue = false;
            }
        }
        
        // 5. VYMAZANIE SPR√ÅVY Z TELEGRAMU
        if (shouldContinue && notificationData) {
            addLogDebug(logEntry, utils.getIcon("delete") + " Ma≈æem spr√°vu z Telegramu");
            
            var deleteResult = deleteFromTelegram(
                notificationData.chatId,
                notificationData.messageId
            );
            
            if (deleteResult.success) {
                addLogDebug(logEntry, utils.getIcon("success") + " Spr√°va √∫spe≈°ne vymazan√° z Telegramu");
                updateLogStatus(logEntry, "√öSPECH", "Spr√°va vymazan√°");
                
                // Pridaj dodatoƒçn√© info
                addLogInfo(logEntry, "Vymazanie dokonƒçen√©", {
                    chatId: notificationData.chatId,
                    messageId: notificationData.messageId,
                    notificationId: notificationData.id,
                    messageType: notificationData.messageType
                });
                
            } else {
                addLogError(logEntry, "Vymazanie z Telegramu zlyhalo: " + deleteResult.error, "main");
                updateLogStatus(logEntry, "ZLYHALO", deleteResult.error);
            }
        }
        
        if (logEntry) {
            addLogDebug(logEntry, utils.getIcon("success") + " === TRIGGER DOKONƒåEN√ù ===");
        }
        
    } catch (error) {
        addLogError(logEntry, "Kritick√° chyba v hlavnej funkcii: " + error.toString(), "main", error);
        updateLogStatus(logEntry, "KRITICK√Å CHYBA", error.toString());
    }
}

// ==============================================
// Z√çSKAVANIE D√ÅT Z MAZAN√âHO Z√ÅZNAMU
// ==============================================

function extractNotificationData() {
    try {
        // Kontrola Telegram Bot Token
        var botToken = telegram.getBotToken();
        if (!botToken) {
            return {
                success: false,
                error: "Telegram Bot Token nie je nastaven√Ω v ASISTANTO Defaults"
            };
        }
        
        // Z√≠skaj z√°kladn√© √∫daje
        var id = deletedEntry.field("ID");
        var status = utils.safeGet(deletedEntry, CONFIG.fields.notifications.status, "Nezn√°my");
        var messageId = utils.safeGet(deletedEntry, CONFIG.fields.notifications.messageId);
        var chatId = utils.safeGet(deletedEntry, CONFIG.fields.notifications.chatId);
        var threadId = utils.safeGet(deletedEntry, CONFIG.fields.notifications.threadId);
        var messageType = utils.safeGet(deletedEntry, CONFIG.fields.notifications.messageType, "Neurƒçen√Ω");
        var priority = utils.safeGet(deletedEntry, CONFIG.fields.notifications.priority, "Norm√°lna");
        
        // Debug logy pre diagnostiku
        if (CONFIG.settings.debugMode) {
            var debugInfo = "Extrahovan√© √∫daje: ID=" + id + ", Status=" + status + 
                           ", MessageID=" + (messageId || "NULL") + ", ChatID=" + (chatId || "NULL");
        }
        
        // Ak nem√°me priame chat ID, sk√∫s z√≠ska≈• zo skupiny
        if (!chatId) {
            var group = utils.safeGet(deletedEntry, CONFIG.fields.notifications.groupOrTopic);
            if (group) {
                chatId = utils.safeGet(group, CONFIG.fields.telegramGroups.chatId);
                if (CONFIG.settings.debugMode && chatId) {
                    debugInfo += " (ChatID z√≠skan√© zo skupiny)";
                }
            }
        }
        
        // Z√≠skaj spr√°vu pre log
        var message = utils.safeGet(deletedEntry, CONFIG.fields.notifications.message, "");
        
        // Skr√°≈• spr√°vu pre log (max 200 znakov)
        if (message.length > 200) {
            message = message.substring(0, 197) + "...";
        }
        
        // Valid√°cia potrebn√Ωch √∫dajov
        if (!messageId || !chatId) {
            var missingField = !messageId ? "Message ID" : "Chat ID";
            var errorDetail = {
                id: id,
                status: status,
                messageId: messageId || "CH√ùBA",
                chatId: chatId || "CH√ùBA",
                messageType: messageType,
                debugInfo: debugInfo || "N/A"
            };
            
            return {
                success: false,
                error: "Ch√Ωba " + missingField + " - nemo≈æno vymaza≈• z Telegramu",
                details: errorDetail
            };
        }
        
        return {
            success: true,
            id: id,
            status: status,
            messageId: messageId,
            chatId: chatId,
            threadId: threadId,
            messageType: messageType,
            priority: priority,
            messagePreview: message,
            debugInfo: debugInfo || ""
        };
        
    } catch (error) {
        return {
            success: false,
            error: "Chyba pri extrakcii d√°t: " + error.toString()
        };
    }
}

// ==============================================
// KONTROLA ƒåI VYMAZA≈§ Z TELEGRAMU
// ==============================================

function shouldDeleteFromTelegram(notificationData, logEntry) {
    // Nevymaz√°va≈• ak:
    // 1. Je vypnut√© v nastaveniach
    if (!CONFIG.settings.deleteFromTelegram) {
        addLogDebug(logEntry, "  ‚Ä¢ Vymaz√°vanie z Telegramu je vypnut√© v nastaveniach");
        return false;
    }
    
    // 2. Spr√°va nebola nikdy odoslan√°
    if (notificationData.status !== "Odoslan√©") {
        addLogDebug(logEntry, "  ‚Ä¢ Spr√°va nebola odoslan√° (status: " + notificationData.status + ")");
        return false;
    }
    
    // 3. Nem√°me potrebn√© √∫daje
    if (!notificationData.messageId || !notificationData.chatId) {
        addLogDebug(logEntry, "  ‚Ä¢ Ch√Ωbaj√∫ potrebn√© √∫daje pre vymazanie");
        return false;
    }
    
    addLogDebug(logEntry, "  ‚Ä¢ Spr√°va spƒ∫≈àa podmienky pre vymazanie");
    return true;
}

// ==============================================
// VYMAZANIE Z TELEGRAMU
// ==============================================

function deleteFromTelegram(chatId, messageId) {
    try {
        addLogDebug(null, "  ‚Ä¢ Pokus o vymazanie - ChatID: " + chatId + ", MessageID: " + messageId);
        
        // Vymazanie cez MementoTelegram
        var result = telegram.deleteTelegramMessage(chatId, messageId);
        
        if (result.success) {
            addLogDebug(null, "  ‚Ä¢ Telegram API vr√°tilo √∫spech");
            return {
                success: true
            };
        }
        
        // Ak zlyhalo, skontroluj ƒçi spr√°va st√°le existuje
        // (mohla by≈• u≈æ vymazan√° manu√°lne)
        if (result.error && result.error.indexOf("message to delete not found") !== -1) {
            addLogDebug(null, "  ‚Ä¢ Spr√°va u≈æ neexistuje v Telegrame");
            return {
                success: true,
                note: "Spr√°va u≈æ bola vymazan√°"
            };
        }
        
        // Ak zlyhalo z in√©ho d√¥vodu
        addLogDebug(null, "  ‚Ä¢ Telegram API vr√°tilo chybu: " + result.error);
        return {
            success: false,
            error: result.error || "Nezn√°ma chyba"
        };
        
    } catch (error) {
        addLogDebug(null, "  ‚Ä¢ V√Ωnimka pri volan√≠ Telegram API: " + error.toString());
        return {
            success: false,
            error: error.toString()
        };
    }
}

// ==============================================
// LOGOVANIE DO ASISTANTO LOGS
// ==============================================

function createLogEntry(status, description) {
    try {
        if (!CONFIG.settings.createLogEntry) {
            return null;
        }
        
        var logsLib = libByName(CONFIG.settings.logsLibrary);
        if (!logsLib) {
            // Ak kni≈ænica neexistuje, nevytv√°raj log
            return null;
        }
        
        var logEntry = logsLib.create({});
        
        // Z√°kladn√© polia
        logEntry.set("D√°tum", new Date());
        logEntry.set("Script", CONFIG.scriptName);
        logEntry.set("Verzia", CONFIG.version);
        logEntry.set("Status", status);
        logEntry.set("Popis", description);
        logEntry.set("Kni≈ænica", "Notifications");
        logEntry.set("Oper√°cia", "Delete");
        
        // Z√°znam ktor√Ω sa ma≈æe
        if (deletedEntry) {
            logEntry.set("Zdrojov√Ω z√°znam ID", deletedEntry.field("ID"));
        }
        
        // Inicializuj log polia
        logEntry.set(CONFIG.fields.common.debugLog, "");
        logEntry.set(CONFIG.fields.common.errorLog, "");
        logEntry.set(CONFIG.fields.common.info, "");
        
        return logEntry;
        
    } catch (error) {
        // Nem√¥≈æeme logova≈• chybu logovania
        return null;
    }
}

function addLogDebug(logEntry, message) {
    if (!logEntry || !CONFIG.settings.debugMode) return;
    
    try {
        var debugField = CONFIG.fields.common.debugLog;
        var timestamp = moment().format("HH:mm:ss");
        var debugMessage = "[" + timestamp + "] " + message;
        
        var existingDebug = logEntry.field(debugField) || "";
        logEntry.set(debugField, existingDebug + debugMessage + "\n");
    } catch (e) {
        // Ignoruj
    }
}

function addLogError(logEntry, message, source, error) {
    if (!logEntry) return;
    
    try {
        var errorField = CONFIG.fields.common.errorLog;
        var timestamp = moment().format("HH:mm:ss");
        var errorMessage = "[" + timestamp + "] " + message;
        
        if (source) {
            errorMessage += " | Zdroj: " + source;
        }
        
        if (error && error.lineNumber) {
            errorMessage += " | Riadok: " + error.lineNumber;
        }
        
        var existingError = logEntry.field(errorField) || "";
        logEntry.set(errorField, existingError + errorMessage + "\n");
    } catch (e) {
        // Ignoruj
    }
}

function addLogInfo(logEntry, message, data) {
    if (!logEntry) return;
    
    try {
        var infoField = CONFIG.fields.common.info;
        var timestamp = moment().format("DD.MM.YYYY HH:mm:ss");
        var infoMessage = "[" + timestamp + "] " + message;
        
        if (data) {
            infoMessage += "\nD√°ta: " + JSON.stringify(data, null, 2);
        }
        
        var existingInfo = logEntry.field(infoField) || "";
        logEntry.set(infoField, existingInfo + infoMessage + "\n\n");
    } catch (e) {
        // Ignoruj
    }
}

function updateLogStatus(logEntry, status, description) {
    if (!logEntry) return;
    
    try {
        logEntry.set("Status", status);
        if (description) {
            logEntry.set("Popis", description);
        }
        logEntry.set("ƒåas ukonƒçenia", new Date());
    } catch (e) {
        // Ignoruj
    }
}

function logNotificationData(logEntry, data) {
    if (!logEntry) return;
    
    addLogDebug(logEntry, "üìã √ödaje vymazanej notifik√°cie:");
    addLogDebug(logEntry, "  ‚Ä¢ ID: " + data.id);
    addLogDebug(logEntry, "  ‚Ä¢ Status: " + data.status);
    addLogDebug(logEntry, "  ‚Ä¢ Typ spr√°vy: " + data.messageType);
    addLogDebug(logEntry, "  ‚Ä¢ Priorita: " + data.priority);
    addLogDebug(logEntry, "  ‚Ä¢ Chat ID: " + data.chatId);
    addLogDebug(logEntry, "  ‚Ä¢ Message ID: " + data.messageId);
    
    if (data.threadId) {
        addLogDebug(logEntry, "  ‚Ä¢ Thread ID: " + data.threadId);
    }
    
    // Pridaj do info poƒæa ≈°trukt√∫rovan√© d√°ta
    var infoData = {
        notificationId: data.id,
        status: data.status,
        messageType: data.messageType,
        priority: data.priority,
        chatId: data.chatId,
        messageId: data.messageId,
        threadId: data.threadId || null
    };
    
    if (data.messagePreview) {
        infoData.messagePreview = data.messagePreview;
    }
    
    addLogInfo(logEntry, "Detaily notifik√°cie", infoData);
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function cleanupOldLogs() {
    try {
        if (CONFIG.settings.logRetention <= 0) return;
        
        var logsLib = libByName(CONFIG.settings.logsLibrary);
        if (!logsLib) return;
        
        var cutoffDate = moment().subtract(CONFIG.settings.logRetention, 'days').toDate();
        var logs = logsLib.entries();
        var deletedCount = 0;
        
        for (var i = 0; i < logs.length; i++) {
            var log = logs[i];
            var logDate = log.field("D√°tum");
            
            if (logDate && logDate < cutoffDate) {
                // Skontroluj ƒçi je to n√°≈° log
                var scriptName = log.field("Script");
                if (scriptName === CONFIG.scriptName) {
                    log.trash();
                    deletedCount++;
                }
            }
        }
        
        if (deletedCount > 0) {
            // Vytvor info log o vyƒçisten√≠
            var cleanupLog = createLogEntry("CLEANUP", "Vymazan√Ωch " + deletedCount + " star√Ωch logov");
            if (cleanupLog) {
                addLogDebug(cleanupLog, "Cleanup dokonƒçen√Ω - vymazan√Ωch " + deletedCount + " logov star≈°√≠ch ako " + CONFIG.settings.logRetention + " dn√≠");
            }
        }
        
    } catch (error) {
        // Ignoruj chyby pri ƒçisten√≠
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    var shouldExecute = true;
    
    // Kontrola z√°vislost√≠
    var depCheck = utils.checkDependencies(['config', 'core', 'telegram']);
    if (!depCheck.success) {
        // Pok√∫s sa aspo≈à vytvori≈• log
        var errorLog = createLogEntry("CHYBA", "Ch√Ωbaj√∫ moduly: " + depCheck.missing.join(", "));
        if (errorLog) {
            addLogError(errorLog, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "global");
            addLogDebug(errorLog, "Script nem√¥≈æe pokraƒçova≈• bez potrebn√Ωch modulov");
        }
        shouldExecute = false;
    }
    
    // Spustenie hlavnej funkcie len ak s√∫ v≈°etky moduly
    if (shouldExecute) {
        main();
        
        // Vyƒçisti star√© logy (voliteƒæn√©)
        cleanupOldLogs();
    }
    
} catch (error) {
    // Pok√∫s sa zaznamena≈• kritick√∫ chybu
    try {
        var errorLog = createLogEntry("KRITICK√Å CHYBA", error.toString());
        if (errorLog) {
            addLogError(errorLog, "Kritick√° chyba pri spusten√≠: " + error.toString(), "global", error);
            if (error.stack) {
                addLogDebug(errorLog, "Stack trace:\n" + error.stack);
            }
        }
    } catch (e) {
        // U≈æ naozaj nem√¥≈æeme niƒç robi≈•
    }
}