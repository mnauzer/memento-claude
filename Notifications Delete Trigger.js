// ==============================================
// NOTIFICATION DELETE TRIGGER - Vymazanie z Telegramu
// Verzia: 9.1 | D√°tum: December 2024 | Autor: ASISTANTO
// Kni≈ænica: Notifications | Trigger: Deleting an Entry
// ==============================================
// üìã FUNKCIA:
//    - Pri vymazan√≠ z√°znamu z kni≈ænice Notifications
//    - Vyma≈æe spr√°vu aj z Telegram chatu
//    - Loguje do kni≈ænice ASISTANTO Logs
//    - Podporuje skupiny aj t√©my (threads)
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0+ (agreg√°tor)
//    - MementoTelegram v8.0 (Telegram funkcie)
//    - MementoConfig v7.0+ (centr√°lny CONFIG)
//    - MementoCore v7.0+ (z√°kladn√© funkcie)
// ==============================================
// ‚úÖ ZMENY v9.1:
//    - Pou≈æitie ≈°tandardn√Ωch MementoUtils funkci√≠
//    - Spr√°vne zapisovanie do ASISTANTO Logs
//    - Opraven√© Telegram mazanie
//    - Debug/Error/Info logy do spr√°vnych pol√≠
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================

var utils = MementoUtils;
var centralConfig = utils.config;
var deletedEntry = entry(); // Z√°znam ktor√Ω sa ma≈æe
var logEntry = null; // Glob√°lna premenn√° pre log z√°znam

var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Notification Delete Trigger",
    version: "9.1",
    
    // Referencie na centr√°lny config
    fields: centralConfig.fields,
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    constants: centralConfig.constants,
    
    // Lok√°lne nastavenia
    settings: {
        logsLibrary: "ASISTANTO Logs",
        createLogEntry: true,
        deleteFromTelegram: true,
        debugMode: true
    },
    
    // Polia v ASISTANTO Logs
    logFields: {
        date: "date",
        library: "library", 
        script: "script",
        line: "line",
        debugLog: "Debug_Log",
        errorLog: "Error_Log",
        info: "info"
    }
};

// ==============================================
// OVERRIDE ≈†TANDARDN√ùCH FUNKCI√ç
// ==============================================

// Ulo≈æ√≠me origin√°lne funkcie
var originalAddDebug = utils.addDebug;
var originalAddError = utils.addError;
var originalAddInfo = utils.addInfo;

// Prep√≠≈°eme funkcie aby zapisovali do log entry
utils.addDebug = function(entry, message, iconName) {
    if (logEntry) {
        // Zapisuj do ASISTANTO Logs z√°znamu
        originalAddDebug.call(this, logEntry, message, iconName);
    }
};

utils.addError = function(entry, message, source, error) {
    if (logEntry) {
        // Zapisuj do ASISTANTO Logs z√°znamu
        originalAddError.call(this, logEntry, message, source, error);
        
        // Pridaj ƒç√≠slo riadku ak existuje
        if (error && error.lineNumber && !logEntry.field(CONFIG.logFields.line)) {
            logEntry.set(CONFIG.logFields.line, error.lineNumber);
        }
    }
};

utils.addInfo = function(entry, message, data) {
    if (logEntry) {
        // Zapisuj do ASISTANTO Logs z√°znamu
        originalAddInfo.call(this, logEntry, message, data);
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    var shouldContinue = true;
    var notificationData = null;
    
    try {
        // 1. VYTVORENIE LOG Z√ÅZNAMU
        if (shouldContinue) {
            logEntry = createLogEntry();
            if (!logEntry) {
                // Ak sa nepodar√≠ vytvori≈• log, nem√¥≈æeme pokraƒçova≈•
                shouldContinue = false;
            } else {
                utils.addDebug(logEntry, utils.getIcon("start") + " === NOTIFICATION DELETE TRIGGER v" + CONFIG.version + " ===");
                utils.addDebug(logEntry, "ƒåas spustenia: " + utils.formatDate(moment()));
                utils.addDebug(logEntry, "Mazan√Ω z√°znam ID: " + deletedEntry.field("ID"));
            }
        }
        
        // 2. KONTROLA Z√ÅVISLOST√ç
        if (shouldContinue) {
            var depCheck = utils.checkDependencies(['config', 'core', 'telegram']);
            if (!depCheck.success) {
                utils.addError(logEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
                shouldContinue = false;
            } else {
                utils.addDebug(logEntry, utils.getIcon("success") + " V≈°etky moduly naƒç√≠tan√©");
            }
        }
        
        // 3. Z√çSKANIE √öDAJOV Z MAZAN√âHO Z√ÅZNAMU
        if (shouldContinue) {
            utils.addDebug(logEntry, utils.getIcon("search") + " Z√≠skavam √∫daje z mazan√©ho z√°znamu");
            
            notificationData = extractNotificationData();
            if (!notificationData.success) {
                utils.addError(logEntry, "Nepodarilo sa z√≠ska≈• √∫daje: " + notificationData.error, "extractNotificationData");
                
                if (notificationData.details) {
                    utils.addInfo(logEntry, "Detaily chyby", notificationData.details);
                }
                
                shouldContinue = false;
            } else {
                utils.addDebug(logEntry, utils.getIcon("success") + " √ödaje √∫spe≈°ne z√≠skan√©");
                logNotificationData(notificationData);
            }
        }
        
        // 4. KONTROLA ƒåI M√Å BY≈§ SPR√ÅVA VYMAZAN√Å Z TELEGRAMU
        if (shouldContinue && notificationData) {
            utils.addDebug(logEntry, utils.getIcon("question") + " Kontrolujem podmienky pre vymazanie");
            
            if (!shouldDeleteFromTelegram(notificationData)) {
                utils.addInfo(logEntry, "Spr√°va nebude vymazan√° z Telegramu", {
                    d√¥vod: "Nesplnen√© podmienky",
                    status: notificationData.status,
                    messageId: notificationData.messageId || "ch√Ωba",
                    chatId: notificationData.chatId || "ch√Ωba"
                });
                shouldContinue = false;
            } else {
                utils.addDebug(logEntry, utils.getIcon("success") + " Podmienky splnen√©, pokraƒçujem s vymazan√≠m");
            }
        }
        
        // 5. VYMAZANIE SPR√ÅVY Z TELEGRAMU
        if (shouldContinue && notificationData) {
            utils.addDebug(logEntry, utils.getIcon("delete") + " Vol√°m Telegram API pre vymazanie spr√°vy");
            utils.addDebug(logEntry, "  ‚Ä¢ Chat ID: " + notificationData.chatId);
            utils.addDebug(logEntry, "  ‚Ä¢ Message ID: " + notificationData.messageId);
            
            var deleteResult = deleteFromTelegram(notificationData.chatId, notificationData.messageId);
            
            if (deleteResult.success) {
                utils.addDebug(logEntry, utils.getIcon("success") + " Spr√°va √∫spe≈°ne vymazan√° z Telegramu");
                
                // Fin√°lne info
                utils.addInfo(logEntry, "‚úÖ VYMAZANIE DOKONƒåEN√â", {
                    notificationId: notificationData.id,
                    messageType: notificationData.messageType,
                    chatId: notificationData.chatId,
                    messageId: notificationData.messageId,
                    threadId: notificationData.threadId || null,
                    timestamp: moment().format("DD.MM.YYYY HH:mm:ss")
                });
                
            } else {
                utils.addError(logEntry, "Vymazanie z Telegramu zlyhalo: " + deleteResult.error, "deleteFromTelegram");
                
                utils.addInfo(logEntry, "‚ùå VYMAZANIE ZLYHALO", {
                    error: deleteResult.error,
                    chatId: notificationData.chatId,
                    messageId: notificationData.messageId
                });
            }
        }
        
        utils.addDebug(logEntry, utils.getIcon("success") + " === TRIGGER DOKONƒåEN√ù ===");
        
    } catch (error) {
        utils.addError(logEntry, "Kritick√° chyba v hlavnej funkcii: " + error.toString(), "main", error);
        
        if (error.stack) {
            utils.addDebug(logEntry, "Stack trace:\n" + error.stack);
        }
    }
}

// ==============================================
// VYTVORENIE LOG Z√ÅZNAMU
// ==============================================

function createLogEntry() {
    try {
        var logsLib = libByName(CONFIG.settings.logsLibrary);
        if (!logsLib) {
            message("‚ùå Kni≈ænica " + CONFIG.settings.logsLibrary + " neexistuje!");
            return null;
        }
        
        var newLog = logsLib.create({});
        
        // Z√°kladn√© polia
        newLog.set(CONFIG.logFields.date, new Date());
        newLog.set(CONFIG.logFields.library, "Notifications");
        newLog.set(CONFIG.logFields.script, CONFIG.scriptName + " v" + CONFIG.version);
        
        // Inicializuj log polia
        newLog.set(CONFIG.logFields.debugLog, "");
        newLog.set(CONFIG.logFields.errorLog, "");
        newLog.set(CONFIG.logFields.info, "");
        
        return newLog;
        
    } catch (error) {
        message("‚ùå Kritick√° chyba pri vytv√°ran√≠ log z√°znamu: " + error.toString());
        return null;
    }
}

// ==============================================
// Z√çSKAVANIE D√ÅT Z MAZAN√âHO Z√ÅZNAMU
// ==============================================

function extractNotificationData() {
    try {
        // Kontrola Telegram Bot Token
        var botToken = MementoTelegram.getBotToken();
        if (!botToken) {
            return {
                success: false,
                error: "Telegram Bot Token nie je nastaven√Ω v ASISTANTO Defaults"
            };
        }
        
        utils.addDebug(logEntry, "  ‚Ä¢ Bot Token: " + (botToken ? "‚úì OK" : "‚úó Ch√Ωba"));
        
        // Z√≠skaj z√°kladn√© √∫daje
        var id = utils.safeGet(deletedEntry, CONFIG.fields.common.id);
        var status = utils.safeGet(deletedEntry, CONFIG.fields.notifications.status, "Nezn√°my");
        var messageId = utils.safeGet(deletedEntry, CONFIG.fields.notifications.messageId);
        var chatId = utils.safeGet(deletedEntry, CONFIG.fields.notifications.chatId);
        var threadId = utils.safeGet(deletedEntry, CONFIG.fields.notifications.threadId);
        var messageType = utils.safeGet(deletedEntry, CONFIG.fields.notifications.messageType, "Neurƒçen√Ω");
        var priority = utils.safeGet(deletedEntry, CONFIG.fields.notifications.priority, "Norm√°lna");
        
        utils.addDebug(logEntry, "  ‚Ä¢ Notification ID: " + id);
        utils.addDebug(logEntry, "  ‚Ä¢ Status: " + status);
        utils.addDebug(logEntry, "  ‚Ä¢ Message ID: " + (messageId || "NULL"));
        utils.addDebug(logEntry, "  ‚Ä¢ Chat ID: " + (chatId || "NULL"));
        
        // Ak nem√°me priame chat ID, sk√∫s z√≠ska≈• zo skupiny
        if (!chatId) {
            utils.addDebug(logEntry, "  ‚Ä¢ Chat ID ch√Ωba, sk√∫≈°am z√≠ska≈• zo skupiny");
            
            var group = utils.safeGet(deletedEntry, CONFIG.fields.notifications.groupOrTopic);
            if (group && group.length > 0) {
                var groupEntry = group[0];
                chatId = utils.safeGet(groupEntry, CONFIG.fields.telegramGroups.chatId);
                
                if (chatId) {
                    utils.addDebug(logEntry, "  ‚Ä¢ Chat ID z√≠skan√© zo skupiny: " + chatId);
                }
            }
        }
        
        // Z√≠skaj spr√°vu pre log
        var message = utils.safeGet(deletedEntry, CONFIG.fields.notifications.message, "");
        
        // Skr√°≈• spr√°vu pre log (max 200 znakov)
        if (message.length > 200) {
            message = message.substring(0, 197) + "...";
        }
        
        // Valid√°cia potrebn√Ωch √∫dajov
        if (!messageId || !chatId) {
            var missingField = !messageId ? "Message ID" : "Chat ID";
            
            return {
                success: false,
                error: "Ch√Ωba " + missingField + " - nemo≈æno vymaza≈• z Telegramu",
                details: {
                    id: id,
                    status: status,
                    messageId: messageId || "CH√ùBA",
                    chatId: chatId || "CH√ùBA",
                    messageType: messageType
                }
            };
        }
        
        return {
            success: true,
            id: id,
            status: status,
            messageId: messageId,
            chatId: chatId,
            threadId: threadId,
            messageType: messageType,
            priority: priority,
            messagePreview: message
        };
        
    } catch (error) {
        return {
            success: false,
            error: "Chyba pri extrakcii d√°t: " + error.toString()
        };
    }
}

// ==============================================
// KONTROLA ƒåI VYMAZA≈§ Z TELEGRAMU
// ==============================================

function shouldDeleteFromTelegram(notificationData) {
    // Nevymaz√°va≈• ak:
    
    // 1. Je vypnut√© v nastaveniach
    if (!CONFIG.settings.deleteFromTelegram) {
        utils.addDebug(logEntry, "  ‚Ä¢ Vymaz√°vanie z Telegramu je vypnut√© v nastaveniach");
        return false;
    }
    
    // 2. Spr√°va nebola nikdy odoslan√°
    if (notificationData.status !== "Odoslan√©") {
        utils.addDebug(logEntry, "  ‚Ä¢ Spr√°va nebola odoslan√° (status: " + notificationData.status + ")");
        return false;
    }
    
    // 3. Nem√°me potrebn√© √∫daje
    if (!notificationData.messageId || !notificationData.chatId) {
        utils.addDebug(logEntry, "  ‚Ä¢ Ch√Ωbaj√∫ potrebn√© √∫daje pre vymazanie");
        return false;
    }
    
    utils.addDebug(logEntry, "  ‚Ä¢ V≈°etky podmienky splnen√© ‚úì");
    return true;
}

// ==============================================
// VYMAZANIE Z TELEGRAMU
// ==============================================

function deleteFromTelegram(chatId, messageId) {
    try {
        // Pou≈æijeme priamo MementoTelegram modul
        var result = MementoTelegram.deleteTelegramMessage(chatId, messageId);
        
        if (result.success) {
            utils.addDebug(logEntry, "  ‚Ä¢ Telegram API vr√°tilo √∫spech");
            return {
                success: true
            };
        }
        
        // Ak zlyhalo, skontroluj ƒçi spr√°va st√°le existuje
        if (result.error && result.error.indexOf("message to delete not found") !== -1) {
            utils.addDebug(logEntry, "  ‚Ä¢ Spr√°va u≈æ neexistuje v Telegrame");
            return {
                success: true,
                note: "Spr√°va u≈æ bola vymazan√°"
            };
        }
        
        // Ak zlyhalo z in√©ho d√¥vodu
        utils.addDebug(logEntry, "  ‚Ä¢ Telegram API vr√°tilo chybu: " + result.error);
        return {
            success: false,
            error: result.error || "Nezn√°ma chyba"
        };
        
    } catch (error) {
        utils.addError(logEntry, "V√Ωnimka pri volan√≠ Telegram API: " + error.toString(), "deleteFromTelegram", error);
        return {
            success: false,
            error: error.toString()
        };
    }
}

// ==============================================
// LOGOVANIE NOTIFIKAƒåN√ùCH D√ÅT
// ==============================================

function logNotificationData(data) {
    utils.addDebug(logEntry, "üìã √ödaje vymazanej notifik√°cie:");
    utils.addDebug(logEntry, "  ‚Ä¢ ID: " + data.id);
    utils.addDebug(logEntry, "  ‚Ä¢ Status: " + data.status);
    utils.addDebug(logEntry, "  ‚Ä¢ Typ spr√°vy: " + data.messageType);
    utils.addDebug(logEntry, "  ‚Ä¢ Priorita: " + data.priority);
    utils.addDebug(logEntry, "  ‚Ä¢ Chat ID: " + data.chatId);
    utils.addDebug(logEntry, "  ‚Ä¢ Message ID: " + data.messageId);
    
    if (data.threadId) {
        utils.addDebug(logEntry, "  ‚Ä¢ Thread ID: " + data.threadId);
    }
    
    if (data.messagePreview) {
        utils.addDebug(logEntry, "  ‚Ä¢ N√°hƒæad spr√°vy: " + data.messagePreview);
    }
    
    // Pridaj ≈°trukt√∫rovan√© d√°ta do info
    utils.addInfo(logEntry, "Detaily notifik√°cie", {
        notificationId: data.id,
        status: data.status,
        messageType: data.messageType,
        priority: data.priority,
        chatId: data.chatId,
        messageId: data.messageId,
        threadId: data.threadId || null,
        messagePreview: data.messagePreview || null
    });
}

// ==============================================
// OBNOVENIE P√îVODN√ùCH FUNKCI√ç
// ==============================================

function restoreOriginalFunctions() {
    utils.addDebug = originalAddDebug;
    utils.addError = originalAddError;
    utils.addInfo = originalAddInfo;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    // Kontrola z√°kladn√Ωch podmienok
    if (!CONFIG.settings.createLogEntry) {
        // Ak nem√°me vytv√°ra≈• log, skonƒç√≠me
        message("‚ÑπÔ∏è Logovanie je vypnut√©");
    } else {
        // Spusti hlavn√∫ funkciu
        main();
    }
    
} catch (error) {
    // Kritick√° chyba - pok√∫s sa aspo≈à message
    message("‚ùå Kritick√° chyba: " + error.toString());
} finally {
    // V≈ædy obnov origin√°lne funkcie
    restoreOriginalFunctions();
}