// ==============================================
// MEMENTO DATABASE - MATERI√ÅL NASTAVENIE POL√ç BULK ACTION
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Materi√°l | Trigger: Bulk Action
// ==============================================
// üìã FUNKCIA:
//    - Hromadn√© nastavenie pol√≠ pre prepoƒçet cien oznaƒçen√Ωch materi√°lov
//    - Nastavuje polia pre prepoƒçet na vybran√Ωch z√°znamoch
//    - Umo≈æ≈àuje jednotne nakonfigurova≈• oznaƒçen√© materi√°ly
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
// üìù ARGUMENTY:
//    - "Prepoƒçet ceny" (Options: "Pevn√° cena", "Podƒæa prir√°≈æky", "Neprepoƒç√≠tava≈•"): Sp√¥sob prepoƒçtu ceny
//    - "Obchodn√° prir√°≈æka" (Number): Percentu√°lna prir√°≈æka k n√°kupnej cene
//    - "Zaokr√∫hƒæovanie cien" (Options: "Nahor", "Nadol", "Nezaokr√∫hƒæova≈•", "Najbli≈æ≈°ie"): Typ zaokr√∫hƒæovania
//    - "Hodnota zaokr√∫henia" (Options: "Desatiny", "Jednotky", "Desiatky", "Stovky"): Presnos≈• zaokr√∫hƒæovania
//    - "Zmena n√°kupnej ceny" (Options: "Upozorni≈•", "Prepoƒç√≠ta≈•", "Upozorni≈• a prepoƒç√≠ta≈•", "Ignorova≈•"): Akcia pri zmene ceny
//    - "Percento zmeny" (Number): Prah percentu√°lnej zmeny pre trigger
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();

var CONFIG = {
    scriptName: "Materi√°l Nastavenie pol√≠ Bulk Action",
    version: "1.0.0",

    // Polia Materi√°l
    materialFields: {
        name: config.fields.items.name || "N√°zov",
        category: config.fields.items.category || "Kateg√≥ria",
        priceCalculation: config.fields.items.priceCalculation || "Prepoƒçet ceny",
        markupPercentage: config.fields.items.markupPercentage || "Obchodn√° prir√°≈æka",
        priceRounding: config.fields.items.priceRounding || "Zaokr√∫hƒæovanie cien",
        roundingValue: config.fields.items.roundingValue || "Hodnota zaokr√∫helia",
        purchasePriceChange: config.fields.items.purchasePriceChange || "Zmena n√°kupnej ceny",
        changePercentage: config.fields.items.changePercentage || "Percento zmeny",
        icons: config.fields.items.icons || "icons"
    },

    // Spoloƒçn√© polia
    commonFields: {
        debugLog: config.fields.common.debugLog || "Debug_Log",
        errorLog: config.fields.common.errorLog || "Error_Log",
        info: config.fields.common.info || "info"
    }
};

// ==============================================
// NAƒå√çTANIE ARGUMENTOV
// ==============================================

function getSafeArgument(argName, defaultValue) {
    try {
        var value = argument(argName);
        return value !== null && value !== undefined ? value : defaultValue;
    } catch (error) {
        // Fallback na pr√°zdnu hodnotu ak argument nie je zadan√Ω
        return defaultValue;
    }
}

var priceCalculation = getSafeArgument("Prepoƒçet ceny", "");
var markupPercentage = getSafeArgument("Obchodn√° prir√°≈æka", null);
var priceRounding = getSafeArgument("Zaokr√∫hƒæovanie cien", "");
var roundingValue = getSafeArgument("Hodnota zaokr√∫henia", "");
var purchasePriceChange = getSafeArgument("Zmena n√°kupnej ceny", "");
var changePercentage = getSafeArgument("Percento zmeny", null);

// ==============================================
// Z√çSKANIE OZNAƒåEN√ùCH Z√ÅZNAMOV
// ==============================================

var selectedMaterials;
try {
    selectedMaterials = selectedEntries();
} catch (error) {
    message("‚ùå CHYBA: Nepodarilo sa z√≠ska≈• oznaƒçen√© z√°znamy: " + error.toString());
    return;
}

if (!selectedMaterials || selectedMaterials.length === 0) {
    message("‚ö†Ô∏è UPOZORNENIE: ≈Ωiadne z√°znamy nie s√∫ oznaƒçen√©!\n\nPre pou≈æitie bulk action oznaƒçte materi√°ly, ktor√© chcete upravi≈•.");
    return;
}

// ==============================================
// INICIALIZ√ÅCIA ≈†TATIST√çK A LOGOV
// ==============================================

var stats = {
    total: selectedMaterials.length,
    updated: 0,
    skipped: 0,
    errors: 0,
    categories: {},
    processedMaterials: []
};

var globalDebugLog = "";
var globalErrorLog = "";

function addGlobalDebug(message) {
    globalDebugLog += utils.formatDate(moment(), "HH:mm:ss") + " " + message + "\n";
}

function addGlobalError(message, error) {
    var errorMsg = message;
    if (error && error.stack) {
        errorMsg += "\nStack: " + error.stack;
    }
    globalErrorLog += utils.formatDate(moment(), "HH:mm:ss") + " " + errorMsg + "\n";
}

addGlobalDebug("üöÄ " + CONFIG.scriptName + " v" + CONFIG.version);
addGlobalDebug("üì¶ Sp√∫≈°≈•am nastavenie pol√≠ pre " + stats.total + " oznaƒçen√Ωch materi√°lov...");

addGlobalDebug("üîç Parametre:");
addGlobalDebug("  ‚Ä¢ Prepoƒçet ceny: '" + priceCalculation + "'");
addGlobalDebug("  ‚Ä¢ Obchodn√° prir√°≈æka: " + (markupPercentage !== null ? markupPercentage + "%" : "nezadan√©"));
addGlobalDebug("  ‚Ä¢ Zaokr√∫hƒæovanie: '" + priceRounding + "'");
addGlobalDebug("  ‚Ä¢ Hodnota zaokr√∫hƒæovania: '" + roundingValue + "'");
addGlobalDebug("  ‚Ä¢ Zmena n√°kupnej ceny: '" + purchasePriceChange + "'");
addGlobalDebug("  ‚Ä¢ Percento zmeny: " + (changePercentage !== null ? changePercentage + "%" : "nezadan√©"));

// ==============================================
// SPRACOVANIE KA≈ΩD√âHO OZNAƒåEN√âHO MATERI√ÅLU
// ==============================================

for (var i = 0; i < selectedMaterials.length; i++) {
    var material = selectedMaterials[i];
    var materialName = utils.safeGet(material, CONFIG.materialFields.name, "Nezn√°my materi√°l");
    var materialCategory = utils.safeGet(material, CONFIG.materialFields.category, "Bez kateg√≥rie");
    var hasChanges = false;
    var materialChanges = [];

    try {
        addGlobalDebug("üì¶ [" + (i + 1) + "/" + stats.total + "] " + materialName);

        // Sledovanie kateg√≥ri√≠
        if (!stats.categories[materialCategory]) {
            stats.categories[materialCategory] = 0;
        }
        stats.categories[materialCategory]++;

        // Nastavenie Prepoƒçet ceny
        if (priceCalculation && priceCalculation.trim() !== "") {
            var currentPriceCalculation = utils.safeGet(material, CONFIG.materialFields.priceCalculation, "");
            if (currentPriceCalculation !== priceCalculation) {
                utils.safeSet(material, CONFIG.materialFields.priceCalculation, priceCalculation);
                materialChanges.push("Prepoƒçet ceny: '" + currentPriceCalculation + "' ‚Üí '" + priceCalculation + "'");
                addGlobalDebug("  ‚úÖ Prepoƒçet ceny: '" + currentPriceCalculation + "' ‚Üí '" + priceCalculation + "'");
                hasChanges = true;
            }
        }

        // Nastavenie Obchodn√° prir√°≈æka
        if (markupPercentage !== null && !isNaN(markupPercentage)) {
            var currentMarkup = parseFloat(utils.safeGet(material, CONFIG.materialFields.markupPercentage, 0));
            if (Math.abs(currentMarkup - markupPercentage) > 0.01) {
                utils.safeSet(material, CONFIG.materialFields.markupPercentage, markupPercentage);
                materialChanges.push("Obchodn√° prir√°≈æka: " + currentMarkup + "% ‚Üí " + markupPercentage + "%");
                addGlobalDebug("  ‚úÖ Obchodn√° prir√°≈æka: " + currentMarkup + "% ‚Üí " + markupPercentage + "%");
                hasChanges = true;
            }
        }

        // Nastavenie Zaokr√∫hƒæovanie cien
        if (priceRounding && priceRounding.trim() !== "") {
            var currentRounding = utils.safeGet(material, CONFIG.materialFields.priceRounding, "");
            if (currentRounding !== priceRounding) {
                utils.safeSet(material, CONFIG.materialFields.priceRounding, priceRounding);
                materialChanges.push("Zaokr√∫hƒæovanie: '" + currentRounding + "' ‚Üí '" + priceRounding + "'");
                addGlobalDebug("  ‚úÖ Zaokr√∫hƒæovanie: '" + currentRounding + "' ‚Üí '" + priceRounding + "'");
                hasChanges = true;
            }
        }

        // Nastavenie Hodnota zaokr√∫hƒæovania
        if (roundingValue && roundingValue.trim() !== "") {
            var currentRoundingValue = utils.safeGet(material, CONFIG.materialFields.roundingValue, "");
            if (currentRoundingValue !== roundingValue) {
                utils.safeSet(material, CONFIG.materialFields.roundingValue, roundingValue);
                materialChanges.push("Hodnota zaokr√∫hƒæovania: '" + currentRoundingValue + "' ‚Üí '" + roundingValue + "'");
                addGlobalDebug("  ‚úÖ Hodnota zaokr√∫hƒæovania: '" + currentRoundingValue + "' ‚Üí '" + roundingValue + "'");
                hasChanges = true;
            }
        }

        // Nastavenie Zmena n√°kupnej ceny
        if (purchasePriceChange && purchasePriceChange.trim() !== "") {
            var currentPriceChange = utils.safeGet(material, CONFIG.materialFields.purchasePriceChange, "");
            if (currentPriceChange !== purchasePriceChange) {
                utils.safeSet(material, CONFIG.materialFields.purchasePriceChange, purchasePriceChange);
                materialChanges.push("Zmena n√°kupnej ceny: '" + currentPriceChange + "' ‚Üí '" + purchasePriceChange + "'");
                addGlobalDebug("  ‚úÖ Zmena n√°kupnej ceny: '" + currentPriceChange + "' ‚Üí '" + purchasePriceChange + "'");
                hasChanges = true;
            }
        }

        // Nastavenie Percento zmeny
        if (changePercentage !== null && !isNaN(changePercentage)) {
            var currentChangePercentage = parseFloat(utils.safeGet(material, CONFIG.materialFields.changePercentage, 0));
            if (Math.abs(currentChangePercentage - changePercentage) > 0.01) {
                utils.safeSet(material, CONFIG.materialFields.changePercentage, changePercentage);
                materialChanges.push("Percento zmeny: " + currentChangePercentage + "% ‚Üí " + changePercentage + "%");
                addGlobalDebug("  ‚úÖ Percento zmeny: " + currentChangePercentage + "% ‚Üí " + changePercentage + "%");
                hasChanges = true;
            }
        }

        if (hasChanges) {
            // Pridanie ikony indikuj√∫cej nastavenie
            var currentIcons = utils.safeGet(material, CONFIG.materialFields.icons, "");
            var newIcon = "‚öôÔ∏è";
            if (!currentIcons.includes(newIcon)) {
                var updatedIcons = currentIcons ? currentIcons + " " + newIcon : newIcon;
                utils.safeSet(material, CONFIG.materialFields.icons, updatedIcons);
                addGlobalDebug("  üéØ Pridan√° ikona: " + newIcon);
            }

            stats.updated++;
            addGlobalDebug("  ‚úÖ Materi√°l aktualizovan√Ω");

            // Ulo≈æenie inform√°ci√≠ o materi√°li pre s√∫hrn
            stats.processedMaterials.push({
                name: materialName,
                category: materialCategory,
                changes: materialChanges,
                status: "updated"
            });
        } else {
            stats.skipped++;
            addGlobalDebug("  ‚ûñ ≈Ωiadne zmeny");

            stats.processedMaterials.push({
                name: materialName,
                category: materialCategory,
                changes: [],
                status: "skipped"
            });
        }

    } catch (error) {
        stats.errors++;
        var errorMessage = "Chyba pri spracovan√≠ materi√°lu '" + materialName + "': " + error.toString();
        addGlobalError(errorMessage, error);
        addGlobalDebug("  ‚ùå Chyba pri spracovan√≠");

        stats.processedMaterials.push({
            name: materialName,
            category: materialCategory,
            changes: [],
            status: "error",
            error: error.toString()
        });
    }
}

// ==============================================
// VYTVORENIE S√öHRNN√âHO INFO Z√ÅZNAMU
// ==============================================

// Vytvor√≠me jeden s√∫hrnn√Ω z√°znam v prvom materi√°li
var firstMaterial = selectedMaterials[0];

var infoMessage = "‚öôÔ∏è HROMADN√â NASTAVENIE POL√ç MATERI√ÅLOV (BULK)\n";
infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
infoMessage += "üìÖ D√°tum: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n";
infoMessage += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n\n";

infoMessage += "üìä S√öHRN SPRACOVANIA:\n";
infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
infoMessage += "‚Ä¢ Oznaƒçen√© materi√°ly: " + stats.total + "\n";
infoMessage += "‚Ä¢ Aktualizovan√©: " + stats.updated + "\n";
infoMessage += "‚Ä¢ Preskoƒçen√© (bez zmien): " + stats.skipped + "\n";
infoMessage += "‚Ä¢ Chyby: " + stats.errors + "\n\n";

// Kateg√≥rie
if (Object.keys(stats.categories).length > 0) {
    infoMessage += "üì¶ KATEG√ìRIE MATERI√ÅLOV:\n";
    infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
    for (var category in stats.categories) {
        infoMessage += "‚Ä¢ " + category + ": " + stats.categories[category] + " materi√°lov\n";
    }
    infoMessage += "\n";
}

infoMessage += "‚öôÔ∏è NASTAVEN√â HODNOTY:\n";
infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
if (priceCalculation && priceCalculation.trim() !== "") {
    infoMessage += "‚Ä¢ Prepoƒçet ceny: " + priceCalculation + "\n";
}
if (markupPercentage !== null && !isNaN(markupPercentage)) {
    infoMessage += "‚Ä¢ Obchodn√° prir√°≈æka: " + markupPercentage + "%\n";
}
if (priceRounding && priceRounding.trim() !== "") {
    infoMessage += "‚Ä¢ Zaokr√∫hƒæovanie cien: " + priceRounding + "\n";
}
if (roundingValue && roundingValue.trim() !== "") {
    infoMessage += "‚Ä¢ Hodnota zaokr√∫hƒæovania: " + roundingValue + "\n";
}
if (purchasePriceChange && purchasePriceChange.trim() !== "") {
    infoMessage += "‚Ä¢ Zmena n√°kupnej ceny: " + purchasePriceChange + "\n";
}
if (changePercentage !== null && !isNaN(changePercentage)) {
    infoMessage += "‚Ä¢ Percento zmeny: " + changePercentage + "%\n";
}

// Detaily materi√°lov s aktualiz√°ciami
if (stats.updated > 0) {
    infoMessage += "\n‚úÖ AKTUALIZOVAN√â MATERI√ÅLY:\n";
    infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
    var updatedCount = 0;
    for (var i = 0; i < stats.processedMaterials.length && updatedCount < 10; i++) {
        var mat = stats.processedMaterials[i];
        if (mat.status === "updated") {
            infoMessage += "‚Ä¢ " + mat.name + " (" + mat.category + ")\n";
            for (var j = 0; j < mat.changes.length; j++) {
                infoMessage += "  - " + mat.changes[j] + "\n";
            }
            updatedCount++;
        }
    }
    if (stats.updated > 10) {
        infoMessage += "‚Ä¢ ... a " + (stats.updated - 10) + " ƒèal≈°√≠ch materi√°lov\n";
    }
}

// Chyby
if (stats.errors > 0) {
    infoMessage += "\n‚ùå CHYBY:\n";
    infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
    var errorCount = 0;
    for (var i = 0; i < stats.processedMaterials.length && errorCount < 5; i++) {
        var mat = stats.processedMaterials[i];
        if (mat.status === "error") {
            infoMessage += "‚Ä¢ " + mat.name + ": " + mat.error + "\n";
            errorCount++;
        }
    }
    if (stats.errors > 5) {
        infoMessage += "‚Ä¢ ... a " + (stats.errors - 5) + " ƒèal≈°√≠ch ch√Ωb\n";
    }
}

infoMessage += "\n‚úÖ NASTAVENIE DOKONƒåEN√â";

// Nastavenie info z√°znamu do prv√©ho materi√°lu
utils.safeSet(firstMaterial, CONFIG.materialFields.name + " (S√∫hrn)", firstMaterial.field(CONFIG.materialFields.name) + " (S√∫hrn)");
utils.safeSet(firstMaterial, CONFIG.commonFields.info, infoMessage);
utils.safeSet(firstMaterial, CONFIG.commonFields.debugLog, globalDebugLog);
if (globalErrorLog) {
    utils.safeSet(firstMaterial, CONFIG.commonFields.errorLog, globalErrorLog);
}

// ==============================================
// FIN√ÅLNY DIALOG
// ==============================================

var isSuccess = stats.errors === 0;
var summaryMessage = "";

if (isSuccess) {
    summaryMessage = "‚úÖ √öSPE≈†NE DOKONƒåEN√â\n\n";
} else {
    summaryMessage = "‚ö†Ô∏è DOKONƒåEN√â S CHYBAMI\n\n";
}

summaryMessage += "üì¶ Oznaƒçen√© materi√°ly: " + stats.total + "\n";
summaryMessage += "‚úÖ Aktualizovan√©: " + stats.updated + "\n";
summaryMessage += "‚ûñ Preskoƒçen√©: " + stats.skipped + "\n";

if (stats.errors > 0) {
    summaryMessage += "‚ùå Chyby: " + stats.errors + "\n";
}

summaryMessage += "\n‚ÑπÔ∏è Detaily v prvom materi√°li v poli 'info'";

addGlobalDebug("üéØ Nastavenie dokonƒçen√©:");
addGlobalDebug("  ‚Ä¢ Aktualizovan√©: " + stats.updated);
addGlobalDebug("  ‚Ä¢ Preskoƒçen√©: " + stats.skipped);
addGlobalDebug("  ‚Ä¢ Chyby: " + stats.errors);

<function_calls>
<invoke name="TodoWrite">
<parameter name="todos">[{"content": "Vytvori\u0165 bulk action verziu scriptu bez v\u00fdberu kateg\u00f3rie", "status": "completed", "activeForm": "Vytvoren\u00e1 bulk action verzia scriptu"}]