// ==============================================
// MEMENTO DATABASE - MATERI√ÅL NASTAVENIE POL√ç BULK ACTION
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Materi√°l | Trigger: Bulk Action
// ==============================================
// üìã FUNKCIA:
//    - Hromadn√© nastavenie pol√≠ pre prepoƒçet cien oznaƒçen√Ωch materi√°lov
//    - Nastavuje polia pre prepoƒçet na vybran√Ωch z√°znamoch
//    - Umo≈æ≈àuje jednotne nakonfigurova≈• oznaƒçen√© materi√°ly
//    - Dialog so zhrnut√≠m len na konci oper√°cie
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
// üìù ARGUMENTY:
//    - "Prepoƒçet ceny" (Options: "Pevn√° cena", "Podƒæa prir√°≈æky", "Neprepoƒç√≠tava≈•"): Sp√¥sob prepoƒçtu ceny
//    - "Obchodn√° prir√°≈æka" (Number): Percentu√°lna prir√°≈æka k n√°kupnej cene
//    - "Zaokr√∫hƒæovanie cien" (Options: "Nahor", "Nadol", "Nezaokr√∫hƒæova≈•", "Najbli≈æ≈°ie"): Typ zaokr√∫hƒæovania
//    - "Hodnota zaokr√∫henia" (Options: "Desatiny", "Jednotky", "Desiatky", "Stovky"): Presnos≈• zaokr√∫hƒæovania
//    - "Zmena n√°kupnej ceny" (Options: "Upozorni≈•", "Prepoƒç√≠ta≈•", "Upozorni≈• a prepoƒç√≠ta≈•", "Ignorova≈•"): Akcia pri zmene ceny
//    - "Percento zmeny" (Number): Prah percentu√°lnej zmeny pre trigger
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;

var CONFIG = {
    scriptName: "Materi√°l Nastavenie pol√≠ Bulk Action",
    version: "1.0.0",

    // Kni≈ænice
    libraries: {
        inventory: (centralConfig.libraries && centralConfig.libraries.inventory) || "Materi√°l"
    },

    // Polia Materi√°l
    materialFields: {
        name: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.name) || "N√°zov",
        category: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.category) || "Kateg√≥ria",
        priceCalculation: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceCalculation) || "Prepoƒçet ceny",
        markupPercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.markupPercentage) || "Obchodn√° prir√°≈æka",
        priceRounding: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceRounding) || "Zaokr√∫hƒæovanie cien",
        roundingValue: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.roundingValue) || "Hodnota zaokr√∫hƒæovania",
        purchasePriceChange: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceChange) || "Zmena n√°kupnej ceny",
        changePercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.changePercentage) || "Percento zmeny",
        icons: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.icons) || "icons"
    },

    // Spoloƒçn√© polia
    commonFields: {
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },

    // Ikony
    icons: {
        success: "‚úÖ",
        warning: "‚ö†Ô∏è",
        error: "‚ùå",
        info: "‚ÑπÔ∏è",
        settings: "‚öôÔ∏è",
        processing: "üîß"
    }
};

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function getSafeArgument(argName, defaultValue) {
    try {
        var value = argument(argName);
        return value !== null && value !== undefined ? value : defaultValue;
    } catch (error) {
        return defaultValue;
    }
}

// ==============================================
// NAƒå√çTANIE ARGUMENTOV
// ==============================================

var priceCalculation = getSafeArgument("Prepoƒçet ceny", "");
var markupPercentage = getSafeArgument("Obchodn√° prir√°≈æka", null);
var priceRounding = getSafeArgument("Zaokr√∫hƒæovanie cien", "");
var roundingValue = getSafeArgument("Hodnota zaokr√∫henia", "");
var purchasePriceChange = getSafeArgument("Zmena n√°kupnej ceny", "");
var changePercentage = getSafeArgument("Percento zmeny", null);

// ==============================================
// Z√çSKANIE OZNAƒåEN√ùCH Z√ÅZNAMOV
// ==============================================

var selectedMaterials;
try {
    selectedMaterials = selectedEntries();
} catch (error) {
    dialog(CONFIG.icons.error + " CHYBA: Nepodarilo sa z√≠ska≈• oznaƒçen√© z√°znamy: " + error.toString());
    selectedMaterials = [];
}

if (!selectedMaterials || selectedMaterials.length === 0) {
    dialog(CONFIG.icons.warning + " UPOZORNENIE: ≈Ωiadne z√°znamy nie s√∫ oznaƒçen√©!\n\nPre pou≈æitie bulk action oznaƒçte materi√°ly, ktor√© chcete upravi≈•.");
    selectedMaterials = [];
}

// ==============================================
// INICIALIZ√ÅCIA ≈†TATIST√çK
// ==============================================

var stats = {
    total: selectedMaterials.length,
    updated: 0,
    skipped: 0,
    errors: 0,
    processedMaterials: []
};

// ==============================================
// HLAVN√Å LOGIKA - SPRACOVANIE MATERI√ÅLOV
// ==============================================

if (selectedMaterials.length > 0) {
    // Spracovanie ka≈æd√©ho oznaƒçen√©ho materi√°lu
    for (var i = 0; i < selectedMaterials.length; i++) {
        var material = selectedMaterials[i];
        var materialName = utils.safeGet(material, CONFIG.materialFields.name, "Nezn√°my materi√°l");
        var hasChanges = false;
        var materialChanges = [];

        try {
            // Nastavenie Prepoƒçet ceny
            if (priceCalculation && priceCalculation.trim() !== "") {
                var currentPriceCalculation = utils.safeGet(material, CONFIG.materialFields.priceCalculation, "");
                if (currentPriceCalculation !== priceCalculation) {
                    utils.safeSet(material, CONFIG.materialFields.priceCalculation, priceCalculation);
                    materialChanges.push("Prepoƒçet ceny: '" + currentPriceCalculation + "' ‚Üí '" + priceCalculation + "'");
                    hasChanges = true;
                }
            }

            // Nastavenie Obchodn√° prir√°≈æka
            if (markupPercentage !== null && !isNaN(markupPercentage)) {
                var currentMarkup = parseFloat(utils.safeGet(material, CONFIG.materialFields.markupPercentage, 0));
                if (Math.abs(currentMarkup - markupPercentage) > 0.01) {
                    utils.safeSet(material, CONFIG.materialFields.markupPercentage, markupPercentage);
                    materialChanges.push("Obchodn√° prir√°≈æka: " + currentMarkup + "% ‚Üí " + markupPercentage + "%");
                    hasChanges = true;
                }
            }

            // Nastavenie Zaokr√∫hƒæovanie cien
            if (priceRounding && priceRounding.trim() !== "") {
                var currentRounding = utils.safeGet(material, CONFIG.materialFields.priceRounding, "");
                if (currentRounding !== priceRounding) {
                    utils.safeSet(material, CONFIG.materialFields.priceRounding, priceRounding);
                    materialChanges.push("Zaokr√∫hƒæovanie: '" + currentRounding + "' ‚Üí '" + priceRounding + "'");
                    hasChanges = true;
                }
            }

            // Nastavenie Hodnota zaokr√∫hƒæovania
            if (roundingValue && roundingValue.trim() !== "") {
                var currentRoundingValue = utils.safeGet(material, CONFIG.materialFields.roundingValue, "");
                if (currentRoundingValue !== roundingValue) {
                    utils.safeSet(material, CONFIG.materialFields.roundingValue, roundingValue);
                    materialChanges.push("Hodnota zaokr√∫hƒæovania: '" + currentRoundingValue + "' ‚Üí '" + roundingValue + "'");
                    hasChanges = true;
                }
            }

            // Nastavenie Zmena n√°kupnej ceny
            if (purchasePriceChange && purchasePriceChange.trim() !== "") {
                var currentPriceChange = utils.safeGet(material, CONFIG.materialFields.purchasePriceChange, "");
                if (currentPriceChange !== purchasePriceChange) {
                    utils.safeSet(material, CONFIG.materialFields.purchasePriceChange, purchasePriceChange);
                    materialChanges.push("Zmena n√°kupnej ceny: '" + currentPriceChange + "' ‚Üí '" + purchasePriceChange + "'");
                    hasChanges = true;
                }
            }

            // Nastavenie Percento zmeny
            if (changePercentage !== null && !isNaN(changePercentage)) {
                var currentChangePercentage = parseFloat(utils.safeGet(material, CONFIG.materialFields.changePercentage, 0));
                if (Math.abs(currentChangePercentage - changePercentage) > 0.01) {
                    utils.safeSet(material, CONFIG.materialFields.changePercentage, changePercentage);
                    materialChanges.push("Percento zmeny: " + currentChangePercentage + "% ‚Üí " + changePercentage + "%");
                    hasChanges = true;
                }
            }

            if (hasChanges) {
                // Pridanie ikony indikuj√∫cej nastavenie
                var currentIcons = utils.safeGet(material, CONFIG.materialFields.icons, "");
                var newIcon = CONFIG.icons.settings;
                if (!currentIcons.includes(newIcon)) {
                    var updatedIcons = currentIcons ? currentIcons + " " + newIcon : newIcon;
                    utils.safeSet(material, CONFIG.materialFields.icons, updatedIcons);
                }

                stats.updated++;
                stats.processedMaterials.push({
                    name: materialName,
                    changes: materialChanges,
                    status: "updated"
                });
            } else {
                stats.skipped++;
                stats.processedMaterials.push({
                    name: materialName,
                    changes: [],
                    status: "skipped"
                });
            }

        } catch (error) {
            stats.errors++;
            stats.processedMaterials.push({
                name: materialName,
                changes: [],
                status: "error",
                error: error.toString()
            });
        }
    }

    // ==============================================
    // VYTVORENIE INFO Z√ÅZNAMU V PRVOM MATERI√ÅLI
    // ==============================================

    if (stats.total > 0) {
        var firstMaterial = selectedMaterials[0];
        var infoMessage = CONFIG.icons.settings + " HROMADN√â NASTAVENIE POL√ç MATERI√ÅLOV (BULK)\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        infoMessage += "üìÖ D√°tum: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n";
        infoMessage += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n\n";

        infoMessage += "üìä S√öHRN SPRACOVANIA:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Oznaƒçen√© materi√°ly: " + stats.total + "\n";
        infoMessage += "‚Ä¢ Aktualizovan√©: " + stats.updated + "\n";
        infoMessage += "‚Ä¢ Preskoƒçen√© (bez zmien): " + stats.skipped + "\n";
        infoMessage += "‚Ä¢ Chyby: " + stats.errors + "\n\n";

        infoMessage += CONFIG.icons.settings + " NASTAVEN√â HODNOTY:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        if (priceCalculation && priceCalculation.trim() !== "") {
            infoMessage += "‚Ä¢ Prepoƒçet ceny: " + priceCalculation + "\n";
        }
        if (markupPercentage !== null && !isNaN(markupPercentage)) {
            infoMessage += "‚Ä¢ Obchodn√° prir√°≈æka: " + markupPercentage + "%\n";
        }
        if (priceRounding && priceRounding.trim() !== "") {
            infoMessage += "‚Ä¢ Zaokr√∫hƒæovanie cien: " + priceRounding + "\n";
        }
        if (roundingValue && roundingValue.trim() !== "") {
            infoMessage += "‚Ä¢ Hodnota zaokr√∫hƒæovania: " + roundingValue + "\n";
        }
        if (purchasePriceChange && purchasePriceChange.trim() !== "") {
            infoMessage += "‚Ä¢ Zmena n√°kupnej ceny: " + purchasePriceChange + "\n";
        }
        if (changePercentage !== null && !isNaN(changePercentage)) {
            infoMessage += "‚Ä¢ Percento zmeny: " + changePercentage + "%\n";
        }

        // Detaily aktualizovan√Ωch materi√°lov (max 10)
        if (stats.updated > 0) {
            infoMessage += "\n" + CONFIG.icons.success + " AKTUALIZOVAN√â MATERI√ÅLY:\n";
            infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            var updatedCount = 0;
            for (var i = 0; i < stats.processedMaterials.length && updatedCount < 10; i++) {
                var mat = stats.processedMaterials[i];
                if (mat.status === "updated") {
                    infoMessage += "‚Ä¢ " + mat.name + "\n";
                    for (var j = 0; j < mat.changes.length; j++) {
                        infoMessage += "  - " + mat.changes[j] + "\n";
                    }
                    updatedCount++;
                }
            }
            if (stats.updated > 10) {
                infoMessage += "‚Ä¢ ... a " + (stats.updated - 10) + " ƒèal≈°√≠ch materi√°lov\n";
            }
        }

        // Chyby (max 5)
        if (stats.errors > 0) {
            infoMessage += "\n" + CONFIG.icons.error + " CHYBY:\n";
            infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            var errorCount = 0;
            for (var i = 0; i < stats.processedMaterials.length && errorCount < 5; i++) {
                var mat = stats.processedMaterials[i];
                if (mat.status === "error") {
                    infoMessage += "‚Ä¢ " + mat.name + ": " + mat.error + "\n";
                    errorCount++;
                }
            }
            if (stats.errors > 5) {
                infoMessage += "‚Ä¢ ... a " + (stats.errors - 5) + " ƒèal≈°√≠ch ch√Ωb\n";
            }
        }

        infoMessage += "\n" + CONFIG.icons.success + " NASTAVENIE DOKONƒåEN√â";

        // Nastavenie info z√°znamu do prv√©ho materi√°lu
        utils.safeSet(firstMaterial, CONFIG.commonFields.info, infoMessage);
    }
}

// ==============================================
// FIN√ÅLNY DIALOG
// ==============================================

var isSuccess = stats.errors === 0;
var summaryMessage = "";

if (isSuccess) {
    summaryMessage = CONFIG.icons.success + " √öSPE≈†NE DOKONƒåEN√â\n\n";
} else {
    summaryMessage = CONFIG.icons.warning + " DOKONƒåEN√â S CHYBAMI\n\n";
}

summaryMessage += "üì¶ Oznaƒçen√© materi√°ly: " + stats.total + "\n";
summaryMessage += CONFIG.icons.success + " Aktualizovan√©: " + stats.updated + "\n";
summaryMessage += "‚ûñ Preskoƒçen√©: " + stats.skipped + "\n";

if (stats.errors > 0) {
    summaryMessage += CONFIG.icons.error + " Chyby: " + stats.errors + "\n";
}

if (stats.total > 0) {
    summaryMessage += "\n" + CONFIG.icons.info + " Detaily v prvom materi√°li v poli 'info'";
}

dialog(summaryMessage);