// ==============================================
// MEMENTO DATABASE - KOMPLEXN√ù PREPOƒåET ZAMESTNANCA
// Verzia: 4.5 | D√°tum: 10.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Zamestnanci | Trigger: Before Save
// ==============================================
// ‚úÖ NOV√â v4.5: KRITICK√â OPRAVY filtrov a logiky
//    - OPRAVEN√â: Filter total teraz spr√°vne filtruje podƒæa filterTotal
//    - OPRAVEN√â: Poklad≈àa filtruje len "Mzda" a "Mzda z√°loha" ‚Üí "Vyplaten√©"
//    - OPRAVEN√â: Pohƒæad√°vky/Z√°v√§zky pou≈æ√≠vaj√∫ "v√Ωber obdobia" filter
//    - OPRAVEN√â: Aktu√°lna hodinovka debug a logika
//    - ODSTR√ÅNEN√â: pole "Z√°lohy" nahraden√© "Vyplaten√©"
// ‚úÖ NOV√â v4.4: KRITICK√â OPRAVY a roz≈°√≠renia
//    - T√Ω≈æde≈à zaƒç√≠na v pondelok, Pohƒæad√°vky/Z√°v√§zky pole "Zostatok"
// ==============================================

var CONFIG = {
    debug: true,
    version: "4.5",
    scriptName: "Zamestnanci Prepoƒçet zamestnanca",
    
    // N√°zvy kni≈æn√≠c
            libraries: {
        zamestnanci: "Zamestnanci",
        sadzby: "sadzby zamestnancov",
        dochadzka: "Doch√°dzka", 
        zaznamPrac: "Z√°znam pr√°c",
        knihaJazd: "Kniha j√°zd",
        pohladavky: "Pohƒæad√°vky",
        zavazky: "Z√°v√§zky",
        pokladna: "Poklad≈àa"
    },
    
    // Emoji pre debug log
    icons: {
        start: "üöÄ",
        step: "üìã",
        success: "‚úÖ",
        warning: "‚ö†Ô∏è",
        error: "üí•",
        money: "üí∞",
        time: "‚è±Ô∏è",
        person: "üë§",
        info: "‚ÑπÔ∏è",
        calculation: "üßÆ",
        database: "üóÉÔ∏è",
        filter: "üîç",
        summary: "üìä"
    },
    
    // Polia v kni≈ænici Zamestnanci
    fields: {
        nick: "Nick",
        meno: "Meno",
        priezvisko: "Priezvisko",
        vyberObdobia: "v√Ωber obdobia",        // Filter pre filtrovan√© polia
        obdobieTotal: "obdobie total",        // Filter pre total polia
        
        // Doch√°dzka
        odpracovane: "Odpracovan√©",
        odpracovaneTotal: "Odpracovan√© total",
        
        // Z√°znam pr√°c
        naZakazkach: "Na z√°kazk√°ch", 
        naZakazkachTotal: "Na z√°kazk√°ch total",
        
        // Kniha j√°zd
        jazdy: "Jazdy",
        jazdyTotal: "Jazdy total",
        
        // Mzdy
        aktualnaHodinovka: "Aktu√°lna hodinovka",
        zarobene: "Zaroben√©",
        zarobeneTotal: "Zaroben√© total",
        vyplatene: "Vyplaten√©",
        preplatokNedoplatok: "Preplatok/Nedoplatok",
        
        // NOV√â: Pohƒæad√°vky a Z√°v√§zky
        pohladavky: "Pohƒæad√°vky",
        zavazky: "Z√°v√§zky", 
        saldo: "Saldo",
        
        // NOV√â: Poklad≈àa
        vyplatene: "Vyplaten√©",
        vyplateneTotal: "Vyplaten√© total",
        preplatokNedoplatok: "Preplatok/Nedoplatok",
        
        // Info a debug
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy pol√≠ pre LinksFrom oper√°cie
    linksFromFields: {
        sadzbyZamestnanec: "Zamestnanec",
        dochadzkaZamestnanci: "Zamestnanci",
        zaznamZamestnanci: "Zamestnanci",
        knihaPosadka: "Pos√°dka",
        pohladavkyZamestnanec: "Zamestnanec",
        zavazkyZamestnanec: "Zamestnanec",
        pokladnaZamestnanec: "Zamestnanec"
    },
    
    // Polia v z√°znamoch
    recordFields: {
        datum: "D√°tum",
        pracovnaDoba: "Pracovn√° doba",
        celkovyCas: "Celkov√Ω ƒças",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba",
        sumaSDPH: "Suma s DPH",
        zaplatene: "Zaplaten√©",
        zostatok: "Zostatok",
        stav: "Stav",
        suma: "Suma",
        ucelVydaja: "√öƒçel v√Ωdaja"
    }
};

// Glob√°lne premenn√©
var debugLog = [];
var errorLog = [];
var currentEntry = entry();

// ==============================================
// DEBUG A ERROR HANDLING SYST√âM
// ==============================================

function addDebug(message, section) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm:ss");
        var icon = section ? CONFIG.icons[section] || CONFIG.icons.info : CONFIG.icons.info;
        debugLog.push("[" + timestamp + "] " + icon + " " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var errorMessage = "[" + timestamp + "] " + CONFIG.icons.error + " " + 
                      (location ? "[" + location + "] " : "") + message;
    errorLog.push(errorMessage);
}

function saveLogsToEntry() {
    try {
        if (debugLog.length > 0) {
            currentEntry.set(CONFIG.fields.debugLog, debugLog.join("\n"));
        }
        if (errorLog.length > 0) {
            currentEntry.set(CONFIG.fields.errorLog, errorLog.join("\n"));
        }
    } catch (error) {
        // Fallback - ak sa nepodaria ulo≈æi≈• logy
    }
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function safeFieldAccess(entry, fieldName, defaultValue) {
    try {
        var value = entry ? entry.field(fieldName) : null;
        return value !== null && value !== undefined ? value : (defaultValue || null);
    } catch (error) {
        addError("Field access failed for '" + fieldName + "': " + error, "safeFieldAccess");
        return defaultValue || null;
    }
}

function parseFilterDateRange(filterText) {
    addDebug("Parsovanie d√°tumov√©ho filtra: '" + filterText + "'", "filter");
    
    if (!filterText) {
        return { isValid: false, reason: "Pr√°zdny filter" };
    }
    
    var cleanFilter = filterText.trim().toLowerCase();
    var now = moment();
    
    // TEXTOV√â V√ùRAZY
    var textualPatterns = {
        // ROƒåN√â FILTRE
        "tento rok": {
            type: "yearly",
            year: now.year(),
            popis: "tento rok (" + now.year() + ")"
        },
        "minul√Ω rok": {
            type: "yearly", 
            year: now.year() - 1,
            popis: "minul√Ω rok (" + (now.year() - 1) + ")"
        },
        
        // MESAƒåN√â FILTRE
        "tento mesiac": {
            type: "monthly",
            month: now.month() + 1,
            year: now.year(),
            popis: "tento mesiac (" + (now.month() + 1) + "/" + now.year() + ")"
        },
        "minul√Ω mesiac": {
            type: "monthly",
            month: now.month() === 0 ? 12 : now.month(),
            year: now.month() === 0 ? now.year() - 1 : now.year(),
            popis: "minul√Ω mesiac (" + (now.month() === 0 ? 12 : now.month()) + "/" + (now.month() === 0 ? now.year() - 1 : now.year()) + ")"
        },
        
        // T√ù≈ΩDENN√â FILTRE (pondelok ako zaƒçiatok t√Ω≈æd≈àa)
        "tento t√Ω≈æde≈à": {
            type: "range",
            startDate: now.clone().startOf('isoWeek'),
            endDate: now.clone().endOf('isoWeek'),
            popis: "tento t√Ω≈æde≈à (od " + now.clone().startOf('isoWeek').format('DD.MM') + " do " + now.clone().endOf('isoWeek').format('DD.MM') + ")"
        },
        "tento tyzden": {  // alternat√≠vna verzia bez diakritiky
            type: "range",
            startDate: now.clone().startOf('isoWeek'),
            endDate: now.clone().endOf('isoWeek'),
            popis: "tento t√Ω≈æde≈à (od " + now.clone().startOf('isoWeek').format('DD.MM') + " do " + now.clone().endOf('isoWeek').format('DD.MM') + ")"
        },
        "minul√Ω t√Ω≈æde≈à": {
            type: "range",
            startDate: now.clone().subtract(1, 'week').startOf('isoWeek'),
            endDate: now.clone().subtract(1, 'week').endOf('isoWeek'),
            popis: "minul√Ω t√Ω≈æde≈à (od " + now.clone().subtract(1, 'week').startOf('isoWeek').format('DD.MM') + " do " + now.clone().subtract(1, 'week').endOf('isoWeek').format('DD.MM') + ")"
        },
        "minuly tyzden": {  // alternat√≠vna verzia bez diakritiky
            type: "range",
            startDate: now.clone().subtract(1, 'week').startOf('isoWeek'),
            endDate: now.clone().subtract(1, 'week').endOf('isoWeek'),
            popis: "minul√Ω t√Ω≈æde≈à (od " + now.clone().subtract(1, 'week').startOf('isoWeek').format('DD.MM') + " do " + now.clone().subtract(1, 'week').endOf('isoWeek').format('DD.MM') + ")"
        },
        
        // DENN√â ROZSAHY
        "posledn√Ωch 7 dn√≠": {
            type: "range",
            startDate: now.clone().subtract(7, 'days'),
            endDate: now,
            popis: "posledn√Ωch 7 dn√≠"
        },
        "posledn√Ωch 14 dn√≠": {
            type: "range",
            startDate: now.clone().subtract(14, 'days'),
            endDate: now,
            popis: "posledn√Ωch 14 dn√≠"
        },
        "posledn√Ωch 30 dn√≠": {
            type: "range",
            startDate: now.clone().subtract(30, 'days'),
            endDate: now,
            popis: "posledn√Ωch 30 dn√≠"
        },
        "posledn√Ωch 90 dn√≠": {
            type: "range", 
            startDate: now.clone().subtract(90, 'days'),
            endDate: now,
            popis: "posledn√Ωch 90 dn√≠"
        },
        
        // ≈†PECI√ÅLNE FILTRE
        "total": {
            type: "all",
            popis: "v≈°etky z√°znamy (bez filtra)"
        },
        "v≈°etko": {
            type: "all",
            popis: "v≈°etky z√°znamy (bez filtra)"
        },
        "vsetko": {  // bez diakritiky
            type: "all",
            popis: "v≈°etky z√°znamy (bez filtra)"
        },
        "v≈°etky": {
            type: "all",
            popis: "v≈°etky z√°znamy (bez filtra)"
        }
    };
    
    // Skontroluj textov√© v√Ωrazy
    if (textualPatterns[cleanFilter]) {
        var pattern = textualPatterns[cleanFilter];
        addDebug("Rozpoznan√Ω textov√Ω filter: " + cleanFilter, "success");
        return {
            isValid: true,
            type: pattern.type,
            month: pattern.month,
            year: pattern.year,
            startDate: pattern.startDate,
            endDate: pattern.endDate,
            popis: pattern.popis
        };
    }
    
    // ƒå√çSELN√â FORM√ÅTY: MM/YYYY, MM.YYYY, YYYY, MM/YY, MM.YY
    var numericPatterns = [
        /^(\d{1,2})[\/\.](\d{4})$/, // MM/YYYY alebo MM.YYYY
        /^(\d{4})$/,                // YYYY
        /^(\d{1,2})[\/\.](\d{2})$/  // MM/YY
    ];
    
    for (var i = 0; i < numericPatterns.length; i++) {
        var match = filterText.trim().match(numericPatterns[i]);
        if (match) {
            addDebug("Rozpoznan√Ω ƒç√≠seln√Ω filter, pattern " + i, "success");
            if (i === 0) { // MM/YYYY
                return {
                    isValid: true,
                    month: parseInt(match[1]),
                    year: parseInt(match[2]),
                    type: "monthly",
                    popis: "mesiac " + match[1] + "/" + match[2]
                };
            } else if (i === 1) { // YYYY
                return {
                    isValid: true,
                    year: parseInt(match[1]),
                    type: "yearly",
                    popis: "rok " + match[1]
                };
            } else if (i === 2) { // MM/YY
                var fullYear = parseInt(match[2]) + 2000;
                return {
                    isValid: true,
                    month: parseInt(match[1]),
                    year: fullYear,
                    type: "monthly",
                    popis: "mesiac " + match[1] + "/" + fullYear
                };
            }
        }
    }
    
    return { isValid: false, reason: "Neplatn√Ω form√°t. Podporovan√©: 'Tento rok', 'Tento mesiac', 'Tento t√Ω≈æde≈à', 'Total', 'V≈°etko', 'MM/YYYY', 'YYYY'" };
}

function dateMatchesFilter(datum, filter) {
    if (!datum || !filter.isValid) return false;
    
    // ≈†peci√°lny pr√≠pad pre "total" filter - zahrn√∫≈• v≈°etko
    if (filter.type === "all") return true;
    
    var recordDate = moment(datum);
    if (!recordDate.isValid()) return false;
    
    if (filter.type === "yearly") {
        return recordDate.year() === filter.year;
    } else if (filter.type === "monthly") {
        return recordDate.year() === filter.year && (recordDate.month() + 1) === filter.month;
    } else if (filter.type === "range") {
        return recordDate.isBetween(filter.startDate, filter.endDate, 'day', '[]');
    }
    
    return false;
}

// ==============================================
// HLAVN√â V√ùPOƒåTOV√â FUNKCIE
// ==============================================

function spracujDochadzku(zamestnanecEntry, filter, isTotal) {
    addDebug("=== DOCH√ÅDZKA SPRACOVANIE ===", "database");
    addDebug("Filter typ: " + (isTotal ? "TOTAL" : "FILTERED") + " (" + filter.popis + ")", "filter");
    
    var rezultat = {
        odpracovaneFiltrovane: 0,
        odpracovaneTotal: 0,
        zarobeneFiltrovane: 0,
        zarobeneTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        chybneZaznamy: 0
    };
    
    try {
        var dochadzkaZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.dochadzka, CONFIG.linksFromFields.dochadzkaZamestnanci);
        
        if (!dochadzkaZaznamy || dochadzkaZaznamy.length === 0) {
            addDebug("≈Ωiadne doch√°dzka z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = dochadzkaZaznamy.length;
        rezultat.celkoveZaznamy = stats.celkoveZaznamy;
        addDebug("Sprac√∫vam " + stats.celkoveZaznamy + " doch√°dzka z√°znamov", "database");
        
        for (var i = 0; i < dochadzkaZaznamy.length; i++) {
            try {
                var zaznam = dochadzkaZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var pracovnaDoba = safeFieldAccess(zaznam, CONFIG.recordFields.pracovnaDoba, 0);
                
                // Z√≠skaj denn√∫ mzdu z atrib√∫tov - OPRAVEN√â: getAttr ‚Üí attr
                var dennaMzda = 0;
                try {
                    dennaMzda = zaznam.attr("denn√° mzda") || 0;
                } catch (attrError) {
                    addDebug("Atrib√∫t 'denn√° mzda' nedostupn√Ω pre z√°znam " + i, "warning");
                }
                
                // OPRAVEN√â: Pre TOTAL aj FILTERED pou≈æ√≠vaj filter
                if (dateMatchesFilter(datum, filter)) {
                    if (isTotal) {
                        rezultat.odpracovaneTotal += pracovnaDoba;
                        rezultat.zarobeneTotal += dennaMzda;
                    } else {
                        rezultat.odpracovaneFiltrovane += pracovnaDoba;
                        rezultat.zarobeneFiltrovane += dennaMzda;
                    }
                    stats.zahrnuteZaznamy++;
                }
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba doch√°dzka z√°znam " + i + ": " + zaznamError.toString(), "spracujDochadzku");
            }
        }
        
        // SUMMARY REPORT
        addDebug("DOCH√ÅDZKA SUMMARY:", "summary");
        addDebug("üìä Z√°znamy: " + stats.celkoveZaznamy + " total, " + stats.zahrnuteZaznamy + " zahrnut√©, " + stats.chybneZaznamy + " ch√Ωb", "info");
        
        if (isTotal) {
            addDebug("üìà Total (" + filter.popis + "): " + rezultat.odpracovaneTotal.toFixed(2) + "h, " + rezultat.zarobeneTotal.toFixed(2) + "‚Ç¨", "calculation");
        } else {
            addDebug("üìà Filtrovan√© (" + filter.popis + "): " + rezultat.odpracovaneFiltrovane.toFixed(2) + "h, " + rezultat.zarobeneFiltrovane.toFixed(2) + "‚Ç¨", "calculation");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujDochadzku");
    }
    
    return rezultat;
}

function spracujZaznamPrac(zamestnanecEntry, filter, isTotal) {
    addDebug("=== Z√ÅZNAM PR√ÅC SPRACOVANIE ===", "database");
    addDebug("Filter typ: " + (isTotal ? "TOTAL" : "FILTERED") + " (" + filter.popis + ")", "filter");
    
    var rezultat = {
        naZakazkachFiltrovane: 0,
        naZakazkachTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        chybneZaznamy: 0
    };
    
    try {
        var zaznamyPrac = zamestnanecEntry.linksFrom(CONFIG.libraries.zaznamPrac, CONFIG.linksFromFields.zaznamZamestnanci);
        
        if (!zaznamyPrac || zaznamyPrac.length === 0) {
            addDebug("≈Ωiadne z√°znam pr√°c z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = zaznamyPrac.length;
        rezultat.celkoveZaznamy = stats.celkoveZaznamy;
        addDebug("Sprac√∫vam " + stats.celkoveZaznamy + " z√°znam pr√°c z√°znamov", "database");
        
        for (var i = 0; i < zaznamyPrac.length; i++) {
            try {
                var zaznam = zaznamyPrac[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var pracovnaDoba = safeFieldAccess(zaznam, CONFIG.recordFields.pracovnaDoba, 0);
                
                // OPRAVEN√â: Pre TOTAL aj FILTERED pou≈æ√≠vaj filter
                if (dateMatchesFilter(datum, filter)) {
                    if (isTotal) {
                        rezultat.naZakazkachTotal += pracovnaDoba;
                    } else {
                        rezultat.naZakazkachFiltrovane += pracovnaDoba;
                    }
                    stats.zahrnuteZaznamy++;
                }
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba z√°znam pr√°c " + i + ": " + zaznamError.toString(), "spracujZaznamPrac");
            }
        }
        
        // SUMMARY REPORT
        addDebug("Z√ÅZNAM PR√ÅC SUMMARY:", "summary");
        addDebug("üìä Z√°znamy: " + stats.celkoveZaznamy + " total, " + stats.zahrnuteZaznamy + " zahrnut√©, " + stats.chybneZaznamy + " ch√Ωb", "info");
        
        if (isTotal) {
            addDebug("üìà Total (" + filter.popis + "): " + rezultat.naZakazkachTotal.toFixed(2) + "h", "calculation");
        } else {
            addDebug("üìà Filtrovan√© (" + filter.popis + "): " + rezultat.naZakazkachFiltrovane.toFixed(2) + "h", "calculation");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujZaznamPrac");
    }
    
    return rezultat;
}

function spracujKnihaJazd(zamestnanecEntry, filter, isTotal) {
    addDebug("=== KNIHA J√ÅZD SPRACOVANIE ===", "database");
    addDebug("Filter typ: " + (isTotal ? "TOTAL" : "FILTERED") + " (" + filter.popis + ")", "filter");
    
    var rezultat = {
        jazdyFiltrovane: 0,
        jazdyTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        chybneZaznamy: 0
    };
    
    try {
        var knihaZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.knihaJazd, CONFIG.linksFromFields.knihaPosadka);
        
        if (!knihaZaznamy || knihaZaznamy.length === 0) {
            addDebug("≈Ωiadne kniha j√°zd z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = knihaZaznamy.length;
        rezultat.celkoveZaznamy = stats.celkoveZaznamy;
        addDebug("Sprac√∫vam " + stats.celkoveZaznamy + " kniha j√°zd z√°znamov", "database");
        
        for (var i = 0; i < knihaZaznamy.length; i++) {
            try {
                var zaznam = knihaZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var celkovyCas = safeFieldAccess(zaznam, CONFIG.recordFields.celkovyCas, 0);
                
                // OPRAVEN√â: Pre TOTAL aj FILTERED pou≈æ√≠vaj filter
                if (dateMatchesFilter(datum, filter)) {
                    if (isTotal) {
                        rezultat.jazdyTotal += celkovyCas;
                    } else {
                        rezultat.jazdyFiltrovane += celkovyCas;
                    }
                    stats.zahrnuteZaznamy++;
                }
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba kniha j√°zd " + i + ": " + zaznamError.toString(), "spracujKnihaJazd");
            }
        }
        
        // SUMMARY REPORT
        addDebug("KNIHA J√ÅZD SUMMARY:", "summary");
        addDebug("üìä Z√°znamy: " + stats.celkoveZaznamy + " total, " + stats.zahrnuteZaznamy + " zahrnut√©, " + stats.chybneZaznamy + " ch√Ωb", "info");
        
        if (isTotal) {
            addDebug("üìà Total (" + filter.popis + "): " + rezultat.jazdyTotal.toFixed(2) + "h", "calculation");
        } else {
            addDebug("üìà Filtrovan√© (" + filter.popis + "): " + rezultat.jazdyFiltrovane.toFixed(2) + "h", "calculation");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujKnihaJazd");
    }
    
    return rezultat;
}

// ==============================================
// NOV√â: POKLAD≈áA SPRACOVANIE
// ==============================================

function spracujPokladna(zamestnanecEntry, filter, isTotal) {
    addDebug("=== POKLAD≈áA SPRACOVANIE ===", "database");
    addDebug("Filter typ: " + (isTotal ? "TOTAL" : "FILTERED") + " (" + filter.popis + ")", "filter");
    
    var rezultat = {
        pokladnaFiltrovane: 0,
        pokladnaTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        chybneZaznamy: 0,
        vyluceneUcel: 0
    };
    
    try {
        var pokladnaZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.pokladna, CONFIG.linksFromFields.pokladnaZamestnanec);
        
        if (!pokladnaZaznamy || pokladnaZaznamy.length === 0) {
            addDebug("≈Ωiadne poklad≈àa z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = pokladnaZaznamy.length;
        rezultat.celkoveZaznamy = stats.celkoveZaznamy;
        addDebug("Sprac√∫vam " + stats.celkoveZaznamy + " poklad≈àa z√°znamov", "database");
        
        for (var i = 0; i < pokladnaZaznamy.length; i++) {
            try {
                var zaznam = pokladnaZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var suma = safeFieldAccess(zaznam, CONFIG.recordFields.suma, 0);
                var ucelVydaja = safeFieldAccess(zaznam, CONFIG.recordFields.ucelVydaja, "");
                
                // FILTER LEN "Mzda" a "Mzda z√°loha"
                if (ucelVydaja !== "Mzda" && ucelVydaja !== "Mzda z√°loha") {
                    stats.vyluceneUcel++;
                    continue; // Preskoƒçi≈• tento z√°znam
                }
                
                // OPRAVEN√â: Pre TOTAL aj FILTERED pou≈æ√≠vaj filter
                if (dateMatchesFilter(datum, filter)) {
                    if (isTotal) {
                        rezultat.pokladnaTotal += suma;
                    } else {
                        rezultat.pokladnaFiltrovane += suma;
                    }
                    stats.zahrnuteZaznamy++;
                }
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba poklad≈àa z√°znam " + i + ": " + zaznamError.toString(), "spracujPokladna");
            }
        }
        
        // SUMMARY REPORT
        addDebug("POKLAD≈áA SUMMARY:", "summary");
        addDebug("üìä Z√°znamy: " + stats.celkoveZaznamy + " total, " + stats.zahrnuteZaznamy + " mzdov√©, " + stats.vyluceneUcel + " vyl√∫ƒçen√© (in√Ω √∫ƒçel), " + stats.chybneZaznamy + " ch√Ωb", "info");
        
        if (isTotal) {
            addDebug("üí∞ Total vyplaten√© (" + filter.popis + "): " + rezultat.pokladnaTotal.toFixed(2) + "‚Ç¨", "money");
        } else {
            addDebug("üí∞ Filtrovan√© vyplaten√© (" + filter.popis + "): " + rezultat.pokladnaFiltrovane.toFixed(2) + "‚Ç¨", "money");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujPokladna");
    }
    
    return rezultat;
}

function spracujPohladavky(zamestnanecEntry, filter, isTotal) {
    addDebug("=== POHƒΩAD√ÅVKY SPRACOVANIE ===", "database");
    addDebug("Filter typ: " + (isTotal ? "TOTAL" : "FILTERED") + " (" + filter.popis + ")", "filter");
    
    var rezultat = {
        pohladavkyFiltrovane: 0,
        pohladavkyTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        chybneZaznamy: 0
    };
    
    try {
        var pohladavkyZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.pohladavky, CONFIG.linksFromFields.pohladavkyZamestnanec);
        
        if (!pohladavkyZaznamy || pohladavkyZaznamy.length === 0) {
            addDebug("≈Ωiadne pohƒæad√°vky z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = pohladavkyZaznamy.length;
        rezultat.celkoveZaznamy = stats.celkoveZaznamy;
        addDebug("Sprac√∫vam " + stats.celkoveZaznamy + " pohƒæad√°vky z√°znamov", "database");
        
        for (var i = 0; i < pohladavkyZaznamy.length; i++) {
            try {
                var zaznam = pohladavkyZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var zostatok = safeFieldAccess(zaznam, CONFIG.recordFields.zostatok, 0);
                
                // OPRAVEN√â: Pre TOTAL aj FILTERED pou≈æ√≠vaj filter
                if (dateMatchesFilter(datum, filter)) {
                    if (isTotal) {
                        rezultat.pohladavkyTotal += zostatok;
                    } else {
                        rezultat.pohladavkyFiltrovane += zostatok;
                    }
                    stats.zahrnuteZaznamy++;
                }
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba pohƒæad√°vky z√°znam " + i + ": " + zaznamError.toString(), "spracujPohladavky");
            }
        }
        
        // SUMMARY REPORT
        addDebug("POHƒΩAD√ÅVKY SUMMARY:", "summary");
        addDebug("üìä Z√°znamy: " + stats.celkoveZaznamy + " total, " + stats.zahrnuteZaznamy + " zahrnut√©, " + stats.chybneZaznamy + " ch√Ωb", "info");
        
        if (isTotal) {
            addDebug("üí∞ Total zostatok (" + filter.popis + "): " + rezultat.pohladavkyTotal.toFixed(2) + "‚Ç¨", "money");
        } else {
            addDebug("üí∞ Filtrovan√© zostatok (" + filter.popis + "): " + rezultat.pohladavkyFiltrovane.toFixed(2) + "‚Ç¨", "money");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujPohladavky");
    }
    
    return rezultat;
}

function spracujZavazky(zamestnanecEntry, filter, isTotal) {
    addDebug("=== Z√ÅV√ÑZKY SPRACOVANIE ===", "database");
    addDebug("Filter typ: " + (isTotal ? "TOTAL" : "FILTERED") + " (" + filter.popis + ")", "filter");
    
    var rezultat = {
        zavazkyFiltrovane: 0,
        zavazkyTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        chybneZaznamy: 0
    };
    
    try {
        var zavazkyZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.zavazky, CONFIG.linksFromFields.zavazkyZamestnanec);
        
        if (!zavazkyZaznamy || zavazkyZaznamy.length === 0) {
            addDebug("≈Ωiadne z√°v√§zky z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = zavazkyZaznamy.length;
        rezultat.celkoveZaznamy = stats.celkoveZaznamy;
        addDebug("Sprac√∫vam " + stats.celkoveZaznamy + " z√°v√§zky z√°znamov", "database");
        
        for (var i = 0; i < zavazkyZaznamy.length; i++) {
            try {
                var zaznam = zavazkyZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var zostatok = safeFieldAccess(zaznam, CONFIG.recordFields.zostatok, 0);
                
                // OPRAVEN√â: Pre TOTAL aj FILTERED pou≈æ√≠vaj filter
                if (dateMatchesFilter(datum, filter)) {
                    if (isTotal) {
                        rezultat.zavazkyTotal += zostatok;
                    } else {
                        rezultat.zavazkyFiltrovane += zostatok;
                    }
                    stats.zahrnuteZaznamy++;
                }
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba z√°v√§zky z√°znam " + i + ": " + zaznamError.toString(), "spracujZavazky");
            }
        }
        
        // SUMMARY REPORT
        addDebug("Z√ÅV√ÑZKY SUMMARY:", "summary");
        addDebug("üìä Z√°znamy: " + stats.celkoveZaznamy + " total, " + stats.zahrnuteZaznamy + " zahrnut√©, " + stats.chybneZaznamy + " ch√Ωb", "info");
        
        if (isTotal) {
            addDebug("üí∞ Total zostatok (" + filter.popis + "): " + rezultat.zavazkyTotal.toFixed(2) + "‚Ç¨", "money");
        } else {
            addDebug("üí∞ Filtrovan√© zostatok (" + filter.popis + "): " + rezultat.zavazkyFiltrovane.toFixed(2) + "‚Ç¨", "money");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujZavazky");
    }
    
    return rezultat;
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        addDebug("=== ≈†TART PREPOƒåTU ZAMESTNANCA ===", "start");
        addDebug("Script verzia: " + CONFIG.version, "info");
        
        // KROK 1: Valid√°cia z√°kladn√Ωch √∫dajov
        addDebug("KROK 1: Z√≠skavam z√°kladn√© √∫daje...", "step");
        
        var nick = safeFieldAccess(currentEntry, CONFIG.fields.nick);
        var meno = safeFieldAccess(currentEntry, CONFIG.fields.meno, "");
        var priezvisko = safeFieldAccess(currentEntry, CONFIG.fields.priezvisko, "");
        var vyberObdobia = safeFieldAccess(currentEntry, CONFIG.fields.vyberObdobia, "");
        var obdobieTotal = safeFieldAccess(currentEntry, CONFIG.fields.obdobieTotal, "");
        
        if (!nick) {
            addError("Nick je povinn√Ω identifik√°tor", "validation");
            saveLogsToEntry();
            return false;
        }
        
        var fullName = nick + " (" + meno + " " + priezvisko + ")";
        addDebug("Zamestnanec: " + fullName, "person");
        addDebug("V√Ωber obdobia: '" + vyberObdobia + "'", "filter");
        addDebug("Obdobie total: '" + obdobieTotal + "'", "filter");
        
        // KROK 2: Parsovanie oboch filtrov
        addDebug("KROK 2: Parsovanie d√°tumov√Ωch filtrov...", "step");
        
        var filter = parseFilterDateRange(vyberObdobia);
        var filterTotal = parseFilterDateRange(obdobieTotal);
        
        if (!filter.isValid) {
            addError("Neplatn√Ω filter 'v√Ωber obdobia': " + filter.reason, "filter");
            saveLogsToEntry();
            return false;
        }
        
        if (!filterTotal.isValid) {
            addError("Neplatn√Ω filter 'obdobie total': " + filterTotal.reason, "filter");
            saveLogsToEntry();
            return false;
        }
        
        addDebug("Filter pre filtrovan√© √∫spe≈°ne parsovan√Ω: " + filter.popis, "success");
        addDebug("Filter pre total √∫spe≈°ne parsovan√Ω: " + filterTotal.popis, "success");
        addDebug("Podporovan√© form√°ty: 'Tento rok', 'Tento t√Ω≈æde≈à', 'Total', 'V≈°etko', 'MM/YYYY', 'YYYY'", "info");
        
        // KROK 3: Spracovanie v≈°etk√Ωch kni≈æn√≠c
        addDebug("KROK 3: Spracovanie v≈°etk√Ωch kni≈æn√≠c...", "step");
        
        // Filtrovan√© √∫daje (pou≈æ√≠va vyberObdobia filter)
        var dochadzkaData = spracujDochadzku(currentEntry, filter, false);
        var zaznamPracData = spracujZaznamPrac(currentEntry, filter, false);
        var knihaJazdData = spracujKnihaJazd(currentEntry, filter, false);
        var pokladnaData = spracujPokladna(currentEntry, filter, false);
        
        // OPRAVEN√â: Pohƒæad√°vky/Z√°v√§zky pou≈æ√≠vaj√∫ filter (v√Ωber obdobia) nie filterTotal
        var pohladavkyData = spracujPohladavky(currentEntry, filter, false);
        var zavazkyData = spracujZavazky(currentEntry, filter, false);
        
        // Total √∫daje (pou≈æ√≠va obdobieTotal filter)
        var dochadzkaDataTotal = spracujDochadzku(currentEntry, filterTotal, true);
        var zaznamPracDataTotal = spracujZaznamPrac(currentEntry, filterTotal, true);
        var knihaJazdDataTotal = spracujKnihaJazd(currentEntry, filterTotal, true);
        var pokladnaDataTotal = spracujPokladna(currentEntry, filterTotal, true);
        
        // KROK 4: V√Ωpoƒçet aktu√°lnej hodinovky
        addDebug("KROK 4: V√Ωpoƒçet aktu√°lnej hodinovky...", "step");
        
        var aktualnaHodinovka = 0;
        try {
            var sadzbyLib = libByName(CONFIG.libraries.sadzby);
            if (!sadzbyLib) {
                addError("Kni≈ænica '" + CONFIG.libraries.sadzby + "' nen√°jden√°", "aktualnaHodinovka");
            } else {
                addDebug("Hƒæad√°m sadzby pre zamestnancea...", "database");
                var platneSadzby = sadzbyLib.find(CONFIG.linksFromFields.sadzbyZamestnanec, currentEntry);
                
                addDebug("N√°jden√Ωch sadzieb: " + (platneSadzby ? platneSadzby.length : 0), "database");
                
                if (platneSadzby && platneSadzby.length > 0) {
                    // N√°jdi najnov≈°iu platn√∫ sadzbu
                    var najnovsiaPlat = null;
                    var najnovsiDatum = null;
                    
                    for (var i = 0; i < platneSadzby.length; i++) {
                        var sadzba = platneSadzby[i];
                        var platnostOd = safeFieldAccess(sadzba, CONFIG.recordFields.platnostOd);
                        var hodnotaSadzby = safeFieldAccess(sadzba, CONFIG.recordFields.sadzba, 0);
                        
                        addDebug("Sadzba " + (i+1) + ": " + hodnotaSadzby + "‚Ç¨/h od " + (platnostOd ? moment(platnostOd).format('DD.MM.YYYY') : 'N/A'), "database");
                        
                        if (platnostOd && (!najnovsiDatum || moment(platnostOd).isAfter(najnovsiDatum))) {
                            najnovsiDatum = moment(platnostOd);
                            najnovsiaPlat = sadzba;
                        }
                    }
                    
                    if (najnovsiaPlat) {
                        aktualnaHodinovka = safeFieldAccess(najnovsiaPlat, CONFIG.recordFields.sadzba, 0);
                        addDebug("‚úÖ Aktu√°lna hodinovka: " + aktualnaHodinovka + " ‚Ç¨/h (platn√° od " + najnovsiDatum.format('DD.MM.YYYY') + ")", "money");
                    } else {
                        addDebug("‚ö†Ô∏è ≈Ωiadna sadzba nem√° platn√Ω d√°tum", "warning");
                    }
                } else {
                    addDebug("‚ö†Ô∏è Pre zamestnanca neboli n√°jden√© ≈æiadne sadzby", "warning");
                }
            }
            
        } catch (hodinovkaError) {
            addError("Chyba pri z√≠skavan√≠ hodinovky: " + hodinovkaError.toString(), "aktualnaHodinovka");
        }
        
        // KROK 5: V√Ωpoƒçet SALDO a PREPLATOK/NEDOPLATOK
        addDebug("KROK 5: V√Ωpoƒçet Saldo a Preplatok/Nedoplatok...", "step");
        
        var saldo = pohladavkyData.pohladavkyTotal - zavazkyData.zavazkyTotal;
        var preplatokNedoplatok = dochadzkaData.zarobeneFiltrovane - pokladnaData.pokladnaFiltrovane;
        
        addDebug("Saldo v√Ωpoƒçet (pou≈æ√≠va filter 'v√Ωber obdobia'):", "calculation");
        addDebug("  Pohƒæad√°vky: " + pohladavkyData.pohladavkyTotal.toFixed(2) + "‚Ç¨", "calculation");
        addDebug("  Z√°v√§zky: " + zavazkyData.zavazkyTotal.toFixed(2) + "‚Ç¨", "calculation");
        addDebug("  Saldo = " + pohladavkyData.pohladavkyTotal.toFixed(2) + "‚Ç¨ - " + 
                zavazkyData.zavazkyTotal.toFixed(2) + "‚Ç¨ = " + saldo.toFixed(2) + "‚Ç¨", "calculation");
        
        addDebug("Preplatok/Nedoplatok v√Ωpoƒçet:", "calculation");
        addDebug("  Zaroben√© (filtrovan√©): " + dochadzkaData.zarobeneFiltrovane.toFixed(2) + "‚Ç¨", "calculation");
        addDebug("  Vyplaten√© (filtrovan√©): " + pokladnaData.pokladnaFiltrovane.toFixed(2) + "‚Ç¨", "calculation");
        addDebug("  Preplatok/Nedoplatok = " + dochadzkaData.zarobeneFiltrovane.toFixed(2) + "‚Ç¨ - " + 
                pokladnaData.pokladnaFiltrovane.toFixed(2) + "‚Ç¨ = " + preplatokNedoplatok.toFixed(2) + "‚Ç¨", "calculation");
        
        // KROK 6: Ulo≈æenie v≈°etk√Ωch v√Ωsledkov
        addDebug("KROK 6: Ulo≈æenie v√Ωsledkov...", "step");
        
        var fieldsToUpdate = [
            // Filtrovan√© √∫daje (pou≈æ√≠va vyberObdobia)
            [CONFIG.fields.odpracovane, dochadzkaData.odpracovaneFiltrovane],
            [CONFIG.fields.naZakazkach, zaznamPracData.naZakazkachFiltrovane],
            [CONFIG.fields.jazdy, knihaJazdData.jazdyFiltrovane],
            [CONFIG.fields.zarobene, dochadzkaData.zarobeneFiltrovane],
            [CONFIG.fields.vyplatene, pokladnaData.pokladnaFiltrovane],
            
            // Total √∫daje (pou≈æ√≠va obdobieTotal)
            [CONFIG.fields.odpracovaneTotal, dochadzkaDataTotal.odpracovaneTotal],
            [CONFIG.fields.naZakazkachTotal, zaznamPracDataTotal.naZakazkachTotal],
            [CONFIG.fields.jazdyTotal, knihaJazdDataTotal.jazdyTotal],
            [CONFIG.fields.zarobeneTotal, dochadzkaDataTotal.zarobeneTotal],
            [CONFIG.fields.vyplateneTotal, pokladnaDataTotal.pokladnaTotal],
            
            // Finansie (pou≈æ√≠vaj√∫ filter 'v√Ωber obdobia')
            [CONFIG.fields.pohladavky, pohladavkyData.pohladavkyTotal],
            [CONFIG.fields.zavazky, zavazkyData.zavazkyTotal],
            [CONFIG.fields.saldo, saldo],
            [CONFIG.fields.preplatokNedoplatok, preplatokNedoplatok],
            
            // Ostatn√© √∫daje
            [CONFIG.fields.aktualnaHodinovka, aktualnaHodinovka]
        ];
        
        var savedFields = 0;
        for (var i = 0; i < fieldsToUpdate.length; i++) {
            try {
                currentEntry.set(fieldsToUpdate[i][0], fieldsToUpdate[i][1]);
                savedFields++;
            } catch (saveError) {
                addError("Chyba pri ulo≈æen√≠ poƒæa '" + fieldsToUpdate[i][0] + "': " + saveError.toString(), "save");
            }
        }
        
        addDebug("Ulo≈æen√Ωch pol√≠: " + savedFields + "/" + fieldsToUpdate.length, "success");
        
        // KROK 7: Info z√°znam s kompletn√Ωmi v√Ωpoƒçtami
        addDebug("KROK 7: Vytvorenie roz≈°√≠ren√©ho info z√°znamu...", "step");
        
        var timestamp = moment().format("DD.MM.YYYY HH:mm:ss");
        var infoMessage = CONFIG.icons.success + " PREPOƒåET DOKONƒåEN√ù " + timestamp + "\n" +
                         "=====================================\n" +
                         CONFIG.icons.person + " ZAMESTNANEC: " + fullName + "\n" +
                         CONFIG.icons.filter + " Filter (filtrovan√©): " + filter.popis + "\n" +
                         CONFIG.icons.filter + " Filter (total): " + filterTotal.popis + "\n\n" +
                         
                         "üìä ODPRACOVAN√ù ƒåAS:\n" +
                         "‚Ä¢ Odpracovan√©: " + dochadzkaData.odpracovaneFiltrovane.toFixed(2) + "h\n" +
                         "‚Ä¢ Odpracovan√© total: " + dochadzkaDataTotal.odpracovaneTotal.toFixed(2) + "h\n" +
                         "‚Ä¢ Na z√°kazk√°ch: " + zaznamPracData.naZakazkachFiltrovane.toFixed(2) + "h\n" +
                         "‚Ä¢ Na z√°kazk√°ch total: " + zaznamPracDataTotal.naZakazkachTotal.toFixed(2) + "h\n" +
                         "‚Ä¢ Jazdy: " + knihaJazdData.jazdyFiltrovane.toFixed(2) + "h\n" +
                         "‚Ä¢ Jazdy total: " + knihaJazdDataTotal.jazdyTotal.toFixed(2) + "h\n\n" +
                         
                         "üí∞ MZDY A FINANCIE:\n" +
                         "‚Ä¢ Aktu√°lna hodinovka: " + aktualnaHodinovka.toFixed(2) + " ‚Ç¨/h\n" +
                         "‚Ä¢ Zaroben√©: " + dochadzkaData.zarobeneFiltrovane.toFixed(2) + "‚Ç¨\n" +
                         "‚Ä¢ Zaroben√© total: " + dochadzkaDataTotal.zarobeneTotal.toFixed(2) + "‚Ç¨\n" +
                         "‚Ä¢ Vyplaten√©: " + pokladnaData.pokladnaFiltrovane.toFixed(2) + "‚Ç¨\n" +
                         "‚Ä¢ Vyplaten√© total: " + pokladnaDataTotal.pokladnaTotal.toFixed(2) + "‚Ç¨\n\n" +
                         
                         "üìà POHƒΩAD√ÅVKY A Z√ÅV√ÑZKY (filter: v√Ωber obdobia):\n" +
                         "‚Ä¢ Pohƒæad√°vky (zostatok): " + pohladavkyData.pohladavkyTotal.toFixed(2) + "‚Ç¨\n" +
                         "‚Ä¢ Z√°v√§zky (zostatok): " + zavazkyData.zavazkyTotal.toFixed(2) + "‚Ç¨\n" +
                         "‚Ä¢ Saldo = Pohƒæad√°vky - Z√°v√§zky: " + saldo.toFixed(2) + "‚Ç¨\n\n" +
                         
                         "üßÆ V√ùPOƒåTY:\n" +
                         "‚Ä¢ Preplatok/Nedoplatok = Zaroben√© - Vyplaten√©\n" +
                         "‚Ä¢ " + dochadzkaData.zarobeneFiltrovane.toFixed(2) + "‚Ç¨ - " + pokladnaData.pokladnaFiltrovane.toFixed(2) + "‚Ç¨ = " + preplatokNedoplatok.toFixed(2) + "‚Ç¨\n" +
                         "‚Ä¢ Saldo = Pohƒæad√°vky - Z√°v√§zky (pou≈æ√≠va filter 'v√Ωber obdobia')\n" +
                         "‚Ä¢ " + pohladavkyData.pohladavkyTotal.toFixed(2) + "‚Ç¨ - " + zavazkyData.zavazkyTotal.toFixed(2) + "‚Ç¨ = " + saldo.toFixed(2) + "‚Ç¨\n\n" +
                         
                         "üìä ≈†TATISTIKY Z√ÅZNAMOV:\n" +
                         "‚Ä¢ Doch√°dzka: " + (dochadzkaData.celkoveZaznamy || 0) + " z√°znamov\n" +
                         "‚Ä¢ Z√°znam pr√°c: " + (zaznamPracData.celkoveZaznamy || 0) + " z√°znamov\n" +
                         "‚Ä¢ Kniha j√°zd: " + (knihaJazdData.celkoveZaznamy || 0) + " z√°znamov\n" +
                         "‚Ä¢ Pohƒæad√°vky: " + (pohladavkyData.celkoveZaznamy || 0) + " z√°znamov\n" +
                         "‚Ä¢ Z√°v√§zky: " + (zavazkyData.celkoveZaznamy || 0) + " z√°znamov\n" +
                         "‚Ä¢ Poklad≈àa: " + (pokladnaData.celkoveZaznamy || 0) + " z√°znamov (len Mzda + Mzda z√°loha)\n\n" +
                         
                         CONFIG.icons.database + " Script v" + CONFIG.version + " | Ulo≈æen√Ωch pol√≠: " + savedFields + "/15";
        
        try {
            currentEntry.set(CONFIG.fields.info, infoMessage);
            addDebug("Info z√°znam vytvoren√Ω", "success");
        } catch (infoError) {
            addError("Chyba pri vytv√°ran√≠ info z√°znamu: " + infoError.toString(), "info");
        }
        
        addDebug("=== PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE ===", "success");
        addDebug("üìä Celkovo spracovan√Ωch kni≈æn√≠c: 6", "summary");
        addDebug("üíæ Ulo≈æen√Ωch pol√≠: " + savedFields + "/14", "summary");
        addDebug("üí∞ Fin√°lne hodnoty: Saldo=" + saldo.toFixed(2) + "‚Ç¨, Preplatok/Nedoplatok=" + preplatokNedoplatok.toFixed(2) + "‚Ç¨", "summary");
        saveLogsToEntry();
        return true;
        
    } catch (error) {
        addError("Kritick√° chyba v main(): " + error.toString(), "main");
        saveLogsToEntry();
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();