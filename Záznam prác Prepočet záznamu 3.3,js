// ==============================================
// MEMENTO DATABASE - Z√ÅZNAM PR√ÅC PREPOƒåET Z√ÅZNAMU
// Verzia: 3.3 | D√°tum: 12.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Z√°znam pr√°c | Trigger: Before Save
// ==============================================
// ‚úÖ NOV√â v3.3 - CLEAN CODE REVOLUTION:
//    - POVINN√Å MementoUtils kni≈ænica - bez nej script skonƒç√≠ s chybou
//    - Odstr√°nen√© V≈†ETKY fallback implement√°cie 
//    - Maxim√°lne vyu≈æitie MementoUtils funkci√≠
//    - ƒåist√Ω, √∫sporn√Ω k√≥d bez duplic√≠t
//    - Jasn√© error handling ak MementoUtils ch√Ωba
// ‚úÖ FUNKCIONALITY nezmenen√©:
//    - Zaokr√∫hƒæovanie ƒçasov Od/Do na 15 min√∫t
//    - V√Ωpoƒçet pracovnej doby a odpracovan√Ωch hod√≠n
//    - Automatick√© hƒæadanie sadzieb zamestnancov
//    - HZS spracovanie s auto-linkovan√≠m defaults
//    - V√Ωkaz pr√°c linksFrom spracovanie
//    - Info z√°znamy pre audit trail
// ==============================================

// ==============================================
// KRITICK√Å KONTROLA - MEMENTOUTILS AVAILABILITY
// ==============================================

if (typeof MementoUtils === 'undefined') {
    var errorMsg = "‚ùå KRITICK√Å CHYBA!\n\n" +
                  "üîß MementoUtils kni≈ænica nie je dostupn√°!\n\n" +
                  "üìã RIE≈†ENIE:\n" +
                  "1. Nahraj MementoUtils.js do Libraries kni≈ænice\n" +
                  "2. Skontroluj ƒçi je kni≈ænica spr√°vne importovan√°\n" +
                  "3. Spus≈• script znovu\n\n" +
                  "‚ö†Ô∏è Script sa ukonƒçil bez zmien.";
    
    message(errorMsg);
    
    // Pok√∫s sa zap√≠sa≈• error aj do Error_Log ak je mo≈æn√©
    try {
        var timestamp = moment().format("YYYY-MM-DD HH:mm:ss");
        var errorLog = "[" + timestamp + "] v3.3 - MementoUtils kni≈ænica nie je dostupn√°! Script ukonƒçen√Ω.";
        var existingError = currentEntry.field("Error_Log") || "";
        currentEntry.set("Error_Log", existingError + errorLog + "\n");
    } catch (e) {
        // Ak ani toto nefunguje, len message u≈æ bol zobrazen√Ω
    }
    
    // Ukonƒçi script
    throw new Error("MementoUtils kni≈ænica nie je dostupn√°");
}

// Overenie verzie MementoUtils
if (!MementoUtils.version || MementoUtils.version < "2.0") {
    var versionError = "‚ùå NEKOMPATIBILN√Å VERZIA!\n\n" +
                      "üîß Potrebujem MementoUtils v2.0 alebo vy≈°≈°iu\n" +
                      "üìã Aktu√°lna verzia: " + (MementoUtils.version || "nezn√°ma") + "\n\n" +
                      "‚ö†Ô∏è Aktualizuj MementoUtils kni≈ænicu!";
    
    message(versionError);
    MementoUtils.addError(currentEntry, "Nekompatibiln√° MementoUtils verzia: " + (MementoUtils.version || "nezn√°ma"), "3.3");
    throw new Error("Nekompatibiln√° MementoUtils verzia");
}

// ==============================================
// KONFIGUR√ÅCIA
// ==============================================

var CONFIG = {
    debug: true,
    version: "3.3",
    scriptName: "Z√°znam pr√°c Prepoƒçet",
    
    // N√°zvy pol√≠ - Z√°znam pr√°c
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        od: "Od",
        do: "Do",  // Sk√∫sime najprv "Do", potom "Dp" ako fallback
        zakazka: "Z√°kazka",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        mzdoveNaklady: "Mzdov√© n√°klady",
        hodinovaZuctovacia: "Hodinov√° z√∫ƒçtovacia sadzba",
        sumaHZS: "Suma HZS",
        vykonanePrace: "Vykonan√© pr√°ce",
        info: "info"
    },
    
    // N√°zvy atrib√∫tov pre zamestnancov
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        mzdoveNaklady: "mzdov√© n√°klady"
    },
    
    // N√°zvy atrib√∫tov pre HZS
    hzsAttributes: {
        cena: "cena"
    },
    
    // N√°zvy atrib√∫tov pre V√Ωkaz pr√°c
    vykazAttributes: {
        vykonanePrace: "vykonan√© pr√°ce",
        pocetHodin: "poƒçet hod√≠n",
        uctoovanaSadzba: "√∫ƒçtovan√° sadzba",
        cenaCelkom: "cena celkom"
    },
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov",
        cennikPrac: "Cenn√≠k pr√°c",
        cenyPrac: "ceny pr√°c",
        defaulty: "ASISTANTO Defaults",
        vykazPrac: "V√Ωkaz pr√°c"
    },
    
    // N√°zvy pol√≠ v s√∫visiacich kni≈æniciach
    vykazFields: {
        zakazka: "Z√°kazka",
        praceHZS: "Pr√°ce HZS"
    },
    
    // Emoji ikony
    icons: {
        start: "üöÄ",
        step: "üìã",
        time: "‚è∞",
        person: "üë§",
        money: "üí∞", 
        success: "‚úÖ",
        warning: "‚ö†Ô∏è",
        error: "‚ùå",
        info: "üìã",
        work: "üîß"
    }
};

// ==============================================
// BUSINESS LOGIC FUNKCIE
// ==============================================

/**
 * Spracovanie zamestnancov - v√Ωpoƒçet odpracovan√Ωch hod√≠n a mzdov√Ωch n√°kladov
 * @param {Array} zamestnanci - Array zamestnancov
 * @param {Date} datum - D√°tum pr√°ce
 * @param {number} pracovnaDobaHodiny - Pracovn√° doba v hodin√°ch
 * @return {Object} {odpracovaneTotal: number, celkoveMzdy: number}
 */
function spracujZamestnancov(zamestnanci, datum, pracovnaDobaHodiny) {
    var vysledok = {
        odpracovaneTotal: 0,
        celkoveMzdy: 0
    };
    
    if (!zamestnanci || zamestnanci.length === 0) {
        MementoUtils.addDebug(currentEntry, "  ≈Ωiadni zamestnanci na spracovanie");
        return vysledok;
    }
    
    MementoUtils.addDebug(currentEntry, "  Sprac√∫vam " + zamestnanci.length + " zamestnancov...");
    
    for (var i = 0; i < zamestnanci.length; i++) {
        try {
            var zamestnanec = zamestnanci[i];
            if (!zamestnanec) {
                MementoUtils.addDebug(currentEntry, "    [" + i + "] Pr√°zdny zamestnanec - preskakujem");
                continue;
            }
            
            var displayName = MementoUtils.formatEmployeeName(zamestnanec);
            MementoUtils.addDebug(currentEntry, "    [" + i + "] Sprac√∫vam: " + displayName);
            
            // LinksFrom volanie s error handlingom
            var sadzby = MementoUtils.safeLinksFrom(zamestnanec, CONFIG.libraries.sadzbyZamestnancov, "Zamestnanec");
            
            var aktualnaHodinovka = 0;
            if (sadzby && sadzby.length > 0) {
                aktualnaHodinovka = MementoUtils.findValidSalaryForDate(sadzby, datum);
                MementoUtils.addDebug(currentEntry, "      Na≈°iel " + sadzby.length + " sadzieb, platn√°: " + aktualnaHodinovka + " ‚Ç¨/h");
            } else {
                MementoUtils.addDebug(currentEntry, "      ≈Ωiadne sadzby nen√°jden√©, pou≈æijem 0 ‚Ç¨/h");
            }
            
            // V√Ωpoƒçty
            var odpracovaneHodiny = pracovnaDobaHodiny;
            var mzdaNaklady = aktualnaHodinovka * odpracovaneHodiny;
            
            // Nastav atrib√∫ty - pou≈æ√≠vame MementoUtils
            MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.zamestnanci, i, CONFIG.attributes.odpracovane, odpracovaneHodiny);
            MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.zamestnanci, i, CONFIG.attributes.hodinovka, aktualnaHodinovka);
            MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.zamestnanci, i, CONFIG.attributes.mzdoveNaklady, mzdaNaklady);
            
            // Akumuluj totaly
            vysledok.odpracovaneTotal += odpracovaneHodiny;
            vysledok.celkoveMzdy += mzdaNaklady;
            
            MementoUtils.addDebug(currentEntry, "      " + CONFIG.icons.success + " Odpracovan√©: " + odpracovaneHodiny + "h, mzda: " + MementoUtils.formatMoney(mzdaNaklady));
            
        } catch (zamestnanecError) {
            MementoUtils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnanca[" + i + "]: " + zamestnanecError.toString(), CONFIG.version);
        }
    }
    
    MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " Zamestnanci spracovan√≠ - celkom " + vysledok.odpracovaneTotal + "h, " + MementoUtils.formatMoney(vysledok.celkoveMzdy));
    return vysledok;
}

/**
 * Spracovanie HZS s auto-linkovan√≠m defaults
 * @param {Date} datum - D√°tum pre hƒæadanie ceny
 * @return {Object} {hzsCena: number, sumaHZS: number, success: boolean}
 */
function spracujHZS(datum) {
    var vysledok = {
        hzsCena: 0,
        sumaHZS: 0,
        success: false
    };
    
    try {
        MementoUtils.addDebug(currentEntry, "  Kontrolujem HZS pole...");
        
        // Naƒç√≠taj HZS pole s auto-default linkovan√≠m
        var hzsPole = MementoUtils.setDefaultAndReload(currentEntry, CONFIG.fields.hodinovaZuctovacia, CONFIG.libraries.defaulty, "HZS");
        
        if (!hzsPole || hzsPole.length === 0) {
            MementoUtils.addError(currentEntry, "HZS pole zost√°va pr√°zdne aj po auto-linkovan√≠", CONFIG.version);
            return vysledok;
        }
        
        var hzsZaznam = hzsPole[0];
        MementoUtils.addDebug(currentEntry, "    M√°m HZS z√°znam, hƒæad√°m aktu√°lnu cenu...");
        
        // LinksFrom na ceny pr√°c
        var ceny = MementoUtils.safeLinksFrom(hzsZaznam, CONFIG.libraries.cenyPrac, "Pr√°ca");
        
        var aktualnaCena = 0;
        if (ceny && ceny.length > 0) {
            // N√°jdi najnov≈°iu platn√∫ cenu
            aktualnaCena = MementoUtils.findValidSalaryForDate(ceny, datum);
            MementoUtils.addDebug(currentEntry, "    " + CONFIG.icons.success + " Aktu√°lna HZS cena z " + ceny.length + " cien: " + MementoUtils.formatMoney(aktualnaCena));
        } else {
            // Fallback na z√°kladn√∫ cenu z HZS z√°znamu
            aktualnaCena = MementoUtils.safeGet(hzsZaznam, "Cena bez DPH", 0);
            MementoUtils.addDebug(currentEntry, "    Pou≈æ√≠vam z√°kladn√∫ cenu z HZS: " + MementoUtils.formatMoney(aktualnaCena));
        }
        
        if (aktualnaCena > 0) {
            vysledok.hzsCena = aktualnaCena;
            vysledok.sumaHZS = aktualnaCena; // Pre jeden z√°znam suma = cena
            vysledok.success = true;
            
            // Nastav atrib√∫t ceny
            MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.hodinovaZuctovacia, 0, CONFIG.hzsAttributes.cena, aktualnaCena);
            
            MementoUtils.addDebug(currentEntry, "    " + CONFIG.icons.success + " HZS spracovan√© √∫spe≈°ne: " + MementoUtils.formatMoney(aktualnaCena));
        } else {
            MementoUtils.addError(currentEntry, "≈Ωiadna platn√° cena HZS nen√°jden√° pre d√°tum " + moment(datum).format("DD.MM.YYYY"), CONFIG.version);
        }
        
        return vysledok;
        
    } catch (error) {
        MementoUtils.addError(currentEntry, "Chyba pri spracovan√≠ HZS: " + error.toString(), CONFIG.version);
        return vysledok;
    }
}

/**
 * Spracovanie v√Ωkazu pr√°c - linkovanie a atrib√∫ty
 * @param {Entry} zakazkaObj - Objekt z√°kazky
 * @param {Entry} currentEntry - Aktu√°lny z√°znam pr√°c
 * @param {number} hzsCena - Aktu√°lna HZS cena
 * @param {number} odpracovaneHodiny - Odpracovan√© hodiny
 */
function processVykazPrac(zakazkaObj, currentEntry, hzsCena, odpracovaneHodiny) {
    try {
        MementoUtils.addDebug(currentEntry, "  Kontrolujem v√Ωkaz pr√°c pre z√°kazku...");
        
        if (!zakazkaObj) {
            MementoUtils.addDebug(currentEntry, "  ≈Ωiadna z√°kazka - preskakujem v√Ωkaz pr√°c");
            return;
        }
        
        // Z√≠skaj v√Ωkazy pr√°c linknut√© na z√°kazku
        var vykazyPrac = MementoUtils.safeLinksFrom(zakazkaObj, CONFIG.libraries.vykazPrac, CONFIG.vykazFields.zakazka);
        
        if (!vykazyPrac || vykazyPrac.length === 0) {
            MementoUtils.addDebug(currentEntry, "  ≈Ωiadny v√Ωkaz pr√°c nen√°jden√Ω pre t√∫to z√°kazku");
            return;
        }
        
        MementoUtils.addDebug(currentEntry, "  Na≈°iel som " + vykazyPrac.length + " v√Ωkaz(ov) pr√°c");
        
        // Spracuj prv√Ω v√Ωkaz (zvyƒçajne je len jeden na z√°kazku)
        var vykaz = vykazyPrac[0];
        
        // Pridaj link na aktu√°lny z√°znam pr√°c
        var existujucePrace = MementoUtils.safeGet(vykaz, CONFIG.vykazFields.praceHZS, []);
        if (!Array.isArray(existujucePrace)) existujucePrace = [];
        
        existujucePrace.push(currentEntry);
        MementoUtils.safeSet(vykaz, CONFIG.vykazFields.praceHZS, existujucePrace);
        
        // Nastav atrib√∫ty linku - index je length - 1
        var linkIndex = existujucePrace.length - 1;
        
        // Z√≠skaj vykonan√© pr√°ce
        var vykonanePrace = MementoUtils.safeGet(currentEntry, CONFIG.fields.vykonanePrace, "");
        
        // Vypoƒç√≠taj cenu celkom
        var cenaCelkom = odpracovaneHodiny * hzsCena;
        
        // Nastav v≈°etky atrib√∫ty
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.vykonanePrace, vykonanePrace);
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.pocetHodin, odpracovaneHodiny);
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.uctoovanaSadzba, hzsCena);
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.cenaCelkom, cenaCelkom);
        
        MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " V√Ωkaz pr√°c aktualizovan√Ω:");
        MementoUtils.addDebug(currentEntry, "    ‚Ä¢ Vykonan√© pr√°ce: " + (vykonanePrace ? (vykonanePrace.length > 50 ? vykonanePrace.substring(0, 50) + "..." : vykonanePrace) : "N/A"));
        MementoUtils.addDebug(currentEntry, "    ‚Ä¢ Poƒçet hod√≠n: " + odpracovaneHodiny + "h");
        MementoUtils.addDebug(currentEntry, "    ‚Ä¢ √öƒçtovan√° sadzba: " + MementoUtils.formatMoney(hzsCena));
        MementoUtils.addDebug(currentEntry, "    ‚Ä¢ Cena celkom: " + MementoUtils.formatMoney(cenaCelkom));
        
    } catch (error) {
        MementoUtils.addError(currentEntry, "Chyba pri spracovan√≠ v√Ωkazu pr√°c: " + error.toString(), CONFIG.version);
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function hlavnaFunkcia() {
    MementoUtils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART PREPOƒåTU Z√ÅZNAMU PR√ÅC v" + CONFIG.version + " ===");
    MementoUtils.addDebug(currentEntry, "üì± Pou≈æ√≠vam MementoUtils v" + MementoUtils.version);
    
    // Premenn√© pre sledovanie √∫spe≈°nosti krokov
    var step1Success = false;
    var step2Success = false;
    var step3Success = false;
    var step4Success = false;
    var step5Success = false;
    var step6Success = false;
    var step7Success = false;
    
    // Z√°kladn√© premenn√©
    var datum = null;
    var odRaw = null;
    var doRaw = null;
    var odRounded = null;
    var doRounded = null;
    var zamestnanci = null;
    var zakazka = null;
    var pracovnaDobaHodiny = 0;
    var pocetPracovnikov = 0;
    var odpracovaneTotal = 0;
    var celkoveMzdy = 0;
    var hzsVysledok = null;
    
    // KROK 1: Naƒç√≠tanie a valid√°cia vstupn√Ωch d√°t
    try {
        MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 1: Naƒç√≠tavam vstupn√© d√°ta...");
        
        datum = MementoUtils.safeGet(currentEntry, CONFIG.fields.datum);
        odRaw = MementoUtils.safeGet(currentEntry, CONFIG.fields.od);
        
        // Sk√∫s najprv "Do", ak nefunguje, sk√∫s "Dp"
        doRaw = MementoUtils.safeGet(currentEntry, CONFIG.fields.do);
        if (!doRaw) {
            doRaw = MementoUtils.safeGet(currentEntry, "Dp");
            if (doRaw) {
                MementoUtils.addDebug(currentEntry, "  üìù Pozn√°mka: Pole 'Dp' pou≈æit√© namiesto 'Do'");
            }
        }
        
        zamestnanci = MementoUtils.safeGet(currentEntry, CONFIG.fields.zamestnanci, []);
        zakazka = MementoUtils.safeGet(currentEntry, CONFIG.fields.zakazka, []);
        
        MementoUtils.addDebug(currentEntry, "  üìÖ D√°tum: " + (datum ? moment(datum).format("DD.MM.YYYY") : "NULL"));
        MementoUtils.addDebug(currentEntry, "  üïê Od (raw): " + MementoUtils.formatTime(odRaw));
        MementoUtils.addDebug(currentEntry, "  üïê Do (raw): " + MementoUtils.formatTime(doRaw));
        MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.person + " Zamestnanci: " + (zamestnanci ? zamestnanci.length : 0));
        MementoUtils.addDebug(currentEntry, "  üì¶ Z√°kazka: " + (zakazka && zakazka.length > 0 ? "√Åno" : "Nie"));
        
        // Valid√°cia cez MementoUtils
        var validation = MementoUtils.validateRequiredFields(currentEntry, [CONFIG.fields.datum, CONFIG.fields.od, CONFIG.fields.zamestnanci]);
        if (!validation.isValid) {
            MementoUtils.addError(currentEntry, "Ch√Ωbaj√∫ povinn√© polia: " + validation.missingFields.join(", "), CONFIG.version);
            return false;
        }
        
        if (!doRaw) {
            MementoUtils.addError(currentEntry, "ƒåas 'Do' ani 'Dp' nie je vyplnen√Ω", CONFIG.version);
            return false;
        }
        
        if (!zamestnanci || zamestnanci.length === 0) {
            MementoUtils.addError(currentEntry, "≈Ωiadni zamestnanci nie s√∫ vybran√≠", CONFIG.version);
            return false;
        }
        
        step1Success = true;
        MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " Vstupn√© d√°ta s√∫ v poriadku");
        
    } catch (error) {
        MementoUtils.addError(currentEntry, "Chyba pri naƒç√≠tan√≠ vstupn√Ωch d√°t: " + error.toString(), CONFIG.version);
        return false;
    }
    
    // KROK 2: Zaokr√∫hƒæovanie ƒçasov na 15 min√∫t
    if (step1Success) {
        try {
            MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 2: Zaokr√∫hƒæujem ƒçasy na 15 min√∫t...");
            
            odRounded = MementoUtils.roundToQuarter(odRaw);
            doRounded = MementoUtils.roundToQuarter(doRaw);
            
            MementoUtils.addDebug(currentEntry, "  üïê Od zaokr√∫hlen√©: " + MementoUtils.formatTime(odRounded));
            MementoUtils.addDebug(currentEntry, "  üïê Do zaokr√∫hlen√©: " + MementoUtils.formatTime(doRounded));
            
            // Ulo≈æ zaokr√∫hlen√© ƒçasy
            MementoUtils.safeSet(currentEntry, CONFIG.fields.od, odRounded);
            MementoUtils.safeSet(currentEntry, CONFIG.fields.do, doRounded);
            
            step2Success = true;
            MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " ƒåasy zaokr√∫hlen√© a ulo≈æen√©");
            
        } catch (error) {
            MementoUtils.addError(currentEntry, "Chyba pri zaokr√∫hƒæovan√≠ ƒçasov: " + error.toString(), CONFIG.version);
            step2Success = false;
        }
    }
    
    // KROK 3: V√Ωpoƒçet pracovnej doby
    if (step1Success && step2Success) {
        try {
            MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 3: V√Ωpoƒçet pracovnej doby...");
            
            pracovnaDobaHodiny = MementoUtils.calculateTimeDifference(odRounded, doRounded);
            pocetPracovnikov = zamestnanci.length;
            
            MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.time + " Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
            MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.person + " Poƒçet pracovn√≠kov: " + pocetPracovnikov);
            
            // Ulo≈æ vypoƒç√≠tan√© hodnoty
            MementoUtils.safeSet(currentEntry, CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
            MementoUtils.safeSet(currentEntry, CONFIG.fields.pocetPracovnikov, pocetPracovnikov);
            
            if (pracovnaDobaHodiny <= 0) {
                MementoUtils.addError(currentEntry, "Pracovn√° doba je 0 alebo z√°porn√°", CONFIG.version);
                return false;
            }
            
            step3Success = true;
            MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " Pracovn√° doba vypoƒç√≠tan√°");
            
        } catch (error) {
            MementoUtils.addError(currentEntry, "Chyba pri v√Ωpoƒçte pracovnej doby: " + error.toString(), CONFIG.version);
            step3Success = false;
        }
    }
    
    // KROK 4: Spracovanie zamestnancov
    if (step1Success && step2Success && step3Success) {
        try {
            MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 4: Sprac√∫vam zamestnancov...");
            
            var zamestnanciVysledok = spracujZamestnancov(zamestnanci, datum, pracovnaDobaHodiny);
            odpracovaneTotal = zamestnanciVysledok.odpracovaneTotal;
            celkoveMzdy = zamestnanciVysledok.celkoveMzdy;
            
            // Ulo≈æ s√∫hrny
            MementoUtils.safeSet(currentEntry, CONFIG.fields.odpracovane, odpracovaneTotal);
            MementoUtils.safeSet(currentEntry, CONFIG.fields.mzdoveNaklady, celkoveMzdy);
            
            step4Success = true;
            MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " Zamestnanci spracovan√≠ - " + odpracovaneTotal + "h, " + MementoUtils.formatMoney(celkoveMzdy));
            
        } catch (error) {
            MementoUtils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnancov: " + error.toString(), CONFIG.version);
            step4Success = false;
        }
    }
    
    // KROK 5: HZS spracovanie
    if (step1Success && step2Success && step3Success) {
        try {
            MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 5: Sprac√∫vam HZS...");
            
            hzsVysledok = spracujHZS(datum);
            
            if (hzsVysledok.success) {
                MementoUtils.safeSet(currentEntry, CONFIG.fields.sumaHZS, hzsVysledok.sumaHZS);
                step5Success = true;
                MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " HZS spracovan√© - " + MementoUtils.formatMoney(hzsVysledok.hzsCena));
            } else {
                MementoUtils.addError(currentEntry, "HZS spracovanie zlyhalo", CONFIG.version);
                step5Success = false;
            }
            
        } catch (error) {
            MementoUtils.addError(currentEntry, "Chyba pri spracovan√≠ HZS: " + error.toString(), CONFIG.version);
            step5Success = false;
        }
    }
    
    // KROK 6: V√Ωkaz pr√°c spracovanie (nie je kritick√©)
    if (step1Success && step5Success && zakazka && zakazka.length > 0) {
        try {
            MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 6: Sprac√∫vam v√Ωkaz pr√°c...");
            
            var zakazkaObj = zakazka[0]; // Prv√Ω objekt z poƒæa
            processVykazPrac(zakazkaObj, currentEntry, hzsVysledok.hzsCena, odpracovaneTotal);
            step6Success = true;
            
        } catch (error) {
            MementoUtils.addError(currentEntry, "Chyba pri spracovan√≠ v√Ωkazu pr√°c: " + error.toString(), CONFIG.version);
            step6Success = true; // Nie je to kritick√° chyba
        }
    } else {
        step6Success = true; // Nie je z√°kazka, tak OK
        MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 6: V√Ωkaz pr√°c - preskakujem (≈æiadna z√°kazka)");
    }
    
    // KROK 7: Vytvorenie info z√°znamu
    if (step1Success && step2Success && step3Success) {
        try {
            MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " KROK 7: Vytv√°ram info z√°znam...");
            
            var infoMessage = CONFIG.icons.work + " Z√ÅZNAM PR√ÅC - AUTOMATICK√ù PREPOƒåET\n" +
                            "=====================================\n\n" +
                            "üìÖ D√°tum: " + moment(datum).format("DD.MM.YYYY") + "\n" +
                            CONFIG.icons.time + " Pracovn√Ω ƒças: " + MementoUtils.formatTime(odRounded) + " - " + MementoUtils.formatTime(doRounded) + "\n" +
                            CONFIG.icons.time + " Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n\n";
            
            if (zakazka && zakazka.length > 0) {
                var zakazkaObj = zakazka[0];
                var cisloZakazky = MementoUtils.safeGet(zakazkaObj, "ƒå√≠slo", "");
                var nazovZakazky = MementoUtils.safeGet(zakazkaObj, "N√°zov z√°znamu", "");
                infoMessage += "üì¶ Z√°kazka: " + cisloZakazky + " - " + nazovZakazky + "\n";
            }
            
            infoMessage += "\n" + CONFIG.icons.person + " ZAMESTNANCI:\n" +
                         "‚Ä¢ Poƒçet: " + pocetPracovnikov + " os√¥b\n" +
                         "‚Ä¢ Odpracovan√© spolu: " + odpracovaneTotal + " hod√≠n\n\n" +
                         CONFIG.icons.money + " MZDOV√â N√ÅKLADY:\n" +
                         "‚Ä¢ Celkom: " + MementoUtils.formatMoney(celkoveMzdy) + "\n" +
                         "‚Ä¢ Priemer na osobu: " + (pocetPracovnikov > 0 ? MementoUtils.formatMoney(celkoveMzdy / pocetPracovnikov) : "0 ‚Ç¨") + "\n\n";
            
            if (hzsVysledok && hzsVysledok.success) {
                infoMessage += "üíº HZS - HODINOV√Å Z√öƒåTOVACIA SADZBA:\n" +
                             "‚Ä¢ Sadzba: " + MementoUtils.formatMoney(hzsVysledok.hzsCena) + "/h\n" +
                             "‚Ä¢ Suma HZS: " + MementoUtils.formatMoney(hzsVysledok.sumaHZS) + "\n\n";
            }
            
            infoMessage += "ü§ñ Automaticky vygenerovan√© v" + CONFIG.version + " o " + moment().format("HH:mm:ss");
            
            // Ulo≈æ info cez MementoUtils
            MementoUtils.addInfo(currentEntry, "Z√°znam pr√°c prepoƒç√≠tan√Ω", {
                libraryName: "Z√°znam pr√°c",
                method: "Automatick√Ω prepoƒçet v" + CONFIG.version,
                result: "√öspe≈°ne dokonƒçen√©"
            });
            
            MementoUtils.safeSet(currentEntry, CONFIG.fields.info, infoMessage);
            
            step7Success = true;
            MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.success + " Info z√°znam vytvoren√Ω");
            
        } catch (error) {
            MementoUtils.addError(currentEntry, "Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString(), CONFIG.version);
            step7Success = false;
        }
    }
    
    // Final cleanup a √∫spe≈°n√© dokonƒçenie
    if (step1Success && step2Success && step3Success) {
        try {
            // Ulo≈æ logy
            MementoUtils.saveLogs(currentEntry);
            
            MementoUtils.addDebug(currentEntry, CONFIG.icons.success + " === PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE ===");
            return true;
            
        } catch (error) {
            MementoUtils.addError(currentEntry, "Chyba pri finaliz√°cii: " + error.toString(), CONFIG.version);
            return false;
        }
    } else {
        MementoUtils.addError(currentEntry, "Prepoƒçet zlyhal - niektor√© kroky neboli √∫spe≈°n√©", CONFIG.version);
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    // Vyƒçisti star√© debug logy na zaƒçiatku
    MementoUtils.clearLogs(currentEntry, false); // Len debug, error nech zost√°vaj√∫
    
    // Spustenie hlavnej funkcie
    var result = hlavnaFunkcia();
    
    // Informuj pou≈æ√≠vateƒæa
    if (result) {
        var successMessage = CONFIG.icons.success + " Z√°znam pr√°c prepoƒç√≠tan√Ω √∫spe≈°ne!\n\n" +
                           CONFIG.icons.time + " ƒåasy zaokr√∫hlen√© na 15 min\n" +
                           "üìä Pracovn√° doba: " + MementoUtils.safeGet(currentEntry, CONFIG.fields.pracovnaDoba, 0) + " h\n" +
                           CONFIG.icons.person + " Zamestnanci: " + MementoUtils.safeGet(currentEntry, CONFIG.fields.pocetPracovnikov, 0) + " os√¥b\n" +
                           CONFIG.icons.money + " Mzdov√© n√°klady: " + MementoUtils.formatMoney(MementoUtils.safeGet(currentEntry, CONFIG.fields.mzdoveNaklady, 0)) + "\n" +
                           "üíº Suma HZS: " + MementoUtils.formatMoney(MementoUtils.safeGet(currentEntry, CONFIG.fields.sumaHZS, 0)) + "\n\n" +
                           CONFIG.icons.info + " Detaily v poli 'info'";
        
        message(successMessage);
    } else {
        var errorMessage = CONFIG.icons.error + " Prepoƒçet z√°znamu pr√°c zlyhal!\n\n" +
                          "üîç Skontroluj Error_Log pre detaily\n" +
                          CONFIG.icons.step + " Over vstupn√© d√°ta a sk√∫s znovu";
        
        message(errorMessage);
    }
    
} catch (kritickachyba) {
    // Posledn√° z√°chrana
    try {
        MementoUtils.addError(currentEntry, "KRITICK√Å CHYBA: " + kritickachyba.toString(), CONFIG.version);
        message(CONFIG.icons.error + " KRITICK√Å CHYBA!\n\nScript zlyhal. Pozri Error_Log.");
    } catch (finalError) {
        message(CONFIG.icons.error + " FAT√ÅLNA CHYBA!\n\n" + kritickachyba.toString());
    }
}