// ==============================================
// MEMENTO DATABASE - [N√ÅZOV SCRIPTU]
// Verzia: 1.0 | D√°tum: [DD.MM.YYYY] | Autor: [MENO]
// Kni≈ænica: [N√ÅZOV KNI≈ΩNICE] | Trigger: [Before Save / After Save / Action]
// ==============================================
// üìã √öƒåEL SCRIPTU:
//    - [Op√≠≈° hlavn√∫ funkcionalitu]
//    - [Op√≠≈° vedƒæaj≈°ie funkcie]
//    - [Op√≠≈° v√Ωstupy/v√Ωsledky]
// ==============================================
// üîß Z√ÅVISLOSTI:
//    - MementoUtils 3.3+ (povinn√©)
//    - MementoCore 1.1+ (automaticky cez Utils)
//    - MementoBusiness 1.0+ (voliteƒæn√©, ak potrebn√©)
//    - [ƒéal≈°ie Helper scripty ak potrebn√©]
// ==============================================
// üìä VSTUPN√â D√ÅTA:
//    - [Pole 1]: [popis a po≈æiadavky]
//    - [Pole 2]: [popis a po≈æiadavky] 
//    - [Link polia]: [na ktor√© kni≈ænice a preƒço]
// ==============================================
// üì§ V√ùSTUPN√â D√ÅTA:
//    - [Pole 1]: [ƒço sa nastav√≠/vypoƒç√≠ta]
//    - [Pole 2]: [ƒço sa nastav√≠/vypoƒç√≠ta]
//    - [Nov√© z√°znamy]: [v ktor√Ωch kni≈æniciach]
// ==============================================

// ==============================================
// IMPORTS A LAZY LOADING
// ==============================================

var utils = null;
var business = null; // ak je potrebn√Ω business modul
var currentEntry = null;

/**
 * Lazy loading MementoUtils - ≈†TANDARDN√ù PATTERN
 */
function getUtils() {
    if (!utils) {
        if (typeof MementoUtils !== 'undefined') {
            utils = MementoUtils;
        } else {
            throw new Error("MementoUtils kni≈ænica nie je dostupn√°! Script vy≈æaduje MementoUtils 3.3+");
        }
    }
    return utils;
}

/**
 * Lazy loading Business modulu - VOLITEƒΩN√â
 */
function getBusiness() {
    if (!business) {
        try {
            var u = getUtils();
            if (u && u.business) {
                business = u.business;
            } else if (typeof MementoBusiness !== 'undefined') {
                business = MementoBusiness;
            }
        } catch(e) {
            // Business modul je optional - script m√¥≈æe fungova≈• bez neho
            getUtils().addDebug(getCurrentEntry(), CONFIG, "‚ÑπÔ∏è Business modul nie je dostupn√Ω - pou≈æ√≠vam z√°kladn√© funkcie");
        }
    }
    return business;
}

/**
 * Z√≠ska aktu√°lny entry - podporuje Before Save, After Save i Action mode
 */
function getCurrentEntry() {
    if (!currentEntry) {
        try {
            // Before Save / After Save mode
            currentEntry = entry();
        } catch(e) {
            // Action mode - z√≠skaj z vybran√Ωch z√°znamov
            try {
                var selected = lib().entries();
                if (selected && selected.length > 0) {
                    currentEntry = selected[0]; // Prv√Ω vybran√Ω z√°znam
                    getUtils().addDebug(currentEntry, CONFIG, "üîß Action mode detected - using first selected entry");
                } else {
                    throw new Error("V Action mode nie s√∫ vybran√© ≈æiadne z√°znamy!");
                }
            } catch(actionError) {
                throw new Error("Ned√° sa z√≠ska≈• aktu√°lny entry: " + actionError.toString());
            }
        }
    }
    return currentEntry;
}

// ==============================================
// KONFIGUR√ÅCIA - UNIFIED PATTERN
// ==============================================

var CONFIG = (function() {
    // Pok√∫s sa o centr√°lny config adapter
    if (typeof MementoConfigAdapter !== 'undefined') {
        try {
            var adapter = MementoConfigAdapter.getAdapter('[library_key]'); // napr. 'attendance', 'work_records'
            adapter.scriptName = "[N√ÅZOV SCRIPTU]";
            adapter.version = "1.0";
            return adapter;
        } catch (e) {
            // Fallback na lok√°lny config
        }
    }
    
    // Lok√°lna konfigur√°cia ako fallback
    return {
        debug: true,
        version: "1.0",
        scriptName: "[N√ÅZOV SCRIPTU]",
        
        // ==============================================
        // UNIFIED FIELD MAPPINGS - DOPL≈á PODƒΩA KNI≈ΩNICE
        // ==============================================
        fields: {
            // Core business fields - PRISP√îSOB PODƒΩA KNI≈ΩNICE
            datum: "D√°tum",
            zamestnanci: "Zamestnanci",
            zakazka: "Z√°kazka",
            suma: "Suma",
            poznamka: "Pozn√°mka",
            
            // System fields - ≈†TANDARDN√â PRE V≈†ETKY SCRIPTY  
            info: "info",
            debugLog: "Debug_Log",
            errorLog: "Error_Log",
            view: "view",
            id: "ID"
        },
        
        // ==============================================
        // ATTRIBUTE MAPPINGS - DOPL≈á PODƒΩA POTREBY
        // ==============================================
        attributes: {
            odpracovane: "odpracovan√©",
            hodinovka: "hodinovka",
            priplatokHodinovka: "+pr√≠platok (‚Ç¨/h)",
            premia: "+pr√©mia (‚Ç¨)",
            pokuta: "-pokuta (‚Ç¨)",
            dennaMzda: "denn√° mzda",
            poznamka: "pozn√°mka"
        },
        
        // ==============================================
        // LIBRARY NAMES - DOPL≈á PODƒΩA Z√ÅVISLOST√ç
        // ==============================================
        libraries: {
            // Core libraries
            defaults: "ASISTANTO Defaults",
            api: "ASISTANTO API", 
            notifications: "Notifications",
            
            // Business libraries - PRISP√îSOB PODƒΩA POTREBY
            zamestnanci: "Zamestnanci",
            dochadzka: "Doch√°dzka",
            pracovneZaznamy: "Z√°znam pr√°c",
            knihaJazd: "Kniha j√°zd",
            zavazky: "Z√°v√§zky",
            sadzby: "sadzby zamestnancov",
            
            // External libraries - DOPL≈á AK POTREBN√â
            klienti: "Klienti",
            partneri: "Partneri",
            zakazky: "Z√°kazky"
        },
        
        // ==============================================
        // BUSINESS RULES - DOPL≈á PODƒΩA LOGIKY SCRIPTU
        // ==============================================
        businessRules: {
            minimalnyPocetZamestnancov: 1,
            maximalnaHodinovaSadzba: 100,
            povoleneStatusy: ["Akt√≠vny", "Doƒçasne neakt√≠vny"],
            povinneFields: ["datum"] // field keys z CONFIG.fields
        },
        
        // ==============================================
        // VALIDATION RULES - ≈†TANDARDN√â PATTERN
        // ==============================================
        validation: {
            required: [], // field keys ktor√© s√∫ povinn√©
            optional: [], // field keys ktor√© s√∫ voliteƒæn√©
            maxRetries: 3,
            timeoutMs: 30000
        }
    };
})();

// ==============================================
// HLAVN√Å FUNKCIA - ≈†TANDARDN√ù PATTERN
// ==============================================

function main() {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    var steps = {}; // Tracking √∫spe≈°nosti krokov
    
    try {
        // === ≈†TANDARDN√ù ZAƒåIATOK SCRIPTU ===
        utils.logScriptStart(currentEntry, CONFIG);
        
        // === KROK 1: VALID√ÅCIA VSTUPN√ùCH D√ÅT ===
        utils.addDebug(currentEntry, CONFIG, "üìã KROK 1: Valid√°cia vstupn√Ωch d√°t");
        steps.validation = validateInputData();
        if (!steps.validation.success) {
            utils.addError(currentEntry, CONFIG, "Valid√°cia zlyhala: " + steps.validation.errors.join(", "), "main");
            return finishScript(false, steps, "Validation failed");
        }
        utils.addDebug(currentEntry, CONFIG, "‚úÖ Valid√°cia √∫spe≈°n√°");
        
        // === KROK 2: NAƒå√çTANIE A SPRACOVANIE D√ÅT ===
        utils.addDebug(currentEntry, CONFIG, "üìã KROK 2: Naƒç√≠tavam a spracov√°vam d√°ta");
        steps.dataProcessing = processData();
        if (!steps.dataProcessing.success) {
            utils.addError(currentEntry, CONFIG, "Spracovanie d√°t zlyhalo", "main");
            return finishScript(false, steps, "Data processing failed");
        }
        utils.addDebug(currentEntry, CONFIG, "‚úÖ D√°ta √∫spe≈°ne spracovan√©");
        
        // === KROK 3: BUSINESS LOGIKA ===
        utils.addDebug(currentEntry, CONFIG, "üìã KROK 3: Vykon√°vam business logiku");
        steps.businessLogic = executeBusinessLogic(steps.dataProcessing.data);
        if (!steps.businessLogic.success) {
            utils.addError(currentEntry, CONFIG, "Business logika zlyhala", "main");
            return finishScript(false, steps, "Business logic failed");
        }
        utils.addDebug(currentEntry, CONFIG, "‚úÖ Business logika dokonƒçen√°");
        
        // === KROK 4: ULO≈ΩENIE V√ùSLEDKOV ===
        utils.addDebug(currentEntry, CONFIG, "üìã KROK 4: Uklad√°m v√Ωsledky");
        steps.saveResults = saveResults(steps.businessLogic.results);
        if (!steps.saveResults.success) {
            utils.addError(currentEntry, CONFIG, "Ukladanie v√Ωsledkov zlyhalo", "main");
            return finishScript(false, steps, "Save results failed");
        }
        utils.addDebug(currentEntry, CONFIG, "‚úÖ V√Ωsledky √∫spe≈°ne ulo≈æen√©");
        
        // === KROK 5: POST-PROCESSING (VOLITEƒΩN√ù) ===
        utils.addDebug(currentEntry, CONFIG, "üìã KROK 5: Post-processing");
        steps.postProcessing = postProcessing(steps.saveResults.data);
        // Post-processing m√¥≈æe by≈• ne√∫spe≈°n√Ω bez preru≈°enia scriptu
        
        // === FINALIZ√ÅCIA ===
        var overallSuccess = steps.validation.success && 
                           steps.dataProcessing.success && 
                           steps.businessLogic.success && 
                           steps.saveResults.success;
        
        var summary = createExecutionSummary(steps);
        return finishScript(overallSuccess, steps, summary);
        
    } catch (error) {
        utils.addError(currentEntry, CONFIG, error.toString(), "main", error);
        return finishScript(false, steps, "Critical error: " + error.toString());
    }
}

// ==============================================
// BUSINESS LOGIC FUNCTIONS
// ==============================================

/**
 * Valid√°cia vstupn√Ωch d√°t - ≈†TANDARDN√ù PATTERN
 */
function validateInputData() {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    try {
        // Valid√°cia pomoc√≠ CONFIG
        var validation = utils.validateRequiredFields(currentEntry, CONFIG, CONFIG.businessRules.povinneFields);
        
        if (!validation.valid) {
            utils.addDebug(currentEntry, CONFIG, "‚ùå Povinn√© polia ch√Ωbaj√∫: " + validation.missingFields.join(", "));
            return { success: false, errors: validation.errors };
        }
        
        // Custom business valid√°cie
        var customValidation = performCustomValidation();
        if (!customValidation.success) {
            return customValidation;
        }
        
        utils.addDebug(currentEntry, CONFIG, "‚úÖ V≈°etky valid√°cie pre≈°li √∫spe≈°ne");
        return { success: true, data: validation };
        
    } catch (error) {
        utils.addError(currentEntry, CONFIG, error.toString(), "validateInputData", error);
        return { success: false, errors: [error.toString()] };
    }
}

/**
 * Custom business valid√°cie - PRISP√îSOB PODƒΩA POTREBY
 */
function performCustomValidation() {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    try {
        // PR√çKLAD: Valid√°cia d√°tumu
        var datum = utils.safeGetField(currentEntry, CONFIG, "datum");
        if (datum && moment(datum).isAfter(moment())) {
            return { success: false, errors: ["D√°tum nem√¥≈æe by≈• v bud√∫cnosti"] };
        }
        
        // PR√çKLAD: Valid√°cia linked entries
        var zamestnanci = utils.safeGetField(currentEntry, CONFIG, "zamestnanci", []);
        if (zamestnanci.length < CONFIG.businessRules.minimalnyPocetZamestnancov) {
            return { success: false, errors: ["Minim√°lny poƒçet zamestnancov je " + CONFIG.businessRules.minimalnyPocetZamestnancov] };
        }
        
        // PRIDAJ ƒéAL≈†IE CUSTOM VALID√ÅCIE PODƒΩA POTREBY
        
        return { success: true };
        
    } catch (error) {
        utils.addError(currentEntry, CONFIG, error.toString(), "performCustomValidation", error);
        return { success: false, errors: [error.toString()] };
    }
}

/**
 * Spracovanie d√°t - PRISP√îSOB PODƒΩA KNI≈ΩNICE
 */
function processData() {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    try {
        // PR√çKLAD: Z√≠skanie a spracovanie linked entries
        var zamestnanci = utils.safeGetField(currentEntry, CONFIG, "zamestnanci", []);
        
        var processedData = {
            zamestnanci: [],
            statistics: {
                total: zamestnanci.length,
                processed: 0,
                errors: 0
            }
        };
        
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            
            try {
                var processedEmployee = processSingleEmployee(zamestnanec, i);
                if (processedEmployee.success) {
                    processedData.zamestnanci.push(processedEmployee.data);
                    processedData.statistics.processed++;
                } else {
                    processedData.statistics.errors++;
                }
                
            } catch (empError) {
                utils.addError(currentEntry, CONFIG, 
                    "Chyba pri spracovan√≠ zamestnanca " + (i+1) + ": " + empError.toString(), 
                    "processData", empError);
                processedData.statistics.errors++;
            }
        }
        
        utils.addDebug(currentEntry, CONFIG, 
            "üìä Spracovan√Ωch " + processedData.statistics.processed + "/" + processedData.statistics.total + " zamestnancov");
        
        return { success: processedData.statistics.processed > 0, data: processedData };
        
    } catch (error) {
        utils.addError(currentEntry, CONFIG, error.toString(), "processData", error);
        return { success: false, data: null };
    }
}

/**
 * Spracovanie jednotliv√©ho zamestnanca - PR√çKLAD
 */
function processSingleEmployee(zamestnanec, index) {
    var utils = getUtils();
    
    try {
        // Z√≠skaj z√°kladn√© √∫daje
        var nick = utils.safeGet(zamestnanec, "Nick", "Zamestnanec " + (index + 1));
        utils.addDebug(getCurrentEntry(), CONFIG, "  üë§ Spracov√°vam: " + nick);
        
        // PR√çKLAD: Z√≠skanie atrib√∫tov
        var hodinovka = utils.safeGetAttribute(zamestnanec, CONFIG.fields.zamestnanci, CONFIG.attributes.hodinovka, 0);
        var odpracovane = utils.safeGetAttribute(zamestnanec, CONFIG.fields.zamestnanci, CONFIG.attributes.odpracovane, 0);
        
        // Business valid√°cie
        if (hodinovka > CONFIG.businessRules.maximalnaHodinovaSadzba) {
            utils.addDebug(getCurrentEntry(), CONFIG, "    ‚ö†Ô∏è " + nick + " m√° vysok√∫ hodinovku: " + hodinovka + "‚Ç¨");
        }
        
        // V√Ωpoƒçty
        var dennaMzda = hodinovka * odpracovane;
        
        // PRIDAJ ƒéAL≈†IE BUSINESS LOGIKU PODƒΩA POTREBY
        
        var result = {
            nick: nick,
            hodinovka: hodinovka,
            odpracovane: odpracovane,
            dennaMzda: dennaMzda,
            employee: zamestnanec
        };
        
        utils.addDebug(getCurrentEntry(), CONFIG, 
            "    üí∞ " + nick + ": " + odpracovane + "h √ó " + hodinovka + "‚Ç¨ = " + utils.formatMoney(dennaMzda));
        
        return { success: true, data: result };
        
    } catch (error) {
        utils.addError(getCurrentEntry(), CONFIG, error.toString(), "processSingleEmployee", error);
        return { success: false, data: null };
    }
}

/**
 * Hlavn√° business logika - PRISP√îSOB PODƒΩA √öƒåELU SCRIPTU
 */
function executeBusinessLogic(processedData) {
    var utils = getUtils();
    var business = getBusiness();
    
    try {
        var results = {
            calculations: {},
            updates: [],
            newEntries: []
        };
        
        // PR√çKLAD: Agregovan√© v√Ωpoƒçty
        var totalAmount = 0;
        var totalHours = 0;
        
        for (var i = 0; i < processedData.zamestnanci.length; i++) {
            var emp = processedData.zamestnanci[i];
            totalAmount += emp.dennaMzda;
            totalHours += emp.odpracovane;
        }
        
        results.calculations = {
            totalAmount: totalAmount,
            totalHours: totalHours,
            averageHourlyRate: totalHours > 0 ? totalAmount / totalHours : 0,
            employeeCount: processedData.zamestnanci.length
        };
        
        // PR√çKLAD: Business rules aplik√°cia
        if (business) {
            // Pou≈æij business modul ak je dostupn√Ω
            var businessResult = business.performCalculations(processedData);
            if (businessResult) {
                results.calculations = Object.assign(results.calculations, businessResult);
            }
        }
        
        // PRIDAJ ƒéAL≈†IU BUSINESS LOGIKU PODƒΩA POTREBY
        
        utils.addDebug(getCurrentEntry(), CONFIG, 
            "üìä Celkov√© v√Ωpoƒçty: " + utils.formatMoney(totalAmount) + " za " + totalHours + " hod√≠n");
        
        return { success: true, results: results };
        
    } catch (error) {
        utils.addError(getCurrentEntry(), CONFIG, error.toString(), "executeBusinessLogic", error);
        return { success: false, results: null };
    }
}

/**
 * Ulo≈æenie v√Ωsledkov - PRISP√îSOB PODƒΩA V√ùSTUPOV
 */
function saveResults(results) {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    try {
        // PR√çKLAD: Nastavenie vypoƒç√≠tan√Ωch pol√≠
        utils.safeSetField(currentEntry, CONFIG, "suma", results.calculations.totalAmount);
        
        // PR√çKLAD: Nastavenie atrib√∫tov pre zamestnancov
        for (var i = 0; i < results.updates.length; i++) {
            var update = results.updates[i];
            utils.safeSetAttribute(update.employee, CONFIG.fields.zamestnanci, CONFIG.attributes.dennaMzda, update.dennaMzda);
        }
        
        // PR√çKLAD: Vytvorenie nov√Ωch z√°znamov v in√Ωch kni≈æniciach
        var createdEntries = createRelatedEntries(results);
        
        // PRIDAJ ƒéAL≈†IE SAVE OPER√ÅCIE PODƒΩA POTREBY
        
        utils.addDebug(currentEntry, CONFIG, "üíæ V≈°etky v√Ωsledky √∫spe≈°ne ulo≈æen√©");
        
        return { success: true, data: { updatedFields: true, createdEntries: createdEntries } };
        
    } catch (error) {
        utils.addError(currentEntry, CONFIG, error.toString(), "saveResults", error);
        return { success: false, data: null };
    }
}

/**
 * Vytvorenie s√∫visiacich z√°znamov - VOLITEƒΩN√â
 */
function createRelatedEntries(results) {
    // PR√çKLAD: Vytvorenie z√°v√§zkov, notifik√°ci√≠, atƒè.
    // IMPLEMENTUJ PODƒΩA POTREBY SCRIPTU
    return [];
}

/**
 * Post-processing - VOLITEƒΩN√â
 */
function postProcessing(saveData) {
    var utils = getUtils();
    
    try {
        // PR√çKLAD: Notifik√°cie, API volania, cleanup, atƒè.
        
        utils.addDebug(getCurrentEntry(), CONFIG, "üîÑ Post-processing dokonƒçen√Ω");
        return { success: true };
        
    } catch (error) {
        utils.addError(getCurrentEntry(), CONFIG, error.toString(), "postProcessing", error);
        return { success: false };
    }
}

// ==============================================
// HELPER FUNCTIONS
// ==============================================

/**
 * Vytvorenie s√∫hrnu vykonania scriptu
 */
function createExecutionSummary(steps) {
    var successful = 0;
    var total = 0;
    
    for (var step in steps) {
        total++;
        if (steps[step] && steps[step].success) {
            successful++;
        }
    }
    
    return "Dokonƒçen√Ωch " + successful + "/" + total + " krokov √∫spe≈°ne";
}

/**
 * Finaliz√°cia scriptu - ≈†TANDARDN√ù PATTERN
 */
function finishScript(success, steps, summary) {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    try {
        // Vytvor info z√°znam s v√Ωsledkami
        if (success && steps.businessLogic && steps.businessLogic.results) {
            var summaryData = {
                vysledok: success ? "√öspe≈°n√Ω" : "Ne√∫spe≈°n√Ω",
                // PRIDAJ KONKR√âTNE ≈†TATISTIKY PODƒΩA SCRIPTU
                // napr: spracovanychZamestnancov: steps.dataProcessing.data.statistics.processed
            };
            
            utils.addInfo(currentEntry, CONFIG, "Vykonanie scriptu dokonƒçen√©", summaryData);
        }
        
        // ≈†tandardn√Ω koniec s lifecycle management
        utils.logScriptEnd(currentEntry, CONFIG, success, summary);
        
        // User message
        showUserMessage(success, steps, summary);
        
        return success;
        
    } catch (error) {
        utils.addError(currentEntry, CONFIG, error.toString(), "finishScript", error);
        return false;
    }
}

/**
 * Zobrazenie spr√°vy pou≈æ√≠vateƒæovi
 */
function showUserMessage(success, steps, summary) {
    if (success) {
        message("‚úÖ Script √∫spe≈°ne dokonƒçen√Ω!\n\n" +
               "üìä " + summary + "\n\n" +
               "‚ÑπÔ∏è Detaily v poli 'info'\n" +
               "üîç Debug inform√°cie v 'Debug_Log'");
    } else {
        message("‚ùå Script zlyhal!\n\n" +
               "üìä " + summary + "\n\n" +
               "üîç Skontroluj Error_Log pre detaily\n" +
               "üìã Over vstupn√© d√°ta a sk√∫s znovu");
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Spusti hlavn√∫ funkciu
main();

// ==============================================
// TEMPLATE USAGE NOTES
// ==============================================

/*
N√ÅVOD NA POU≈ΩITIE TOHTO TEMPLATE:

1. üìù Z√ÅKLADN√â NASTAVENIA:
   - Nahraƒè [N√ÅZOV SCRIPTU] skutoƒçn√Ωm n√°zvom
   - Nastav spr√°vny trigger (Before Save/After Save/Action)
   - Aktualizuj z√°vislosti a √∫ƒçel scriptu

2. üèóÔ∏è KONFIGUR√ÅCIA:
   - Aktualizuj CONFIG.fields podƒæa cieƒæovej kni≈ænice
   - Nastav CONFIG.attributes ak pracuje≈° s linked entries
   - Definuj CONFIG.libraries pre v≈°etky potrebn√© kni≈ænice
   - Nastav CONFIG.businessRules podƒæa logiky scriptu

3. üîß BUSINESS LOGIKA:
   - Implementuj validateInputData() pre tvoje valid√°cie
   - Aktualizuj processData() podƒæa tvojich d√°t
   - Nap√≠≈° executeBusinessLogic() s tvojou logikou
   - Implementuj saveResults() pre tvoje v√Ωstupy

4. ‚úÖ TESTOVANIE:
   - Otestuj na vzorov√Ωch d√°tach
   - Skontroluj v≈°etky logy (Debug_Log, Error_Log, info)
   - Over v≈°etky field mappings
   - Testuj error scenarios

5. üìö DOKUMENT√ÅCIA:
   - Aktualizuj header s kompletn√Ωm popisom
   - Dokumentuj v≈°etky vstupn√© a v√Ωstupn√© polia  
   - Op√≠≈° business rules a valid√°cie
   - Pridaj usage examples ak je to zlo≈æit√©

TENTO TEMPLATE ZABEZPEƒåUJE:
‚úÖ Konzistentn√© error handling
‚úÖ ≈†tandardizovan√© logy  
‚úÖ Unified field mappings
‚úÖ Lifecycle management
‚úÖ Backward compatibility
‚úÖ Action mode support
‚úÖ Business modul integr√°ciu
‚úÖ Structured execution flow
‚úÖ Comprehensive validation
‚úÖ User-friendly messages
*/