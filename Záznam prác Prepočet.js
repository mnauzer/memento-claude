// ==============================================
// MEMENTO DATABASE - Z√ÅZNAM PR√ÅC PREPOƒåET
// Verzia: 8.0 | D√°tum: 31.08.2025 | Autor: ASISTANTO
// Kni≈ænica: Z√°znam pr√°ce | Trigger: Before Save
// ==============================================
// ‚úÖ REFAKTOROVAN√â v8.0.1:
//    - Pln√° integr√°cia s MementoUtils v7.0+
//    - Vyu≈æitie centr√°lneho MementoConfig
//    - Odstr√°nen√© v≈°etky duplik√°cie
//    - Zachovan√° kompletn√° funkcionalita
//    - ƒåist√Ω modul√°rny k√≥d
// ==============================================
// üîß VY≈ΩADUJE:
//    - MementoUtils v7.0+
//    - MementoConfig v7.0+
//    - MementoCore v7.0+
//    - MementoBusiness v7.0+
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Z√°znam pr√°c Prepoƒçet",
    version: "8.0",
    
    // Referencie na centr√°lny config
    fields: centralConfig.fields.workRecord,
    attributes: centralConfig.attributes,
    libraries: centralConfig.libraries.business,
    commonFields: centralConfig.fields.common,
    employeeFields: centralConfig.fields.employee,
    icons: centralConfig.icons,
    
    // Lok√°lne nastavenia
    settings: {
        roundToQuarterHour: true,
        defaultCurrency: "‚Ç¨"
    },
    
    // N√°zvy pol√≠ vo v√Ωkaze pr√°c (nie s√∫ v central config)
    vykazFields: {
        datum: "D√°tum",
        identifikator: "Identifik√°tor",
        popis: "Popis",
        typVykazu: "Typ v√Ωkazu",
        cenyPocitat: "Ceny poƒç√≠ta≈•",
        cenovaPonuka: "Cenov√° ponuka",
        vydane: "Vydan√©",
        zakazka: "Z√°kazka",
        praceHZS: "Pr√°ce HZS",
        info: "info"
    }
};


// ==============================================
// VALID√ÅCIA
// ==============================================

/**
 * Validuje povinn√© vstupn√© polia
 */
function validateInputs() {
    utils.addDebug(currentEntry, CONFIG.icons.step + " KROK 1: Valid√°cia vstupn√Ωch d√°t");
    
    var requiredFields = [
         CONFIG.fields.date,
        CONFIG.fields.startTime, 
        CONFIG.fields.endTime
    ];
    
    // Pou≈æitie MementoUtils valid√°cie
    var validation = utils.validateRequiredFields(currentEntry, requiredFields);
    if (!validation.valid) {
        return {
            success: false,
            message: "Ch√Ωbaj√∫ce povinn√© polia: " + validation.missing.join(", ")
        };
    }
    
    var customer = utils.safeGetLinks(currentEntry, CONFIG.fields.customer);
    var date = utils.safeGet(currentEntry, CONFIG.fields.date);
    
    utils.addDebug(currentEntry, "  ‚úÖ Valid√°cia √∫spe≈°n√°");
    
    return {
        success: true,
        hasCustomer: customer && customer.length > 0,
        customer: customer,
        date: date
    };
}

// ==============================================
// V√ùPOƒåTY
// ==============================================

/**
 * Vypoƒç√≠ta pracovn√∫ dobu
 */
function calculateWorkTime() {
    utils.addDebug(currentEntry, CONFIG.icons.step + " KROK 2: V√Ωpoƒçet pracovnej doby");
    
    var startTime = utils.safeGet(currentEntry, CONFIG.fields.startTime);
    var endTime = utils.safeGet(currentEntry, CONFIG.fields.endTime);
    
    if (!startTime || !endTime) {
        utils.addError(currentEntry, "Ch√Ωba ƒças Od alebo Do", "calculateWorkTime");
        return { success: false };
    }
    
    // Pou≈æitie MementoBusiness funkcie pre v√Ωpoƒçet hod√≠n
    var hours = utils.calculateWorkHours(startTime, endTime);
    
    // Zaokr√∫hlenie na ≈°tvr≈•hodiny ak je potrebn√©
    if (CONFIG.settings.roundToQuarterHour) {
        var minutes = hours * 60;
        var roundedMinutes = Math.round(minutes / 15) * 15;
        hours = roundedMinutes / 60;
        utils.addDebug(currentEntry, "  ‚è∞ Zaokr√∫hlen√© na ≈°tvr≈•hodiny");
    }
    
    // Ulo≈æ vypoƒç√≠tan√© hodnoty
    utils.safeSet(currentEntry, CONFIG.fields.workTime, hours);
    utils.safeSet(currentEntry, CONFIG.fields.workedHours, hours);
    
    utils.addDebug(currentEntry, "  " + CONFIG.icons.time + " Pracovn√° doba: " + hours + " hod√≠n");
    
    return {
        success: true,
        hours: hours,
        startTime: startTime,
        endTime: endTime
    };
}

// ==============================================
// SPRACOVANIE ZAMESTNANCOV
// ==============================================

/**
 * Spracuje zamestnancov a vypoƒç√≠ta mzdov√© n√°klady
 */
function processEmployees(workedHours) {
    utils.addDebug(currentEntry, CONFIG.icons.step + " KROK 3: Spracovanie zamestnancov");
    
    var employees = utils.safeGetLinks(currentEntry, CONFIG.fields.employees);
    
    if (!employees || employees.length === 0) {
        utils.addDebug(currentEntry, "  " + CONFIG.icons.info + " ≈Ωiadni zamestnanci");
        utils.safeSet(currentEntry, CONFIG.fields.employeeCount, 0);
        utils.safeSet(currentEntry, CONFIG.fields.wageCosts, 0);
        return { 
            count: 0, 
            totalCosts: 0 
        };
    }
    
    var totalCosts = 0;
    var date = utils.safeGet(currentEntry, CONFIG.fields.date);
    
    // Spracuj ka≈æd√©ho zamestnanca
    for (var i = 0; i < employees.length; i++) {
        var employee = employees[i];
        var empName = getEmployeeName(employee);
        
        try {
            // Z√≠skaj detaily cez MementoBusiness
            var empDetails = utils.getEmployeeDetails(employee, date);
            
            if (!empDetails || !empDetails.hourlyRate) {
                utils.addDebug(currentEntry, "  " + CONFIG.icons.warning + 
                             " Ch√Ωba hodinov√° sadzba pre: " + empName);
                continue;
            }
            
            // Nastav atrib√∫ty na Link to Entry poli
            var empArray = currentEntry.field(CONFIG.fields.employees);
            
            // Odpracovan√© hodiny
            empArray[i].setAttr(CONFIG.attributes.workRecordEmployees.workedHours, workedHours);
            
            // Hodinov√° sadzba
            empArray[i].setAttr(CONFIG.attributes.workRecordEmployees.hourlyRate, empDetails.hourlyRate);
            
            // Mzdov√© n√°klady
            var costs = Math.round(workedHours * empDetails.hourlyRate * 100) / 100;
            empArray[i].setAttr(CONFIG.attributes.workRecordEmployees.wageCosts, costs);
            
            totalCosts += costs;
            
            utils.addDebug(currentEntry, "  " + CONFIG.icons.person + " " + empName + 
                         ": " + workedHours + "h √ó " + empDetails.hourlyRate + "‚Ç¨ = " + costs + "‚Ç¨");
            
        } catch (error) {
            utils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnanca " + empName + ": " + error, 
                         "processEmployees");
        }
    }
    
    // Ulo≈æ s√∫hrnn√© hodnoty
    utils.safeSet(currentEntry, CONFIG.fields.employeeCount, employees.length);
    utils.safeSet(currentEntry, CONFIG.fields.wageCosts, totalCosts);
    
    utils.addDebug(currentEntry, "  " + CONFIG.icons.money + " Celkov√© mzdov√© n√°klady: " + 
                  utils.formatMoney(totalCosts));
    
    return {
        count: employees.length,
        totalCosts: totalCosts
    };
}

// ==============================================
// HZS SPRACOVANIE
// ==============================================

/**
 * Z√≠ska default HZS z ASISTANTO Defaults
 */
function getDefaultHZS() {
    try {
        var defaultsLib = libByName(centralConfig.libraries.core.defaults);
        var defaults = defaultsLib.entries();
        
        if (defaults && defaults.length > 0) {
            var defaultHZS = utils.safeGet(defaults[0], "Default HZS");
            
            if (defaultHZS && defaultHZS.length > 0) {
                utils.addDebug(currentEntry, "  " + CONFIG.icons.link + " Default HZS n√°jden√©");
                return defaultHZS;
            }
        }
        
        utils.addDebug(currentEntry, "  " + CONFIG.icons.warning + " Default HZS nen√°jden√©");
        return null;
        
    } catch (error) {
        utils.addError(currentEntry, error, "getDefaultHZS");
        return null;
    }
}

/**
 * Spracuje HZS a vypoƒç√≠ta sumu
 */
function processHZS(workedHours) {
    utils.addDebug(currentEntry, CONFIG.icons.step + " KROK 4: Spracovanie HZS");
    
    try {
        var hzsField = utils.safeGetLinks(currentEntry, CONFIG.fields.hzs);
        
        // Ak nie je HZS, sk√∫s default
        if (!hzsField || hzsField.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è HZS nie je nastaven√©, hƒæad√°m default...");
            
            var defaultHZS = getDefaultHZS();
            if (defaultHZS) {
                utils.safeSet(currentEntry, CONFIG.fields.hzs, defaultHZS);
                hzsField = currentEntry.field(CONFIG.fields.hzs);
            }
        }
        
        // Z√≠skaj cenu z HZS
        var hzsPrice = 0;
        if (hzsField && hzsField.length > 0) {
            hzsPrice = utils.safeGetAttribute(
                currentEntry, 
                CONFIG.fields.hzs, 
                CONFIG.attributes.hzs.price, 
                0
            );
        }
        
        // Vypoƒç√≠taj sumu
        var hzsSum = Math.round(workedHours * hzsPrice * 100) / 100;
        utils.safeSet(currentEntry, CONFIG.fields.hzsSum, hzsSum);
        
        utils.addDebug(currentEntry, "  " + CONFIG.icons.money + " HZS: " + 
                      workedHours + "h √ó " + hzsPrice + "‚Ç¨ = " + hzsSum + "‚Ç¨");
        
        return {
            success: true,
            price: hzsPrice,
            sum: hzsSum
        };
        
    } catch (error) {
        utils.addError(currentEntry, error, "processHZS");
        return { 
            success: false, 
            price: 0, 
            sum: 0 
        };
    }
}

// ==============================================
// V√ùKAZ PR√ÅC
// ==============================================

/**
 * Synchronizuje s v√Ωkazom pr√°c
 */
function synchronizeWorkReport(customer, date, workedHours, hzsPrice) {
    utils.addDebug(currentEntry, CONFIG.icons.step + " KROK 5: Synchroniz√°cia v√Ωkazu pr√°c");
    
    try {
        if (!customer || customer.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadna z√°kazka - preskakujem v√Ωkaz");
            return;
        }
        
        var customerObj = customer[0];
        var customerName = utils.safeGet(customerObj, "N√°zov", "N/A");
        
        utils.addDebug(currentEntry, "  üîç Hƒæad√°m v√Ωkaz pre z√°kazku: " + customerName);
        
        // N√°jdi existuj√∫ci v√Ωkaz
        var existingReports = safeLinksFrom(
            customerObj,
            CONFIG.libraries.workReport,
            CONFIG.vykazFields.zakazka
        );
        
        var workReport = null;
        
        if (existingReports && existingReports.length > 0) {
            workReport = existingReports[0];
            utils.addDebug(currentEntry, "  " + CONFIG.icons.update + " Existuj√∫ci v√Ωkaz n√°jden√Ω");
        } else {
            // Vytvor nov√Ω v√Ωkaz
            workReport = createNewWorkReport(customerObj, date, customerName);
        }
        
        // Pridaj link na aktu√°lny z√°znam
        if (workReport) {
            addWorkRecordLink(workReport, workedHours, hzsPrice);
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "synchronizeWorkReport");
    }
}

/**
 * Vytvor√≠ nov√Ω v√Ωkaz pr√°c
 */
function createNewWorkReport(customerObj, date, customerName) {
    try {
        var reportLib = libByName(CONFIG.libraries.workReport);
        var workReport = reportLib.create({});
        
        // Nastav z√°kladn√© polia
        utils.safeSet(workReport, CONFIG.vykazFields.datum, date);
        utils.safeSet(workReport, CONFIG.vykazFields.identifikator, "VP-" + moment(date).format("YYYYMMDD"));
        utils.safeSet(workReport, CONFIG.vykazFields.popis, "V√Ωkaz pr√°c - " + customerName);
        utils.safeSet(workReport, CONFIG.vykazFields.typVykazu, "Podƒæa vykonan√Ωch pr√°c");
        utils.safeSet(workReport, CONFIG.vykazFields.cenyPocitat, "Z cenovej ponuky");
        utils.safeSet(workReport, CONFIG.vykazFields.vydane, "Z√°kazka");
        utils.safeSet(workReport, CONFIG.vykazFields.zakazka, customerObj);
        
        // Info z√°znam
        var info = CONFIG.icons.info + " AUTOMATICKY VYTVOREN√ù V√ùKAZ\n";
        info += "=====================================\n\n";
        info += "üìÖ D√°tum: " + formatDate(date) + "\n";
        info += "üì¶ Z√°kazka: " + customerName + "\n";
        info += "‚è∞ Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        info += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        info += "üìÇ Zdroj: Kni≈ænica " + CONFIG.libraries.workRecord + "\n\n";
        info += "‚úÖ V√ùKAZ VYTVOREN√ù √öSPE≈†NE";
        
        utils.safeSet(workReport, CONFIG.vykazFields.info, info);
        
        utils.addDebug(currentEntry, "  " + CONFIG.icons.create + " Nov√Ω v√Ωkaz vytvoren√Ω");
        
        return workReport;
        
    } catch (error) {
        utils.addError(currentEntry, error, "createNewWorkReport");
        return null;
    }
}

/**
 * Prid√° link na z√°znam pr√°c do v√Ωkazu
 */
function addWorkRecordLink(workReport, workedHours, hzsPrice) {
    try {
        var praceHZS = utils.safeGetLinks(workReport, CONFIG.vykazFields.praceHZS);
        
        // Skontroluj ƒçi link u≈æ neexistuje
        var linkExists = false;
        for (var i = 0; i < praceHZS.length; i++) {
            if (praceHZS[i] && praceHZS[i].id === currentEntry.id) {
                linkExists = true;
                break;
            }
        }
        
        if (linkExists) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Link u≈æ existuje vo v√Ωkaze");
            return;
        }
        
        // Pridaj nov√Ω link
        praceHZS.push(currentEntry);
        workReport.set(CONFIG.vykazFields.praceHZS, praceHZS);
        
        utils.addDebug(currentEntry, "  " + CONFIG.icons.link + " Link pridan√Ω do v√Ωkazu");
        
        // Nastav atrib√∫ty na novom linku
        var lastIndex = praceHZS.length - 1;
        var workDescription = utils.safeGet(currentEntry, CONFIG.fields.workDescription, "");
        var totalPrice = Math.round(workedHours * hzsPrice * 100) / 100;
        
        try {
            var vykazArray = workReport.field(CONFIG.vykazFields.praceHZS);
            
            vykazArray[lastIndex].setAttr(CONFIG.attributes.workReport.workDescription, workDescription);
            vykazArray[lastIndex].setAttr(CONFIG.attributes.workReport.hoursCount, workedHours);
            vykazArray[lastIndex].setAttr(CONFIG.attributes.workReport.billedRate, hzsPrice);
            vykazArray[lastIndex].setAttr(CONFIG.attributes.workReport.totalPrice, totalPrice);
            
            utils.addDebug(currentEntry, "  ‚úÖ Atrib√∫ty nastaven√© na v√Ωkaze");
            
        } catch (attrError) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ atrib√∫tov: " + attrError);
        }
        
    } catch (error) {
        utils.addError(currentEntry, error, "addWorkRecordLink");
    }
}

// ==============================================
// INFO Z√ÅZNAM
// ==============================================

/**
 * Vytvor√≠ info z√°znam so s√∫hrnom
 */
function createInfoRecord(workTime, employees, hzs) {
    utils.addDebug(currentEntry, CONFIG.icons.step + " KROK 6: Vytvorenie info z√°znamu");
    
    var info = [];
    
    info.push(CONFIG.icons.info + " Z√ÅZNAM PR√ÅC - PREPOƒåET");
    info.push("=====================================");
    info.push("");
    info.push("üìÖ D√°tum: " + formatDate(utils.safeGet(currentEntry, CONFIG.fields.date)));
    info.push("‚è∞ ƒåas: " + utils.formatTime(workTime.startTime) + " - " + utils.formatTime(workTime.endTime));
    info.push("‚è±Ô∏è Odpracovan√©: " + workTime.hours + " hod√≠n");
    info.push("");
    
    if (employees.count > 0) {
        info.push("üë• ZAMESTNANCI (" + employees.count + "):");
        
        // Detaily zamestnancov
        var empArray = currentEntry.field(CONFIG.fields.employees);
        for (var i = 0; i < empArray.length; i++) {
            var emp = empArray[i];
            var empName = getEmployeeName(emp);
            var empHours = emp.attr(CONFIG.attributes.workRecordEmployees.workedHours) || 0;
            var empRate = emp.attr(CONFIG.attributes.workRecordEmployees.hourlyRate) || 0;
            var empCost = emp.attr(CONFIG.attributes.workRecordEmployees.wageCosts) || 0;
            
            info.push("  ‚Ä¢ " + empName + ": " + empHours + "h √ó " + empRate + "‚Ç¨ = " + empCost + "‚Ç¨");
        }
        
        info.push("");
        info.push("üí∞ Mzdov√© n√°klady celkom: " + utils.formatMoney(employees.totalCosts));
        info.push("");
    }
    
    if (hzs.price > 0) {
        info.push("üíµ HODINOV√Å Z√öƒåTOVACIA SADZBA:");
        info.push("  ‚Ä¢ Sadzba: " + utils.formatMoney(hzs.price) + "/h");
        info.push("  ‚Ä¢ Suma: " + utils.formatMoney(hzs.sum));
        info.push("");
    }
    
    var customer = utils.safeGetLinks(currentEntry, CONFIG.fields.customer);
    if (customer && customer.length > 0) {
        info.push("üì¶ Z√°kazka: " + utils.safeGet(customer[0], "N√°zov", "N/A"));
    }
    
    var workDescription = utils.safeGet(currentEntry, CONFIG.fields.workDescription);
    if (workDescription) {
        info.push("");
        info.push("üî® VYKONAN√â PR√ÅCE:");
        info.push(workDescription);
    }
    
    info.push("");
    info.push("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
    info.push("‚è∞ Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss"));
    info.push("üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version);
    
    utils.safeSet(currentEntry, CONFIG.commonFields.info, info.join("\n"));
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.clearLogs(currentEntry, false);
        
        // 1. Valid√°cia vstupn√Ωch d√°t
        var validationResult = validateInputs();
        if (!validationResult.success) {
            utils.addError(currentEntry, "Valid√°cia zlyhala: " + validationResult.message, "main");
            return false;
        }
        
        // 2. V√Ωpoƒçet pracovnej doby
        var workTimeResult = calculateWorkTime();
        if (!workTimeResult.success) {
            utils.addError(currentEntry, "V√Ωpoƒçet ƒçasu zlyhal", "main");
            return false;
        }
        
        // 3. Spracovanie zamestnancov
        var employeeResult = processEmployees(workTimeResult.hours);
        
        // 4. Spracovanie HZS
        var hzsResult = processHZS(workTimeResult.hours);
        
        // 5. Synchroniz√°cia v√Ωkazu pr√°c
        if (validationResult.hasCustomer) {
            synchronizeWorkReport(
                validationResult.customer,
                validationResult.date,
                workTimeResult.hours,
                hzsResult.price
            );
        }
        
        // 6. Vytvorenie info z√°znamu
        createInfoRecord(workTimeResult, employeeResult, hzsResult);
        
        utils.addDebug(currentEntry, CONFIG.icons.success + " === PREPOƒåET DOKONƒåEN√ù ===");
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error, "main");
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    utils.addDebug(currentEntry, "üé¨ Inicializ√°cia " + CONFIG.scriptName + " v" + CONFIG.version);
    
    // Kontrola ƒçi m√°me currentEntry
    if (!currentEntry) {
        message("üí• KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
        throw new Error("currentEntry neexistuje");
    }
    
    // Kontrola z√°vislost√≠
    var deps = utils.checkDependencies(['config', 'core', 'business']);
    if (!deps.success) {
        var errorMsg = "‚ùå Ch√Ωbaj√∫ce moduly: " + deps.missing.join(", ") + 
                      "\n\nUistite sa, ≈æe m√°te nain≈°talovan√© v≈°etky MementoUtils kni≈ænice.";
        message(errorMsg);
        cancel();
    }
    
    // Spusti hlavn√∫ funkciu
    var result = main();
    
    if (result) {
        // Zobraz s√∫hrn u≈æ√≠vateƒæovi
        var info = utils.safeGet(currentEntry, CONFIG.commonFields.info, "");
        var lines = info.split("\n");
        var shortInfo = lines.slice(0, 15).join("\n");
        
        if (lines.length > 15) {
            shortInfo += "\n\n... (zobrazen√Ωch prv√Ωch 15 riadkov)";
        }
        
        message("‚úÖ Z√°znam pr√°c √∫spe≈°ne prepoƒç√≠tan√Ω!\n\n" + shortInfo + 
               "\n\n" + CONFIG.icons.info + " Kompletn√© detaily n√°jdete v poli 'info'");
    } else {
        var errorLog = utils.safeGet(currentEntry, CONFIG.commonFields.errorLog, "≈Ωiadne chyby");
        
        message("‚ùå Prepoƒçet z√°znamu pr√°c zlyhal!\n\n" +
               "üîç Skontrolujte:\n" +
               "  ‚Ä¢ V≈°etky povinn√© polia s√∫ vyplnen√©\n" +
               "  ‚Ä¢ ƒåasy Od/Do s√∫ spr√°vne\n" +
               "  ‚Ä¢ Zamestnanci maj√∫ platn√© sadzby\n\n" +
               "üìã Error Log:\n" + errorLog);
    }
    
} catch (criticalError) {
    try {
        utils.addError(currentEntry, criticalError, "CRITICAL");
        message("üí• KRITICK√Å CHYBA!\n\n" + criticalError.toString() + 
               "\n\nScript nemohol dokonƒçi≈• spracovanie.\nSkontrolujte Error_Log pre detaily.");
    } catch (finalError) {
        message("üí• FAT√ÅLNA CHYBA!\n\nScript √∫plne zlyhal.\n\n" + 
               criticalError.toString());
    }
}