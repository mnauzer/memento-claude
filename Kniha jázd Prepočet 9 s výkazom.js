// ==============================================
// MEMENTO DATABASE - KNIHA J√ÅZD (ROUTE CALCULATION & PAYROLL)
// Verzia: 10.1 | D√°tum: December 2024 | Autor: ASISTANTO
// Kni≈ænica: Kniha j√°zd | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Automatick√Ω prepoƒçet vzdialenosti, ƒçasu jazdy a miezd pos√°dky
//    - V√Ωpoƒçet trasy pomocou OSRM API s fallback na vzdu≈°n√∫ vzdialenos≈•
//    - Automatick√© nastavenie default zdr≈æania na zast√°vkach
//    - Synchroniz√°cia Cieƒæa -> Stanovi≈°te vozidla
//    - Integr√°cia s MementoUtils ekosyst√©mom
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoBusiness (business logika)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Kniha j√°zd Prepoƒçet",
    version: "10.1",
    
    // Referencie na centr√°lny config
    fields: {
        start: "≈†tart",
        zastavky: "Zast√°vky",
        ciel: "Cieƒæ", 
        km: "Km",
        casJazdy: "ƒåas jazdy",
        casNaZastavkach: "ƒåas na zast√°vkach",
        celkovyCas: "Celkov√Ω ƒças",
        posadka: "Pos√°dka",
        sofer: "≈†of√©r",
        datum: "D√°tum",
        mzdy: "Mzdov√© n√°klady",
        vozidlo: "Vozidlo",
        info: centralConfig.fields.common.info
    },
    
    // Atrib√∫ty
    attributes: {
        trvanie: "trvanie",
        zdrzanie: "zdr≈æanie",  
        km: "km",
        hodinovka: "hodinovka",
        dennaMzda: "denn√° mzda"
    },
    
    // Kni≈ænice
    libraries: {
        sadzby: centralConfig.libraries.rates,
        miesta: "Miesta",
        zamestnanci: centralConfig.libraries.employees,
        defaults: centralConfig.libraries.defaults,
        vozidla: centralConfig.libraries.vehicles
    },
    
    // N√°zvy pol√≠ v kni≈æniciach
    miestalFields: {
        gps: "GPS",
        nazov: "N√°zov"
    },
    
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    zamestnancilFields: {
        meno: "Meno",
        nick: "Nick"
    },
    
    vozidlaFields: {
        stanoviste: "Stanovi≈°te",
        nazov: "N√°zov"
    },
    
    // OSRM API nastavenia
    osrm: {
        maxRetries: 3,
        baseUrl: "https://router.project-osrm.org/route/v1/driving/",
        requestTimeout: 5000
    },
    
    // Business pravidl√°
    settings: {
        roundToQuarterHour: false,
        defaultZdrzanie: 0.5 // 30 min√∫t
    }
};

// ==============================================
// UTILITY FUNKCIE
// ==============================================

/**
 * Z√≠ska default zdr≈æanie z ASISTANTO Defaults
 */
function getDefaultZdrzanie() {
    try {
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.libraries.defaults + " nen√°jden√°", "getDefaultZdrzanie");
            return CONFIG.settings.defaultZdrzanie;
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (defaultsEntries.length > 0) {
            var defaultZdrz = defaultsEntries[0].field("Default zdr≈æanie");
            
            if (defaultZdrz !== null && defaultZdrz !== undefined) {
                return utils.convertDurationToHours(defaultZdrz);
            }
        }
        
        return CONFIG.settings.defaultZdrzanie;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "getDefaultZdrzanie", error);
        return CONFIG.settings.defaultZdrzanie;
    }
}

/**
 * Extrahuje GPS s√∫radnice z poƒæa miesta
 */
function extractGPSFromPlace(place) {
    if (!place || place.length === 0) {
        return null;
    }
    
    var miesto = place[0];
    var nazov = utils.safeGet(miesto, CONFIG.miestalFields.nazov, "Nezn√°me");
    
    utils.addDebug(currentEntry, "  üìç Spracov√°vam miesto: " + nazov);
    
    // Z√≠skaj GPS pole - JSGeolocation objekt
    var gpsLocation = null;
    
    try {
        gpsLocation = miesto.field(CONFIG.miestalFields.gps);
    } catch (e) {
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri z√≠skavan√≠ GPS poƒæa: " + e);
        return null;
    }
    
    if (!gpsLocation) {
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Miesto '" + nazov + "' nem√° GPS s√∫radnice");
        return null;
    }
    
    var lat = null;
    var lon = null;
    
    try {
        // JSGeolocation objekt m√° properties lat a lng
        lat = gpsLocation.lat;
        lon = gpsLocation.lng;
        
        // Debug inform√°cie
        if (gpsLocation.address) {
            utils.addDebug(currentEntry, "    Adresa: " + gpsLocation.address);
        }
        utils.addDebug(currentEntry, "    S√∫radnice: " + lat + ", " + lon);
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri ƒç√≠tan√≠ GPS objektu: " + error.toString(), "extractGPSFromPlace", error);
        return null;
    }
    
    // Valid√°cia GPS s√∫radn√≠c
    if (lat !== null && lon !== null && !isNaN(lat) && !isNaN(lon)) {
        // Z√°kladn√° valid√°cia rozsahu
        if (lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180) {
            utils.addDebug(currentEntry, "  ‚úÖ GPS √∫spe≈°ne extrahovan√©: " + lat + ", " + lon);
            return { lat: lat, lon: lon };
        } else {
            utils.addDebug(currentEntry, "  ‚ùå GPS s√∫radnice mimo platn√©ho rozsahu: " + lat + ", " + lon);
        }
    } else {
        utils.addDebug(currentEntry, "  ‚ùå Neplatn√© GPS s√∫radnice");
    }
    
    return null;
}

/**
 * Vypoƒç√≠ta vzdu≈°n√∫ vzdialenos≈• medzi dvoma bodmi (Haversine formula)
 */
function calculateAirDistance(point1, point2) {
    var R = 6371; // Polomer Zeme v km
    var dLat = toRadians(point2.lat - point1.lat);
    var dLon = toRadians(point2.lon - point1.lon);
    var lat1 = toRadians(point1.lat);
    var lat2 = toRadians(point2.lat);

    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1) * Math.cos(lat2) * 
            Math.sin(dLon/2) * Math.sin(dLon/2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    var d = R * c; // Vzdialenos≈• v km
    
    return d;
}

function toRadians(deg) {
    return deg * (Math.PI / 180);
}

/**
 * Vypoƒç√≠ta segment trasy pomocou OSRM alebo fallback
 */
function calculateSegment(start, end, segmentName) {
    var result = {
        success: false,
        km: 0,
        trvanie: 0,
        metoda: "none"
    };
    
    try {
        utils.addDebug(currentEntry, "\n  üõ£Ô∏è " + segmentName);
        
        if (!start || !end) {
            utils.addDebug(currentEntry, "    ‚ùå Ch√Ωbaj√∫ s√∫radnice");
            return result;
        }
        
        // Pokus o OSRM API
        result = calculateOSRMRoute(start, end);
        
        if (result.success) {
            utils.addDebug(currentEntry, "    ‚úÖ OSRM: " + result.km + " km, " + result.trvanie + " h");
            result.metoda = "OSRM";
        } else {
            // Fallback na vzdu≈°n√∫ vzdialenos≈•
            var airDistance = calculateAirDistance(start, end);
            var roadFactor = 1.4; // Empirick√Ω koeficient pre cestn√∫ vzdialenos≈•
            var avgSpeed = 50; // Priemern√° r√Ωchlos≈• v km/h
            
            result.km = Math.round(airDistance * roadFactor * 10) / 10;
            result.trvanie = Math.round((result.km / avgSpeed) * 100) / 100;
            result.success = true;
            result.metoda = "Vzdu≈°n√° ƒçiara";
            
            utils.addDebug(currentEntry, "    üìê Vzdu≈°n√° vzdialenos≈•: " + result.km + " km, " + result.trvanie + " h");
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri v√Ωpoƒçte segmentu: " + error.toString(), "calculateSegment");
    }
    
    return result;
}

/**
 * Volanie OSRM API pre v√Ωpoƒçet trasy
 */
function calculateOSRMRoute(start, end) {
    var result = {
        success: false,
        km: 0,
        trvanie: 0
    };
    
    try {
        if (!http) {
            utils.addDebug(currentEntry, "    ‚ùå HTTP funkcia nie je dostupn√°");
            return result;
        }
        
        var url = CONFIG.osrm.baseUrl + start.lon + "," + start.lat + ";" + 
                  end.lon + "," + end.lat + "?overview=false";
        
        utils.addDebug(currentEntry, "    üåê OSRM API volanie...");
        
        var retries = 0;
        var response = null;
        
        while (retries < CONFIG.osrm.maxRetries && !response) {
            try {
                var httpClient = http();
                httpClient.headers({
                    "Accept": "application/json"
                });
                
                response = httpClient.get(url);
                
                if (response.code === 200) {
                    var data = JSON.parse(response.body);
                    
                    if (data.routes && data.routes.length > 0) {
                        var route = data.routes[0];
                        result.km = Math.round(route.distance / 100) / 10; // Metre na km
                        result.trvanie = Math.round(route.duration / 36) / 100; // Sekundy na hodiny
                        result.success = true;
                    }
                } else {
                    utils.addDebug(currentEntry, "    ‚ö†Ô∏è OSRM odpoveƒè: " + response.code);
                    retries++;
                }
                
            } catch (httpError) {
                utils.addDebug(currentEntry, "    ‚ö†Ô∏è HTTP chyba (pokus " + (retries + 1) + "): " + httpError);
                retries++;
            }
        }
        
    } catch (error) {
        utils.addDebug(currentEntry, "    ‚ùå OSRM API chyba: " + error.toString());
    }
    
    return result;
}

// ==============================================
// HLAVN√â FUNKCIE PREPOƒåTU
// ==============================================

/**
 * KROK 1: V√Ωpoƒçet trasy
 */
function calculateRoute() {
    utils.addDebug(currentEntry, "\nüìç === KROK 1: V√ùPOƒåET TRASY ===");
    
    var result = {
        success: false,
        totalKm: 0,
        casJazdy: 0,
        casNaZastavkach: 0,
        celkovyCas: 0
    };
    
    try {
        // Z√≠skaj body trasy
        var start = currentEntry.field(CONFIG.fields.start);
        var zastavky = currentEntry.field(CONFIG.fields.zastavky);
        var ciel = currentEntry.field(CONFIG.fields.ciel);
        
        utils.addDebug(currentEntry, "  üèÅ ≈†tart: " + (start && start.length > 0 ? "‚úì" : "‚úó"));
        utils.addDebug(currentEntry, "  üõë Zast√°vky: " + (zastavky ? zastavky.length : 0));
        utils.addDebug(currentEntry, "  üèÅ Cieƒæ: " + (ciel && ciel.length > 0 ? "‚úì" : "‚úó"));
        
        if (!start || start.length === 0 || !ciel || ciel.length === 0) {
            utils.addError(currentEntry, "Ch√Ωba ≈°tart alebo cieƒæ", "calculateRoute");
            return result;
        }
        
        // Extrahuj GPS s√∫radnice
        var startGPS = extractGPSFromPlace(start);
        var cielGPS = extractGPSFromPlace(ciel);
        
        if (!startGPS || !cielGPS) {
            utils.addError(currentEntry, "Ch√Ωbaj√∫ GPS s√∫radnice pre ≈°tart alebo cieƒæ", "calculateRoute");
            return result;
        }
        
        // Vypoƒç√≠taj jednotliv√© √∫seky
        var currentPoint = startGPS;
        var defaultZdrzanie = getDefaultZdrzanie();
        
        // √öseky cez zast√°vky
        if (zastavky && zastavky.length > 0) {
            for (var j = 0; j < zastavky.length; j++) {
                var gps = extractGPSFromPlace([zastavky[j]]);
                if (!gps) {
                    utils.addDebug(currentEntry, "  ‚ö†Ô∏è Zast√°vka " + (j+1) + " nem√° GPS");
                    continue;
                }
                
                var segment = calculateSegment(currentPoint, gps, "√ösek " + (j+1));
                
                if (segment.success) {
                    result.totalKm += segment.km;
                    result.casJazdy += segment.trvanie;
                    
                    // Nastav atrib√∫ty zast√°vky
                    try {
                        zastavky[j].setAttr(CONFIG.attributes.km, Math.round(segment.km * 10) / 10);
                        zastavky[j].setAttr(CONFIG.attributes.trvanie, segment.trvanie);
                        
                        // Nastav zdr≈æanie ak nie je nastaven√©
                        var existingZdrzanie = zastavky[j].attr(CONFIG.attributes.zdrzanie);
                        var zdrz = 0;
                        
                        if (!existingZdrzanie || existingZdrzanie === 0) {
                            zastavky[j].setAttr(CONFIG.attributes.zdrzanie, defaultZdrzanie);
                            zdrz = defaultZdrzanie;
                            utils.addDebug(currentEntry, "    ‚è±Ô∏è Nastaven√© default zdr≈æanie: " + defaultZdrzanie + " h");
                        } else {
                            zdrz = utils.convertDurationToHours(existingZdrzanie);
                            utils.addDebug(currentEntry, "    ‚è±Ô∏è Existuj√∫ce zdr≈æanie: " + zdrz + " h");
                        }
                        
                        result.casNaZastavkach += zdrz;
                        
                    } catch (attrError) {
                        utils.addError(currentEntry, "Chyba pri nastavovan√≠ atrib√∫tov zast√°vky: " + attrError.toString(), "calculateRoute");
                    }
                    
                    currentPoint = gps;
                }
            }
        }
        
        // Posledn√Ω √∫sek do cieƒæa
        var lastSegment = calculateSegment(currentPoint, cielGPS, "√ösek do cieƒæa");
        
        if (lastSegment.success) {
            result.totalKm += lastSegment.km;
            result.casJazdy += lastSegment.trvanie;
            
            // Nastav atrib√∫ty cieƒæa
            try {
                ciel[0].setAttr(CONFIG.attributes.km, Math.round(lastSegment.km * 10) / 10);
                ciel[0].setAttr(CONFIG.attributes.trvanie, lastSegment.trvanie);
            } catch (attrError) {
                utils.addError(currentEntry, "Chyba pri nastavovan√≠ atrib√∫tov cieƒæa: " + attrError.toString(), "calculateRoute");
            }
        }
        
        // Vypoƒç√≠taj celkov√Ω ƒças
        result.celkovyCas = result.casJazdy + result.casNaZastavkach;
        
        // Zaokr√∫hli hodnoty
        result.totalKm = Math.round(result.totalKm * 10) / 10;
        result.casJazdy = Math.round(result.casJazdy * 100) / 100;
        result.casNaZastavkach = Math.round(result.casNaZastavkach * 100) / 100;
        result.celkovyCas = Math.round(result.celkovyCas * 100) / 100;
        
        // Ulo≈æ do pol√≠
        utils.safeSet(currentEntry, CONFIG.fields.km, result.totalKm);
        utils.safeSet(currentEntry, CONFIG.fields.casJazdy, result.casJazdy);
        utils.safeSet(currentEntry, CONFIG.fields.casNaZastavkach, result.casNaZastavkach);
        utils.safeSet(currentEntry, CONFIG.fields.celkovyCas, result.celkovyCas);
        
        utils.addDebug(currentEntry, "\n  üìä V√ùSLEDKY:");
        utils.addDebug(currentEntry, "  ‚Ä¢ Vzdialenos≈•: " + result.totalKm + " km");
        utils.addDebug(currentEntry, "  ‚Ä¢ ƒåas jazdy: " + result.casJazdy + " h");
        utils.addDebug(currentEntry, "  ‚Ä¢ ƒåas na zast√°vkach: " + result.casNaZastavkach + " h");
        utils.addDebug(currentEntry, "  ‚Ä¢ Celkov√Ω ƒças: " + result.celkovyCas + " h");
        
        result.success = true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateRoute", error);
    }
    
    return result;
}

/**
 * KROK 2: Spracovanie ≈°of√©ra
 */
function processDriver() {
    utils.addDebug(currentEntry, "\nüöó === KROK 2: SPRACOVANIE ≈†OF√âRA ===");
    
    var result = {
        success: false,
        soferInPosadke: false
    };
    
    try {
        var sofer = currentEntry.field(CONFIG.fields.sofer);
        var posadka = currentEntry.field(CONFIG.fields.posadka) || [];
        
        if (!sofer || sofer.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadny ≈°of√©r nebol zadan√Ω");
            result.success = true;
            return result;
        }
        
        var soferObj = sofer[0];
        var soferNick = utils.safeGet(soferObj, CONFIG.zamestnancilFields.nick, "");
        
        utils.addDebug(currentEntry, "  üë§ ≈†of√©r: " + utils.formatEmployeeName(soferObj));
        
        // Skontroluj ƒçi ≈°of√©r nie je u≈æ v pos√°dke
        for (var i = 0; i < posadka.length; i++) {
            var clenNick = utils.safeGet(posadka[i], CONFIG.zamestnancilFields.nick, "");
            if (clenNick === soferNick) {
                result.soferInPosadke = true;
                utils.addDebug(currentEntry, "  ‚úÖ ≈†of√©r u≈æ je v pos√°dke");
                break;
            }
        }
        
        // Ak ≈°of√©r nie je v pos√°dke, pridaj ho
        if (!result.soferInPosadke) {
            posadka.push(soferObj);
            utils.safeSet(currentEntry, CONFIG.fields.posadka, posadka);
            utils.addDebug(currentEntry, "  ‚ûï ≈†of√©r pridan√Ω do pos√°dky");
        }
        
        result.success = true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processDriver", error);
    }
    
    return result;
}

/**
 * KROK 3: V√Ωpoƒçet mzdov√Ωch n√°kladov
 */
function calculateWageCosts() {
    utils.addDebug(currentEntry, "\nüí∞ === KROK 3: V√ùPOƒåET MZDOV√ùCH N√ÅKLADOV ===");
    
    var result = {
        success: false,
        celkoveMzdy: 0,
        detaily: []
    };
    
    try {
        var posadka = currentEntry.field(CONFIG.fields.posadka) || [];
        var datum = utils.safeGet(currentEntry, CONFIG.fields.datum, new Date());
        var celkovyCas = utils.safeGet(currentEntry, CONFIG.fields.celkovyCas, 0);
        
        if (posadka.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadna pos√°dka");
            result.success = true;
            return result;
        }
        
        if (celkovyCas === 0) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Celkov√Ω ƒças je 0");
            result.success = true;
            return result;
        }
        
        utils.addDebug(currentEntry, "  üë• Pos√°dka: " + posadka.length + " ƒçlenov");
        utils.addDebug(currentEntry, "  ‚è±Ô∏è Celkov√Ω ƒças: " + celkovyCas + " h");
        
        // Spracuj ka≈æd√©ho ƒçlena pos√°dky
        for (var i = 0; i < posadka.length; i++) {
            var zamestnanec = posadka[i];
            var meno = utils.formatEmployeeName(zamestnanec);
            
            utils.addDebug(currentEntry, "\n  [" + (i+1) + "/" + posadka.length + "] " + meno);
            
            // Z√≠skaj detaily zamestnanca s hodinovou sadzbou
            var empDetails = utils.getEmployeeDetails(zamestnanec, datum);
            
            if (!empDetails || !empDetails.hourlyRate || empDetails.hourlyRate <= 0) {
                utils.addError(currentEntry, "Zamestnanec " + meno + " nem√° platn√∫ sadzbu", "calculateWageCosts");
                continue;
            }
            
            var hodinovka = empDetails.hourlyRate;
            var mzda = celkovyCas * hodinovka;
            
            // Nastav atrib√∫ty na zamestnancovi
            try {
                posadka[i].setAttr(CONFIG.attributes.hodinovka, hodinovka);
                posadka[i].setAttr(CONFIG.attributes.dennaMzda, Math.round(mzda * 100) / 100);
            } catch (attrError) {
                utils.addDebug(currentEntry, "    ‚ö†Ô∏è Nepodarilo sa nastavi≈• atrib√∫ty: " + attrError);
            }
            
            result.celkoveMzdy += mzda;
            result.detaily.push({
                meno: meno,
                hodinovka: hodinovka,
                mzda: mzda
            });
            
            utils.addDebug(currentEntry, "    üíµ Hodinovka: " + hodinovka + " ‚Ç¨/h");
            utils.addDebug(currentEntry, "    üí∞ Mzda: " + utils.formatMoney(mzda));
        }
        
        // Zaokr√∫hli a ulo≈æ celkov√© mzdy
        result.celkoveMzdy = Math.round(result.celkoveMzdy * 100) / 100;
        utils.safeSet(currentEntry, CONFIG.fields.mzdy, result.celkoveMzdy);
        
        utils.addDebug(currentEntry, "\n  üí∞ CELKOV√â MZDY: " + utils.formatMoney(result.celkoveMzdy));
        
        result.success = true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateWageCosts", error);
    }
    
    return result;
}

/**
 * KROK 4: Synchroniz√°cia Cieƒæa do Stanovi≈°≈•a vozidla
 */
function synchronizeVehicleLocation() {
    utils.addDebug(currentEntry, "\nüöê === KROK 4: SYNCHRONIZ√ÅCIA STANOVI≈†≈§A VOZIDLA ===");
    
    var result = {
        success: false,
        message: ""
    };
    
    try {
        // Z√≠skaj vozidlo z aktu√°lneho z√°znamu
        var vozidloField = currentEntry.field(CONFIG.fields.vozidlo);
        if (!vozidloField || vozidloField.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne vozidlo - preskakujem synchroniz√°ciu");
            result.success = true;
            return result;
        }
        
        var vozidlo = vozidloField[0];
        var vozidloNazov = utils.safeGet(vozidlo, CONFIG.vozidlaFields.nazov, "N/A");
        utils.addDebug(currentEntry, "  üöó Vozidlo: " + vozidloNazov);
        
        // Z√≠skaj cieƒæ z aktu√°lneho z√°znamu
        var cielField = currentEntry.field(CONFIG.fields.ciel);
        if (!cielField || cielField.length === 0) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è ≈Ωiadny cieƒæ - nem√¥≈æem synchronizova≈•");
            result.message = "≈Ωiadny cieƒæ";
            result.success = true;
            return result;
        }
        
        var cielMiesto = cielField[0];
        var cielNazov = utils.safeGet(cielMiesto, CONFIG.miestalFields.nazov, "N/A");
        
        // Z√≠skaj aktu√°lne stanovi≈°te vozidla
        var aktualneStanoviste = vozidlo.field(CONFIG.vozidlaFields.stanoviste);
        var aktualneStanovisteNazov = "≈æiadne";
        
        if (aktualneStanoviste && aktualneStanoviste.length > 0) {
            aktualneStanovisteNazov = utils.safeGet(aktualneStanoviste[0], CONFIG.miestalFields.nazov, "N/A");
        }
        
        utils.addDebug(currentEntry, "  üìç Aktu√°lne stanovi≈°te: " + aktualneStanovisteNazov);
        utils.addDebug(currentEntry, "  üèÅ Cieƒæ jazdy: " + cielNazov);
        
        // Skontroluj ƒçi je potrebn√° zmena
        if (aktualneStanoviste && aktualneStanoviste.length > 0) {
            var aktualneId = aktualneStanoviste[0].id;
            var cielId = cielMiesto.id;
            
            if (aktualneId === cielId) {
                utils.addDebug(currentEntry, "  ‚úÖ Stanovi≈°te u≈æ je nastaven√© na cieƒæ");
                result.message = "U≈æ synchronizovan√©";
                result.success = true;
                return result;
            }
        }
        
        // Aktualizuj stanovi≈°te vozidla
        try {
            vozidlo.set(CONFIG.vozidlaFields.stanoviste, [cielMiesto]);
            utils.addDebug(currentEntry, "  ‚úÖ Stanovi≈°te vozidla aktualizovan√©: " + aktualneStanovisteNazov + " ‚Üí " + cielNazov);
            
            // Pridaj info do vozidla
            var existingInfo = utils.safeGet(vozidlo, CONFIG.fields.info, "");
            var updateInfo = "\nüîÑ STANOVI≈†TE AKTUALIZOVAN√â: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
            updateInfo += "‚Ä¢ Z: " + aktualneStanovisteNazov + "\n";
            updateInfo += "‚Ä¢ Na: " + cielNazov + "\n";
            updateInfo += "‚Ä¢ Kniha j√°zd #" + currentEntry.field("ID") + "\n";
            updateInfo += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
            
            // Obmedz dƒ∫≈æku info poƒæa
            var newInfo = existingInfo + updateInfo;
            if (newInfo.length > 5000) {
                newInfo = "... (skr√°ten√©) ...\n" + newInfo.substring(newInfo.length - 4900);
            }
            
            vozidlo.set(CONFIG.fields.info, newInfo);
            
            result.message = "Stanovi≈°te aktualizovan√©: " + cielNazov;
            result.success = true;
            
        } catch (updateError) {
            utils.addError(currentEntry, "Chyba pri aktualiz√°cii stanovi≈°≈•a: " + updateError.toString(), "synchronizeVehicleLocation");
            result.message = "Chyba aktualiz√°cie";
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "synchronizeVehicleLocation", error);
        result.message = "Kritick√° chyba";
    }
    
    return result;
}

/**
 * Vytvor√≠ info z√°znam s detailmi o jazde
 */
function createInfoRecord(routeResult, wageResult, vehicleResult) {
    try {
        var info = "";
        
        // ƒåasov√° znaƒçka
        info += "üöó KNIHA J√ÅZD - " + utils.formatDate(moment()) + "\n";
        info += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        
        // Trasa
        if (routeResult.success) {
            info += "üìè TRASA:\n";
            info += "‚Ä¢ Vzdialenos≈•: " + routeResult.totalKm + " km\n";
            info += "‚Ä¢ ƒåas jazdy: " + routeResult.casJazdy + " h\n";
            info += "‚Ä¢ ƒåas na zast√°vkach: " + routeResult.casNaZastavkach + " h\n";
            info += "‚Ä¢ Celkov√Ω ƒças: " + routeResult.celkovyCas + " h\n\n";
        }
        
        // Pos√°dka a mzdy
        if (wageResult.success && wageResult.detaily.length > 0) {
            info += "üë• POS√ÅDKA A MZDY:\n";
            for (var i = 0; i < wageResult.detaily.length; i++) {
                var detail = wageResult.detaily[i];
                info += "‚Ä¢ " + detail.meno + ": " + detail.hodinovka + " ‚Ç¨/h = " + utils.formatMoney(detail.mzda) + "\n";
            }
            info += "\nüí∞ CELKOV√â MZDOV√â N√ÅKLADY: " + utils.formatMoney(wageResult.celkoveMzdy) + "\n";
        }
        
        // Vozidlo info
        if (vehicleResult && vehicleResult.success && vehicleResult.message !== "≈Ωiadne vozidlo") {
            info += "\nüöê VOZIDLO:\n";
            info += "‚Ä¢ " + vehicleResult.message + "\n";
        }
        
        info += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        info += "Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        info += "Vygenerovan√©: " + utils.formatDate(moment());
        
        utils.safeSet(currentEntry, CONFIG.fields.info, info);
        utils.addDebug(currentEntry, "‚úÖ Info z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createInfoRecord", error);
        return false;
    }
}

// ==============================================
// V√ùKAZ J√ÅZD - FUNKCIE
// ==============================================

/**
 * Synchronizuje alebo vytvor√≠ v√Ωkaz j√°zd
 */
function synchronizeRideReport(routeResult, wageResult) {
    var result = {
        success: false,
        rideReport: null,
        action: "none"
    };
    
    try {
        var zakazka = currentEntry.field("Z√°kazky");
        var datum = utils.safeGet(currentEntry, CONFIG.fields.datum, new Date());
        
        if (!zakazka || zakazka.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadna z√°kazka - preskakujem v√Ωkaz");
            result.success = true;
            return result;
        }
        
        var zakazkaObj = zakazka[0];
        var zakazkaName = utils.safeGet(zakazkaObj, "N√°zov", "N/A");
        
        utils.addDebug(currentEntry, "  üîç Hƒæad√°m v√Ωkaz j√°zd pre z√°kazku: " + zakazkaName);
        
        // N√°jdi existuj√∫ci v√Ωkaz
        var existingReports = zakazkaObj.linksFrom("V√Ωkaz dopravy", "Z√°kazka");
        var rideReport = null;
        
        if (existingReports && existingReports.length > 0) {
            rideReport = existingReports[0];
            utils.addDebug(currentEntry, "  ‚úÖ Existuj√∫ci v√Ωkaz n√°jden√Ω");
            result.action = "update";
        } else {
            // Vytvor nov√Ω v√Ωkaz
            rideReport = createNewRideReport(zakazkaObj, datum, zakazkaName);
            if (rideReport) {
                result.action = "create";
            }
        }
        
        if (rideReport) {
            // Aktualizuj link na aktu√°lny z√°znam
            linkCurrentRecordToReport(rideReport);
            
            // Aktualizuj atrib√∫ty
            updateRideReportAttributes(rideReport, routeResult, wageResult);
            
            // Aktualizuj info pole
            updateRideReportInfo(rideReport);
            
            result.rideReport = rideReport;
            result.success = true;
            
            utils.addDebug(currentEntry, "  ‚úÖ V√Ωkaz j√°zd " + (result.action === "create" ? "vytvoren√Ω" : "aktualizovan√Ω"));
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri synchroniz√°cii v√Ωkazu j√°zd: " + error.toString(), "synchronizeRideReport", error);
    }
    
    return result;
}

/**
 * Vytvor√≠ nov√Ω v√Ωkaz j√°zd
 */
function createNewRideReport(zakazkaObj, datum, zakazkaName) {
    try {
        var reportLib = libByName("V√Ωkaz dopravy");
        if (!reportLib) {
            utils.addError(currentEntry, "Kni≈ænica 'V√Ωkaz dopravy' nen√°jden√°", "createNewRideReport");
            return null;
        }
        
        // Vytvor nov√Ω v√Ωkaz
        var rideReport = reportLib.create({});
        
        // Nastav z√°kladn√© polia
        utils.safeSet(rideReport, "D√°tum", datum);
        utils.safeSet(rideReport, "Identifik√°tor", "VD-" + moment(datum).format("YYYYMMDD"));
        utils.safeSet(rideReport, "Popis", "V√Ωkaz dopravy - " + zakazkaName);
        utils.safeSet(rideReport, "Typ v√Ωkazu", "Podƒæa knihy j√°zd");
        utils.safeSet(rideReport, "Vydan√©", "Z√°kazka");
        utils.safeSet(rideReport, "Z√°kazka", [zakazkaObj]);
        
        // Info z√°znam
        var info = "üìã AUTOMATICKY VYTVOREN√ù V√ùKAZ DOPRAVY\n";
        info += "=====================================\n\n";
        info += "üìÖ D√°tum: " + utils.formatDate(datum) + "\n";
        info += "üì¶ Z√°kazka: " + zakazkaName + "\n";
        info += "‚è∞ Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        info += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        info += "üìÇ Zdroj: Kni≈ænica Kniha j√°zd\n\n";
        info += "‚úÖ V√ùKAZ VYTVOREN√ù √öSPE≈†NE";
        
        utils.safeSet(rideReport, "info", info);
        
        utils.addDebug(currentEntry, "  ‚úÖ Nov√Ω v√Ωkaz vytvoren√Ω");
        
        return rideReport;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createNewRideReport", error);
        return null;
    }
}

/**
 * Prepoj√≠ aktu√°lny z√°znam s v√Ωkazom
 */
function linkCurrentRecordToReport(rideReport) {
    try {
        var dopravaPole = rideReport.field("Doprava");
        if (!dopravaPole) {
            dopravaPole = [];
        }
        
        // Skontroluj ƒçi u≈æ nie je prepojen√Ω
        var isLinked = false;
        for (var i = 0; i < dopravaPole.length; i++) {
            if (dopravaPole[i].id === currentEntry.id) {
                isLinked = true;
                break;
            }
        }
        
        if (!isLinked) {
            dopravaPole.push(currentEntry);
            rideReport.set("Doprava", dopravaPole);
            utils.addDebug(currentEntry, "  üîó Z√°znam prepojen√Ω s v√Ωkazom");
        } else {
            utils.addDebug(currentEntry, "  ‚úÖ Z√°znam u≈æ je prepojen√Ω");
        }
        
        // Nastav sp√§tn√Ω link
        utils.safeSet(currentEntry, "V√Ωkaz dopravy", [rideReport]);
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri prep√°jan√≠ z√°znamu: " + error.toString(), "linkCurrentRecordToReport", error);
    }
}

/**
 * Aktualizuje atrib√∫ty na v√Ωkaze
 */
function updateRideReportAttributes(rideReport, routeResult, wageResult) {
    try {
        var dopravaPole = rideReport.field("Doprava");
        if (!dopravaPole || dopravaPole.length === 0) return;
        
        // N√°jdi index aktu√°lneho z√°znamu
        var index = -1;
        for (var i = 0; i < dopravaPole.length; i++) {
            if (dopravaPole[i].id === currentEntry.id) {
                index = i;
                break;
            }
        }
        
        if (index === -1) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Z√°znam nen√°jden√Ω vo v√Ωkaze");
            return;
        }
        
        // Nastav atrib√∫ty
        var popisJazdy = utils.safeGet(currentEntry, "Popis jazdy", "");
        var km = routeResult.totalKm;
        var casJazdy = routeResult.celkovyCas;
        var mzdy = wageResult.celkoveMzdy;
        
        // Atrib√∫ty pre v√Ωkaz dopravy
        dopravaPole[index].setAttr("popis jazdy", popisJazdy);
        dopravaPole[index].setAttr("km", km);
        dopravaPole[index].setAttr("ƒças jazdy", casJazdy);
        dopravaPole[index].setAttr("mzdov√© n√°klady", mzdy);
        
        utils.addDebug(currentEntry, "  ‚úÖ Atrib√∫ty aktualizovan√©:");
        utils.addDebug(currentEntry, "    ‚Ä¢ Popis: " + (popisJazdy || "N/A"));
        utils.addDebug(currentEntry, "    ‚Ä¢ Km: " + km);
        utils.addDebug(currentEntry, "    ‚Ä¢ ƒåas: " + casJazdy + " h");
        utils.addDebug(currentEntry, "    ‚Ä¢ Mzdy: " + utils.formatMoney(mzdy));
        
        // Prepoƒç√≠taj celkov√Ω s√∫ƒçet v√Ωkazu
        recalculateRideReportTotals(rideReport);
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri aktualiz√°cii atrib√∫tov: " + error.toString(), "updateRideReportAttributes", error);
    }
}

/**
 * Prepoƒç√≠ta s√∫ƒçty vo v√Ωkaze
 */
function recalculateRideReportTotals(rideReport) {
    try {
        var dopravaPole = rideReport.field("Doprava");
        if (!dopravaPole) return;
        
        var totalKm = 0;
        var totalHours = 0;
        var totalCosts = 0;
        var recordCount = dopravaPole.length;
        
        // Spoƒç√≠taj v≈°etky z√°znamy
        for (var i = 0; i < dopravaPole.length; i++) {
            var km = dopravaPole[i].attr("km") || 0;
            var cas = dopravaPole[i].attr("ƒças jazdy") || 0;
            var mzdy = dopravaPole[i].attr("mzdov√© n√°klady") || 0;
            
            totalKm += km;
            totalHours += cas;
            totalCosts += mzdy;
        }
        
        // Ulo≈æ s√∫ƒçty do v√Ωkazu
        utils.safeSet(rideReport, "Celkov√© km", totalKm);
        utils.safeSet(rideReport, "Celkov√© hodiny", totalHours);
        utils.safeSet(rideReport, "Celkov√© mzdov√© n√°klady", totalCosts);
        utils.safeSet(rideReport, "Poƒçet j√°zd", recordCount);
        
        utils.addDebug(currentEntry, "  üìä V√Ωkaz prepoƒç√≠tan√Ω:");
        utils.addDebug(currentEntry, "    ‚Ä¢ Celkov√© km: " + totalKm);
        utils.addDebug(currentEntry, "    ‚Ä¢ Celkov√© hodiny: " + totalHours);
        utils.addDebug(currentEntry, "    ‚Ä¢ Celkov√© n√°klady: " + utils.formatMoney(totalCosts));
        utils.addDebug(currentEntry, "    ‚Ä¢ Poƒçet j√°zd: " + recordCount);
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri prepoƒçte v√Ωkazu: " + error.toString(), "recalculateRideReportTotals", error);
    }
}

/**
 * Aktualizuje info pole v√Ωkazu
 */
function updateRideReportInfo(rideReport) {
    try {
        var existingInfo = utils.safeGet(rideReport, "info", "");
        
        // Pridaj inform√°ciu o aktualiz√°cii
        var updateInfo = "\n\nüîÑ AKTUALIZOVAN√â: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        updateInfo += "‚Ä¢ Kniha j√°zd #" + currentEntry.field("ID") + " bola aktualizovan√°\n";
        updateInfo += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version;
        
        // Obmedz dƒ∫≈æku info poƒæa
        var newInfo = existingInfo + updateInfo;
        if (newInfo.length > 5000) {
            newInfo = "... (skr√°ten√©) ...\n" + newInfo.substring(newInfo.length - 4900);
        }
        
        rideReport.set("info", newInfo);
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri aktualiz√°cii info poƒæa: " + error.toString(), "updateRideReportInfo", error);
    }
}

// ==============================================
// FIN√ÅLNY S√öHRN
// ==============================================

function logFinalSummary(steps) {
    try {
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Kontrola z√°vislost√≠
        var depCheck = utils.checkDependencies(['config', 'core', 'business']);
        if (!depCheck.success) {
            utils.addError(currentEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
            message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly!\n\n" + depCheck.missing.join(", "));
            return false;
        }
        
        // Vyƒçisti logy
        utils.clearLogs(currentEntry, true);
        
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "MementoUtils verzia: " + utils.version);
        utils.addDebug(currentEntry, "ƒåas spustenia: " + utils.formatDate(moment()));
        
        // Test HTTP funkcionality
        try {
            var testHttp = http();
            if (testHttp) {
                utils.addDebug(currentEntry, "‚úÖ HTTP funkcia dostupn√° v Memento");
            }
        } catch (httpError) {
            utils.addDebug(currentEntry, "‚ùå HTTP funkcia chyba: " + httpError);
        }
        
        // Kroky prepoƒçtu
        var steps = {
            step1: { success: false, name: "V√Ωpoƒçet trasy" },
            step2: { success: false, name: "Spracovanie ≈°of√©ra" },
            step3: { success: false, name: "V√Ωpoƒçet mzdov√Ωch n√°kladov" },
            step4: { success: false, name: "Synchroniz√°cia stanovi≈°≈•a vozidla" },
            step5: { success: false, name: "Vytvorenie info z√°znamu" },
            step6: { success: false, name: "Synchroniz√°cia v√Ωkazu j√°zd" }
        };
        
        // KROK 1: V√Ωpoƒçet trasy
        var routeResult = calculateRoute();
        steps.step1.success = routeResult.success;
        
        // KROK 2: Spracovanie ≈°of√©ra
        var driverResult = processDriver();
        steps.step2.success = driverResult.success;
        
        // KROK 3: V√Ωpoƒçet mzdov√Ωch n√°kladov
        var wageResult = calculateWageCosts();
        steps.step3.success = wageResult.success;
        
        // KROK 4: Synchroniz√°cia stanovi≈°≈•a vozidla
        var vehicleResult = synchronizeVehicleLocation();
        steps.step4.success = vehicleResult.success;
        
        // KROK 5: Vytvorenie info z√°znamu
        steps.step5.success = createInfoRecord(routeResult, wageResult, vehicleResult);
        
        // KROK 6: Synchroniz√°cia v√Ωkazu j√°zd
        utils.addDebug(currentEntry, "\nüìä === KROK 6: SYNCHRONIZ√ÅCIA V√ùKAZU J√ÅZD ===");
        var vykazResult = synchronizeRideReport(routeResult, wageResult);
        steps.step6.success = vykazResult.success;
        
        // Fin√°lny s√∫hrn
        logFinalSummary(steps);
        
        // Ak v≈°etko prebehlo v poriadku
        if (steps.step1.success) {
            var msg = "‚úÖ Prepoƒçet dokonƒçen√Ω\n\n";
            msg += "üìè Vzdialenos≈•: " + routeResult.totalKm + " km\n";
            msg += "‚è±Ô∏è Celkov√Ω ƒças: " + routeResult.celkovyCas + " h\n";
            if (wageResult.success && wageResult.celkoveMzdy > 0) {
                msg += "üí∞ Mzdov√© n√°klady: " + utils.formatMoney(wageResult.celkoveMzdy) + "\n";
            }
            if (vehicleResult.success && vehicleResult.message !== "≈Ωiadne vozidlo") {
                msg += "üöê " + vehicleResult.message;
            }
            message(msg);
        } else {
            message("‚ö†Ô∏è Prepoƒçet dokonƒçen√Ω s chybami\n\nPozrite Debug Log pre detaily.");
        }
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "main", error);
        message("‚ùå Kritick√° chyba!\n\nPozrite Error Log pre detaily.");
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
}