// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA PREPOƒå√çTA≈§ Z√ÅZNAM
// Verzia: 2.0 | D√°tum: 11.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// ‚úÖ NOV√â v2.0: KOMPLETN√ù REFAKTORING
//    - PRIDAN√â: Zaokr√∫hƒæovanie pr√≠chod/odchod na 15min
//    - PRIDAN√â: Atrib√∫ty zamestnancov (odpracovan√©, hodinovka, denn√° mzda)
//    - PRIDAN√â: LinksFrom pre hodinov√© sadzby k d√°tumu
//    - PRIDAN√â: Vzorec dennej mzdy s pr√≠platkami a pokutami
//    - PRIDAN√â: Info pole s detailn√Ωm popisom prepoƒçtu
//    - OPRAVEN√â: Success flag workflow namiesto return statements
//    - VYLEP≈†EN√â: Null-safe pr√≠stupy a robustn√Ω error handling
//    - ZAOKR√öHLEN√â: V≈°etky ƒçasy a sumy na spr√°vne desatinn√© miesta
// ==============================================

var CONFIG = {
    // Z√°kladn√© nastavenia
    debug: true,
    version: "2.0",
    scriptName: "Doch√°dzka Prepoƒç√≠ta≈• z√°znam",
    
    // N√°zvy pol√≠ v kni≈ænici Doch√°dzka
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum", 
        prichod: "Pr√≠chod",
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        mzdoveNaklady: "Mzdov√© n√°klady",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov",
        zamestnanci: "Zamestnanci"
    },
    
    // N√°zvy pol√≠ v kni≈ænici "sadzby zamestnancov"
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od", 
        sadzba: "Sadzba"
    },
    
    // N√°zvy atrib√∫tov pre zamestnancov
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        priplatok: "+pr√≠platok (‚Ç¨/h)",
        premia: "+pr√©mia (‚Ç¨)",
        pokuta: "-pokuta (‚Ç¨)",
        dennaMzda: "denn√° mzda",
        poznamka: "pozn√°mka"
    },
    
    // Emoji pre debug
    icons: {
        start: "üöÄ",
        step: "üìã", 
        calc: "üßÆ",
        employee: "üë§",
        money: "üí∞",
        time: "‚è∞",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è"
    }
};

// Glob√°lne premenn√© pre logging
var debugMessages = [];
var errorMessages = [];

// ==============================================
// DEBUG A ERROR HANDLING SYST√âM
// ==============================================

function addDebug(message, category) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        var icon = CONFIG.icons.step;
        
        switch (category) {
            case "start": icon = CONFIG.icons.start; break;
            case "calc": icon = CONFIG.icons.calc; break;
            case "employee": icon = CONFIG.icons.employee; break;
            case "money": icon = CONFIG.icons.money; break;
            case "time": icon = CONFIG.icons.time; break;
            case "success": icon = CONFIG.icons.success; break;
            case "warning": icon = CONFIG.icons.warning; break;
        }
        
        debugMessages.push("[" + timestamp + "] " + icon + " " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm");
    var errorText = "[" + timestamp + "] " + CONFIG.icons.error + " " + message;
    if (location) {
        errorText += " (Location: " + location + ")";
    }
    errorMessages.push(errorText);
}

function saveLogsToEntry() {
    try {
        // Vynuluj star√© logy
        currentEntry.set(CONFIG.fields.debugLog, "");
        currentEntry.set(CONFIG.fields.errorLog, "");
        
        // Ulo≈æ nov√© logy
        if (debugMessages.length > 0) {
            currentEntry.set(CONFIG.fields.debugLog, debugMessages.join("\n"));
        }
        
        if (errorMessages.length > 0) {
            currentEntry.set(CONFIG.fields.errorLog, errorMessages.join("\n"));
        }
    } catch (logError) {
        // Fallback ak zlyh√° logovanie
    }
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function roundToQuarter(timeInMs) {
    // Zaokr√∫hli ƒças na najbli≈æ≈°√≠ch 15 min√∫t
    var quarterHour = 15 * 60 * 1000; // 15 min√∫t v ms
    return Math.round(timeInMs / quarterHour) * quarterHour;
}

function formatTimeForDisplay(timeInMs) {
    var date = new Date(timeInMs);
    return ("0" + date.getHours()).slice(-2) + ":" + 
           ("0" + date.getMinutes()).slice(-2);
}

function calculateWorkHours(prichodMs, odchodMs) {
    // Ak je odchod men≈°√≠ ako pr√≠chod, pr√°ca pokraƒçuje cez polnoc
    if (odchodMs < prichodMs) {
        odchodMs += 24 * 60 * 60 * 1000; // Pridaj 24 hod√≠n
        addDebug("Detekovan√° pr√°ca cez polnoc", "time");
    }
    
    var rozdielMs = odchodMs - prichodMs;
    var hodiny = rozdielMs / (1000 * 60 * 60);
    
    return Math.round(hodiny * 100) / 100; // Zaokr√∫hli na 2 desatinn√© miesta
}

function roundToTwoDecimals(number) {
    return Math.round(number * 100) / 100;
}

// ==============================================
// HLAVN√â BUSINESS LOGIC FUNKCIE
// ==============================================

function validateInputData() {
    addDebug("Valid√°cia vstupn√Ωch d√°t...", "step");
    
    var datum = currentEntry.field(CONFIG.fields.datum);
    var prichod = currentEntry.field(CONFIG.fields.prichod);
    var odchod = currentEntry.field(CONFIG.fields.odchod);
    var zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
    
    if (!datum) {
        addError("Ch√Ωba d√°tum", "validateInputData");
        return false;
    }
    
    if (!prichod || !odchod) {
        addError("Chybaj√∫ ƒçasy pr√≠chodu alebo odchodu", "validateInputData");
        return false;
    }
    
    if (!zamestnanci || zamestnanci.length === 0) {
        addError("Nie s√∫ vybrat√≠ ≈æiadni zamestnanci", "validateInputData");
        return false;
    }
    
    addDebug("Valid√°cia √∫spe≈°n√° - Datum: " + moment(datum).format("DD.MM.YYYY") + 
             ", Zamestnanci: " + zamestnanci.length, "success");
    
    return true;
}

function processTimeRounding() {
    addDebug("Sprac√∫vam zaokr√∫hƒæovanie ƒçasov na 15 min√∫t...", "time");
    
    var prichodRaw = currentEntry.field(CONFIG.fields.prichod);
    var odchodRaw = currentEntry.field(CONFIG.fields.odchod);
    
    // Zaokr√∫hli na 15 min√∫t
    var prichodRounded = roundToQuarter(prichodRaw);
    var odchodRounded = roundToQuarter(odchodRaw);
    
    addDebug("P√¥vodn√© ƒçasy - Pr√≠chod: " + formatTimeForDisplay(prichodRaw) + 
             ", Odchod: " + formatTimeForDisplay(odchodRaw), "time");
    addDebug("Zaokr√∫hlen√© ƒçasy - Pr√≠chod: " + formatTimeForDisplay(prichodRounded) + 
             ", Odchod: " + formatTimeForDisplay(odchodRounded), "time");
    
    try {
        currentEntry.set(CONFIG.fields.prichod, prichodRounded);
        currentEntry.set(CONFIG.fields.odchod, odchodRounded);
        addDebug("Zaokr√∫hlen√© ƒçasy ulo≈æen√© √∫spe≈°ne", "success");
        return { prichod: prichodRounded, odchod: odchodRounded };
    } catch (error) {
        addError("Nepodarilo sa ulo≈æi≈• zaokr√∫hlen√© ƒçasy: " + error.toString(), "processTimeRounding");
        return null;
    }
}

function calculateWorkingTime(roundedTimes) {
    addDebug("Poƒç√≠tam pracovn√∫ dobu...", "calc");
    
    var pracovnaDobaHodiny = calculateWorkHours(roundedTimes.prichod, roundedTimes.odchod);
    
    if (pracovnaDobaHodiny <= 0 || pracovnaDobaHodiny > 24) {
        addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n", "calculateWorkingTime");
        return null;
    }
    
    addDebug("Pracovn√° doba vypoƒç√≠tan√°: " + pracovnaDobaHodiny + " hod√≠n", "calc");
    
    try {
        currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
        addDebug("Pracovn√° doba ulo≈æen√°", "success");
        return pracovnaDobaHodiny;
    } catch (error) {
        addError("Nepodarilo sa ulo≈æi≈• pracovn√∫ dobu: " + error.toString(), "calculateWorkingTime");
        return null;
    }
}

function findValidSalaryForEmployee(zamestnanecObject, datum) {
    addDebug("Hƒæad√°m platn√∫ sadzbu pre zamestnanca k d√°tumu " + moment(datum).format("DD.MM.YYYY"), "employee");
    
    try {
        var sadzby = zamestnanecObject.linksFrom(CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            addError("≈Ωiadne sadzby nen√°jden√© pre zamestnanca", "findValidSalaryForEmployee");
            return 0;
        }
        
        var najnovsiaHodinovka = 0;
        var najnovsiDatum = null;
        
        for (var i = 0; i < sadzby.length; i++) {
            var sadzbaEntry = sadzby[i];
            var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
            var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
            
            // Kontrola platnosti k d√°tumu
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    najnovsiaHodinovka = hodinovka;
                }
            }
        }
        
        addDebug("Platn√° sadzba: " + najnovsiaHodinovka + " ‚Ç¨/h od " + 
                (najnovsiDatum ? moment(najnovsiDatum).format("DD.MM.YYYY") : "?"), "money");
        
        return najnovsiaHodinovka;
    } catch (error) {
        addError("Chyba pri hƒæadan√≠ sadzby: " + error.toString(), "findValidSalaryForEmployee");
        return 0;
    }
}

function processEmployeesWithAttributes(zamestnanci, datum, pracovnaDobaHodiny) {
    addDebug("Sprac√∫vam zamestnancov s atrib√∫tmi...", "employee");
    
    var uspesneSpracovani = 0;
    var chyby = 0;
    var celkoveMzdy = 0;
    
    for (var i = 0; i < zamestnanci.length; i++) {
        var zamestnanec = zamestnanci[i];
        
        try {
            // Z√≠skaj meno zamestnanca pre debug
            var zamestnanecMeno = "";
            try {
                zamestnanecMeno = zamestnanec.field("Nick") || zamestnanec.field("Meno") || "Nezn√°my";
            } catch (nameError) {
                zamestnanecMeno = "ID:" + (zamestnanec.field("ID") || "?");
            }
            
            addDebug("Sprac√∫vam zamestnanca: " + zamestnanecMeno, "employee");
            
            // 1. Nastav odpracovan√© hodiny (= pracovn√° doba pre ka≈æd√©ho)
            var odpracovaneHodiny = pracovnaDobaHodiny;
            currentEntry.setAttr(CONFIG.fields.zamestnanci + "[" + i + "]", CONFIG.attributes.odpracovane, odpracovaneHodiny);
            addDebug("  Odpracovan√©: " + odpracovaneHodiny + " h", "calc");
            
            // 2. Zisti hodinov√∫ sadzbu
            var hodinovka = findValidSalaryForEmployee(zamestnanec, datum);
            currentEntry.setAttr(CONFIG.fields.zamestnanci + "[" + i + "]", CONFIG.attributes.hodinovka, hodinovka);
            addDebug("  Hodinovka: " + hodinovka + " ‚Ç¨/h", "money");
            
            // 3. Z√≠skaj pr√≠platky a odmeny (ak existuj√∫)
            var priplatok = 0;
            var premia = 0;
            var pokuta = 0;
            
            try {
                priplatok = currentEntry.getAttr(CONFIG.fields.zamestnanci + "[" + i + "]", CONFIG.attributes.priplatok) || 0;
                premia = currentEntry.getAttr(CONFIG.fields.zamestnanci + "[" + i + "]", CONFIG.attributes.premia) || 0;
                pokuta = currentEntry.getAttr(CONFIG.fields.zamestnanci + "[" + i + "]", CONFIG.attributes.pokuta) || 0;
            } catch (attrError) {
                addDebug("  Pou≈æ√≠vam defaultn√© hodnoty pre pr√≠platky", "warning");
            }
            
            addDebug("  Pr√≠platok: " + priplatok + " ‚Ç¨/h, Pr√©mia: " + premia + " ‚Ç¨, Pokuta: " + pokuta + " ‚Ç¨", "money");
            
            // 4. Vypoƒç√≠taj denn√∫ mzdu
            // Vzorec: (odpracovan√© √ó hodinovka) + (odpracovan√© √ó pr√≠platok) + pr√©mia - pokuta
            var dennaMzda = (odpracovaneHodiny * hodinovka) + 
                           (odpracovaneHodiny * priplatok) + 
                           premia - pokuta;
            
            dennaMzda = roundToTwoDecimals(dennaMzda);
            
            currentEntry.setAttr(CONFIG.fields.zamestnanci + "[" + i + "]", CONFIG.attributes.dennaMzda, dennaMzda);
            addDebug("  Denn√° mzda: " + dennaMzda + " ‚Ç¨", "money");
            
            celkoveMzdy += dennaMzda;
            uspesneSpracovani++;
            
        } catch (employeeError) {
            addError("Chyba pri spracovan√≠ zamestnanca " + (i + 1) + ": " + employeeError.toString(), "processEmployeesWithAttributes");
            chyby++;
        }
    }
    
    addDebug("Spracovanie zamestnancov dokonƒçen√© - √öspe≈°ne: " + uspesneSpracovani + 
             "/" + zamestnanci.length + ", Chyby: " + chyby, "success");
    
    return {
        success: uspesneSpracovani > 0,
        uspesneSpracovani: uspesneSpracovani,
        chyby: chyby,
        celkoveMzdy: roundToTwoDecimals(celkoveMzdy)
    };
}

function calculateTotalFields(zamestnanci, pracovnaDobaHodiny, mzdoveNaklady) {
    addDebug("Poƒç√≠tam celkov√© hodnoty...", "calc");
    
    var pocetPracovnikov = zamestnanci.length;
    var odpracovaneTotal = roundToTwoDecimals(pocetPracovnikov * pracovnaDobaHodiny);
    
    try {
        currentEntry.set(CONFIG.fields.pocetPracovnikov, pocetPracovnikov);
        currentEntry.set(CONFIG.fields.odpracovane, odpracovaneTotal);
        currentEntry.set(CONFIG.fields.mzdoveNaklady, mzdoveNaklady);
        
        addDebug("Ulo≈æen√© hodnoty:", "success");
        addDebug("  Poƒçet pracovn√≠kov: " + pocetPracovnikov, "calc");
        addDebug("  Odpracovan√© celkom: " + odpracovaneTotal + " h", "calc");
        addDebug("  Mzdov√© n√°klady: " + mzdoveNaklady + " ‚Ç¨", "money");
        
        return true;
    } catch (error) {
        addError("Nepodarilo sa ulo≈æi≈• celkov√© hodnoty: " + error.toString(), "calculateTotalFields");
        return false;
    }
}

function createInfoRecord(employeeResult, pracovnaDobaHodiny, datum) {
    addDebug("Vytv√°ram info z√°znam...", "step");
    
    var timestamp = moment().format("DD.MM.YYYY HH:mm");
    var datumStr = moment(datum).format("DD.MM.YYYY");
    
    var infoMessage = "üìä AUTOMATICK√ù PREPOƒåET DOCH√ÅDZKY\n" +
                     "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n" +
                     "üïê Vytvoren√©: " + timestamp + "\n" +
                     "üìÖ D√°tum doch√°dzky: " + datumStr + "\n" +
                     "ü§ñ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n\n" +
                     
                     "‚öôÔ∏è VYKONAN√â PREPOƒåTY:\n" +
                     "‚Ä¢ Zaokr√∫hlenie pr√≠chod/odchod na 15 min\n" +
                     "‚Ä¢ V√Ωpoƒçet pracovnej doby: " + pracovnaDobaHodiny + " h\n" +
                     "‚Ä¢ Spracovanie " + employeeResult.uspesneSpracovani + " zamestnancov\n" +
                     "‚Ä¢ Nastavenie atrib√∫tov: odpracovan√©, hodinovka, denn√° mzda\n" +
                     "‚Ä¢ LinksFrom prepojenie s kni≈ænicou 'sadzby zamestnancov'\n\n" +
                     
                     "üí∞ FINANƒåN√â V√ùSLEDKY:\n" +
                     "‚Ä¢ Celkov√© mzdov√© n√°klady: " + employeeResult.celkoveMzdy + " ‚Ç¨\n" +
                     "‚Ä¢ Vzorec dennej mzdy: (odpracovan√© √ó hodinovka) + \n" +
                     "  + (odpracovan√© √ó pr√≠platok) + pr√©mia - pokuta\n\n" +
                     
                     "üìä ≈†TATISTIKY:\n" +
                     "‚Ä¢ √öspe≈°ne spracovan√≠: " + employeeResult.uspesneSpracovani + "/" + 
                     (employeeResult.uspesneSpracovani + employeeResult.chyby) + " zamestnancov\n";
    
    if (employeeResult.chyby > 0) {
        infoMessage += "‚Ä¢ ‚ö†Ô∏è Chyby: " + employeeResult.chyby + " (pozri Error_Log)\n";
    }
    
    infoMessage += "\nüîß TECHNICK√â DETAILY:\n" +
                   "‚Ä¢ Pou≈æit√© kni≈ænice: sadzby zamestnancov, Zamestnanci\n" +
                   "‚Ä¢ API: setAttr() s 2 parametrami\n" +
                   "‚Ä¢ Zaokr√∫hƒæovanie: ƒçasy na 15 min, sumy na 2 des. miesta\n" +
                   "‚Ä¢ Null-safe pr√≠stup ku v≈°etk√Ωm poliam\n\n" +
                   
                   "üìã Pre detailn√© inform√°cie pozri Debug_Log\n" +
                   "‚ùó Pri probl√©moch pozri Error_Log";
    
    try {
        currentEntry.set(CONFIG.fields.info, infoMessage);
        addDebug("Info z√°znam vytvoren√Ω √∫spe≈°ne", "success");
        return true;
    } catch (error) {
        addError("Nepodarilo sa vytvori≈• info z√°znam: " + error.toString(), "createInfoRecord");
        return false;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function hlavnaFunkcia() {
    addDebug("=== SPUSTENIE DOCH√ÅDZKA PREPOƒåTU v" + CONFIG.version + " ===", "start");
    addDebug("Timestamp: " + moment().format("DD.MM.YYYY HH:mm:ss"), "start");
    
    // Reset logov
    debugMessages = [];
    errorMessages = [];
    
    var globalSuccess = false;
    var step1Success = false;
    var step2Success = false;
    var step3Success = false;
    var step4Success = false;
    var step5Success = false;
    var step6Success = false;
    
    // KROK 1: Valid√°cia vstupn√Ωch d√°t
    if (validateInputData()) {
        step1Success = true;
        addDebug("KROK 1: Valid√°cia √∫spe≈°n√°", "success");
        
        // KROK 2: Zaokr√∫hƒæovanie ƒçasov
        var roundedTimes = processTimeRounding();
        if (roundedTimes) {
            step2Success = true;
            addDebug("KROK 2: Zaokr√∫hƒæovanie ƒçasov √∫spe≈°n√©", "success");
            
            // KROK 3: V√Ωpoƒçet pracovnej doby
            var pracovnaDobaHodiny = calculateWorkingTime(roundedTimes);
            if (pracovnaDobaHodiny) {
                step3Success = true;
                addDebug("KROK 3: V√Ωpoƒçet pracovnej doby √∫spe≈°n√Ω", "success");
                
                // KROK 4: Spracovanie zamestnancov s atrib√∫tmi
                var zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
                var datum = currentEntry.field(CONFIG.fields.datum);
                
                var employeeResult = processEmployeesWithAttributes(zamestnanci, datum, pracovnaDobaHodiny);
                if (employeeResult && employeeResult.success) {
                    step4Success = true;
                    addDebug("KROK 4: Spracovanie zamestnancov √∫spe≈°n√©", "success");
                    
                    // KROK 5: V√Ωpoƒçet celkov√Ωch hodn√¥t
                    if (calculateTotalFields(zamestnanci, pracovnaDobaHodiny, employeeResult.celkoveMzdy)) {
                        step5Success = true;
                        addDebug("KROK 5: V√Ωpoƒçet celkov√Ωch hodn√¥t √∫spe≈°n√Ω", "success");
                        
                        // KROK 6: Vytvorenie info z√°znamu
                        if (createInfoRecord(employeeResult, pracovnaDobaHodiny, datum)) {
                            step6Success = true;
                            addDebug("KROK 6: Info z√°znam vytvoren√Ω", "success");
                            globalSuccess = true;
                        }
                    }
                }
            }
        }
    }
    
    // Finaliz√°cia a ulo≈æenie logov
    addDebug("=== Z√ÅVEREƒåN√â HODNOTENIE ===", "step");
    addDebug("Krok 1 (Valid√°cia): " + (step1Success ? "‚úÖ" : "‚ùå"), "step");
    addDebug("Krok 2 (Zaokr√∫hƒæovanie): " + (step2Success ? "‚úÖ" : "‚ùå"), "step");
    addDebug("Krok 3 (Pracovn√° doba): " + (step3Success ? "‚úÖ" : "‚ùå"), "step");
    addDebug("Krok 4 (Zamestnanci): " + (step4Success ? "‚úÖ" : "‚ùå"), "step");
    addDebug("Krok 5 (Celkov√© hodnoty): " + (step5Success ? "‚úÖ" : "‚ùå"), "step");
    addDebug("Krok 6 (Info z√°znam): " + (step6Success ? "‚úÖ" : "‚ùå"), "step");
    
    if (globalSuccess) {
        addDebug("üéâ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE!", "success");
    } else {
        addDebug("üí• PREPOƒåET ZLYHAL! Pozri Error_Log pre detaily.", "error");
    }
    
    saveLogsToEntry();
    
    // User message
    var sprava = "";
    if (globalSuccess) {
        var zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
        var pracovnaDoba = currentEntry.field(CONFIG.fields.pracovnaDoba);
        var mzdoveNaklady = currentEntry.field(CONFIG.fields.mzdoveNaklady);
        
        sprava = "‚úÖ Doch√°dzka prepoƒç√≠tan√° √∫spe≈°ne!\n\n" +
                "‚è∞ ƒåasy zaokr√∫hlen√© na 15 min\n" +
                "üìä Pracovn√° doba: " + pracovnaDoba + " h\n" +
                "üë• Zamestnanci: " + zamestnanci.length + " os√¥b\n" +
                "üí∞ Mzdov√© n√°klady: " + mzdoveNaklady + " ‚Ç¨\n" +
                "üè∑Ô∏è Atrib√∫ty: odpracovan√©, hodinovka, denn√° mzda\n\n" +
                "‚ÑπÔ∏è Detaily v poli Info";
    } else {
        sprava = "‚ùå Prepoƒçet doch√°dzky zlyhal!\n\n" +
                "üîç Skontroluj Error_Log pre detailn√© chyby\n" +
                "üìã Overte vstupn√© d√°ta a sk√∫ste znovu";
    }
    
    message(sprava);
    
    return globalSuccess;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    hlavnaFunkcia();
} catch (kritickachyba) {
    addError("KRITICK√Å CHYBA SCRIPTU: " + kritickachyba.toString(), "main");
    saveLogsToEntry();
    message("üí• KRITICK√Å CHYBA!\n\nScript sa nepodarilo spusti≈•.\nPozri Error_Log pre detaily.");
}