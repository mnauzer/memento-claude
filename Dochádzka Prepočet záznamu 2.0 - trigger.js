// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA PREPOƒå√çTA≈§ Z√ÅZNAM
// Verzia: 2.1 | D√°tum: 11.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// ‚úÖ OPRAVEN√â v2.1: KRITICK√â CHYBY
//    - OPRAVEN√â: entry() namiesto currentEntry
//    - OPRAVEN√â: Atrib√∫ty syntax podƒæa Memento API
//    - OPRAVEN√â: Z√°kladn√© error handling
//    - PRIDAN√â: Fallback pre moment() ak nie je dostupn√Ω
//    - TESTOVAN√â: Z√°kladn√° funkcionalita pred pokroƒçil√Ωmi funkciami
// ==============================================

var CONFIG = {
    // Z√°kladn√© nastavenia
    debug: true,
    version: "2.1",
    scriptName: "Doch√°dzka Prepoƒç√≠ta≈• z√°znam",
    
    // N√°zvy pol√≠ v kni≈ænici Doch√°dzka
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum", 
        prichod: "Pr√≠chod",
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        mzdoveNaklady: "Mzdov√© n√°klady",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov"
    },
    
    // N√°zvy pol√≠ v kni≈ænici "sadzby zamestnancov"
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od", 
        sadzba: "Sadzba"
    },
    
    // N√°zvy atrib√∫tov pre zamestnancov
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        priplatok: "+pr√≠platok",
        premia: "+pr√©mia (‚Ç¨)",
        pokuta: "-pokuta (‚Ç¨)",
        dennaMzda: "denn√° mzda"
    }
};

// Glob√°lne premenn√© pre logging
var debugMessages = [];
var errorMessages = [];

// ==============================================
// Z√ÅKLADN√â UTILITY FUNKCIE
// ==============================================

function getCurrentTimeString() {
    // Fallback pre moment() ak nie je dostupn√Ω
    try {
        return moment().format("DD.MM.YY HH:mm");
    } catch (momentError) {
        var now = new Date();
        return now.getDate() + "." + (now.getMonth() + 1) + "." + 
               now.getFullYear().toString().slice(-2) + " " +
               ("0" + now.getHours()).slice(-2) + ":" + 
               ("0" + now.getMinutes()).slice(-2);
    }
}

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = getCurrentTimeString();
        debugMessages.push("[" + timestamp + "] üìã " + message);
    }
}

function addError(message, location) {
    var timestamp = getCurrentTimeString();
    var errorText = "[" + timestamp + "] ‚ùå " + message;
    if (location) {
        errorText += " (Loc: " + location + ")";
    }
    errorMessages.push(errorText);
}

function saveLogsToEntry() {
    try {
        // Vyma≈æ star√© logy
        entry().set(CONFIG.fields.debugLog, "");
        entry().set(CONFIG.fields.errorLog, "");
        
        // Ulo≈æ nov√© logy
        if (debugMessages.length > 0) {
            entry().set(CONFIG.fields.debugLog, debugMessages.join("\n"));
        }
        
        if (errorMessages.length > 0) {
            entry().set(CONFIG.fields.errorLog, errorMessages.join("\n"));
        }
        
        addDebug("Logy ulo≈æen√©: Debug=" + debugMessages.length + ", Error=" + errorMessages.length);
        
    } catch (logError) {
        // Fallback - aspo≈à message() ak zlyh√° logovanie
        message("Chyba pri logovan√≠: " + logError.toString());
    }
}

// ==============================================
// ZAOKR√öHƒΩOVANIE A ƒåASY
// ==============================================

function roundToQuarter(timeInMs) {
    // Zaokr√∫hli ƒças na najbli≈æ≈°√≠ch 15 min√∫t
    var quarterHour = 15 * 60 * 1000; // 15 min√∫t v ms
    return Math.round(timeInMs / quarterHour) * quarterHour;
}

function formatTimeForDisplay(timeInMs) {
    var date = new Date(timeInMs);
    return ("0" + date.getHours()).slice(-2) + ":" + 
           ("0" + date.getMinutes()).slice(-2);
}

function calculateWorkHours(prichodMs, odchodMs) {
    // Ak je odchod men≈°√≠ ako pr√≠chod, pr√°ca pokraƒçuje cez polnoc
    if (odchodMs < prichodMs) {
        odchodMs += 24 * 60 * 60 * 1000; // Pridaj 24 hod√≠n
        addDebug("‚è∞ Detekovan√° pr√°ca cez polnoc");
    }
    
    var rozdielMs = odchodMs - prichodMs;
    var hodiny = rozdielMs / (1000 * 60 * 60);
    
    return Math.round(hodiny * 100) / 100; // Zaokr√∫hli na 2 desatinn√© miesta
}

// ==============================================
// VALID√ÅCIA VSTUPN√ùCH D√ÅTOIOD
// ==============================================

function validateInputData() {
    addDebug("üîç Valid√°cia vstupn√Ωch d√°t...");
    
    try {
        var datum = entry().field(CONFIG.fields.datum);
        var prichod = entry().field(CONFIG.fields.prichod);
        var odchod = entry().field(CONFIG.fields.odchod);
        var zamestnanci = entry().field(CONFIG.fields.zamestnanci);
        
        if (!datum) {
            addError("Ch√Ωba d√°tum", "validateInputData");
            return false;
        }
        
        if (!prichod || !odchod) {
            addError("Chybaj√∫ ƒçasy pr√≠chodu alebo odchodu", "validateInputData");
            return false;
        }
        
        if (!zamestnanci || zamestnanci.length === 0) {
            addError("Nie s√∫ vybrat√≠ ≈æiadni zamestnanci", "validateInputData");
            return false;
        }
        
        addDebug("‚úÖ Valid√°cia √∫spe≈°n√°: D√°tum OK, ƒåasy OK, Zamestnanci: " + zamestnanci.length);
        return true;
        
    } catch (error) {
        addError("Chyba pri valid√°cii: " + error.toString(), "validateInputData");
        return false;
    }
}

// ==============================================
// SPRACOVANIE ƒåASOV
// ==============================================

function processTimeRounding() {
    addDebug("‚è∞ Sprac√∫vam zaokr√∫hƒæovanie ƒçasov na 15 min√∫t...");
    
    try {
        var prichodRaw = entry().field(CONFIG.fields.prichod);
        var odchodRaw = entry().field(CONFIG.fields.odchod);
        
        // Zaokr√∫hli na 15 min√∫t
        var prichodRounded = roundToQuarter(prichodRaw);
        var odchodRounded = roundToQuarter(odchodRaw);
        
        addDebug("P√¥vodn√© ƒçasy - Pr√≠chod: " + formatTimeForDisplay(prichodRaw) + 
                 ", Odchod: " + formatTimeForDisplay(odchodRaw));
        addDebug("Zaokr√∫hlen√© ƒçasy - Pr√≠chod: " + formatTimeForDisplay(prichodRounded) + 
                 ", Odchod: " + formatTimeForDisplay(odchodRounded));
        
        // Ulo≈æ zaokr√∫hlen√© ƒçasy
        entry().set(CONFIG.fields.prichod, prichodRounded);
        entry().set(CONFIG.fields.odchod, odchodRounded);
        
        addDebug("‚úÖ Zaokr√∫hlen√© ƒçasy ulo≈æen√©");
        return { prichod: prichodRounded, odchod: odchodRounded };
        
    } catch (error) {
        addError("Chyba pri zaokr√∫hƒæovan√≠ ƒçasov: " + error.toString(), "processTimeRounding");
        return null;
    }
}

// ==============================================
// V√ùPOƒåET PRACOVNEJ DOBY
// ==============================================

function calculateWorkingTime(roundedTimes) {
    addDebug("üßÆ Poƒç√≠tam pracovn√∫ dobu...");
    
    try {
        var pracovnaDobaHodiny = calculateWorkHours(roundedTimes.prichod, roundedTimes.odchod);
        
        if (pracovnaDobaHodiny <= 0 || pracovnaDobaHodiny > 24) {
            addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n", "calculateWorkingTime");
            return null;
        }
        
        addDebug("Pracovn√° doba vypoƒç√≠tan√°: " + pracovnaDobaHodiny + " hod√≠n");
        
        // Ulo≈æ pracovn√∫ dobu
        entry().set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
        addDebug("‚úÖ Pracovn√° doba ulo≈æen√°");
        
        return pracovnaDobaHodiny;
        
    } catch (error) {
        addError("Chyba pri v√Ωpoƒçte pracovnej doby: " + error.toString(), "calculateWorkingTime");
        return null;
    }
}

// ==============================================
// HƒΩADANIE SADZIEB PRE ZAMESTNANCOV
// ==============================================

function findValidSalaryForEmployee(zamestnanecObject, datum) {
    addDebug("üí∞ Hƒæad√°m platn√∫ sadzbu pre zamestnanca...");
    
    try {
        var sadzby = zamestnanecObject.linksFrom(CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            addDebug("‚ö†Ô∏è ≈Ωiadne sadzby nen√°jden√©");
            return 0;
        }
        
        var najnovsiaHodinovka = 0;
        var najnovsiDatum = null;
        
        for (var i = 0; i < sadzby.length; i++) {
            var sadzbaEntry = sadzby[i];
            var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
            var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
            
            // Kontrola platnosti k d√°tumu
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    najnovsiaHodinovka = hodinovka;
                }
            }
        }
        
        addDebug("üí∞ Platn√° sadzba: " + najnovsiaHodinovka + " ‚Ç¨/h");
        return najnovsiaHodinovka;
        
    } catch (error) {
        addError("Chyba pri hƒæadan√≠ sadzby: " + error.toString(), "findValidSalaryForEmployee");
        return 0;
    }
}

// ==============================================
// SPRACOVANIE ZAMESTNANCOV S ATRIB√öTMI
// ==============================================

function processEmployeesWithAttributes(zamestnanci, datum, pracovnaDobaHodiny) {
    addDebug("üë• Sprac√∫vam " + zamestnanci.length + " zamestnancov...");
    
    var uspesneSpracovani = 0;
    var chyby = 0;
    var celkoveMzdy = 0;
    
    for (var i = 0; i < zamestnanci.length; i++) {
        var zamestnanec = zamestnanci[i];
        
        try {
            addDebug("üë§ Sprac√∫vam zamestnanca " + (i + 1) + "/" + zamestnanci.length);
            
            // 1. Nastav odpracovan√© hodiny (= pracovn√° doba pre ka≈æd√©ho)
            var odpracovaneHodiny = pracovnaDobaHodiny;
            entry().setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.odpracovane, odpracovaneHodiny);
            addDebug("  üìä Odpracovan√©: " + odpracovaneHodiny + " h");
            
            // 2. Zisti hodinov√∫ sadzbu
            var hodinovka = findValidSalaryForEmployee(zamestnanec, datum);
            entry().setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.hodinovka, hodinovka);
            addDebug("  üí∞ Hodinovka: " + hodinovka + " ‚Ç¨/h");
            
            // 3. Z√≠skaj pr√≠platky a odmeny (ak existuj√∫)
            var priplatok = 0;
            var premia = 0;
            var pokuta = 0;
            
            try {
                priplatok = entry().getAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.priplatok) || 0;
                premia = entry().getAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.premia) || 0;
                pokuta = entry().getAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.pokuta) || 0;
            } catch (attrError) {
                addDebug("  ‚ÑπÔ∏è Pou≈æ√≠vam defaultn√© hodnoty pre pr√≠platky");
            }
            
            addDebug("  üìà Pr√≠platok: " + priplatok + " ‚Ç¨/h, Pr√©mia: " + premia + " ‚Ç¨, Pokuta: " + pokuta + " ‚Ç¨");
            
            // 4. Vypoƒç√≠taj denn√∫ mzdu
            // Vzorec: (odpracovan√© √ó hodinovka) + (odpracovan√© √ó pr√≠platok) + pr√©mia - pokuta
            var dennaMzda = (odpracovaneHodiny * hodinovka) + 
                           (odpracovaneHodiny * priplatok) + 
                           premia - pokuta;
            
            dennaMzda = Math.round(dennaMzda * 100) / 100; // Zaokr√∫hli na 2 desatinn√©
            
            entry().setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.dennaMzda, dennaMzda);
            addDebug("  üí∞ Denn√° mzda: " + dennaMzda + " ‚Ç¨");
            
            celkoveMzdy += dennaMzda;
            uspesneSpracovani++;
            
        } catch (employeeError) {
            addError("Chyba pri spracovan√≠ zamestnanca " + (i + 1) + ": " + employeeError.toString(), "processEmployees");
            chyby++;
        }
    }
    
    addDebug("‚úÖ Spracovanie dokonƒçen√© - √öspe≈°ne: " + uspesneSpracovani + "/" + zamestnanci.length);
    
    return {
        success: uspesneSpracovani > 0,
        uspesneSpracovani: uspesneSpracovani,
        chyby: chyby,
        celkoveMzdy: Math.round(celkoveMzdy * 100) / 100
    };
}

// ==============================================
// V√ùPOƒåET CELKOV√ùCH HODN√îT
// ==============================================

function calculateTotalFields(zamestnanci, pracovnaDobaHodiny, mzdoveNaklady) {
    addDebug("üìä Poƒç√≠tam celkov√© hodnoty...");
    
    try {
        var pocetPracovnikov = zamestnanci.length;
        var odpracovaneTotal = Math.round((pocetPracovnikov * pracovnaDobaHodiny) * 100) / 100;
        
        entry().set(CONFIG.fields.pocetPracovnikov, pocetPracovnikov);
        entry().set(CONFIG.fields.odpracovane, odpracovaneTotal);
        entry().set(CONFIG.fields.mzdoveNaklady, mzdoveNaklady);
        
        addDebug("‚úÖ Ulo≈æen√© - Pracovn√≠ci: " + pocetPracovnikov + 
                 ", Odpracovan√©: " + odpracovaneTotal + " h, Mzdy: " + mzdoveNaklady + " ‚Ç¨");
        
        return true;
        
    } catch (error) {
        addError("Chyba pri v√Ωpoƒçte celkov√Ωch hodn√¥t: " + error.toString(), "calculateTotalFields");
        return false;
    }
}

// ==============================================
// VYTVORENIE INFO Z√ÅZNAMU
// ==============================================

function createInfoRecord(employeeResult, pracovnaDobaHodiny) {
    addDebug("üìù Vytv√°ram info z√°znam...");
    
    try {
        var timestamp = getCurrentTimeString();
        
        var infoMessage = "üìä AUTOMATICK√ù PREPOƒåET DOCH√ÅDZKY\n" +
                         "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n" +
                         "üïê Vytvoren√©: " + timestamp + "\n" +
                         "ü§ñ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n\n" +
                         
                         "‚öôÔ∏è VYKONAN√â PREPOƒåTY:\n" +
                         "‚Ä¢ Zaokr√∫hlenie pr√≠chod/odchod na 15 min\n" +
                         "‚Ä¢ V√Ωpoƒçet pracovnej doby: " + pracovnaDobaHodiny + " h\n" +
                         "‚Ä¢ Spracovanie " + employeeResult.uspesneSpracovani + " zamestnancov\n" +
                         "‚Ä¢ Nastavenie atrib√∫tov zamestnancov\n\n" +
                         
                         "üí∞ FINANƒåN√â V√ùSLEDKY:\n" +
                         "‚Ä¢ Celkov√© mzdov√© n√°klady: " + employeeResult.celkoveMzdy + " ‚Ç¨\n" +
                         "‚Ä¢ Vzorec: (hodiny √ó sadzba) + pr√≠platky + pr√©mie - pokuty\n\n" +
                         
                         "üìä ≈†TATISTIKY:\n" +
                         "‚Ä¢ √öspe≈°ne spracovan√≠: " + employeeResult.uspesneSpracovani + " zamestnancov\n";
        
        if (employeeResult.chyby > 0) {
            infoMessage += "‚Ä¢ ‚ö†Ô∏è Chyby: " + employeeResult.chyby + " (pozri Error_Log)\n";
        }
        
        infoMessage += "\nüìã Detaily v Debug_Log | ‚ùó Chyby v Error_Log";
        
        entry().set(CONFIG.fields.info, infoMessage);
        addDebug("‚úÖ Info z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        addError("Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString(), "createInfoRecord");
        return false;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function hlavnaFunkcia() {
    // Reset logov
    debugMessages = [];
    errorMessages = [];
    
    addDebug("üöÄ === SPUSTENIE DOCH√ÅDZKA PREPOƒåTU v" + CONFIG.version + " ===");
    
    var globalSuccess = false;
    
    try {
        // KROK 1: Valid√°cia vstupn√Ωch d√°t
        if (!validateInputData()) {
            addError("Valid√°cia zlyhala", "hlavnaFunkcia");
            return false;
        }
        
        // KROK 2: Zaokr√∫hƒæovanie ƒçasov
        var roundedTimes = processTimeRounding();
        if (!roundedTimes) {
            addError("Zaokr√∫hƒæovanie ƒçasov zlyhalo", "hlavnaFunkcia");
            return false;
        }
        
        // KROK 3: V√Ωpoƒçet pracovnej doby
        var pracovnaDobaHodiny = calculateWorkingTime(roundedTimes);
        if (!pracovnaDobaHodiny) {
            addError("V√Ωpoƒçet pracovnej doby zlyhal", "hlavnaFunkcia");
            return false;
        }
        
        // KROK 4: Spracovanie zamestnancov s atrib√∫tmi
        var zamestnanci = entry().field(CONFIG.fields.zamestnanci);
        var datum = entry().field(CONFIG.fields.datum);
        
        var employeeResult = processEmployeesWithAttributes(zamestnanci, datum, pracovnaDobaHodiny);
        if (!employeeResult || !employeeResult.success) {
            addError("Spracovanie zamestnancov zlyhalo", "hlavnaFunkcia");
            return false;
        }
        
        // KROK 5: V√Ωpoƒçet celkov√Ωch hodn√¥t
        if (!calculateTotalFields(zamestnanci, pracovnaDobaHodiny, employeeResult.celkoveMzdy)) {
            addError("V√Ωpoƒçet celkov√Ωch hodn√¥t zlyhal", "hlavnaFunkcia");
            return false;
        }
        
        // KROK 6: Vytvorenie info z√°znamu
        if (!createInfoRecord(employeeResult, pracovnaDobaHodiny)) {
            addError("Vytvorenie info z√°znamu zlyhalo", "hlavnaFunkcia");
            return false;
        }
        
        addDebug("üéâ V≈†ETKY KROKY √öSPE≈†NE DOKONƒåEN√â!");
        globalSuccess = true;
        
    } catch (error) {
        addError("Kritick√° chyba v hlavnej funkcii: " + error.toString(), "hlavnaFunkcia");
        globalSuccess = false;
    }
    
    // Ulo≈æenie logov a user message
    saveLogsToEntry();
    
    if (globalSuccess) {
        var pracovnaDoba = entry().field(CONFIG.fields.pracovnaDoba);
        var zamestnanci = entry().field(CONFIG.fields.zamestnanci);
        var mzdoveNaklady = entry().field(CONFIG.fields.mzdoveNaklady);
        
        message("‚úÖ Doch√°dzka prepoƒç√≠tan√° √∫spe≈°ne!\n\n" +
               "üìä Pracovn√° doba: " + pracovnaDoba + " h\n" +
               "üë• Zamestnanci: " + zamestnanci.length + " os√¥b\n" +
               "üí∞ Mzdov√© n√°klady: " + mzdoveNaklady + " ‚Ç¨\n\n" +
               "‚ÑπÔ∏è Detaily v poli 'info'");
    } else {
        message("‚ùå Prepoƒçet doch√°dzky zlyhal!\n\n" +
               "üîç Skontroluj Error_Log pre detailn√© chyby\n" +
               "üìã Overte vstupn√© d√°ta a sk√∫ste znovu");
    }
    
    return globalSuccess;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    addDebug("üé¨ Inicializ√°cia scriptu...");
    hlavnaFunkcia();
} catch (kritickachyba) {
    // Posledn√° z√°chrana pre error handling
    try {
        addError("KRITICK√Å CHYBA SCRIPTU: " + kritickachyba.toString(), "main");
        saveLogsToEntry();
    } catch (logError) {
        // Ak ani logovanie nefunguje, aspo≈à message
        message("üí• KRITICK√Å CHYBA!\n\nScript sa nepodarilo spusti≈•. Chyba: " + kritickachyba.toString());
    }
}