// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA PREPOƒå√çTA≈§ Z√ÅZNAM
// Verzia: 3.1 | D√°tum: 11.08.2025 | Autor: JavaScript Expert  
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// ‚úÖ KOMPLETNE REFAKTOROVAN√â v3.1:
//    - Odstr√°nen√© duplicitn√© defin√≠cie premenn√Ωch
//    - Opraven√© v≈°etky try-catch syntax errors
//    - Spr√°vne n√°zvy atrib√∫tov podƒæa knowledge base
//    - Pridan√© robustn√© null kontroly
//    - Optimalizovan√© spracovanie zamestnancov
//    - Vylep≈°en√© debug a error logovanie
// ==============================================

var CONFIG = {
    debug: true,
    version: "3.1",
    
    // N√°zvy pol√≠ - Doch√°dzka
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod", 
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©", 
        mzdoveNaklady: "Mzdov√© n√°klady",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy atrib√∫tov pre zamestnancov - OPRAVEN√â PODƒΩA KNOWLEDGE BASE
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        priplatok: "pr√≠platok (‚Ç¨/h)",
        premia: "pr√©mia (‚Ç¨)",
        pokuta: "pokuta (‚Ç¨)",
        dennaMzda: "denn√° mzda"
    },
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov"
    },
    
    // Polia v kni≈ænici sadzby zamestnancov
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    }
};

// Glob√°lne premenn√© pre logy
var debugLog = [];
var errorLog = [];
var currentEntry = entry();

// ==============================================
// DEBUG A ERROR SYST√âM
// ==============================================

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm");
    var errorText = "[" + timestamp + "] ‚ùå ERROR: " + message;
    if (location) {
        errorText += " (Loc: " + location + ")";
    }
    errorLog.push(errorText);
}

function saveLogs() {
    try {
        // Vyma≈æ star√© logy pred z√°pisom nov√Ωch
        currentEntry.set(CONFIG.fields.debugLog, "");
        currentEntry.set(CONFIG.fields.errorLog, "");
        
        // Ulo≈æ nov√© logy
        if (debugLog.length > 0) {
            currentEntry.set(CONFIG.fields.debugLog, debugLog.join("\n"));
        }
        if (errorLog.length > 0) {
            currentEntry.set(CONFIG.fields.errorLog, errorLog.join("\n"));
        }
    } catch (saveError) {
        // Nem√¥≈æeme logova≈• chybu logovania
    }
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function roundToQuarter(timeMs) {
    if (!timeMs || timeMs === null) {
        return null;
    }
    // Zaokr√∫hli na 15 min√∫t
    var quarterMs = 15 * 60 * 1000;
    return Math.round(timeMs / quarterMs) * quarterMs;
}

function formatTime(timeMs) {
    if (!timeMs) return "NULL";
    var date = new Date(timeMs);
    return ("0" + date.getHours()).slice(-2) + ":" + ("0" + date.getMinutes()).slice(-2);
}

function calculateHours(prichodMs, odchodMs) {
    if (!prichodMs || !odchodMs) {
        return 0;
    }
    
    // Ak odchod < pr√≠chod, pr√°ca cez polnoc
    if (odchodMs < prichodMs) {
        odchodMs += 24 * 60 * 60 * 1000;
        addDebug("‚è∞ Detekovan√° pr√°ca cez polnoc");
    }
    
    var rozdielMs = odchodMs - prichodMs;
    return Math.round((rozdielMs / (1000 * 60 * 60)) * 100) / 100;
}

// ==============================================
// HƒΩADANIE SADZIEB
// ==============================================

function findValidSalary(zamestnanecObject, datum) {
    if (!zamestnanecObject || !datum) {
        addError("Neplatn√© parametre pre hƒæadanie sadzby", "findValidSalary");
        return 0;
    }
    
    addDebug("üîç Hƒæad√°m sadzbu pre zamestnanca k d√°tumu: " + moment(datum).format("DD.MM.YYYY"));
    
    try {
        var sadzby = zamestnanecObject.linksFrom(CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            addDebug("‚ö†Ô∏è ≈Ωiadne sadzby nen√°jden√©");
            return 0;
        }
        
        var platnaHodinovka = 0;
        var najnovsiDatum = null;
        
        for (var i = 0; i < sadzby.length; i++) {
            var sadzbaEntry = sadzby[i];
            var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
            var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
            
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    platnaHodinovka = hodinovka;
                }
            }
        }
        
        if (platnaHodinovka > 0) {
            addDebug("‚úÖ Platn√° hodinovka: " + platnaHodinovka + " ‚Ç¨/h");
        } else {
            addDebug("‚ö†Ô∏è ≈Ωiadna platn√° sadzba k d√°tumu");
        }
        
        return platnaHodinovka;
        
    } catch (error) {
        addError("Chyba pri hƒæadan√≠ sadzby: " + error.toString(), "findValidSalary");
        return 0;
    }
}

// ==============================================
// SPRACOVANIE ZAMESTNANCOV
// ==============================================

function processEmployee(zamestnanec, index, pracovnaDobaHodiny, datum) {
    if (!zamestnanec) {
        addError("Neplatn√Ω zamestnanec na poz√≠cii " + index, "processEmployee");
        return 0;
    }
    
    try {
        var nick = zamestnanec.field("Nick") || "Nezn√°my";
        addDebug("üë§ Sprac√∫vam zamestnanca " + (index + 1) + ": " + nick);
        
        // 1. N√°jdi hodinovku
        var aktualnaHodinovka = findValidSalary(zamestnanec, datum);
        
        // 2. Nastav atrib√∫ty cez currentEntry.setAttr s indexom
        var atributSuccess = 0;
        
        // Odpracovan√© hodiny
        try {
            currentEntry.setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.odpracovane, pracovnaDobaHodiny);
            addDebug("  ‚úÖ Atrib√∫t 'odpracovan√©': " + pracovnaDobaHodiny + " h");
            atributSuccess++;
        } catch (attrError) {
            addError("setAttr odpracovan√© zlyhalo: " + attrError.toString(), "attr_odpracovane_" + index);
        }
        
        // Hodinovka
        try {
            currentEntry.setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.hodinovka, aktualnaHodinovka);
            addDebug("  ‚úÖ Atrib√∫t 'hodinovka': " + aktualnaHodinovka + " ‚Ç¨/h");
            atributSuccess++;
        } catch (attrError) {
            addError("setAttr hodinovka zlyhalo: " + attrError.toString(), "attr_hodinovka_" + index);
        }
        
        // Pr√≠platok (default 0)
        try {
            var priplatok = currentEntry.attr(CONFIG.fields.zamestnanci, CONFIG.attributes.priplatok) || 0;
            currentEntry.setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.priplatok, priplatok);
            addDebug("  ‚úÖ Atrib√∫t 'pr√≠platok': " + priplatok + " ‚Ç¨/h");
            atributSuccess++;
        } catch (attrError) {
            addError("setAttr pr√≠platok zlyhalo: " + attrError.toString(), "attr_priplatok_" + index);
        }
        
        // Pr√©mia (default 0)
        try {
            var premia = currentEntry.attr(CONFIG.fields.zamestnanci, CONFIG.attributes.premia) || 0;
            currentEntry.setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.premia, premia);
            addDebug("  ‚úÖ Atrib√∫t 'pr√©mia': " + premia + " ‚Ç¨");
            atributSuccess++;
        } catch (attrError) {
            addError("setAttr pr√©mia zlyhalo: " + attrError.toString(), "attr_premia_" + index);
        }
        
        // Pokuta (default 0)
        try {
            var pokuta = currentEntry.attr(CONFIG.fields.zamestnanci, CONFIG.attributes.pokuta) || 0;
            currentEntry.setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.pokuta, pokuta);
            addDebug("  ‚úÖ Atrib√∫t 'pokuta': " + pokuta + " ‚Ç¨");
            atributSuccess++;
        } catch (attrError) {
            addError("setAttr pokuta zlyhalo: " + attrError.toString(), "attr_pokuta_" + index);
        }
        
        // 3. Vypoƒç√≠taj denn√∫ mzdu
        var dennaMzda = (pracovnaDobaHodiny * aktualnaHodinovka) + 
                       (pracovnaDobaHodiny * priplatok) + 
                       premia - pokuta;
        dennaMzda = Math.round(dennaMzda * 100) / 100;
        
        try {
            currentEntry.setAttr(CONFIG.fields.zamestnanci, CONFIG.attributes.dennaMzda, dennaMzda);
            addDebug("  üí∞ Denn√° mzda: " + dennaMzda + " ‚Ç¨");
            addDebug("     Vzorec: (" + pracovnaDobaHodiny + " √ó " + aktualnaHodinovka + ") + (" + 
                    pracovnaDobaHodiny + " √ó " + priplatok + ") + " + premia + " - " + pokuta);
            atributSuccess++;
        } catch (attrError) {
            addError("setAttr denn√° mzda zlyhalo: " + attrError.toString(), "attr_dennaMzda_" + index);
        }
        
        addDebug("  üìä √öspe≈°ne nastaven√Ωch atrib√∫tov: " + atributSuccess + "/6");
        
        return dennaMzda;
        
    } catch (error) {
        addError("Kritick√° chyba pri spracovan√≠ zamestnanca " + index + ": " + error.toString(), "processEmployee");
        return 0;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA - KOMPLETN√ù WORKFLOW
// ==============================================

function hlavnaFunkcia() {
    addDebug("üöÄ === ≈†TART DOCH√ÅDZKA PREPOƒåTU v" + CONFIG.version + " ===");
    
    // Reset logov
    debugLog = [];
    errorLog = [];
    
    // Premenn√© pre cel√Ω workflow - DEFINOVAN√â LEN RAZ!
    var datum, prichodRaw, odchodRaw, zamestnanci;
    var prichodRounded, odchodRounded, pracovnaDobaHodiny;
    var pocetPracovnikov, odpracovaneTotal, celkoveMzdy;
    
    // Success flags - DEFINOVAN√â LEN RAZ!
    var step1Success = false;
    var step2Success = false;
    var step3Success = false;
    var step4Success = false;
    var step5Success = false;
    var step6Success = false;
    var step7Success = false;
    
    try {
        // KROK 1: Z√≠skanie vstupn√Ωch d√°t
        addDebug("üìã KROK 1: Z√≠skavam vstupn√© d√°ta...");
        
        datum = currentEntry.field(CONFIG.fields.datum);
        prichodRaw = currentEntry.field(CONFIG.fields.prichod);
        odchodRaw = currentEntry.field(CONFIG.fields.odchod);
        zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
        
        addDebug("  üìÖ D√°tum: " + (datum ? moment(datum).format("DD.MM.YYYY") : "NULL"));
        addDebug("  üïê Pr√≠chod: " + formatTime(prichodRaw));
        addDebug("  üïê Odchod: " + formatTime(odchodRaw));
        addDebug("  üë• Zamestnanci: " + (zamestnanci ? zamestnanci.length : 0));
        
        // Valid√°cia
        if (!datum || !prichodRaw || !odchodRaw || !zamestnanci || zamestnanci.length === 0) {
            addError("Ch√Ωbaj√∫ povinn√© √∫daje", "validacia");
            step1Success = false;
        } else {
            addDebug("‚úÖ Vstupn√© d√°ta OK");
            step1Success = true;
        }
        
    } catch (inputError) {
        addError("Chyba pri naƒç√≠tan√≠ vstupn√Ωch d√°t: " + inputError.toString(), "input");
        step1Success = false;
    }
    
    // KROK 2: Zaokr√∫hƒæovanie ƒçasov
    if (step1Success) {
        try {
            addDebug("‚è∞ KROK 2: Zaokr√∫hƒæujem ƒçasy na 15 min√∫t...");
            
            prichodRounded = roundToQuarter(prichodRaw);
            odchodRounded = roundToQuarter(odchodRaw);
            
            if (!prichodRounded || !odchodRounded) {
                addError("Zaokr√∫hƒæovanie ƒçasov zlyhalo", "rounding");
                step2Success = false;
            } else {
                addDebug("  P√¥vodne: " + formatTime(prichodRaw) + " - " + formatTime(odchodRaw));
                addDebug("  Zaokr√∫hlen√©: " + formatTime(prichodRounded) + " - " + formatTime(odchodRounded));
                
                currentEntry.set(CONFIG.fields.prichod, prichodRounded);
                currentEntry.set(CONFIG.fields.odchod, odchodRounded);
                
                addDebug("‚úÖ ƒåasy zaokr√∫hlen√© a ulo≈æen√©");
                step2Success = true;
            }
        } catch (roundError) {
            addError("Chyba pri zaokr√∫hƒæovan√≠: " + roundError.toString(), "round");
            step2Success = false;
        }
    }
    
    // KROK 3: V√Ωpoƒçet pracovnej doby
    if (step2Success) {
        try {
            addDebug("üßÆ KROK 3: Poƒç√≠tam pracovn√∫ dobu...");
            
            pracovnaDobaHodiny = calculateHours(prichodRounded, odchodRounded);
            
            if (pracovnaDobaHodiny <= 0 || pracovnaDobaHodiny > 24) {
                addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny + " h", "workTime");
                step3Success = false;
            } else {
                addDebug("  Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
                currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
                addDebug("‚úÖ Pracovn√° doba vypoƒç√≠tan√°");
                step3Success = true;
            }
        } catch (workError) {
            addError("Chyba pri v√Ωpoƒçte pracovnej doby: " + workError.toString(), "workTime");
            step3Success = false;
        }
    }
    
    // KROK 4: Poƒçet pracovn√≠kov a celkov√© odpracovan√©
    if (step3Success) {
        try {
            addDebug("üìä KROK 4: Poƒç√≠tam celkov√© hodnoty...");
            
            pocetPracovnikov = zamestnanci.length;
            odpracovaneTotal = Math.round((pocetPracovnikov * pracovnaDobaHodiny) * 100) / 100;
            
            currentEntry.set(CONFIG.fields.pocetPracovnikov, pocetPracovnikov);
            currentEntry.set(CONFIG.fields.odpracovane, odpracovaneTotal);
            
            addDebug("  Poƒçet pracovn√≠kov: " + pocetPracovnikov);
            addDebug("  Odpracovan√© spolu: " + odpracovaneTotal + " hod√≠n");
            addDebug("‚úÖ Celkov√© hodnoty vypoƒç√≠tan√©");
            step4Success = true;
            
        } catch (totalError) {
            addError("Chyba pri v√Ωpoƒçte celkov√Ωch hodn√¥t: " + totalError.toString(), "totals");
            step4Success = false;
        }
    }
    
    // KROK 5: Spracovanie jednotliv√Ωch zamestnancov
    if (step4Success) {
        try {
            addDebug("üë• KROK 5: Sprac√∫vam jednotliv√Ωch zamestnancov...");
            
            celkoveMzdy = 0;
            var uspesneSpracovani = 0;
            
            for (var i = 0; i < zamestnanci.length; i++) {
                var dennaMzda = processEmployee(zamestnanci[i], i, pracovnaDobaHodiny, datum);
                
                if (dennaMzda > 0) {
                    celkoveMzdy += dennaMzda;
                    uspesneSpracovani++;
                } else {
                    addDebug("‚ö†Ô∏è Zamestnanec " + (i + 1) + " spracovan√Ω s nulovou mzdou");
                }
            }
            
            addDebug("üìà S√∫hrn spracovania:");
            addDebug("  √öspe≈°ne spracovan√≠: " + uspesneSpracovani + "/" + zamestnanci.length);
            addDebug("  Celkov√© mzdov√© n√°klady: " + celkoveMzdy + " ‚Ç¨");
            
            if (uspesneSpracovani > 0) {
                step5Success = true;
            } else {
                addError("≈Ωiadny zamestnanec nebol √∫spe≈°ne spracovan√Ω", "employees");
                step5Success = false;
            }
            
        } catch (employeeError) {
            addError("Chyba pri spracovan√≠ zamestnancov: " + employeeError.toString(), "employees");
            step5Success = false;
        }
    }
    
    // KROK 6: Ulo≈æenie mzdov√Ωch n√°kladov
    if (step5Success) {
        try {
            addDebug("üí∞ KROK 6: Uklad√°m mzdov√© n√°klady...");
            
            currentEntry.set(CONFIG.fields.mzdoveNaklady, celkoveMzdy);
            addDebug("‚úÖ Mzdov√© n√°klady ulo≈æen√©: " + celkoveMzdy + " ‚Ç¨");
            step6Success = true;
            
        } catch (saveError) {
            addError("Chyba pri ukladan√≠ mzdov√Ωch n√°kladov: " + saveError.toString(), "saveCosts");
            step6Success = false;
        }
    }
    
    // KROK 7: Vytvorenie info z√°znamu
    if (step6Success) {
        try {
            addDebug("‚ÑπÔ∏è KROK 7: Vytv√°ram info z√°znam...");
            
            var infoMessage = "üìã DOCH√ÅDZKA - AUTOMATICK√ù PREPOƒåET\n" +
                            "=====================================\n\n" +
                            "üìÖ D√°tum: " + moment(datum).format("DD.MM.YYYY") + "\n" +
                            "‚è∞ Pracovn√Ω ƒças: " + formatTime(prichodRounded) + " - " + formatTime(odchodRounded) + "\n" +
                            "‚è±Ô∏è Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n\n\n" +
                            "üë• ZAMESTNANCI:\n" +
                            "‚Ä¢ Poƒçet: " + pocetPracovnikov + " os√¥b\n" +
                            "‚Ä¢ Odpracovan√© spolu: " + odpracovaneTotal + " hod√≠n\n\n" +
                            "üí∞ MZDOV√â N√ÅKLADY:\n" +
                            "‚Ä¢ Celkom: " + celkoveMzdy + " ‚Ç¨\n" +
                            "‚Ä¢ Priemer na osobu: " + (celkoveMzdy / pocetPracovnikov).toFixed(2) + " ‚Ç¨\n\n" +
                            "üîß TECHNICK√â INFO:\n" +
                            "‚Ä¢ Script verzia: " + CONFIG.version + "\n" +
                            "‚Ä¢ ƒåas generovania: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n" +
                            "‚Ä¢ Trigger: Before Save\n\n" +
                            "üìù Pre detaily pozri Debug_Log";
            
            currentEntry.set(CONFIG.fields.info, infoMessage);
            addDebug("‚úÖ Info z√°znam vytvoren√Ω");
            step7Success = true;
            
        } catch (infoError) {
            addError("Chyba pri vytv√°ran√≠ info z√°znamu: " + infoError.toString(), "info");
            step7Success = false;
        }
    }
    
    // Fin√°lne vyhodnotenie
    var globalSuccess = step1Success && step2Success && step3Success && 
                       step4Success && step5Success && step6Success && step7Success;
    
    if (globalSuccess) {
        addDebug("üéâ === PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE! ===");
    } else {
        addDebug("‚ùå === PREPOƒåET ZLYHAL ===");
        addDebug("Kroky: 1=" + step1Success + " 2=" + step2Success + " 3=" + step3Success + 
                " 4=" + step4Success + " 5=" + step5Success + " 6=" + step6Success + " 7=" + step7Success);
    }
    
    return globalSuccess;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    addDebug("üé¨ Inicializ√°cia Doch√°dzka script v" + CONFIG.version);
    
    // Kontrola existencie currentEntry
    if (!currentEntry) {
        addError("KRITICK√Å CHYBA: currentEntry neexistuje", "startup");
        message("üí• KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
    } else {
        // Spustenie hlavnej funkcie
        var result = hlavnaFunkcia();
        
        // Ulo≈æ logy
        saveLogs();
        
        // Informuj pou≈æ√≠vateƒæa
        if (result) {
            message("‚úÖ Doch√°dzka prepoƒç√≠tan√° √∫spe≈°ne!\n\n" +
                   "‚è∞ ƒåasy zaokr√∫hlen√© na 15 min\n" +
                   "üìä Pracovn√° doba: " + currentEntry.field(CONFIG.fields.pracovnaDoba) + " h\n" +
                   "üë• Zamestnanci: " + currentEntry.field(CONFIG.fields.pocetPracovnikov) + " os√¥b\n" +
                   "üí∞ Mzdov√© n√°klady: " + currentEntry.field(CONFIG.fields.mzdoveNaklady) + " ‚Ç¨\n\n" +
                   "‚ÑπÔ∏è Detaily v poli 'info'");
        } else {
            message("‚ùå Prepoƒçet doch√°dzky zlyhal!\n\n" +
                   "üîç Skontroluj Error_Log pre detaily\n" +
                   "üìã Over vstupn√© d√°ta a sk√∫s znovu");
        }
    }
    
} catch (kritickachyba) {
    // Posledn√° z√°chrana
    try {
        addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "critical");
        saveLogs();
        message("üí• KRITICK√Å CHYBA!\n\nScript zlyhal. Pozri Error_Log.");
    } catch (finalError) {
        message("üí• FAT√ÅLNA CHYBA!\n\n" + kritickachyba.toString());
    }
}