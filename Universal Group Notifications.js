// ==============================================
// UNIVERSAL GROUP NOTIFICATION - Vytvorenie notifik√°cie
// Verzia: 10.0 | D√°tum: December 2024 | Autor: ASISTANTO
// Kni≈ænica: Univerz√°lna | Trigger: After Save
// ==============================================
// üìã FUNKCIA:
//    - Univerz√°lny script pre v≈°etky kni≈ænice
//    - Automaticky rozpozn√° typ kni≈ænice
//    - Vytvor√≠ z√°znam v kni≈ænici Notifications
//    - Pripraven√Ω pre migr√°ciu do MementoNotifications
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0+ (z√°kladn√© funkcie)
//    - MementoConfig v7.0+ (centr√°lny CONFIG)
//    - Pripraven√© pre MementoNotifications v7.0
// ==============================================
// ‚úÖ UNIVERZ√ÅLNE v10.0:
//    - Automatick√° detekcia kni≈ænice
//    - Dynamick√© mapovanie pol√≠
//    - Flexibiln√© form√°tovanie spr√°v
//    - Pripraven√© pre migr√°ciu
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var centralConfig = utils.config;
var currentEntry = entry();
var currentLibrary = lib();

var CONFIG = {
    scriptName: "Universal Group Notification",
    version: "10.0",
    
    // Referencie na centr√°lny config
    fields: centralConfig.fields,
    attributes: centralConfig.attributes,
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    
    // Mapovanie kni≈æn√≠c na ich konfigur√°cie
    libraryMapping: {
        // N√°zov kni≈ænice -> konfigur√°cia
        "Doch√°dzka": {
            type: "attendance",
            telegramGroupField: "Telegram skupina doch√°dzky",
            permissionField: "Doch√°dzka skupinov√© notifik√°cie",
            messageType: "Doch√°dzka",
            fields: centralConfig.fields.attendance,
            formatFunction: formatAttendanceMessage,
            dataExtractor: extractAttendanceData
        },
        "Z√°znam pr√°ce": {
            type: "workRecord",
            telegramGroupField: "Telegram skupina z√°znamu pr√°c",
            permissionField: "Z√°znam pr√°c skupinov√© notifik√°cie",
            messageType: "Z√°znam pr√°c",
            fields: centralConfig.fields.workRecord,
            formatFunction: formatWorkRecordMessage,
            dataExtractor: extractWorkRecordData
        },
        "ASISTANTO API": {
            type: "workRecord",
            telegramGroupField: "Telegram skupina z√°znamu pr√°c",
            permissionField: "Z√°znam pr√°c skupinov√© notifik√°cie",
            messageType: "Z√°znam pr√°c",
            fields: centralConfig.fields.workRecord,
            formatFunction: formatWorkRecordMessage,
            dataExtractor: extractWorkRecordData
        },
        "Kniha j√°zd": {
            type: "bookOfRides",
            telegramGroupField: "Telegram skupina knihy j√°zd",
            permissionField: "Kniha j√°zd skupinov√© notifik√°cie",
            messageType: "Kniha j√°zd",
            fields: centralConfig.fields.bookOfRides,
            formatFunction: formatBookOfRidesMessage,
            dataExtractor: extractBookOfRidesData
        },
        "Z√°v√§zky": {
            type: "obligations",
            telegramGroupField: "Telegram skupina z√°v√§zkov",
            permissionField: "Z√°v√§zky skupinov√© notifik√°cie",
            messageType: "Z√°v√§zky",
            fields: centralConfig.fields.obligations,
            formatFunction: formatObligationsMessage,
            dataExtractor: extractObligationsData
        },
        "Poklad≈àa": {
            type: "cashRegister",
            telegramGroupField: "Telegram skupina pokladne",
            permissionField: "Poklad≈àa skupinov√© notifik√°cie",
            messageType: "Poklad≈àa",
            fields: centralConfig.fields.cashRegister,
            formatFunction: formatCashRegisterMessage,
            dataExtractor: extractCashRegisterData
        }
    }
};

// ==============================================
// HLAVN√Å FUNKCIA - UNIVERZ√ÅLNA
// ==============================================

function main() {
    try {
        var libraryName = currentLibrary.title;
        utils.addDebug(currentEntry, utils.getIcon("start") + " === UNIVERSAL GROUP NOTIFICATION v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "Kni≈ænica: " + libraryName);
        
        // 1. IDENTIFIK√ÅCIA KNI≈ΩNICE
        var libraryConfig = identifyLibrary(libraryName);
        if (!libraryConfig) {
            utils.addDebug(currentEntry, utils.getIcon("info") + " Kni≈ænica '" + libraryName + "' nie je nakonfigurovan√° pre notifik√°cie");
            return true; // Nie je to chyba
        }
        
        // 2. KONTROLA Z√ÅVISLOST√ç
        var depCheck = utils.checkDependencies(['config', 'core']);
        if (!depCheck.success) {
            utils.addError(currentEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
            return false;
        }
        
        // 3. KONTROLA POVOLEN√ç
        if (!checkPermissions(libraryConfig)) {
            utils.addDebug(currentEntry, utils.getIcon("info") + " Skupinov√© notifik√°cie s√∫ vypnut√© pre " + libraryName);
            return true;
        }
        
        // 4. Z√çSKANIE TELEGRAM SKUPINY
        var telegramGroup = getTelegramGroup(libraryConfig);
        if (!telegramGroup) {
            utils.addDebug(currentEntry, utils.getIcon("warning") + " Telegram skupina nen√°jden√° alebo neakt√≠vna");
            return true;
        }
        
        // 5. EXTRAKCIA D√ÅT
        var extractedData = extractData(libraryConfig);
        if (!extractedData) {
            utils.addError(currentEntry, "Nepodarilo sa extrahova≈• d√°ta", "main");
            return false;
        }
        
        // 6. FORM√ÅTOVANIE SPR√ÅVY
        var message = formatMessage(libraryConfig, extractedData);
        if (!message) {
            utils.addError(currentEntry, "Nepodarilo sa sform√°tova≈• spr√°vu", "main");
            return false;
        }
        
        // 7. VYTVORENIE NOTIFIK√ÅCIE
        var notification = createNotification({
            libraryConfig: libraryConfig,
            telegramGroup: telegramGroup,
            message: message,
            data: extractedData
        });
        
        if (!notification) {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "main");
            return false;
        }
        
        utils.addDebug(currentEntry, utils.getIcon("success") + " Notifik√°cia vytvoren√° (ID: " + notification.field("ID") + ")");
        utils.addDebug(currentEntry, utils.getIcon("success") + " === SCRIPT DOKONƒåEN√ù ===");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        return false;
    }
}

// ==============================================
// UNIVERZ√ÅLNE FUNKCIE
// ==============================================

function identifyLibrary(libraryName) {
    return CONFIG.libraryMapping[libraryName] || null;
}

function checkPermissions(libraryConfig) {
    try {
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) return false;
        
        var settings = defaultsLib.entries();
        if (!settings || settings.length === 0) return false;
        
        var defaultSettings = settings[settings.length - 1];
        var enabled = utils.safeGet(defaultSettings, libraryConfig.permissionField, false);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ " + libraryConfig.permissionField + ": " + (enabled ? "√ÅNO" : "NIE"));
        
        return enabled;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "checkPermissions", error);
        return false;
    }
}

function getTelegramGroup(libraryConfig) {
    try {
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) return null;
        
        
        var settings = defaultsLib.entries();
        if (!settings || settings.length === 0) return false;
        
        var defaultSettings = settings[settings.length - 1];
        var enabled = utils.safeGet(defaultSettings, libraryConfig.telegramGroupField , " ");
        utils.addDebug(currentEntry, "  ‚Ä¢ " + libraryConfig.telegramGroupField + ": " + (enabled ? "N√ÅJDEN√Å" : "NEN√ÅJDEN√Å"));
        var telegramGroupEntries = utils.safeGet(defaultSettings, libraryConfig.telegramGroupField); // Telegram skupina doch√°dzky hardcoded for no
        var telegramGroup = telegramGroupEntries[0];
        utils.addDebug(currentEntry, "  ‚Ä¢ Telegram skupina: " + utils.safeGet(telegramGroup, "N√°zov skupiny") + " " + utils.safeGet(telegramGroup, "N√°zov t√©my"));
        if (!telegramGroup) {
            utils.addError(currentEntry, "Telegram skupina nie je nastaven√° v poli '" + libraryConfig.telegramGroupField + "'", "getTelegramGroup");
            return null;
        }
        
        // Valid√°cia skupiny
        if (!validateTelegramGroup(telegramGroup)) {
            return null;
        }
        
        return telegramGroup;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "getTelegramGroup", error);
        return null;
    }
}

function validateTelegramGroup(telegramGroup) {
    // Kontrola povolen√Ωch notifik√°ci√≠
    var notificationsEnabled = utils.safeGet(telegramGroup, "Povoli≈• notifik√°cie", false); // Hardcoded for now
    if (!notificationsEnabled) {
        utils.addDebug(currentEntry, utils.getIcon("warning") + " Skupina m√° vypnut√© notifik√°cie");
        return false;
    }
    
    // Kontrola ƒçasov√Ωch obmedzen√≠
    if (!checkTimeRestrictions(telegramGroup)) {
        return false;
    }
    
    var groupName = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.groupName);
    var chatId = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.chatId);
    
    utils.addDebug(currentEntry, "  ‚Ä¢ Skupina: " + groupName);
    utils.addDebug(currentEntry, "  ‚Ä¢ Chat ID: " + chatId);
    
    return true;
}

function checkTimeRestrictions(telegramGroup) {
    try {
        var now = moment();
        
        // Kontrola v√≠kendu
        if (utils.isWeekend(now)) {
            var weekendAllowed = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.weekendEnabled, false);
            if (!weekendAllowed) {
                utils.addDebug(currentEntry, utils.getIcon("warning") + " V√≠kendov√© notifik√°cie nie s√∫ povolen√©");
                return false;
            }
        }
        
        // Kontrola pracovn√©ho ƒçasu
        var workTimeFrom = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.workTimeFrom);
        var workTimeTo = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.workTimeTo);
        
        if (workTimeFrom && workTimeTo) {
            var currentTime = now.format("HH:mm");
            var fromTime = moment(workTimeFrom).format("HH:mm");
            var toTime = moment(workTimeTo).format("HH:mm");
            
            if (currentTime < fromTime || currentTime > toTime) {
                utils.addDebug(currentEntry, "  ‚Ä¢ Mimo pracovn√©ho ƒçasu (" + fromTime + " - " + toTime + ")");
                return false;
            }
        }
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "checkTimeRestrictions", error);
        return true;
    }
}

function extractData(libraryConfig) {
    try {
        // Prioritne hƒæadaj info_telegram pole
        var telegramInfoField = "info_telegram";
        var telegramInfo = utils.safeGet(currentEntry, telegramInfoField);
        
        if (telegramInfo) {
            utils.addDebug(currentEntry, "  ‚Ä¢ Pou≈æijem info_telegram pole");
            return {
                formattedMessage: telegramInfo,
                useDirectMessage: true
            };
        }
        
        // Ak nie je info_telegram, sk√∫s obyƒçajn√© info pole a preform√°tuj
        var infoField = CONFIG.fields.common.info;
        var infoContent = utils.safeGet(currentEntry, infoField);
        
        if (infoContent) {
            utils.addDebug(currentEntry, "  ‚Ä¢ Konvertujem info pole na Markdown");
            return {
                formattedMessage: convertTextToMarkdown(infoContent),
                useDirectMessage: true
            };
        }
        
        // Fallback na p√¥vodn√Ω data extractor
        utils.addDebug(currentEntry, "  ‚Ä¢ Pou≈æ√≠vam ≈°tandardn√Ω data extractor");
        if (libraryConfig.dataExtractor) {
            return libraryConfig.dataExtractor(currentEntry, libraryConfig.fields);
        }
        
        return null;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "extractData", error);
        return null;
    }
}

function formatMessage(libraryConfig, data) {
    try {
        // Ak m√°me priamo form√°tovan√∫ spr√°vu, pou≈æi ju
        if (data && data.useDirectMessage && data.formattedMessage) {
            return data.formattedMessage;
        }
        
        // Inak pou≈æi ≈°tandardn√Ω formatter
        if (libraryConfig.formatFunction) {
            return libraryConfig.formatFunction(data, currentEntry);
        }
        
        return formatDefaultMessage(libraryConfig.messageType, data);
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "formatMessage", error);
        return null;
    }
}

// Pomocn√° funkcia na konverziu textu na Markdown
function convertTextToMarkdown(text) {
    if (!text) return "";
    
    // Z√°kladn√° konverzia
    var lines = text.split('\n');
    var markdown = "";
    
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        
        // Detekuj hlaviƒçky (riadky s veƒæk√Ωmi p√≠smenami alebo === podƒçiarknut√≠m)
        if (line.match(/^[A-Z\s]+$/) || line.match(/^‚ïê+$/)) {
            if (line.match(/^‚ïê+$/)) {
                continue; // Preskoƒç√≠ podƒçiarknutie
            }
            markdown += "*" + line.trim() + "*\n";
        }
        // Detekuj sekcie (riadky s dvojbodkou na konci)
        else if (line.match(/^.+:$/)) {
            markdown += "\n*" + line + "*\n";
        }
        // Detekuj polo≈æky zoznamu
        else if (line.match(/^[‚Ä¢‚óè‚ñ™‚ñ´‚ó¶‚Ä£‚ÅÉ]\s/) || line.match(/^[-*]\s/)) {
            markdown += line + "\n";
        }
        // Zv√Ωrazni ƒç√≠sla a sumy
        else if (line.match(/\d+\s*(‚Ç¨|EUR|hod√≠n|h|km)/)) {
            markdown += line.replace(/(\d+(?:\.\d+)?)\s*(‚Ç¨|EUR|hod√≠n|h|km)/g, "*$1 $2*") + "\n";
        }
        // Ostatn√© riadky
        else {
            markdown += escapeMarkdown(line) + "\n";
        }
    }
    
    return markdown;
}

function createNotification(params) {
    try {
        var notifLib = libByName(CONFIG.libraries.notifications);
        if (!notifLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.libraries.notifications + " nen√°jden√°", "createNotification");
            return null;
        }
        
        var notification = notifLib.create({});
        
        // Z√°kladn√© polia
        notification.set(CONFIG.fields.notifications.status, "ƒåak√°");
        notification.set(CONFIG.fields.notifications.priority, 
            utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.messagePriority, "Norm√°lna"));
        notification.set(CONFIG.fields.notifications.messageType, params.libraryConfig.messageType);
        notification.set(CONFIG.fields.notifications.messageSource, "Automatick√°");
        notification.set(CONFIG.fields.notifications.formatting, "Markdown");
        
        // Telegram polia
        notification.set(CONFIG.fields.notifications.chatId, 
            utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.chatId));
        
        var threadId = utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.threadId);
        if (threadId) {
            notification.set(CONFIG.fields.notifications.threadId, threadId);
        }
        
        // Obsah
        notification.set(CONFIG.fields.notifications.message, params.message);
        
        // Prepojenia
        notification.set(CONFIG.fields.notifications.groupOrTopic, params.telegramGroup);
        
        // Info pole
        var infoMsg = createNotificationInfo(params);
        notification.set(CONFIG.fields.common.info, infoMsg);
        
        return notification;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createNotification", error);
        return null;
    }
}

function createNotificationInfo(params) {
    var info = "üìã NOTIFIK√ÅCIA - " + params.libraryConfig.messageType.toUpperCase() + "\n";
    info += "Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
    info += "Zdrojov√° kni≈ænica: " + lib().title + "\n";
    info += "Zdrojov√Ω z√°znam: #" + currentEntry.field("ID") + "\n";
    info += "Skupina: " + utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.groupName) + "\n";
    info += "Chat ID: " + utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.chatId) + "\n";
    
    var threadId = utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.threadId);
    if (threadId) {
        info += "Thread ID: " + threadId + "\n";
    }
    
    return info;
}
// ==============================================
// BIDIRECTIONAL LINKING FUNKCIE
// ==============================================

/**
 * Vytvor√≠ obojstrann√© prepojenie medzi zdrojov√Ωm z√°znamom a notifik√°ciou
 * @param {Entry} sourceEntry - Zdrojov√Ω z√°znam
 * @param {Entry} notification - Vytvoren√° notifik√°cia
 * @param {string} linkFieldName - N√°zov poƒæa pre linkovanie (default: "Notifik√°cie")
 */
function createBidirectionalLink(sourceEntry, notification, linkFieldName) {
    try {
        linkFieldName = linkFieldName || "Notifik√°cie";
        
        // 1. Z√≠skaj existuj√∫ce notifik√°cie zo zdrojov√©ho z√°znamu
        var existingNotifications = utils.safeGet(sourceEntry, linkFieldName, []);
        
        // 2. Pridaj nov√∫ notifik√°ciu ak tam e≈°te nie je
        var notificationExists = false;
        for (var i = 0; i < existingNotifications.length; i++) {
            if (existingNotifications[i].id === notification.id) {
                notificationExists = true;
                break;
            }
        }
        
        if (!notificationExists) {
            existingNotifications.push(notification);
            sourceEntry.set(linkFieldName, existingNotifications);
            
            utils.addDebug(sourceEntry, "  ‚Ä¢ Notifik√°cia #" + notification.field("ID") + 
                          " prilinkov√° k z√°znamu #" + sourceEntry.field("ID"));
        }
        
        // 3. Nastav sp√§tn√∫ referenciu v notifik√°cii (u≈æ by malo by≈• nastaven√© pri vytvoren√≠)
        // ale pre istotu skontrolujeme
        var sourceLibraryField = "Zdrojov√° kni≈ænica";
        var sourceEntryField = "Zdrojov√Ω z√°znam";
        
        if (!notification.field(sourceLibraryField)) {
            notification.set(sourceLibraryField, lib().title);
        }
        
        if (!notification.field(sourceEntryField)) {
            notification.set(sourceEntryField, sourceEntry);
        }
        
        return true;
        
    } catch (error) {
        utils.addError(sourceEntry, "Chyba pri vytv√°ran√≠ prepojenia: " + error.toString(), 
                      "createBidirectionalLink", error);
        return false;
    }
}

/**
 * Vyma≈æe star√© notifik√°cie pred vytvoren√≠m nov√Ωch
 * @param {Entry} sourceEntry - Zdrojov√Ω z√°znam
 * @param {string} linkFieldName - N√°zov poƒæa s notifik√°ciami
 * @returns {Object} {success: boolean, deletedCount: number}
 */
function cleanupOldNotifications(sourceEntry, linkFieldName) {
    try {
        linkFieldName = linkFieldName || "Notifik√°cie";
        
        utils.addDebug(sourceEntry, utils.getIcon("delete") + " Zaƒç√≠nam cleanup notifik√°ci√≠");
        
        // 1. Z√≠skaj existuj√∫ce notifik√°cie
        var existingNotifications = utils.safeGet(sourceEntry, linkFieldName, []);
        
        if (existingNotifications.length === 0) {
            utils.addDebug(sourceEntry, "  ‚Ä¢ ≈Ωiadne notifik√°cie na vymazanie");
            return { success: true, deletedCount: 0 };
        }
        
        var deletedCount = 0;
        var failedDeletions = [];
        
        // 2. Vyma≈æ ka≈æd√∫ notifik√°ciu
        for (var i = 0; i < existingNotifications.length; i++) {
            try {
                var notification = existingNotifications[i];
                
                // Kontrola ƒçi notifik√°cia st√°le existuje
                if (!notification || !notification.field) {
                    utils.addDebug(sourceEntry, "  ‚ö†Ô∏è Notifik√°cia na indexe " + i + " u≈æ neexistuje");
                    continue;
                }
                
                var notifId = notification.field("ID");
                var status = notification.field(CONFIG.fields.notifications.status);
                
                // Nevymaza≈• u≈æ odoslan√© notifik√°cie (voliteƒæn√©)
                if (status === "Odoslan√©") {
                    utils.addDebug(sourceEntry, "  ‚ÑπÔ∏è Notifik√°cia #" + notifId + 
                                  " u≈æ bola odoslan√° - preskakujem");
                    continue;
                }
                
                // Vyma≈æ notifik√°ciu
                notification.trash();
                deletedCount++;
                
                utils.addDebug(sourceEntry, "  ‚úÖ Notifik√°cia #" + notifId + " vymazan√°");
                
            } catch (deleteError) {
                failedDeletions.push({
                    index: i,
                    error: deleteError.toString()
                });
            }
        }
        
        // 3. Vyƒçisti pole v zdrojovom z√°zname
        sourceEntry.set(linkFieldName, []);
        
        // 4. V√Ωsledok
        if (failedDeletions.length > 0) {
            utils.addError(sourceEntry, "Nepodarilo sa vymaza≈• " + failedDeletions.length + 
                          " notifik√°ci√≠", "cleanupOldNotifications");
            
            return {
                success: false,
                deletedCount: deletedCount,
                failedCount: failedDeletions.length,
                errors: failedDeletions
            };
        }
        
        utils.addDebug(sourceEntry, utils.getIcon("success") + " Cleanup dokonƒçen√Ω - vymazan√Ωch " + 
                      deletedCount + " notifik√°ci√≠");
        
        return {
            success: true,
            deletedCount: deletedCount
        };
        
    } catch (error) {
        utils.addError(sourceEntry, "Kritick√° chyba pri cleanup: " + error.toString(), 
                      "cleanupOldNotifications", error);
        return {
            success: false,
            deletedCount: 0,
            error: error.toString()
        };
    }
}

/**
 * Bezpeƒçn√© vytvorenie notifik√°cie s cleanup a linkovan√≠m
 * @param {Entry} sourceEntry - Zdrojov√Ω z√°znam
 * @param {Object} notificationData - D√°ta pre notifik√°ciu
 * @returns {Object} {success: boolean, notification: Entry}
 */
function safeCreateNotificationWithCleanup(sourceEntry, notificationData) {
    try {
        // 1. Najprv cleanup star√Ωch notifik√°ci√≠
        var cleanupResult = cleanupOldNotifications(sourceEntry);
        
        if (!cleanupResult.success) {
            utils.addError(sourceEntry, "Cleanup zlyhal, pokraƒçujem s vytvoren√≠m novej notifik√°cie", 
                          "safeCreateNotificationWithCleanup");
        }
        
        // 2. Vytvor nov√∫ notifik√°ciu
        var notification = createNotification(notificationData);
        
        if (!notification) {
            return {
                success: false,
                error: "Nepodarilo sa vytvori≈• notifik√°ciu"
            };
        }
        
        // 3. Vytvor bidirectional link
        var linkResult = createBidirectionalLink(sourceEntry, notification);
        
        if (!linkResult) {
            utils.addError(sourceEntry, "Notifik√°cia vytvoren√° ale linking zlyhal", 
                          "safeCreateNotificationWithCleanup");
        }
        
        return {
            success: true,
            notification: notification,
            cleanupCount: cleanupResult.deletedCount
        };
        
    } catch (error) {
        utils.addError(sourceEntry, "Kritick√° chyba: " + error.toString(), 
                      "safeCreateNotificationWithCleanup", error);
        return {
            success: false,
            error: error.toString()
        };
    }
}
// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function escapeMarkdown(text) {
    if (!text) return "";
    
    return String(text)
        .replace(/\*/g, "\\*")
        .replace(/_/g, "\\_")
        .replace(/\[/g, "\\[")
        .replace(/\]/g, "\\]")
        .replace(/\(/g, "\\(")
        .replace(/\)/g, "\\)")
        .replace(/~/g, "\\~")
        .replace(/`/g, "\\`")
        .replace(/>/g, "\\>")
        .replace(/#/g, "\\#");
}

function formatLocation(location) {
    if (!location) return "Neurƒçen√©";
    
    if (typeof location === 'object') {
        return utils.safeGet(location, "Adresa", "Neurƒçen√©");
    }
    
    return location;
}

function getCashRegisterName(cashRegister) {
    if (!cashRegister) return "Neurƒçen√°";
    
    if (typeof cashRegister === 'object') {
        return utils.safeGet(cashRegister, "N√°zov", "Neurƒçen√°");
    }
    
    return cashRegister;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola z√°vislost√≠ pred spusten√≠m
var dependencyCheck = utils.checkDependencies(['config', 'core']);
if (!dependencyCheck.success) {
    message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly: " + dependencyCheck.missing.join(", "));
    cancel();
}

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zaloguj ale nepreru≈°uj ulo≈æenie (After Save)
if (!result) {
    utils.addError(currentEntry, "Script zlyhal ale z√°znam bol ulo≈æen√Ω", "main");
}