// ==============================================
// TEMPLATE SCRIPT - Vzorov√° ≈°trukt√∫ra pre Memento scripty
// Verzia: 8.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: [N√ÅZOV KNI≈ΩNICE] | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Vzorov√° ≈°trukt√∫ra pre v≈°etky Memento scripty
//    - ≈†tandardizovan√° organiz√°cia k√≥du
//    - Komplexn√° pr√°ca s Memento Framework
//    - Best practices a error handling
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV A KONFIGUR√ÅCIE
// ==============================================

// Import Memento Framework cez hlavn√Ω agreg√°tor
var utils = MementoUtils;
var currentEntry = entry();

// Vytvorenie script-≈°pecifickej konfigur√°cie
var CONFIG = utils.createScriptConfig("Template Script", "8.0");

// Roz≈°√≠renie CONFIG o script-≈°pecifick√© nastavenia
CONFIG.settings = {
    // Pridaj vlastn√© nastavenia pre script
    enableDebugMode: true,
    maxRetries: 3,
    timeoutSeconds: 30
};

// ==============================================
// VALID√ÅCIA Z√ÅVISLOST√ç A INICIALIZ√ÅCIA
// ==============================================

/**
 * Kontrola z√°vislost√≠ a inicializ√°cia scriptu
 * @returns {Object} {success: boolean, message: string}
 */
function initializeScript() {
    try {
        // Kontrola po≈æadovan√Ωch modulov
        var requiredModules = ['config', 'core', 'business'];
        var depCheck = utils.checkDependencies(requiredModules);
        
        if (!depCheck.success) {
            var errorMsg = "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", ");
            utils.addError(currentEntry, errorMsg, "initializeScript");
            message("‚ùå " + errorMsg);
            return { success: false, message: errorMsg };
        }
        
        // Vyƒçisti logy zo star√Ωch spusten√≠
        utils.clearLogs(currentEntry, true);
        
        // Hlaviƒçkov√Ω log
        utils.addDebug(currentEntry, "=== " + CONFIG.scriptName + " v" + CONFIG.version + " ===", "start");
        utils.addDebug(currentEntry, "Kni≈ænica: " + lib().title);
        utils.addDebug(currentEntry, "ƒåas spustenia: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss"));
        
        // Debug info o naƒç√≠tan√Ωch moduloch
        if (CONFIG.settings.enableDebugMode) {
            utils.debugModules(currentEntry);
        }
        
        return { success: true, message: "Inicializ√°cia √∫spe≈°n√°" };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri inicializ√°cii: " + error.toString(), "initializeScript", error);
        return { success: false, message: error.toString() };
    }
}

// ==============================================
// VALID√ÅCIA VSTUPN√ùCH D√ÅT
// ==============================================

/**
 * Valid√°cia povinn√Ωch pol√≠ a vstupn√Ωch d√°t
 * @returns {Object} {success: boolean, data: Object, error: string}
 */
function validateInputData() {
    try {
        utils.addDebug(currentEntry, "üîç Valid√°cia vstupn√Ωch d√°t", "validation");
        
        // Definuj povinn√© polia na z√°klade kni≈ænice
        var requiredFields = [
            CONFIG.fields.common.id,
            // Pridaj ƒèal≈°ie povinn√© polia podƒæa potreby
        ];
        
        // Validuj povinn√© polia
        if (!utils.validateRequiredFields(currentEntry, requiredFields)) {
            return { 
                success: false, 
                error: "Ch√Ωbaj√∫ povinn√© polia",
                data: null 
            };
        }
        
        // Z√≠skaj a validuj konkr√©tne hodnoty
        var data = {
            id: utils.safeGet(currentEntry, CONFIG.fields.common.id),
            // Pridaj ƒèal≈°ie polia ktor√© potrebuje≈°
        };
        
        // Vlastn√© validaƒçn√© pravidl√°
        if (!data.id) {
            return { 
                success: false, 
                error: "ID z√°znamu nie je dostupn√©",
                data: null 
            };
        }
        
        utils.addDebug(currentEntry, "‚úÖ Valid√°cia √∫spe≈°n√°", "success");
        utils.addDebug(currentEntry, "  ‚Ä¢ ID z√°znamu: " + data.id);
        
        return {
            success: true,
            data: data,
            error: null
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri valid√°cii: " + error.toString(), "validateInputData", error);
        return { 
            success: false, 
            error: error.toString(),
            data: null 
        };
    }
}

// ==============================================
// HLAVN√â BUSINESS FUNKCIE
// ==============================================

/**
 * Hlavn√° business logika scriptu
 * @param {Object} validatedData - Validovan√© vstupn√© d√°ta
 * @returns {Object} {success: boolean, result: Object, error: string}
 */
function processBusinessLogic(validatedData) {
    try {
        utils.addDebug(currentEntry, "‚öôÔ∏è Spracovanie business logiky", "calculation");
        
        var result = {
            processed: 0,
            created: 0,
            updated: 0,
            errors: 0,
            details: []
        };
        
        // Pr√≠klad: Spracovanie zamestnancov
        var employees = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance?.employees || "Zamestnanci");
        
        if (employees && employees.length > 0) {
            utils.addDebug(currentEntry, "üë• Spracov√°vam " + employees.length + " zamestnancov");
            
            for (var i = 0; i < employees.length; i++) {
                var employee = employees[i];
                var empResult = processEmployee(employee, i, validatedData);
                
                if (empResult.success) {
                    result.processed++;
                    result.details.push(empResult.data);
                } else {
                    result.errors++;
                    utils.addError(currentEntry, 
                        "Chyba pri spracovan√≠ zamestnanca #" + (i + 1) + ": " + empResult.error, 
                        "processBusinessLogic");
                }
            }
        }
        
        // Ulo≈æ v√Ωsledky do poƒæa
        var summary = "Spracovan√©: " + result.processed + ", Chyby: " + result.errors;
        utils.safeSet(currentEntry, CONFIG.fields.common.info, summary);
        
        utils.addDebug(currentEntry, "‚úÖ Business logika dokonƒçen√°", "success");
        utils.addDebug(currentEntry, "  ‚Ä¢ " + summary);
        
        return {
            success: result.errors === 0,
            result: result,
            error: result.errors > 0 ? "Niektor√© oper√°cie zlyhali" : null
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba v business logike: " + error.toString(), "processBusinessLogic", error);
        return {
            success: false,
            result: null,
            error: error.toString()
        };
    }
}

/**
 * Spracovanie jednotliv√©ho zamestnanca
 * @param {Object} employee - Entry objekt zamestnanca
 * @param {number} index - Index v poli
 * @param {Object} context - Kontextov√© d√°ta
 * @returns {Object} {success: boolean, data: Object, error: string}
 */
function processEmployee(employee, index, context) {
    try {
        var empName = utils.formatEmployeeName(employee);
        utils.addDebug(currentEntry, "  [" + (index + 1) + "] Spracov√°vam: " + empName, "person");
        
        // Konkr√©tna logika pre zamestnanca
        var empData = {
            name: empName,
            id: employee.field("ID"),
            // Pridaj ƒèal≈°ie d√°ta podƒæa potreby
        };
        
        // Pr√≠klad: V√Ωpoƒçet hodinovej sadzby
        var hourlyRate = utils.findValidHourlyRate(employee, new Date());
        if (hourlyRate) {
            empData.hourlyRate = hourlyRate;
            utils.addDebug(currentEntry, "    ‚Ä¢ Hodinovka: " + hourlyRate + " ‚Ç¨/h");
        }
        
        return {
            success: true,
            data: empData,
            error: null
        };
        
    } catch (error) {
        return {
            success: false,
            data: null,
            error: error.toString()
        };
    }
}

// ==============================================
// TELEGRAM NOTIFIK√ÅCIE
// ==============================================

/**
 * Vytvorenie a odoslanie Telegram notifik√°cie
 * @param {Object} processResult - V√Ωsledky spracovania
 * @returns {Object} {success: boolean, message: string}
 */
function createTelegramNotification(processResult) {
    try {
        utils.addDebug(currentEntry, "üì± Vytv√°ram Telegram notifik√°ciu", "telegram");
        
        // Kontrola povolen√≠ pre notifik√°cie
        var libraryName = lib().title;
        var libraryConfig = CONFIG.libraryMapping?.[libraryName];
        
        if (!libraryConfig) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è Kni≈ænica nie je nakonfigurovan√° pre notifik√°cie");
            return { success: true, message: "Notifik√°cie nie s√∫ nakonfigurovan√©" };
        }
        
        if (!utils.checkPermissions(libraryConfig.permissionField)) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è Notifik√°cie s√∫ vypnut√©");
            return { success: true, message: "Notifik√°cie s√∫ vypnut√©" };
        }
        
        // Vytvorenie Telegram spr√°vy
        var telegramMessage = createTelegramMessage(processResult);
        
        // Ulo≈æenie do info_telegram poƒæa
        utils.safeSet(currentEntry, CONFIG.fields.common.infoTelegram, telegramMessage);
        
        // Vytvorenie notifik√°cie
        var notificationResult = utils.createTelegramMessage(currentEntry);
        
        if (notificationResult.success) {
            utils.addDebug(currentEntry, "‚úÖ Notifik√°cia vytvoren√°", "success");
            
            // Vytvorenie inline keyboard
            var keyboard = utils.createInlineKeyboard([
                { text: "‚úÖ OK", callback_data: "ok_" + currentEntry.field("ID") },
                { text: "‚ùì Info", callback_data: "info_" + currentEntry.field("ID") }
            ], 2);
            
            // Odoslanie na Telegram
            var sendResult = utils.sendNotificationEntry(notificationResult.notification, keyboard);
            
            if (sendResult.success) {
                utils.addDebug(currentEntry, "‚úÖ Notifik√°cia odoslan√° na Telegram", "success");
                return { success: true, message: "Notifik√°cia √∫spe≈°ne odoslan√°" };
            } else {
                utils.addError(currentEntry, "Nepodarilo sa odosla≈• notifik√°ciu", "createTelegramNotification");
                return { success: false, message: "Odoslanie notifik√°cie zlyhalo" };
            }
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "createTelegramNotification");
            return { success: false, message: "Vytvorenie notifik√°cie zlyhalo" };
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri Telegram notifik√°cii: " + error.toString(), "createTelegramNotification", error);
        return { success: false, message: error.toString() };
    }
}

/**
 * Vytvorenie textu Telegram spr√°vy
 * @param {Object} data - D√°ta pre spr√°vu
 * @returns {string} Form√°tovan√° Telegram spr√°va
 */
function createTelegramMessage(data) {
    var message = "üìã **" + CONFIG.scriptName.toUpperCase() + "**\n\n";
    
    // Z√°kladn√© inform√°cie
    message += "üìÖ D√°tum: " + utils.formatDate(new Date(), "DD.MM.YYYY") + "\n";
    message += "üïê ƒåas: " + utils.formatTime(new Date()) + "\n\n";
    
    // V√Ωsledky spracovania
    if (data && data.result) {
        message += "üìä **V√ùSLEDKY:**\n";
        message += "‚Ä¢ Spracovan√©: " + data.result.processed + "\n";
        message += "‚Ä¢ Chyby: " + data.result.errors + "\n\n";
    }
    
    // Detaily
    if (data && data.result && data.result.details && data.result.details.length > 0) {
        message += "üë• **DETAILY:**\n";
        for (var i = 0; i < Math.min(3, data.result.details.length); i++) {
            var detail = data.result.details[i];
            message += "‚Ä¢ " + detail.name;
            if (detail.hourlyRate) {
                message += " (" + detail.hourlyRate + " ‚Ç¨/h)";
            }
            message += "\n";
        }
        
        if (data.result.details.length > 3) {
            message += "‚Ä¢ ... a " + (data.result.details.length - 3) + " ƒèal≈°√≠ch\n";
        }
        message += "\n";
    }
    
    // Technick√© info
    message += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
    message += "üìù Z√°znam #" + currentEntry.field("ID");
    
    return message;
}

// ==============================================
// FINALIZ√ÅCIA A CLEANUP
// ==============================================

/**
 * Finaliz√°cia spracovania a cleanup
 * @param {Array} stepResults - V√Ωsledky v≈°etk√Ωch krokov
 * @returns {Object} {success: boolean, summary: string}
 */
function finalizeProcessing(stepResults) {
    try {
        utils.addDebug(currentEntry, "üîö Finaliz√°cia spracovania", "checkmark");
        
        // Anal√Ωza v√Ωsledkov
        var totalSteps = stepResults.length;
        var successfulSteps = 0;
        var failedSteps = [];
        
        for (var i = 0; i < stepResults.length; i++) {
            var step = stepResults[i];
            if (step.success) {
                successfulSteps++;
            } else {
                failedSteps.push(step.name || "Krok " + (i + 1));
            }
        }
        
        // Vytvorenie s√∫hrnu
        var summary = "√öspe≈°n√Ωch krokov: " + successfulSteps + "/" + totalSteps;
        if (failedSteps.length > 0) {
            summary += "\nZlyhan√© kroky: " + failedSteps.join(", ");
        }
        
        // Nastavenie farby z√°znamu
        var allSuccess = failedSteps.length === 0;
        if (allSuccess) {
            utils.setColorByCondition(currentEntry, "success");
            utils.addDebug(currentEntry, "üéâ V≈°etky kroky √∫spe≈°n√©!", "success");
        } else {
            utils.setColorByCondition(currentEntry, "warning");
            utils.addDebug(currentEntry, "‚ö†Ô∏è Niektor√© kroky zlyhali", "warning");
        }
        
        // Ulo≈æenie s√∫hrnu
        var infoContent = utils.safeGet(currentEntry, CONFIG.fields.common.info, "");
        var finalInfo = infoContent + "\n\nüìä FIN√ÅLNY S√öHRN:\n" + summary;
        finalInfo += "\n‚è∞ Dokonƒçen√©: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss");
        
        utils.safeSet(currentEntry, CONFIG.fields.common.info, finalInfo);
        
        // Log fin√°lneho s√∫hrnu
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        for (var j = 0; j < stepResults.length; j++) {
            var stepResult = stepResults[j];
            var status = stepResult.success ? "‚úÖ" : "‚ùå";
            var stepName = stepResult.name || "Krok " + (j + 1);
            utils.addDebug(currentEntry, status + " " + stepName);
        }
        
        utils.addDebug(currentEntry, "\n‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
        return {
            success: allSuccess,
            summary: summary
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri finaliz√°cii: " + error.toString(), "finalizeProcessing", error);
        return {
            success: false,
            summary: "Chyba pri finaliz√°cii: " + error.toString()
        };
    }
}

/**
 * Zobrazenie s√∫hrnu pou≈æ√≠vateƒæovi
 * @param {Object} finalResult - Fin√°lne v√Ωsledky
 */
function showUserSummary(finalResult) {
    try {
        var summaryData = {
            success: finalResult.success,
            date: new Date(),
            errors: finalResult.success ? [] : ["Niektor√© kroky zlyhali"]
        };
        
        // Pou≈æ√≠vaj utils.showProcessingSummary ak je dostupn√°
        if (typeof utils.showProcessingSummary === 'function') {
            utils.showProcessingSummary(currentEntry, summaryData, CONFIG);
        } else {
            // Fallback na jednoduch√∫ spr√°vu
            var msg = finalResult.success ? 
                "‚úÖ Script √∫spe≈°ne dokonƒçen√Ω" : 
                "‚ö†Ô∏è Script dokonƒçen√Ω s chybami";
            message(msg + "\n\n" + finalResult.summary);
        }
        
    } catch (error) {
        message("Script dokonƒçen√Ω, ale chyba pri zobrazen√≠ s√∫hrnu.");
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

/**
 * Hlavn√° funkcia scriptu - orchestr√°cia v≈°etk√Ωch krokov
 * @returns {boolean} True ak √∫spe≈°n√©, false ak treba zru≈°i≈• ulo≈æenie
 */
function main() {
    try {
        // Zoznam v≈°etk√Ωch krokov pre tracking
        var stepResults = [];
        
        // KROK 1: Inicializ√°cia
        var initResult = initializeScript();
        stepResults.push({ 
            name: "Inicializ√°cia", 
            success: initResult.success, 
            data: initResult 
        });
        
        if (!initResult.success) {
            return false;
        }
        
        // KROK 2: Valid√°cia vstupn√Ωch d√°t
        var validationResult = validateInputData();
        stepResults.push({ 
            name: "Valid√°cia d√°t", 
            success: validationResult.success, 
            data: validationResult 
        });
        
        if (!validationResult.success) {
            utils.addError(currentEntry, "Valid√°cia zlyhala: " + validationResult.error, "main");
            message("‚ùå " + validationResult.error);
            return false;
        }
        
        // KROK 3: Hlavn√° business logika
        var businessResult = processBusinessLogic(validationResult.data);
        stepResults.push({ 
            name: "Business logika", 
            success: businessResult.success, 
            data: businessResult 
        });
        
        // KROK 4: Telegram notifik√°cie
        var telegramResult = createTelegramNotification(businessResult);
        stepResults.push({ 
            name: "Telegram notifik√°cie", 
            success: telegramResult.success, 
            data: telegramResult 
        });
        
        // KROK 5: Finaliz√°cia
        var finalResult = finalizeProcessing(stepResults);
        
        // Zobrazenie s√∫hrnu pou≈æ√≠vateƒæovi
        showUserSummary(finalResult);
        
        return finalResult.success;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii: " + error.toString(), "main", error);
        
        // Nastavenie chybovej farby
        utils.setColorByCondition(currentEntry, "error");
        
        message("‚ùå Kritick√° chyba!\n\n" + error.toString() + 
                (error.lineNumber ? "\nRiadok: " + error.lineNumber : ""));
        
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola ƒçi u≈æ nie je spusten√Ω
if (typeof window === 'undefined' || !window.scriptRunning) {
    if (typeof window !== 'undefined') {
        window.scriptRunning = true;
    }
    
    try {
        // Spustenie hlavnej funkcie
        var result = main();
        
        // Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
        if (!result) {
            utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
            cancel();
        }
        
    } finally {
        // Cleanup
        if (typeof window !== 'undefined') {
            window.scriptRunning = false;
        }
    }
} else {
    utils.addDebug(currentEntry, "Script u≈æ be≈æ√≠ - preskakujem spustenie");
}

// ==============================================
// DOKUMENT√ÅCIA A POZN√ÅMKY
// ==============================================

/*
POU≈ΩITIE TOHTO TEMPLATE:

1. PREMENUJ S√öBOR:
   Template-Script.js ‚Üí YourScript.js

2. UPRAVTE HLAVIƒåKU:
   - Zme≈à n√°zov scriptu
   - Aktualizuj verziu
   - Nastav spr√°vnu kni≈ænicu a trigger
   - Op√≠≈° funkƒçnos≈•

3. KONFIGUR√ÅCIA:
   - Upravte CONFIG.scriptName a CONFIG.version
   - Pridajte script-≈°pecifick√© nastavenia do CONFIG.settings
   - Upravte requiredModules v initializeScript()

4. VALID√ÅCIA:
   - Definujte povinn√© polia v validateInputData()
   - Pridajte vlastn√© validaƒçn√© pravidl√°
   - Upravte ≈°trukt√∫ru validatedData

5. BUSINESS LOGIKA:
   - Implementujte vlastn√∫ logiku v processBusinessLogic()
   - Upravte processEmployee() podƒæa potrieb
   - Pridajte ƒèal≈°ie pomocn√© funkcie

6. TELEGRAM:
   - Upravte createTelegramMessage() pre vlastn√Ω form√°t
   - Zme≈àte inline keyboard tlaƒçidl√°
   - Nastavte spr√°vne callback_data

7. TESTOVANIE:
   - Otestujte v≈°etky scen√°re
   - Skontrolujte error handling
   - Overte Telegram notifik√°cie

TIPY:
- Pou≈æ√≠vajte utils.addDebug() pre logovanie
- V≈ædy wrapujte do try-catch blokov
- Validujte v≈°etky vstupy
- Pou≈æ√≠vajte utils.safeGet/safeSet pre bezpeƒçn√Ω pr√≠stup
- Testujte na r√¥znych typoch d√°t

PRE VIAC INFORM√ÅCI√ç:
Pozri Memento-Framework-Manual.md v repozit√°ri
*/