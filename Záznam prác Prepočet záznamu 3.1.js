// ==============================================
// MEMENTO DATABASE - Z√ÅZNAM PR√ÅC PREPOƒåET Z√ÅZNAMU
// Verzia: 3.1 | D√°tum: 11.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Z√°znam pr√°c | Trigger: Before Save
// ==============================================
// ‚úÖ NOV√â v3.1:
//    - Vyu≈æitie MementoUtils kni≈ænice pre v≈°etky utility funkcie
//    - ƒåistej≈°√≠ k√≥d bez duplicitn√Ωch funkci√≠
//    - Profesion√°lna ≈°trukt√∫ra podƒæa vzoru Doch√°dzka 3.1
//    - SPR√ÅVNA SYNTAX pre setAttr cez MementoUtils
//    - Robustn√Ω error handling cez MementoUtils
// ‚úÖ FUNKCIONALITY:
//    - Zaokr√∫hƒæovanie ƒçasov Od/Do(Dp) na 15 min√∫t
//    - V√Ωpoƒçet pracovnej doby a odpracovan√Ωch hod√≠n
//    - Automatick√© hƒæadanie sadzieb zamestnancov
//    - HZS spracovanie s auto-linkovan√≠m defaults
//    - V√Ωkaz pr√°c linksFrom spracovanie
//    - Info z√°znamy pre audit trail
// ==============================================

var CONFIG = {
    debug: true,
    version: "3.1",
    scriptName: "Z√°znam pr√°c Prepoƒçet",
    
    // N√°zvy pol√≠ - Z√°znam pr√°c
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        od: "Od",
        do: "Do",  // V knowledge base je "Dp", ale v praxi sa pou≈æ√≠va "Do"
        zakazka: "Z√°kazka",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        mzdoveNaklady: "Mzdov√© n√°klady",
        hodinovaZuctovacia: "Hodinov√° z√∫ƒçtovacia sadzba",
        sumaHZS: "Suma HZS",
        vykonanePrace: "Vykonan√© pr√°ce",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy atrib√∫tov pre zamestnancov
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        mzdoveNaklady: "mzdov√© n√°klady"
    },
    
    // N√°zvy atrib√∫tov pre HZS
    hzsAttributes: {
        cena: "cena"
    },
    
    // N√°zvy atrib√∫tov pre V√Ωkaz pr√°c
    vykazAttributes: {
        vykonanePrace: "vykonan√© pr√°ce",
        pocetHodin: "poƒçet hod√≠n",
        uctoovanaSadzba: "√∫ƒçtovan√° sadzba",
        cenaCelkom: "cena celkom"
    },
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov",
        cennikPrac: "Cenn√≠k pr√°c",
        cenyPrac: "ceny pr√°c",
        defaulty: "ASISTANTO Defaults",
        vykazPrac: "V√Ωkaz pr√°c"
    },
    
    // Polia v kni≈ænici sadzby zamestnancov
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    // Polia v kni≈ænici ceny pr√°c
    cenyFields: {
        praca: "Pr√°ca",
        platnostOd: "Platnos≈• od",
        cena: "Cena"
    },
    
    // Polia v kni≈ænici ASISTANTO Defaults
    defaultsFields: {
        defaultHZS: "Default HZS"
    },
    
    // Polia v kni≈ænici V√Ωkaz pr√°c
    vykazFields: {
        praceHZS: "Pr√°ce HZS",
        zakazka: "Z√°kazka"
    },
    
    // Emoji pre lep≈°iu ƒçitateƒænos≈• logov
    icons: {
        start: "üöÄ",
        step: "üìã",
        success: "‚úÖ",
        error: "üí•",
        warning: "‚ö†Ô∏è",
        money: "üí∞",
        time: "‚è±Ô∏è",
        person: "üë§",
        info: "‚ÑπÔ∏è",
        work: "üîß",
        link: "üîó",
        calculate: "üßÆ"
    }
};

// Glob√°lne premenn√©
var currentEntry = null;

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

try {
    currentEntry = entry();
} catch (e) {
    // Ak zlyh√° z√≠skanie entry, nem√¥≈æeme pokraƒçova≈•
    message("‚ùå Kritick√° chyba: Nemo≈æno z√≠ska≈• aktu√°lny z√°znam");
}

// ==============================================
// POMOCN√â FUNKCIE PRE SADZBY A CENY
// ==============================================

function findValidSalary(zamestnanecObject, datum) {
    if (!zamestnanecObject || !datum) {
        MementoUtils.addError("Neplatn√© parametre pre hƒæadanie sadzby", "findValidSalary");
        return 0;
    }
    
    MementoUtils.addDebug("üîç Hƒæad√°m sadzbu pre zamestnanca k d√°tumu: " + moment(datum).format("DD.MM.YYYY"));
    
    try {
        var sadzby = MementoUtils.safeLinksFrom(zamestnanecObject, CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            MementoUtils.addDebug(CONFIG.icons.warning + " ≈Ωiadne sadzby nen√°jden√©");
            return 0;
        }
        
        var platnaHodinovka = 0;
        var najnovsiDatum = null;
        
        for (var i = 0; i < sadzby.length; i++) {
            var sadzbaEntry = sadzby[i];
            var platnostOd = MementoUtils.safeGet(sadzbaEntry, CONFIG.sadzbyFields.platnostOd);
            var hodinovka = MementoUtils.safeGet(sadzbaEntry, CONFIG.sadzbyFields.sadzba, 0);
            
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    platnaHodinovka = hodinovka;
                }
            }
        }
        
        if (platnaHodinovka > 0) {
            MementoUtils.addDebug(CONFIG.icons.success + " Platn√° hodinovka: " + platnaHodinovka + " ‚Ç¨/h");
        } else {
            MementoUtils.addDebug(CONFIG.icons.warning + " ≈Ωiadna platn√° sadzba k d√°tumu");
        }
        
        return platnaHodinovka;
        
    } catch (error) {
        MementoUtils.addError("Chyba pri hƒæadan√≠ sadzby: " + error.toString(), "findValidSalary");
        return 0;
    }
}

function processEmployee(zamestnanec, index, pracovnaDobaHodiny, datum) {
    if (!zamestnanec) {
        MementoUtils.addError("Neplatn√Ω zamestnanec na poz√≠cii " + index, "processEmployee");
        return 0;
    }
    
    try {
        var nick = MementoUtils.safeGet(zamestnanec, "Nick", "Nezn√°my");
        var priezvisko = MementoUtils.safeGet(zamestnanec, "Priezvisko", "");
        MementoUtils.addDebug(CONFIG.icons.person + " Sprac√∫vam zamestnanca " + (index + 1) + ": " + nick + " (" + priezvisko + ")");
        
        // 1. N√°jdi hodinovku
        var aktualnaHodinovka = findValidSalary(zamestnanec, datum);
        
        // 2. Nastav atrib√∫ty - pou≈æ√≠vame MementoUtils pre spr√°vnu syntax
        MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.zamestnanci, index, CONFIG.attributes.odpracovane, pracovnaDobaHodiny);
        MementoUtils.addDebug("  " + CONFIG.icons.success + " Odpracovan√© nastaven√©: " + pracovnaDobaHodiny + "h");
        
        MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.zamestnanci, index, CONFIG.attributes.hodinovka, aktualnaHodinovka);
        MementoUtils.addDebug("  " + CONFIG.icons.success + " Hodinovka nastaven√°: " + aktualnaHodinovka + " ‚Ç¨/h");
        
        // 3. Vypoƒç√≠taj mzdov√© n√°klady
        var mzdoveNaklady = pracovnaDobaHodiny * aktualnaHodinovka;
        
        MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.zamestnanci, index, CONFIG.attributes.mzdoveNaklady, mzdoveNaklady);
        MementoUtils.addDebug("  " + CONFIG.icons.money + " Mzdov√© n√°klady: " + mzdoveNaklady.toFixed(2) + " ‚Ç¨");
        
        return mzdoveNaklady;
        
    } catch (error) {
        MementoUtils.addError("Chyba pri spracovan√≠ zamestnanca " + index + ": " + error.toString(), "processEmployee");
        return 0;
    }
}

function getDefaultHZS() {
    try {
        MementoUtils.addDebug(CONFIG.icons.link + " Hƒæad√°m default HZS v kni≈ænici ASISTANTO Defaults");
        
        var defaultsLib = MementoUtils.safeGetLibrary(CONFIG.libraries.defaulty);
        if (!defaultsLib) {
            MementoUtils.addError("Kni≈ænica ASISTANTO Defaults nen√°jden√°", "getDefaultHZS");
            return null;
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (defaultsEntries && defaultsEntries.length > 0) {
            var defaultEntry = defaultsEntries[0];
            var defaultHZS = MementoUtils.safeGet(defaultEntry, CONFIG.defaultsFields.defaultHZS);
            
            if (defaultHZS && defaultHZS.length > 0) {
                MementoUtils.addDebug(CONFIG.icons.success + " Default HZS n√°jden√©");
                return defaultHZS;
            }
        }
        
        MementoUtils.addDebug(CONFIG.icons.warning + " Default HZS nen√°jden√©");
        return null;
        
    } catch (error) {
        MementoUtils.addError("Chyba pri z√≠skavan√≠ default HZS: " + error.toString(), "getDefaultHZS");
        return null;
    }
}

function getHZSPrice(hzsZaznam, datum) {
    if (!hzsZaznam || !datum) {
        return 0;
    }
    
    try {
        // Najprv sk√∫s n√°js≈• cenu v linksFrom "ceny pr√°c"
        var ceny = MementoUtils.safeLinksFrom(hzsZaznam, CONFIG.libraries.cenyPrac, CONFIG.cenyFields.praca);
        
        if (ceny && ceny.length > 0) {
            MementoUtils.addDebug("  Na≈°iel som " + ceny.length + " historick√Ωch cien");
            
            var platnaCena = 0;
            var najnovsiDatum = null;
            
            for (var i = 0; i < ceny.length; i++) {
                var cenaEntry = ceny[i];
                var platnostOd = MementoUtils.safeGet(cenaEntry, CONFIG.cenyFields.platnostOd);
                var cena = MementoUtils.safeGet(cenaEntry, CONFIG.cenyFields.cena, 0);
                
                if (platnostOd && cena && platnostOd <= datum) {
                    if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                        najnovsiDatum = platnostOd;
                        platnaCena = cena;
                    }
                }
            }
            
            if (platnaCena > 0) {
                MementoUtils.addDebug("  " + CONFIG.icons.success + " Platn√° historick√° cena: " + platnaCena + " ‚Ç¨");
                return platnaCena;
            }
        }
        
        // Ak nen√°jde historick√∫ cenu, pou≈æi priamu cenu z Cenn√≠ka pr√°c
        var cenaBezDPH = MementoUtils.safeGet(hzsZaznam, "Cena bez DPH", 0);
        if (cenaBezDPH) {
            MementoUtils.addDebug("  Pou≈æ√≠vam priamu cenu z Cenn√≠ka pr√°c: " + cenaBezDPH + " ‚Ç¨");
            return cenaBezDPH;
        }
        
        MementoUtils.addDebug("  " + CONFIG.icons.warning + " ≈Ωiadna cena nen√°jden√°");
        return 0;
        
    } catch (error) {
        MementoUtils.addError("Chyba pri z√≠skavan√≠ HZS ceny: " + error.toString(), "getHZSPrice");
        return 0;
    }
}

function processVykazPrac(zakazka, currentEntry, hzsCena, odpracovaneHodiny) {
    if (!zakazka) {
        MementoUtils.addDebug(CONFIG.icons.warning + " ≈Ωiadna z√°kazka, preskakujem v√Ωkaz pr√°c");
        return;
    }
    
    try {
        MementoUtils.addDebug(CONFIG.icons.link + " KROK 8: Kontrolujem v√Ωkaz pr√°c pre z√°kazku...");
        
        // Z√≠skaj v√Ωkazy pr√°c linknut√© na z√°kazku
        var vykazyPrac = MementoUtils.safeLinksFrom(zakazka, CONFIG.libraries.vykazPrac, CONFIG.vykazFields.zakazka);
        
        if (!vykazyPrac || vykazyPrac.length === 0) {
            MementoUtils.addDebug("  ≈Ωiadny v√Ωkaz pr√°c nen√°jden√Ω pre t√∫to z√°kazku");
            return;
        }
        
        MementoUtils.addDebug("  Na≈°iel som " + vykazyPrac.length + " v√Ωkaz(ov) pr√°c");
        
        // Spracuj prv√Ω v√Ωkaz (zvyƒçajne je len jeden na z√°kazku)
        var vykaz = vykazyPrac[0];
        
        // Pridaj link na aktu√°lny z√°znam pr√°c
        var existujucePrace = MementoUtils.safeGet(vykaz, CONFIG.vykazFields.praceHZS, []);
        existujucePrace.push(currentEntry);
        MementoUtils.safeSet(vykaz, CONFIG.vykazFields.praceHZS, existujucePrace);
        
        // Nastav atrib√∫ty linku
        var linkIndex = existujucePrace.length - 1;
        
        // Vykonan√© pr√°ce
        var vykonanePrace = MementoUtils.safeGet(currentEntry, CONFIG.fields.vykonanePrace, "");
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.vykonanePrace, vykonanePrace);
        
        // Poƒçet hod√≠n
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.pocetHodin, odpracovaneHodiny);
        
        // √öƒçtovan√° sadzba
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.uctoovanaSadzba, hzsCena);
        
        // Cena celkom
        var cenaCelkom = odpracovaneHodiny * hzsCena;
        MementoUtils.safeSetAttr(vykaz, CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.cenaCelkom, cenaCelkom);
        
        MementoUtils.addDebug("  " + CONFIG.icons.success + " V√Ωkaz pr√°c aktualizovan√Ω:");
        MementoUtils.addDebug("    ‚Ä¢ Vykonan√© pr√°ce: " + (vykonanePrace ? vykonanePrace.substring(0, 50) + "..." : ""));
        MementoUtils.addDebug("    ‚Ä¢ Poƒçet hod√≠n: " + odpracovaneHodiny + "h");
        MementoUtils.addDebug("    ‚Ä¢ √öƒçtovan√° sadzba: " + hzsCena + " ‚Ç¨");
        MementoUtils.addDebug("    ‚Ä¢ Cena celkom: " + cenaCelkom.toFixed(2) + " ‚Ç¨");
        
    } catch (error) {
        MementoUtils.addError("Chyba pri spracovan√≠ v√Ωkazu pr√°c: " + error.toString(), "processVykazPrac");
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function hlavnaFunkcia() {
    MementoUtils.addDebug(CONFIG.icons.start + " === ≈†TART PREPOƒåTU Z√ÅZNAMU PR√ÅC v" + CONFIG.version + " ===");
    MementoUtils.addDebug("üì± Pou≈æ√≠vam MementoUtils kni≈ænicu");
    
    // Premenn√© pre sledovanie √∫spe≈°nosti krokov
    var step1Success = false;
    var step2Success = false;
    var step3Success = false;
    var step4Success = false;
    var step5Success = false;
    var step6Success = false;
    var step7Success = false;
    var step8Success = false;
    var step9Success = false;
    
    // Z√°kladn√© premenn√©
    var datum = null;
    var odRaw = null;
    var doRaw = null;
    var odRounded = null;
    var doRounded = null;
    var zamestnanci = null;
    var zakazka = null;
    var pracovnaDobaHodiny = 0;
    var pocetPracovnikov = 0;
    var odpracovaneTotal = 0;
    var celkoveMzdy = 0;
    var hzsPole = null;
    var hzsCena = 0;
    var sumaHZS = 0;
    
    // KROK 1: Naƒç√≠tanie a valid√°cia vstupn√Ωch d√°t
    try {
        MementoUtils.addDebug(CONFIG.icons.step + " KROK 1: Naƒç√≠tavam vstupn√© d√°ta...");
        
        datum = MementoUtils.safeGet(currentEntry, CONFIG.fields.datum);
        odRaw = MementoUtils.safeGet(currentEntry, CONFIG.fields.od);
        
        // Sk√∫s najprv "Do", ak nefunguje, sk√∫s "Dp"
        doRaw = MementoUtils.safeGet(currentEntry, CONFIG.fields.do);
        if (!doRaw) {
            doRaw = MementoUtils.safeGet(currentEntry, "Dp");
            if (doRaw) {
                MementoUtils.addDebug("  üìù Pozn√°mka: Pole 'Dp' pou≈æit√© namiesto 'Do'");
            }
        }
        
        zamestnanci = MementoUtils.safeGet(currentEntry, CONFIG.fields.zamestnanci, []);
        zakazka = MementoUtils.safeGet(currentEntry, CONFIG.fields.zakazka);
        
        MementoUtils.addDebug("  üìÖ D√°tum: " + (datum ? moment(datum).format("DD.MM.YYYY") : "NULL"));
        MementoUtils.addDebug("  üïê Od (raw): " + MementoUtils.formatTime(odRaw));
        MementoUtils.addDebug("  üïê Do (raw): " + MementoUtils.formatTime(doRaw));
        MementoUtils.addDebug("  " + CONFIG.icons.person + " Zamestnanci: " + zamestnanci.length);
        MementoUtils.addDebug("  üì¶ Z√°kazka: " + (zakazka && zakazka.length > 0 ? "√ÅNO" : "NIE"));
        
        // Valid√°cia
        if (!datum || !odRaw || !doRaw || zamestnanci.length === 0) {
            MementoUtils.addError("Ch√Ωbaj√∫ povinn√© √∫daje", "validacia");
            step1Success = false;
        } else {
            MementoUtils.addDebug(CONFIG.icons.success + " Vstupn√© d√°ta OK");
            step1Success = true;
        }
        
    } catch (inputError) {
        MementoUtils.addError("Chyba pri naƒç√≠tan√≠ vstupn√Ωch d√°t: " + inputError.toString(), "input");
        step1Success = false;
    }
    
    // KROK 2: Zaokr√∫hƒæovanie ƒçasov
    if (step1Success) {
        try {
            MementoUtils.addDebug(CONFIG.icons.time + " KROK 2: Zaokr√∫hƒæujem ƒçasy na 15 min√∫t...");
            
            odRounded = MementoUtils.roundToQuarter(odRaw);
            doRounded = MementoUtils.roundToQuarter(doRaw);
            
            if (!odRounded || !doRounded) {
                MementoUtils.addError("Zaokr√∫hƒæovanie ƒçasov zlyhalo", "rounding");
                step2Success = false;
            } else {
                MementoUtils.addDebug("  P√¥vodne: " + MementoUtils.formatTime(odRaw) + " - " + MementoUtils.formatTime(doRaw));
                MementoUtils.addDebug("  Zaokr√∫hlen√©: " + MementoUtils.formatTime(odRounded) + " - " + MementoUtils.formatTime(doRounded));
                
                MementoUtils.safeSet(currentEntry, CONFIG.fields.od, odRounded);
                
                // Ulo≈æ do spr√°vneho poƒæa
                var doSaved = MementoUtils.safeSet(currentEntry, CONFIG.fields.do, doRounded);
                if (!doSaved) {
                    MementoUtils.safeSet(currentEntry, "Dp", doRounded);
                    MementoUtils.addDebug("  üìù Pou≈æit√© pole 'Dp' pre ulo≈æenie ƒçasu Do");
                }
                
                MementoUtils.addDebug(CONFIG.icons.success + " ƒåasy zaokr√∫hlen√© a ulo≈æen√©");
                step2Success = true;
            }
        } catch (roundError) {
            MementoUtils.addError("Chyba pri zaokr√∫hƒæovan√≠: " + roundError.toString(), "round");
            step2Success = false;
        }
    }
    
    // KROK 3: V√Ωpoƒçet pracovnej doby
    if (step2Success) {
        try {
            MementoUtils.addDebug(CONFIG.icons.calculate + " KROK 3: Poƒç√≠tam pracovn√∫ dobu...");
            
            pracovnaDobaHodiny = MementoUtils.calculateHours(odRounded, doRounded);
            
            if (pracovnaDobaHodiny <= 0 || pracovnaDobaHodiny > 24) {
                MementoUtils.addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny, "pracovna_doba");
                step3Success = false;
            } else {
                MementoUtils.addDebug("  " + CONFIG.icons.time + " Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
                MementoUtils.safeSet(currentEntry, CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
                MementoUtils.addDebug("  üíæ Pracovn√° doba ulo≈æen√°");
                step3Success = true;
            }
            
        } catch (calcError) {
            MementoUtils.addError("Chyba pri v√Ωpoƒçte pracovnej doby: " + calcError.toString(), "calc");
            step3Success = false;
        }
    }
    
    // KROK 4: Poƒçet pracovn√≠kov a odpracovan√©
    if (step3Success) {
        try {
            MementoUtils.addDebug(CONFIG.icons.step + " KROK 4: Poƒç√≠tam odpracovan√© hodiny...");
            
            pocetPracovnikov = zamestnanci.length;
            odpracovaneTotal = pracovnaDobaHodiny * pocetPracovnikov;
            
            MementoUtils.addDebug("  " + CONFIG.icons.person + " Poƒçet pracovn√≠kov: " + pocetPracovnikov);
            MementoUtils.addDebug("  üìä Odpracovan√©: " + pracovnaDobaHodiny + "h √ó " + pocetPracovnikov + " = " + odpracovaneTotal + "h");
            
            MementoUtils.safeSet(currentEntry, CONFIG.fields.pocetPracovnikov, pocetPracovnikov);
            MementoUtils.safeSet(currentEntry, CONFIG.fields.odpracovane, odpracovaneTotal);
            
            MementoUtils.addDebug(CONFIG.icons.success + " Poƒçty ulo≈æen√©");
            step4Success = true;
            
        } catch (countError) {
            MementoUtils.addError("Chyba pri poƒç√≠tan√≠: " + countError.toString(), "count");
            step4Success = false;
        }
    }
    
    // KROK 5: Spracovanie zamestnancov a v√Ωpoƒçet miezd
    if (step4Success) {
        try {
            MementoUtils.addDebug(CONFIG.icons.money + " KROK 5: Sprac√∫vam zamestnancov a poƒç√≠tam mzdy...");
            
            celkoveMzdy = 0;
            var spracovaniUspesni = 0;
            
            for (var i = 0; i < zamestnanci.length; i++) {
                var mzda = processEmployee(zamestnanci[i], i, pracovnaDobaHodiny, datum);
                celkoveMzdy += mzda;
                if (mzda > 0) {
                    spracovaniUspesni++;
                }
            }
            
            MementoUtils.addDebug("üìä S√öHRN ZAMESTNANCOV:");
            MementoUtils.addDebug("  ‚Ä¢ Spracovan√≠: " + spracovaniUspesni + "/" + zamestnanci.length);
            MementoUtils.addDebug("  ‚Ä¢ Celkov√© mzdy: " + celkoveMzdy.toFixed(2) + " ‚Ç¨");
            
            MementoUtils.safeSet(currentEntry, CONFIG.fields.mzdoveNaklady, celkoveMzdy);
            
            if (spracovaniUspesni > 0) {
                MementoUtils.addDebug(CONFIG.icons.success + " Mzdy vypoƒç√≠tan√©");
                step5Success = true;
            } else {
                MementoUtils.addError("≈Ωiadny zamestnanec nebol √∫spe≈°ne spracovan√Ω", "mzdy");
                step5Success = false;
            }
            
        } catch (mzdyError) {
            MementoUtils.addError("Chyba pri v√Ωpoƒçte miezd: " + mzdyError.toString(), "mzdy");
            step5Success = false;
        }
    }
    
    // KROK 6: HZS spracovanie s auto-linkovan√≠m
    if (step5Success) {
        try {
            MementoUtils.addDebug(CONFIG.icons.money + " KROK 6: Sprac√∫vam HZS...");
            
            hzsPole = MementoUtils.safeGet(currentEntry, CONFIG.fields.hodinovaZuctovacia);
            
            // Ak nie je HZS vyplnen√©, sk√∫s auto-linkova≈• default
            if (!hzsPole || hzsPole.length === 0) {
                MementoUtils.addDebug("  " + CONFIG.icons.warning + " HZS nie je vyplnen√©, hƒæad√°m default...");
                
                var defaultHZS = getDefaultHZS();
                if (defaultHZS) {
                    MementoUtils.safeSet(currentEntry, CONFIG.fields.hodinovaZuctovacia, defaultHZS);
                    MementoUtils.addDebug("  " + CONFIG.icons.success + " Default HZS nastaven√©");
                    
                    // D√îLE≈ΩIT√â: Znovu naƒç√≠taj pole po linkovan√≠
                    hzsPole = MementoUtils.safeGet(currentEntry, CONFIG.fields.hodinovaZuctovacia);
                } else {
                    MementoUtils.addDebug("  " + CONFIG.icons.warning + " Default HZS nen√°jden√©, pokraƒçujem bez HZS");
                }
            }
            
            // Ak m√°me HZS, spracuj ho
            if (hzsPole && hzsPole.length > 0) {
                var hzsZaznam = hzsPole[0];
                hzsCena = getHZSPrice(hzsZaznam, datum);
                
                if (hzsCena > 0) {
                    // Nastav atrib√∫t cena
                    MementoUtils.safeSetAttr(currentEntry, CONFIG.fields.hodinovaZuctovacia, 0, CONFIG.hzsAttributes.cena, hzsCena);
                    MementoUtils.addDebug("  " + CONFIG.icons.success + " Atrib√∫t cena nastaven√Ω: " + hzsCena + " ‚Ç¨");
                    
                    // Vypoƒç√≠taj sumu HZS
                    sumaHZS = odpracovaneTotal * hzsCena;
                    MementoUtils.safeSet(currentEntry, CONFIG.fields.sumaHZS, sumaHZS);
                    
                    MementoUtils.addDebug("  " + CONFIG.icons.calculate + " Suma HZS: " + odpracovaneTotal + "h √ó " + hzsCena + "‚Ç¨ = " + sumaHZS.toFixed(2) + " ‚Ç¨");
                    step6Success = true;
                } else {
                    MementoUtils.addDebug("  " + CONFIG.icons.warning + " Cena HZS je 0 alebo nen√°jden√°");
                    step6Success = true; // Nie je to kritick√° chyba
                }
            } else {
                MementoUtils.addDebug("  " + CONFIG.icons.info + " ≈Ωiadne HZS, preskakujem v√Ωpoƒçet");
                step6Success = true; // Nie je to kritick√° chyba
            }
            
        } catch (hzsError) {
            MementoUtils.addError("Chyba pri spracovan√≠ HZS: " + hzsError.toString(), "hzs");
            step6Success = true; // Nie je to kritick√° chyba
        }
    }
    
    // KROK 7: V√Ωkaz pr√°c spracovanie
    if (step6Success && zakazka && zakazka.length > 0) {
        try {
            processVykazPrac(zakazka[0], currentEntry, hzsCena, odpracovaneTotal);
            step7Success = true;
        } catch (vykazError) {
            MementoUtils.addError("Chyba pri spracovan√≠ v√Ωkazu pr√°c: " + vykazError.toString(), "vykaz");
            step7Success = true; // Nie je to kritick√° chyba
        }
    } else {
        step7Success = true; // Nie je z√°kazka, tak OK
    }
    
    // KROK 8: Vytvorenie info z√°znamu
    if (step1Success && step2Success && step3Success) {
        try {
            MementoUtils.addDebug(CONFIG.icons.info + " KROK 9: Vytv√°ram info z√°znam...");
            
            var infoMessage = CONFIG.icons.work + " Z√ÅZNAM PR√ÅC - AUTOMATICK√ù PREPOƒåET\n" +
                            "=====================================\n\n" +
                            "üìÖ D√°tum: " + moment(datum).format("DD.MM.YYYY") + "\n" +
                            CONFIG.icons.time + " Pracovn√Ω ƒças: " + MementoUtils.formatTime(odRounded) + " - " + MementoUtils.formatTime(doRounded) + "\n" +
                            CONFIG.icons.time + " Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n\n";
            
            if (zakazka && zakazka.length > 0) {
                var zakazkaObj = zakazka[0];
                var cisloZakazky = MementoUtils.safeGet(zakazkaObj, "ƒå√≠slo", "");
                var nazovZakazky = MementoUtils.safeGet(zakazkaObj, "N√°zov z√°znamu", "");
                infoMessage += "üì¶ Z√°kazka: " + cisloZakazky + " - " + nazovZakazky + "\n";
            }
            
            infoMessage += "\n" + CONFIG.icons.person + " ZAMESTNANCI:\n" +
                         "‚Ä¢ Poƒçet: " + pocetPracovnikov + " os√¥b\n" +
                         "‚Ä¢ Odpracovan√© spolu: " + odpracovaneTotal + " hod√≠n\n\n" +
                         CONFIG.icons.money + " MZDOV√â N√ÅKLADY:\n" +
                         "‚Ä¢ Celkom: " + celkoveMzdy.toFixed(2) + " ‚Ç¨\n" +
                         "‚Ä¢ Priemer na osobu: " + (pocetPracovnikov > 0 ? (celkoveMzdy / pocetPracovnikov).toFixed(2) : "0") + " ‚Ç¨\n";
            
            if (hzsCena > 0) {
                infoMessage += "\nüíº HZS KALKUL√ÅCIA:\n" +
                             "‚Ä¢ Hodinov√° sadzba: " + hzsCena + " ‚Ç¨/h\n" +
                             "‚Ä¢ Odpracovan√©: " + odpracovaneTotal + " h\n" +
                             "‚Ä¢ Suma HZS: " + sumaHZS.toFixed(2) + " ‚Ç¨\n";
            }
            
            infoMessage += "\n" + CONFIG.icons.work + " TECHNICK√â INFO:\n" +
                         "‚Ä¢ Script verzia: " + CONFIG.version + "\n" +
                         "‚Ä¢ ƒåas generovania: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n" +
                         "‚Ä¢ Trigger: Before Save\n" +
                         "‚Ä¢ MementoUtils: Akt√≠vne\n\n" +
                         "üìù Pre detaily pozri Debug_Log";
            
            MementoUtils.safeSet(currentEntry, CONFIG.fields.info, infoMessage);
            MementoUtils.addDebug(CONFIG.icons.success + " Info z√°znam vytvoren√Ω");
            step8Success = true;
            
        } catch (infoError) {
            MementoUtils.addError("Chyba pri vytv√°ran√≠ info z√°znamu: " + infoError.toString(), "info");
            step8Success = false;
        }
    }
    
    // Fin√°lne vyhodnotenie
    var globalSuccess = step1Success && step2Success && step3Success && 
                       step4Success && step5Success;
    
    if (globalSuccess) {
        MementoUtils.addDebug("üéâ === PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE! ===");
    } else {
        MementoUtils.addDebug(CONFIG.icons.error + " === PREPOƒåET ZLYHAL ===");
        MementoUtils.addDebug("Kroky: 1=" + step1Success + " 2=" + step2Success + " 3=" + step3Success + 
                " 4=" + step4Success + " 5=" + step5Success + " 6=" + step6Success + 
                " 7=" + step7Success + " 8=" + step8Success);
    }
    
    return globalSuccess;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    MementoUtils.addDebug("üé¨ Inicializ√°cia " + CONFIG.scriptName + " v" + CONFIG.version);
    MementoUtils.addDebug("üìö MementoUtils kni≈ænica dostupn√°");
    
    // Kontrola existencie currentEntry
    if (!currentEntry) {
        MementoUtils.addError("KRITICK√Å CHYBA: currentEntry neexistuje", "startup");
        message(CONFIG.icons.error + " KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
    } else {
        // Spustenie hlavnej funkcie
        var result = hlavnaFunkcia();
        
        // Ulo≈æ logy cez MementoUtils
        MementoUtils.saveLogs(currentEntry);
        
        // Informuj pou≈æ√≠vateƒæa
        if (result) {
            message(CONFIG.icons.success + " Z√°znam pr√°c prepoƒç√≠tan√Ω √∫spe≈°ne!\n\n" +
                   CONFIG.icons.time + " ƒåasy zaokr√∫hlen√© na 15 min\n" +
                   "üìä Pracovn√° doba: " + MementoUtils.safeGet(currentEntry, CONFIG.fields.pracovnaDoba, 0) + " h\n" +
                   CONFIG.icons.person + " Zamestnanci: " + MementoUtils.safeGet(currentEntry, CONFIG.fields.pocetPracovnikov, 0) + " os√¥b\n" +
                   CONFIG.icons.money + " Mzdov√© n√°klady: " + MementoUtils.safeGet(currentEntry, CONFIG.fields.mzdoveNaklady, 0) + " ‚Ç¨\n" +
                   "üíº Suma HZS: " + MementoUtils.safeGet(currentEntry, CONFIG.fields.sumaHZS, 0) + " ‚Ç¨\n\n" +
                   CONFIG.icons.info + " Detaily v poli 'info'");
        } else {
            message(CONFIG.icons.error + " Prepoƒçet z√°znamu pr√°c zlyhal!\n\n" +
                   "üîç Skontroluj Error_Log pre detaily\n" +
                   CONFIG.icons.step + " Over vstupn√© d√°ta a sk√∫s znovu");
        }
    }
    
} catch (kritickachyba) {
    // Posledn√° z√°chrana
    try {
        MementoUtils.addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "critical");
        MementoUtils.saveLogs(currentEntry);
        message(CONFIG.icons.error + " KRITICK√Å CHYBA!\n\nScript zlyhal. Pozri Error_Log.");
    } catch (finalError) {
        message(CONFIG.icons.error + " FAT√ÅLNA CHYBA!\n\n" + kritickachyba.toString());
    }
}