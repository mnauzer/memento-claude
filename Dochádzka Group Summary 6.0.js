// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA GROUP SUMMARY
// Verzia: 6.0 | D√°tum: August 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// ‚úÖ KOMPLETN√ù REFAKTORING v6.0:
//    - Pln√© vyu≈æitie MementoUtils Framework
//    - MementoConfig pre v≈°etky nastavenia
//    - MementoConfigAdapter pre kompatibilitu
//    - ≈Ωiadne fallbacky ani duplicity
//    - ƒåist√Ω modul√°rny k√≥d
// ==============================================
// üîó VY≈ΩADOVAN√â KNI≈ΩNICE:
//    - MementoUtils (agreg√°tor)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoConfig (konfigur√°cia)
//    - MementoConfigAdapter (adapter)
//    - MementoTelegram (telegram funkcie)
//    - MementoBusiness (business logika)
//    - ASISTANTONotifications (notifik√°cie)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA A KONTROLA Z√ÅVISLOST√ç
// ==============================================

var currentEntry = entry();
var utils = null;
var config = null;
var CONFIG = null;
var notifHelper = null;
var telegram = null;

/**
 * Inicializuje v≈°etky potrebn√© moduly
 */
function initializeModules() {
    var initReport = "=== INICIALIZ√ÅCIA MODULOV ===\n";
    
    // 1. MementoUtils - KRITICK√â
    try {
        if (typeof MementoUtils !== 'undefined') {
            utils = MementoUtils;
            initReport += "‚úÖ MementoUtils v" + utils.version + " naƒç√≠tan√©\n";
            
            // Skontroluj naƒç√≠tan√© moduly
            var loadedModules = utils.getLoadedModules();
            initReport += "  Naƒç√≠tan√© moduly: " + loadedModules.map(function(m) { 
                return m.name + " v" + m.version; 
            }).join(", ") + "\n";
        } else {
            throw new Error("MementoUtils nie je definovan√©!");
        }
    } catch(e) {
        currentEntry.set("Error_Log", "‚ùå KRITICK√Å CHYBA: " + e.toString() + "\nScript nem√¥≈æe pokraƒçova≈•!");
        message("Ch√Ωba MementoUtils kni≈ænica!\n" + e.toString());
        cancel();
    }
    
    // 2. MementoConfig a Adapter
    try {
        if (typeof MementoConfig !== 'undefined') {
            config = MementoConfig;
            config.init();
            initReport += "‚úÖ MementoConfig v" + config.version + " inicializovan√©\n";
        } else {
            utils.addError(currentEntry, "MementoConfig nie je dostupn√Ω - pou≈æijem lok√°lnu konfigur√°ciu", "init");
        }
        
        if (typeof MementoConfigAdapter !== 'undefined') {
            CONFIG = MementoConfigAdapter.getAdapter('attendance');
            initReport += "‚úÖ MementoConfigAdapter - konfigur√°cia naƒç√≠tan√°\n";
        } else if (config) {
            // Priamy pr√≠stup k MementoConfig
            var cfg = config.getConfig('attendance');
            CONFIG = {
                version: "6.0",
                scriptName: "Doch√°dzka Group Summary",
                fields: cfg.fieldMappings.attendance,
                attributes: cfg.fieldMappings.attendanceAttributes,
                defaultsFields: cfg.fieldMappings.defaults,
                telegramGroupsFields: cfg.fieldMappings.telegramGroups || {
                    chatId: "Chat ID",
                    threadId: "Thread ID",
                    threadName: "N√°zov t√©my",
                    groupName: "N√°zov skupiny"
                },
                libraries: cfg.libraries
            };
            initReport += "‚úÖ Konfigur√°cia naƒç√≠tan√° priamo z MementoConfig\n";
        } else {
            // Lok√°lna konfigur√°cia ako posledn√° mo≈ænos≈•
            CONFIG = getLocalConfig();
            utils.addError(currentEntry, "Pou≈æ√≠vam lok√°lnu konfigur√°ciu - MementoConfig/Adapter nie s√∫ dostupn√©", "init");
        }
    } catch(e) {
        utils.addError(currentEntry, "Chyba pri naƒç√≠tan√≠ konfigur√°cie: " + e.toString(), "init");
        CONFIG = getLocalConfig();
    }
    
    // 3. ASISTANTONotifications
    try {
        if (typeof ASISTANTONotifications !== 'undefined') {
            notifHelper = ASISTANTONotifications;
            initReport += "‚úÖ ASISTANTONotifications v" + (notifHelper.version || "?") + " naƒç√≠tan√©\n";
        } else {
            utils.addError(currentEntry, "ASISTANTONotifications nie je dostupn√Ω", "init");
        }
    } catch(e) {
        utils.addError(currentEntry, "Chyba pri naƒç√≠tan√≠ ASISTANTONotifications: " + e.toString(), "init");
    }
    
    // 4. Kontrola Telegram modulu
    if (utils.sendTelegramMessage) {
        telegram = {
            sendMessage: utils.sendTelegramMessage,
            getTelegramGroup: utils.getTelegramGroup
        };
        initReport += "‚úÖ Telegram funkcie dostupn√© cez MementoUtils\n";
    } else {
        utils.addError(currentEntry, "MementoTelegram modul nie je naƒç√≠tan√Ω v MementoUtils", "init");
    }
    
    // Ulo≈æ inicializaƒçn√Ω report
    utils.addDebug(currentEntry, initReport);
    
    return true;
}

/**
 * Lok√°lna konfigur√°cia (fallback)
 */
function getLocalConfig() {
    return {
        version: "6.0",
        scriptName: "Doch√°dzka Group Summary",
        
        libraries: {
            defaults: "ASISTANTO Defaults",
            notifications: "Notifications",
            telegramGroups: "Telegram Groups"
        },
        
        fields: {
            zamestnanci: "Zamestnanci",
            datum: "D√°tum",
            prichod: "Pr√≠chod",
            odchod: "Odchod",
            pracovnaDoba: "Pracovn√° doba",
            mzdoveNaklady: "Mzdov√© n√°klady",
            pocetPracovnikov: "Poƒçet pracovn√≠kov",
            odpracovane: "Odpracovan√©",
            poznamka: "Pozn√°mka",
            notifikacie: "Notifik√°cie"
        },
        
        attributes: {
            odpracovane: "odpracovan√©",
            dennaMzda: "denn√° mzda",
            hodinovka: "hodinovka"
        },
        
        defaultsFields: {
            dochadzkaSkupinoveNotifikacie: "Doch√°dzka skupinov√© notifik√°cie",
            telegramSkupinaDochadzky: "Telegram skupina doch√°dzky",
            telegramDochadzkaId: "Telegram Doch√°dzka ID",
            nazovFirmy: "N√°zov firmy",
            zahrnutFinancneUdaje: "Zahrn√∫≈• finanƒçn√© √∫daje"
        },
        
        telegramGroupsFields: {
            chatId: "Chat ID",
            threadId: "Thread ID",
            threadName: "N√°zov t√©my",
            groupName: "N√°zov skupiny"
        }
    };
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Inicializ√°cia
        if (!initializeModules()) {
            return;
        }
        
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "üìÖ D√°tum: " + utils.formatDate(currentEntry.field(CONFIG.fields.datum)));
        
        // 1. Vyƒçisti star√© notifik√°cie
        cleanupOldNotifications();
        
        // 2. Naƒç√≠taj nastavenia z ASISTANTO Defaults
        var settings = loadSettings();
        if (!settings) {
            utils.addError(currentEntry, "Nepodarilo sa naƒç√≠ta≈• nastavenia", CONFIG.scriptName);
            return;
        }
        
        // 3. Kontrola ƒçi s√∫ povolen√© skupinov√© notifik√°cie
        var enabled = settings.groupNotificationsEnabled;
        utils.addDebug(currentEntry, "üìß Skupinov√© notifik√°cie: " + (enabled ? "POVOLEN√â" : "VYPNUT√â"));
        
        if (!enabled) {
            utils.addInfo(currentEntry, "Skupinov√© notifik√°cie s√∫ vypnut√© v nastaveniach");
            return;
        }
        
        // 4. N√°jdi cieƒæov√∫ Telegram skupinu
        var targetGroup = findTargetGroup(settings);
        if (!targetGroup) {
            utils.addError(currentEntry, "Nie je nastaven√° cieƒæov√° Telegram skupina", CONFIG.scriptName);
            return;
        }
        
        utils.addDebug(currentEntry, "üìç Cieƒæov√° skupina: " + targetGroup.name);
        
        // 5. Z√≠skaj zamestnancov
        var zamestnanci = utils.safeGetLinks(currentEntry, CONFIG.fields.zamestnanci);
        if (!zamestnanci || zamestnanci.length === 0) {
            utils.addInfo(currentEntry, "≈Ωiadni zamestnanci v z√°zname");
            return;
        }
        
        utils.addDebug(currentEntry, "üë• Poƒçet zamestnancov: " + zamestnanci.length);
        
        // 6. Priprav s√∫hrnn√∫ spr√°vu
        var summaryMessage = prepareSummaryMessage(zamestnanci, settings);
        utils.addDebug(currentEntry, "üìù Spr√°va pripraven√° (" + summaryMessage.length + " znakov)");
        
        // 7. Vytvor notifik√°ciu
        var notification = createGroupNotification(summaryMessage, targetGroup, settings);
        
        if (notification) {
            // 8. Linkuj notifik√°ciu k doch√°dzke
            linkNotificationsToDochadzka([notification]);
            
            // 9. Zaloguj √∫spech
            utils.addInfo(currentEntry, "Skupinov√° notifik√°cia vytvoren√°", {
                notificationId: notification.field("ID"),
                skupina: targetGroup.name,
                pocetZamestnancov: zamestnanci.length,
                datum: utils.formatDate(currentEntry.field(CONFIG.fields.datum))
            });
            
            utils.addDebug(currentEntry, "‚úÖ === √öSPE≈†N√â DOKONƒåENIE ===");
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", CONFIG.scriptName);
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba: " + error.toString(), CONFIG.scriptName, error);
    }
}

// ==============================================
// KONFIGURAƒåN√â FUNKCIE
// ==============================================

/**
 * Naƒç√≠ta nastavenia z ASISTANTO Defaults
 */
function loadSettings() {
    try {
        var defaultsLib = CONFIG.libraries.defaults || CONFIG.libraries.core.defaults || "ASISTANTO Defaults";
        
        utils.addDebug(currentEntry, "üìã Naƒç√≠tavam nastavenia z '" + defaultsLib + "'");
        
        // Ak m√°me MementoConfig, pou≈æi spr√°vne n√°zvy pol√≠
        var fieldNames = {};
        if (config) {
            fieldNames = {
                groupEnabled: config.getFieldName('defaults', 'dochadzkaSkupinoveNotifikacie') || 
                             "Doch√°dzka skupinov√© notifik√°cie",
                groupLink: config.getFieldName('defaults', 'telegramSkupinaDochadzky') || 
                          "Telegram skupina doch√°dzky",
                legacyId: config.getFieldName('defaults', 'telegramDochadzkaId') || 
                         "Telegram Doch√°dzka ID",
                companyName: config.getFieldName('defaults', 'nazovFirmy') || 
                            "N√°zov firmy",
                includeFinancials: config.getFieldName('defaults', 'zahrnutFinancneUdaje') || 
                                  "Zahrn√∫≈• finanƒçn√© √∫daje"
            };
        } else {
            // Fallback na CONFIG.defaultsFields
            fieldNames = {
                groupEnabled: CONFIG.defaultsFields.dochadzkaSkupinoveNotifikacie,
                groupLink: CONFIG.defaultsFields.telegramSkupinaDochadzky,
                legacyId: CONFIG.defaultsFields.telegramDochadzkaId,
                companyName: CONFIG.defaultsFields.nazovFirmy,
                includeFinancials: CONFIG.defaultsFields.zahrnutFinancneUdaje
            };
        }
        
        return {
            groupNotificationsEnabled: utils.getSettings(defaultsLib, fieldNames.groupEnabled),
            telegramGroupLink: utils.getSettings(defaultsLib, fieldNames.groupLink),
            telegramGroupId: utils.getSettings(defaultsLib, fieldNames.legacyId),
            companyName: utils.getSettings(defaultsLib, fieldNames.companyName),
            includeFinancials: utils.getSettings(defaultsLib, fieldNames.includeFinancials)
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri naƒç√≠tan√≠ nastaven√≠: " + error.toString(), "loadSettings");
        return null;
    }
}

// ==============================================
// TELEGRAM FUNKCIE
// ==============================================

/**
 * N√°jde cieƒæov√∫ Telegram skupinu
 */
function findTargetGroup(settings) {
    try {
        var targetGroup = null;
        
        // Priorita 1: Link na skupinu (nov√Ω sp√¥sob)
        if (settings.telegramGroupLink && settings.telegramGroupLink.length > 0) {
            utils.addDebug(currentEntry, "üîó Kontrolujem linknut√∫ skupinu");
            targetGroup = getTargetGroupFromLink(settings.telegramGroupLink);
        }
        
        // Priorita 2: Textov√© ID (legacy sp√¥sob)
        if (!targetGroup && settings.telegramGroupId) {
            utils.addDebug(currentEntry, "üìù Pou≈æ√≠vam legacy text ID: " + settings.telegramGroupId);
            targetGroup = findTargetGroupByTextId(settings.telegramGroupId);
        }
        
        return targetGroup;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri hƒæadan√≠ cieƒæovej skupiny: " + error.toString(), "findTargetGroup");
        return null;
    }
}

/**
 * Z√≠ska skupinu z linknut√©ho z√°znamu
 */
function getTargetGroupFromLink(linkedGroup) {
    try {
        if (!linkedGroup || linkedGroup.length === 0) {
            utils.addDebug(currentEntry, "≈Ωiadna linknut√° skupina");
            return null;
        }
        
        var group = linkedGroup[0];
        
        // Pou≈æi MementoUtils safe funkcie
        var chatId = utils.safeGet(group, CONFIG.telegramGroupsFields.chatId, null);
        var threadId = utils.safeGet(group, CONFIG.telegramGroupsFields.threadId, null);
        var groupName = utils.safeGet(group, CONFIG.telegramGroupsFields.groupName, "");
        var threadName = utils.safeGet(group, CONFIG.telegramGroupsFields.threadName, "");
        
        if (!chatId) {
            utils.addError(currentEntry, "Linknut√° skupina nem√° Chat ID", "getTargetGroupFromLink");
            return null;
        }
        
        return {
            chatId: chatId,
            threadId: threadId,
            name: groupName || threadName || "Skupina",
            isThread: !!threadId,
            entries: group
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri ƒç√≠tan√≠ linknutej skupiny: " + error.toString(), "getTargetGroupFromLink");
        return null;
    }
}

/**
 * N√°jde skupinu podƒæa text ID (legacy)
 */
function findTargetGroupByTextId(telegramId) {
    try {
        var telegramGroupsLib = CONFIG.libraries.telegramGroups || 
                                CONFIG.libraries.telegram.groups || 
                                "Telegram Groups";
        
        var telegramGroups = libByName(telegramGroupsLib);
        if (!telegramGroups) {
            utils.addError(currentEntry, "Kni≈ænica '" + telegramGroupsLib + "' nen√°jden√°", "findTargetGroupByTextId");
            return null;
        }
        
        // Rozpoznaj ƒçi je to skupina alebo t√©ma
        var isThread = telegramId.indexOf("/") > -1;
        
        if (isThread) {
            // Form√°t: "chatId/threadId"
            var parts = telegramId.split("/");
            var chatId = parts[0];
            var threadId = parts[1];
            
            var allGroups = telegramGroups.entries();
            for (var i = 0; i < allGroups.length; i++) {
                var group = allGroups[i];
                if (group.field(CONFIG.telegramGroupsFields.chatId) === chatId && 
                    group.field(CONFIG.telegramGroupsFields.threadId) === threadId) {
                    return {
                        chatId: chatId,
                        threadId: threadId,
                        name: group.field(CONFIG.telegramGroupsFields.threadName) || "T√©ma #" + threadId,
                        isThread: true,
                        entries: group
                    };
                }
            }
        } else {
            // Jednoduch√° skupina
            var groups = telegramGroups.find(CONFIG.telegramGroupsFields.chatId, telegramId);
            if (groups && groups.length > 0) {
                return {
                    chatId: telegramId,
                    name: groups[0].field(CONFIG.telegramGroupsFields.groupName) || "Skupina",
                    isThread: false,
                    entries: groups[0]
                };
            }
        }
        
        utils.addDebug(currentEntry, "Skupina s ID '" + telegramId + "' nen√°jden√°");
        return null;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri hƒæadan√≠ skupiny: " + error.toString(), "findTargetGroupByTextId");
        return null;
    }
}

// ==============================================
// SPR√ÅVA NOTIFIK√ÅCI√ç
// ==============================================

/**
 * Vyƒçist√≠ star√© notifik√°cie z doch√°dzky
 */
function cleanupOldNotifications() {
    try {
        var existingNotifs = currentEntry.field(CONFIG.fields.notifikacie) || [];
        
        if (existingNotifs.length > 0) {
            currentEntry.set(CONFIG.fields.notifikacie, []);
            utils.addDebug(currentEntry, "üßπ Vymazan√Ωch " + existingNotifs.length + " star√Ωch notifik√°ci√≠");
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri ƒçisten√≠ notifik√°ci√≠: " + error.toString(), "cleanupOldNotifications");
    }
}

/**
 * Vytvor√≠ skupinov√∫ notifik√°ciu
 */
function createGroupNotification(message, targetGroup, settings) {
    try {
        if (!notifHelper) {
            utils.addError(currentEntry, "ASISTANTONotifications nie je dostupn√Ω", "createGroupNotification");
            return null;
        }
        
        var notifData = {
            typSpravy: "Doch√°dzka",
            zdrojSpravy: "Automatick√°",
            sprava: message,
            predmet: "S√∫hrn doch√°dzky - " + utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY"),
            adresat: targetGroup.isThread ? "T√©ma" : "Skupina",
            skupinaTema: targetGroup.entries,
            formatovanie: "Markdown",
            priorita: "Norm√°lna",
            zdrojovaKniznica: "Doch√°dzka",
            zdrojovyId: currentEntry.field("ID"),
            
            // Telegram ≈°pecifik√°
            chatId: targetGroup.chatId,
            threadId: targetGroup.threadId
        };
        
        // Pou≈æi ASISTANTONotifications helper
        var notification = notifHelper.createNotification(notifData);
        
        if (notification) {
            utils.addDebug(currentEntry, "‚úÖ Notifik√°cia vytvoren√° (ID: " + notification.field("ID") + ")");
            return notification;
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "createGroupNotification");
            return null;
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ notifik√°cie: " + error.toString(), "createGroupNotification");
        return null;
    }
}

/**
 * Linkne notifik√°cie k doch√°dzke
 */
function linkNotificationsToDochadzka(notifications) {
    try {
        if (!notifications || notifications.length === 0) return;
        
        var existingNotifs = currentEntry.field(CONFIG.fields.notifikacie) || [];
        var allNotifs = existingNotifs.concat(notifications);
        
        currentEntry.set(CONFIG.fields.notifikacie, allNotifs);
        utils.addDebug(currentEntry, "üîó Linknut√Ωch " + notifications.length + " notifik√°ci√≠");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri linkovan√≠ notifik√°ci√≠: " + error.toString(), "linkNotificationsToDochadzka");
    }
}

// ==============================================
// PR√çPRAVA SPR√ÅVY
// ==============================================

/**
 * Priprav√≠ s√∫hrnn√∫ spr√°vu pre Telegram
 */
function prepareSummaryMessage(zamestnanci, settings) {
    try {
        var datum = currentEntry.field(CONFIG.fields.datum);
        var datumFormatted = utils.formatDate(datum, "D.M.YYYY");
        var dayName = moment(datum).format("dddd");
        
        // Header
        var message = "*S√∫hrn doch√°dzky - " + datumFormatted + " (" + dayName + ")*\n";
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
        
        // Firma (ak je nastaven√°)
        if (settings.companyName) {
            message += "üè¢ " + settings.companyName + "\n\n";
        }
        
        // ƒåas pr√≠chodu/odchodu
        var prichod = currentEntry.field(CONFIG.fields.prichod);
        var odchod = currentEntry.field(CONFIG.fields.odchod);
        
        if (prichod || odchod) {
            message += "‚è∞ ƒåas: " + utils.formatTime(prichod) + " - " + utils.formatTime(odchod) + "\n";
        }
        
        // Pracovn√° doba
        var pracovnaDoba = currentEntry.field(CONFIG.fields.pracovnaDoba);
        if (pracovnaDoba) {
            message += "‚è±Ô∏è Pracovn√° doba: " + pracovnaDoba + " hod√≠n\n";
        }
        
        // Poƒçet pracovn√≠kov
        message += "üë• Poƒçet pracovn√≠kov: " + zamestnanci.length + "\n";
        
        // Celkov√© odpracovan√© hodiny
        var totalHours = currentEntry.field(CONFIG.fields.odpracovane) || 0;
        if (totalHours > 0) {
            message += "üìä Celkom odpracovan√©: " + totalHours + " hod√≠n\n";
        }
        
        // Mzdov√© n√°klady (ak povolen√©)
        if (settings.includeFinancials) {
            var mzdoveNaklady = currentEntry.field(CONFIG.fields.mzdoveNaklady);
            if (mzdoveNaklady) {
                message += "üí∞ Mzdov√© n√°klady: " + utils.formatMoney(mzdoveNaklady) + "\n";
            }
        }
        
        // Zoznam zamestnancov
        message += "\n*Zamestnanci:*\n";
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        var sortedEmployees = sortEmployeesByName(zamestnanci);
        
        for (var i = 0; i < sortedEmployees.length; i++) {
            message += formatEmployeeDetail(sortedEmployees[i], i + 1, settings.includeFinancials);
        }
        
        // Pozn√°mka (ak existuje)
        var poznamka = currentEntry.field(CONFIG.fields.poznamka);
        if (poznamka) {
            message += "\nüìù _Pozn√°mka: " + poznamka + "_\n";
        }
        
        // Footer
        message += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        message += "_Automaticky generovan√©_";
        
        return message;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri pr√≠prave spr√°vy: " + error.toString(), "prepareSummaryMessage");
        return "Chyba pri generovan√≠ s√∫hrnu doch√°dzky";
    }
}

/**
 * Zorad√≠ zamestnancov podƒæa priezviska
 */
function sortEmployeesByName(zamestnanci) {
    try {
        var sorted = zamestnanci.slice();
        
        sorted.sort(function(a, b) {
            var priezviskoA = utils.safeGet(a, "Priezvisko", "").toLowerCase();
            var priezviskoB = utils.safeGet(b, "Priezvisko", "").toLowerCase();
            
            if (priezviskoA < priezviskoB) return -1;
            if (priezviskoA > priezviskoB) return 1;
            return 0;
        });
        
        return sorted;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri trieden√≠ zamestnancov: " + error.toString(), "sortEmployeesByName");
        return zamestnanci;
    }
}

/**
 * Form√°tuje detail jedn√©ho zamestnanca
 */
function formatEmployeeDetail(zamestnanec, poradie, includeFinancials) {
    try {
        var detail = poradie + ". ";
        
        // Pou≈æi MementoBusiness funkciu ak je dostupn√°
        if (utils.formatEmployeeName) {
            detail += utils.formatEmployeeName(zamestnanec);
        } else {
            // Manu√°lne form√°tovanie
            var nick = utils.safeGet(zamestnanec, "Nick", "");
            var priezvisko = utils.safeGet(zamestnanec, "Priezvisko", "");
            detail += nick ? nick + " (" + priezvisko + ")" : priezvisko || "Zamestnanec";
            
            utils.addError(currentEntry, "MementoBusiness.formatEmployeeName nie je dostupn√©", "formatEmployeeDetail");
        }
        
        // Z√≠skaj atrib√∫ty zamestnanca
        var odpracovane = getEmployeeAttribute(zamestnanec, CONFIG.attributes.odpracovane);
        if (odpracovane && odpracovane > 0) {
            detail += " - " + formatHours(odpracovane);
        }
        
        // Finanƒçn√© √∫daje
        if (includeFinancials) {
            var dennaMzda = getEmployeeAttribute(zamestnanec, CONFIG.attributes.dennaMzda);
            if (dennaMzda && dennaMzda > 0) {
                detail += " (" + utils.formatMoney(dennaMzda) + ")";
            }
        }
        
        return detail + "\n";
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri form√°tovan√≠ zamestnanca: " + error.toString(), "formatEmployeeDetail");
        return poradie + ". Chyba pri spracovan√≠\n";
    }
}

/**
 * Z√≠ska atrib√∫t zamestnanca z poƒæa Zamestnanci
 */
function getEmployeeAttribute(zamestnanec, attributeName) {
    try {
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        if (!zamArray || zamArray.length === 0) {
            return null;
        }
        
        // N√°jdi zamestnanca v poli podƒæa ID
        var zamId = zamestnanec.field("ID");
        
        for (var i = 0; i < zamArray.length; i++) {
            if (zamArray[i].field("ID") === zamId) {
                // Pou≈æi MementoUtils ak m√° safeGetAttribute
                if (utils.safeGetAttribute) {
                    return utils.safeGetAttribute(currentEntry, CONFIG.fields.zamestnanci, attributeName, null);
                } else {
                    // Priamy pr√≠stup
                    return zamArray[i].attr(attributeName);
                }
            }
        }
        
        return null;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ atrib√∫tu '" + attributeName + "': " + error.toString(), "getEmployeeAttribute");
        return null;
    }
}

/**
 * Form√°tuje hodiny do ƒçitateƒæn√©ho form√°tu
 */
function formatHours(hours) {
    if (!hours) return "0h";
    
    // Odstr√°≈à .0 ak je to cel√© ƒç√≠slo
    var formatted = hours.toFixed(1);
    if (formatted.endsWith(".0")) {
        formatted = formatted.slice(0, -2);
    }
    
    return formatted + "h";
}

// ==============================================
// SPUSTENIE HLAVNEJ FUNKCIE
// ==============================================

main();