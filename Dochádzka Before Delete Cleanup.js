// ==============================================
// DOCH√ÅDZKA - BEFORE DELETE CLEANUP
// Verzia: 1.1 | D√°tum: December 2024 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: Before Delete (Deleting an Entry)
// ==============================================
// üìã FUNKCIA:
//    - Odstr√°ni v≈°etky z√°v√§zky linkovan√© na tento z√°znam (linksFrom)
//    - Odstr√°ni notifik√°cie linkovan√© na tento z√°znam
//    - Vyma≈æe spr√°vy z Telegramu ak existuj√∫
//    - Vytvor√≠ audit log pred vymazan√≠m
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0+ (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoTelegram (Telegram funkcie)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Doch√°dzka Before Delete Cleanup",
    version: "1.0",
    
    // Referencie na centr√°lny config
    fields: {
        attendance: centralConfig.fields.attendance,
        obligations: centralConfig.fields.obligations,
        notifications: centralConfig.fields.notifications,
        common: centralConfig.fields.common
    },
    
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    
    // Audit log nastavenia
    auditLog: {
        enabled: true,
        libraryName: "Audit Log",
        createRecord: true
    }
};

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Vytvor√≠ audit log pred vymazan√≠m
 * @param {Object} deletedData - √ödaje o vymaz√°van√Ωch z√°znamoch
 */
function createAuditLog(deletedData) {
    try {
        if (!CONFIG.auditLog.enabled) return;
        
        var auditLib = libByName(CONFIG.auditLog.libraryName);
        if (!auditLib && CONFIG.auditLog.createRecord) {
            // Vytvor jednoduch√Ω audit z√°znam v poli info
            var auditInfo = "=== AUDIT LOG - VYMAZANIE Z√ÅZNAMU ===\n";
            auditInfo += "D√°tum/ƒças: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
            auditInfo += "Pou≈æ√≠vateƒæ: " + utils.getCurrentUser() + "\n";
            auditInfo += "Kni≈ænica: Doch√°dzka\n";
            auditInfo += "Z√°znam ID: " + currentEntry.field("ID") + "\n";
            auditInfo += "D√°tum z√°znamu: " + utils.formatDate(currentEntry.field(CONFIG.fields.attendance.date)) + "\n\n";
            
            auditInfo += "VYMAZAN√â S√öVISIACE Z√ÅZNAMY:\n";
            auditInfo += "‚Ä¢ Z√°v√§zky: " + deletedData.obligations.count + " z√°znamov\n";
            auditInfo += "‚Ä¢ Notifik√°cie: " + deletedData.notifications.count + " z√°znamov\n";
            auditInfo += "‚Ä¢ Telegram spr√°vy: " + deletedData.telegram.count + " spr√°v\n\n";
            
            auditInfo += "DETAILY:\n" + JSON.stringify(deletedData, null, 2);
            
            // Ulo≈æ do existuj√∫ceho info poƒæa (bude vymazan√© s hlavn√Ωm z√°znamom)
            utils.safeSet(currentEntry, CONFIG.fields.common.info, 
                         utils.safeGet(currentEntry, CONFIG.fields.common.info, "") + "\n\n" + auditInfo);
            
            utils.addDebug(currentEntry, "Audit log vytvoren√Ω");
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ audit logu", "createAuditLog", error);
    }
}

/**
 * Odstr√°ni z√°v√§zky linkovan√© na tento z√°znam
 * @returns {Object} V√Ωsledok oper√°cie
 */
function deleteLinkedObligations() {
    var result = {
        count: 0,
        deleted: [],
        errors: []
    };
    
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " Zaƒç√≠nam mazanie linkovan√Ωch z√°v√§zkov");
        
        // Z√≠skaj z√°v√§zky cez linksFrom
        var obligations = currentEntry.linksFrom(CONFIG.libraries.obligations, CONFIG.fields.obligations.attendance);
        
        if (!obligations || obligations.length === 0) {
            utils.addDebug(currentEntry, "≈Ωiadne linkovan√© z√°v√§zky nen√°jden√©");
            return result;
        }
        
        utils.addDebug(currentEntry, "Na≈°iel som " + obligations.length + " z√°v√§zkov na vymazanie");
        
        // Vyma≈æ ka≈æd√Ω z√°v√§zok
        for (var i = 0; i < obligations.length; i++) {
            try {
                var obligation = obligations[i];
                var obligationId = obligation.field("ID");
                var obligationType = utils.safeGet(obligation, "Typ", "Nezn√°my");
                var obligationAmount = utils.safeGet(obligation, "Suma", 0);
                
                // Zaznamenaj √∫daje pred vymazan√≠m
                result.deleted.push({
                    id: obligationId,
                    typ: obligationType,
                    suma: obligationAmount
                });
                
                // Vyma≈æ z√°v√§zok
                obligation.trash();
                result.count++;
                
                utils.addDebug(currentEntry, "‚úÖ Vymazan√Ω z√°v√§zok #" + obligationId + 
                             " (" + obligationType + ", " + utils.formatMoney(obligationAmount) + ")");
                
            } catch (deleteError) {
                result.errors.push(deleteError.toString());
                utils.addError(currentEntry, "Chyba pri mazan√≠ z√°v√§zku: " + deleteError.toString(), 
                             "deleteLinkedObligations", deleteError);
            }
        }
        
        utils.addDebug(currentEntry, utils.getIcon("success") + " Vymazan√Ωch " + result.count + 
                      " z " + obligations.length + " z√°v√§zkov");
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri mazan√≠ z√°v√§zkov", "deleteLinkedObligations", error);
        result.errors.push(error.toString());
    }
    
    return result;
}

/**
 * Odstr√°ni notifik√°cie a Telegram spr√°vy
 * @returns {Object} V√Ωsledok oper√°cie
 */
function deleteLinkedNotifications() {
    var result = {
        notifications: {
            count: 0,
            deleted: []
        },
        telegram: {
            count: 0,
            deleted: []
        },
        errors: []
    };
    
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " Zaƒç√≠nam mazanie notifik√°ci√≠");
        
        // Z√≠skaj linkovan√© notifik√°cie
        var notifications = utils.safeGetLinks(currentEntry, CONFIG.fields.common.notifications);
        
        if (!notifications || notifications.length === 0) {
            utils.addDebug(currentEntry, "≈Ωiadne linkovan√© notifik√°cie nen√°jden√©");
            return result;
        }
        
        utils.addDebug(currentEntry, "Na≈°iel som " + notifications.length + " notifik√°ci√≠");
        
        // Spracuj ka≈æd√∫ notifik√°ciu
        for (var i = 0; i < notifications.length; i++) {
            try {
                var notification = notifications[i];
                var notificationId = notification.field("ID");
                var chatId = utils.safeGet(notification, CONFIG.fields.notifications.chatId);
                var messageId = utils.safeGet(notification, CONFIG.fields.notifications.messageId);
                
                // Zaznamenaj √∫daje
                result.notifications.deleted.push({
                    id: notificationId,
                    chatId: chatId,
                    messageId: messageId
                });
                
                // Vyma≈æ spr√°vu z Telegramu (ak existuje)
                if (chatId && messageId) {
                    utils.addDebug(currentEntry, "Ma≈æem Telegram spr√°vu - Chat: " + chatId + ", Message: " + messageId);
                    
                    var deleteResult = utils.deleteTelegramMessage(chatId, messageId);
                    
                    if (deleteResult && deleteResult.success) {
                        result.telegram.count++;
                        result.telegram.deleted.push({
                            chatId: chatId,
                            messageId: messageId
                        });
                        utils.addDebug(currentEntry, "‚úÖ Telegram spr√°va vymazan√°");
                    } else {
                        utils.addDebug(currentEntry, "‚ö†Ô∏è Nepodarilo sa vymaza≈• Telegram spr√°vu: " + 
                                     (deleteResult ? deleteResult.error : "Nezn√°ma chyba"));
                    }
                }
                
                // Vyma≈æ notifik√°ciu z kni≈ænice
                notification.trash();
                result.notifications.count++;
                
                utils.addDebug(currentEntry, "‚úÖ Vymazan√° notifik√°cia #" + notificationId);
                
            } catch (deleteError) {
                result.errors.push(deleteError.toString());
                utils.addError(currentEntry, "Chyba pri mazan√≠ notifik√°cie: " + deleteError.toString(), 
                             "deleteLinkedNotifications", deleteError);
            }
        }
        
        utils.addDebug(currentEntry, utils.getIcon("success") + " Vymazan√© notifik√°cie: " + 
                      result.notifications.count + ", Telegram spr√°vy: " + result.telegram.count);
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri mazan√≠ notifik√°ci√≠", "deleteLinkedNotifications", error);
        result.errors.push(error.toString());
    }
    
    return result;
}

/**
 * Odstr√°ni v≈°etky linkovan√© z√°znamy pr√°ce, knihy j√°zd a pokladne
 * @returns {Object} V√Ωsledok oper√°cie
 */
function deleteOtherLinkedRecords() {
    var result = {
        workRecords: 0,
        rideLog: 0,
        cashBook: 0
    };
    
    try {
        // Z√°znamy pr√°ce
        var workRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.workRecord);
        if (workRecords && workRecords.length > 0) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Na≈°iel som " + workRecords.length + 
                          " linkovan√Ωch z√°znamov pr√°ce - tie sa nema≈æ√∫ automaticky");
            result.workRecords = workRecords.length;
        }
        
        // Kniha j√°zd
        var rideLog = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.rideLog);
        if (rideLog && rideLog.length > 0) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Na≈°iel som " + rideLog.length + 
                          " linkovan√Ωch j√°zd - tie sa nema≈æ√∫ automaticky");
            result.rideLog = rideLog.length;
        }
        
        // Poklad≈àa
        var cashBook = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.cashBook);
        if (cashBook && cashBook.length > 0) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Na≈°iel som " + cashBook.length + 
                          " linkovan√Ωch pokladniƒçn√Ωch dokladov - tie sa nema≈æ√∫ automaticky");
            result.cashBook = cashBook.length;
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri kontrole ostatn√Ωch linkovan√Ωch z√°znamov", 
                      "deleteOtherLinkedRecords", error);
    }
    
    return result;
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " === " + CONFIG.scriptName + 
                      " v" + CONFIG.version + " ===");
        
        var date = currentEntry.field(CONFIG.fields.attendance.date);
        var employees = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.employees);
        
        utils.addDebug(currentEntry, "Ma≈æem doch√°dzku z " + utils.formatDate(date) + 
                      " pre " + employees.length + " zamestnancov");
        
        // Zbierka v√Ωsledkov pre audit
        var deletedData = {
            date: date,
            employeesCount: employees.length,
            obligations: { count: 0, deleted: [], errors: [] },
            notifications: { count: 0, deleted: [] },
            telegram: { count: 0, deleted: [] },
            otherRecords: {}
        };
        
        // KROK 1: Vyma≈æ z√°v√§zky
        utils.addDebug(currentEntry, utils.getIcon("delete") + " KROK 1: Mazanie z√°v√§zkov");
        var obligationsResult = deleteLinkedObligations();
        deletedData.obligations = obligationsResult;
        
        // KROK 2: Vyma≈æ notifik√°cie a Telegram spr√°vy
        utils.addDebug(currentEntry, utils.getIcon("delete") + " KROK 2: Mazanie notifik√°ci√≠ a Telegram spr√°v");
        var notificationsResult = deleteLinkedNotifications();
        deletedData.notifications = notificationsResult.notifications;
        deletedData.telegram = notificationsResult.telegram;
        
        // KROK 3: Skontroluj ostatn√© linkovan√© z√°znamy
        utils.addDebug(currentEntry, utils.getIcon("info") + " KROK 3: Kontrola ostatn√Ωch linkovan√Ωch z√°znamov");
        deletedData.otherRecords = deleteOtherLinkedRecords();
        
        // KROK 4: Vytvor audit log
        if (CONFIG.auditLog.enabled) {
            utils.addDebug(currentEntry, utils.getIcon("note") + " KROK 4: Vytvorenie audit logu");
            createAuditLog(deletedData);
        }
        
        // Fin√°lny s√∫hrn
        utils.addDebug(currentEntry, "\n" + utils.getIcon("success") + " === S√öHRN VYMAZAN√ùCH Z√ÅZNAMOV ===");
        utils.addDebug(currentEntry, "‚Ä¢ Z√°v√§zky: " + deletedData.obligations.count);
        utils.addDebug(currentEntry, "‚Ä¢ Notifik√°cie: " + deletedData.notifications.count);
        utils.addDebug(currentEntry, "‚Ä¢ Telegram spr√°vy: " + deletedData.telegram.count);
        
        if (deletedData.otherRecords.workRecords > 0 || 
            deletedData.otherRecords.rideLog > 0 || 
            deletedData.otherRecords.cashBook > 0) {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è UPOZORNENIE - Tieto z√°znamy ost√°vaj√∫:");
            if (deletedData.otherRecords.workRecords > 0) {
                utils.addDebug(currentEntry, "‚Ä¢ Z√°znamy pr√°ce: " + deletedData.otherRecords.workRecords);
            }
            if (deletedData.otherRecords.rideLog > 0) {
                utils.addDebug(currentEntry, "‚Ä¢ Kniha j√°zd: " + deletedData.otherRecords.rideLog);
            }
            if (deletedData.otherRecords.cashBook > 0) {
                utils.addDebug(currentEntry, "‚Ä¢ Poklad≈àa: " + deletedData.otherRecords.cashBook);
            }
        }
        
        utils.addDebug(currentEntry, "\n" + utils.getIcon("success") + 
                      " === CLEANUP DOKONƒåEN√ù - z√°znam bude vymazan√Ω ===");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        
        // Pri chybe zastav√≠me vymazanie
        cancel();
        message("‚ùå Chyba pri ƒçisten√≠ s√∫visiacich z√°znamov! Vymazanie bolo zru≈°en√©.\n\n" + 
                "Chyba: " + error.toString());
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Spustenie hlavnej funkcie
var result = main();

if (!result) {
    // Ak nastala chyba, zru≈° vymazanie
    cancel();
}