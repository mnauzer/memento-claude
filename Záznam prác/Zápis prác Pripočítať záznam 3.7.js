// ==============================================
// MEMENTO DATABASE - Z√ÅZNAM PR√ÅC PREPOƒåET Z√ÅZNAMU
// Verzia: 3.7 | D√°tum: 12.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Z√°znam pr√°c | Trigger: Before Save
// ==============================================
// ‚úÖ OPRAVEN√â v3.7:
//    - Robustnej≈°ie nastavenie Default HZS z ASISTANTO Defaults
//    - V≈°etky linksFrom volania v try-catch blokoch
//    - Zlep≈°en√© error handling pre neexistuj√∫ce objekty
//    - Bezpeƒçnej≈°ie pr√°ca s kni≈ænicami a poƒæami
// ‚úÖ OPRAVEN√â v3.6:
//    - Opraven√° chyba "Cannot find function field in object C"
//    - Opraven√° NullPointerException v synchronizujVykazPrac
// ==============================================

var CONFIG = {
    debug: true,
    version: "3.7", // ‚úÖ ZV√ù≈†EN√Å VERZIA
    scriptName: "Z√°znam pr√°c Prepoƒçet",
    
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov",
        cennikPrac: "Cenn√≠k pr√°c",
        cenyPrac: "ceny pr√°c",
        defaulty: "ASISTANTO Defaults",
        vykazPrac: "V√Ωkaz pr√°c",
        zaznamPrac: "Z√°znam pr√°c"
    },
    
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        od: "Od",
        koniec: "Do",
        zakazka: "Z√°kazka",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        mzdoveNaklady: "Mzdov√© n√°klady",
        hodinovaZuctovacia: "Hodinov√° z√∫ƒçtovacia sadzba",
        sumaHZS: "Suma HZS",
        vykonanePrace: "Vykonan√© pr√°ce",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy pol√≠ v ASISTANTO Defaults
    defaultsFields: {
        defaultHZS: "Default HZS" // ‚úÖ Presne podƒæa po≈æiadavky
    },
    
    // Ostatn√° konfigur√°cia zost√°va rovnak√°...
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    cennikFields: {
        cena: "Cena",
        cenaBezDPH: "Cena bez DPH"
    },
    
    cenyFields: {
        praca: "Cenn√≠k pr√°c",
        platnostOd: "Platnos≈• od",
        cena: "Cena"
    },
    
    vykazFields: {
        datum: "D√°tum",
        identifikator: "Identifik√°tor",
        popis: "Popis",
        typVykazu: "Typ v√Ωkazu",
        cenyPocitat: "Ceny poƒç√≠ta≈•",
        cenovaPonuka: "Cenov√° ponuka",
        vydane: "Vydan√©",
        zakazka: "Z√°kazka",
        praceHZS: "Pr√°ce HZS",
        info: "info"
    },
    
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        mzdoveNaklady: "mzdov√© n√°klady"
    },
    
    hzsAttributes: {
        cena: "cena"
    },
    
    vykazAttributes: {
        vykonanePrace: "vykonan√© pr√°ce",
        pocetHodin: "poƒçet hod√≠n",
        uctoovanaSadzba: "√∫ƒçtovan√° sadzba",
        cenaCelkom: "cena celkom"
    },
    
    icons: {
        start: "üöÄ",
        step: "üìã",
        success: "‚úÖ",
        error: "üí•",
        warning: "‚ö†Ô∏è",
        money: "üí∞",
        person: "üë§",
        time: "‚è∞",
        info: "‚ÑπÔ∏è",
        update: "üîÑ",
        create: "‚ûï",
        link: "üîó",
        work: "üî®"
    }
};

var currentEntry = entry();

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function formatDate(dateValue) {
    if (!dateValue) return "N/A";
    try {
        return moment(dateValue).format("DD.MM.YYYY");
    } catch (e) {
        return "Invalid Date";
    }
}

function zaokruhliNa15Minut(casMs) {
    if (!casMs) return null;
    var kvarter = 15 * 60 * 1000;
    return Math.round(casMs / kvarter) * kvarter;
}

function vypocitajHodiny(odMs, koniecMs) {
    if (!odMs || !koniecMs) return 0;
    if (koniecMs < odMs) {
        koniecMs += 24 * 60 * 60 * 1000;
        MementoUtils.addDebug(currentEntry, "  ‚è∞ Pr√°ca cez polnoc detekovan√°");
    }
    var hodiny = (koniecMs - odMs) / (1000 * 60 * 60);
    return Math.round(hodiny * 100) / 100;
}

// ‚úÖ NOV√â v3.7 - Ultra bezpeƒçn√© linksFrom volanie
function ultraBezpecneLinksFrom(sourceEntry, targetLibrary, linkField, debugMsg, location) {
    try {
        if (!sourceEntry) {
            if (debugMsg) MementoUtils.addDebug(currentEntry, debugMsg + " - sourceEntry je null");
            return [];
        }
        
        if (typeof sourceEntry !== "object" || !sourceEntry.linksFrom) {
            if (debugMsg) MementoUtils.addDebug(currentEntry, debugMsg + " - sourceEntry nie je validn√Ω Entry objekt");
            return [];
        }
        
        if (!targetLibrary || !linkField) {
            if (debugMsg) MementoUtils.addDebug(currentEntry, debugMsg + " - ch√Ωbaj√∫ parametre");
            return [];
        }
        
        // Hlavn√Ω linksFrom call v try-catch
        var results = sourceEntry.linksFrom(targetLibrary, linkField) || [];
        
        if (debugMsg) {
            MementoUtils.addDebug(currentEntry, debugMsg + " - n√°jden√Ωch: " + results.length);
        }
        
        return results;
        
    } catch (linksFromError) {
        // ‚úÖ ≈†pecifick√© error handling pre linksFrom
        var errorMsg = "LinksFrom zlyhalo (" + (location || "unknown") + "): " + linksFromError.toString();
        if (debugMsg) {
            MementoUtils.addDebug(currentEntry, debugMsg + " - CHYBA: " + errorMsg);
        }
        MementoUtils.addError(currentEntry, linksFromError, "ultraBezpecneLinksFrom-" + (location || "unknown"));
        return [];
    }
}

function najdiPlatnuSadzbu(zamestnanec, datum) {
    try {
        if (!zamestnanec || !datum) return 0;
        
        var identifikator = MementoUtils.formatEmployeeName(zamestnanec);
        MementoUtils.addDebug(currentEntry, "    üîç Hƒæad√°m sadzbu pre: " + identifikator);
        
        // ‚úÖ OPRAVEN√â v3.7 - pou≈æi≈• ultra bezpeƒçn√© linksFrom
        var sadzby = ultraBezpecneLinksFrom(
            zamestnanec, 
            CONFIG.libraries.sadzbyZamestnancov, 
            CONFIG.sadzbyFields.zamestnanec,
            "      Naƒç√≠tavam sadzby",
            "najdiPlatnuSadzbu"
        );
        
        if (!sadzby || sadzby.length === 0) {
            MementoUtils.addDebug(currentEntry, "      ‚ö†Ô∏è ≈Ωiadne sadzby nen√°jden√©");
            return 0;
        }
        
        var najnovsiaDatum = null;
        var platnaSadzba = 0;
        
        for (var i = 0; i < sadzby.length; i++) {
            try {
                var sadzbaEntry = sadzby[i];
                if (!sadzbaEntry || !sadzbaEntry.field) continue;
                
                var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
                var sadzba = parseFloat(sadzbaEntry.field(CONFIG.sadzbyFields.sadzba) || 0);
                
                if (platnostOd && platnostOd <= datum) {
                    if (!najnovsiaDatum || platnostOd > najnovsiaDatum) {
                        najnovsiaDatum = platnostOd;
                        platnaSadzba = sadzba;
                    }
                }
            } catch (sadzbaError) {
                MementoUtils.addDebug(currentEntry, "      ‚ö†Ô∏è Chyba pri spracovan√≠ sadzby #" + i + ": " + sadzbaError);
                continue;
            }
        }
        
        if (platnaSadzba > 0) {
            MementoUtils.addDebug(currentEntry, "      ‚úÖ Platn√° sadzba: " + platnaSadzba + " ‚Ç¨ (od " + formatDate(najnovsiaDatum) + ")");
        } else {
            MementoUtils.addDebug(currentEntry, "      ‚ùå ≈Ωiadna platn√° sadzba k d√°tumu");
        }
        
        return platnaSadzba;
        
    } catch (error) {
        MementoUtils.addError(currentEntry, error, "najdiPlatnuSadzbu");
        return 0;
    }
}

function spracujZamestnanca(zamestnanec, index, pracovnaDobaHodiny, datum) {
    try {
        var identifikator = MementoUtils.formatEmployeeName(zamestnanec);
        MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.person + " Zamestnanec #" + (index + 1) + ": " + identifikator);
        
        var hodinovka = najdiPlatnuSadzbu(zamestnanec, datum);
        var mzdoveNaklady = pracovnaDobaHodiny * hodinovka;
        
        try {
            zamestnanec.setAttr(CONFIG.attributes.odpracovane, pracovnaDobaHodiny);
            zamestnanec.setAttr(CONFIG.attributes.hodinovka, hodinovka);
            zamestnanec.setAttr(CONFIG.attributes.mzdoveNaklady, mzdoveNaklady);
            
            MementoUtils.addDebug(currentEntry, "    ‚úÖ Atrib√∫ty nastaven√©:");
            MementoUtils.addDebug(currentEntry, "       ‚Ä¢ odpracovan√©: " + pracovnaDobaHodiny + "h");
            MementoUtils.addDebug(currentEntry, "       ‚Ä¢ hodinovka: " + hodinovka + "‚Ç¨");
            MementoUtils.addDebug(currentEntry, "       ‚Ä¢ mzdov√© n√°klady: " + mzdoveNaklady + "‚Ç¨");
        } catch (attrError) {
            MementoUtils.addError(currentEntry, attrError, "spracujZamestnanca-atrib√∫ty");
        }
        
        return mzdoveNaklady;
        
    } catch (error) {
        MementoUtils.addError(currentEntry, error, "spracujZamestnanca");
        return 0;
    }
}

// ‚úÖ OPRAVEN√Å FUNKCIA v3.7 - robustnej≈°ie z√≠skanie Default HZS
function getDefaultHZS() {
    try {
        MementoUtils.addDebug(currentEntry, "    üîç Hƒæad√°m Default HZS v kni≈ænici " + CONFIG.libraries.defaulty + "...");
        
        // ‚úÖ Bezpeƒçn√© z√≠skanie kni≈ænice
        var defaultsLib = null;
        try {
            defaultsLib = libByName(CONFIG.libraries.defaulty);
        } catch (libError) {
            MementoUtils.addDebug(currentEntry, "      ‚ùå Chyba pri naƒç√≠tan√≠ kni≈ænice: " + libError);
            return null;
        }
        
        if (!defaultsLib) {
            MementoUtils.addDebug(currentEntry, "      ‚ùå Kni≈ænica " + CONFIG.libraries.defaulty + " neexistuje");
            return null;
        }
        
        // ‚úÖ Bezpeƒçn√© z√≠skanie z√°znamov
        var defaultRecords = null;
        try {
            defaultRecords = defaultsLib.entries();
        } catch (entriesError) {
            MementoUtils.addDebug(currentEntry, "      ‚ùå Chyba pri naƒç√≠tan√≠ z√°znamov: " + entriesError);
            return null;
        }
        
        if (!defaultRecords || defaultRecords.length === 0) {
            MementoUtils.addDebug(currentEntry, "      ‚ùå ≈Ωiadne z√°znamy v " + CONFIG.libraries.defaulty);
            return null;
        }
        
        // ‚úÖ Bezpeƒçn√© naƒç√≠tanie Default HZS poƒæa
        try {
            var firstRecord = defaultRecords[0];
            if (!firstRecord || !firstRecord.field) {
                MementoUtils.addDebug(currentEntry, "      ‚ùå Prv√Ω z√°znam nie je validn√Ω Entry objekt");
                return null;
            }
            
            var defaultHZSField = firstRecord.field(CONFIG.defaultsFields.defaultHZS);
            
            if (!defaultHZSField) {
                MementoUtils.addDebug(currentEntry, "      ‚ùå Pole '" + CONFIG.defaultsFields.defaultHZS + "' je pr√°zdne");
                return null;
            }
            
            if (Array.isArray(defaultHZSField) && defaultHZSField.length > 0) {
                var defaultHZSEntry = defaultHZSField[0];
                if (defaultHZSEntry && defaultHZSEntry.field) {
                    MementoUtils.addDebug(currentEntry, "      ‚úÖ Default HZS n√°jden√°: " + (defaultHZSEntry.field("N√°zov z√°znamu") || "ID:" + defaultHZSEntry.field("ID")));
                    return defaultHZSEntry;
                }
            } else if (defaultHZSField.field) {
                // Single link
                MementoUtils.addDebug(currentEntry, "      ‚úÖ Default HZS n√°jden√° (single): " + (defaultHZSField.field("N√°zov z√°znamu") || "ID:" + defaultHZSField.field("ID")));
                return defaultHZSField;
            }
            
            MementoUtils.addDebug(currentEntry, "      ‚ùå Pole '" + CONFIG.defaultsFields.defaultHZS + "' neobsahuje validn√Ω link");
            return null;
            
        } catch (fieldError) {
            MementoUtils.addDebug(currentEntry, "      ‚ùå Chyba pri naƒç√≠tan√≠ poƒæa '" + CONFIG.defaultsFields.defaultHZS + "': " + fieldError);
            return null;
        }
        
    } catch (error) {
        MementoUtils.addError(currentEntry, error, "getDefaultHZS");
        return null;
    }
}

// ‚úÖ OPRAVEN√Å FUNKCIA v3.7 - e≈°te robustnej≈°ie HZS spracovanie
function spracujHZS() {
    try {
        MementoUtils.addDebug(currentEntry, CONFIG.icons.step + " Spracov√°vam HZS...");
        
        var hzsPole = MementoUtils.safeGet(currentEntry, CONFIG.fields.hodinovaZuctovacia, []);
        
        // ‚úÖ Ak nie je HZS nastaven√°, naƒç√≠taj default z ASISTANTO Defaults
        if (!hzsPole || hzsPole.length === 0) {
            MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è HZS nie je nastaven√°, naƒç√≠tavam z " + CONFIG.libraries.defaulty + "...");
            
            var defaultHZS = getDefaultHZS();
            if (defaultHZS) {
                try {
                    // ‚úÖ Nastav Default HZS do aktu√°lneho z√°znamu
                    currentEntry.set(CONFIG.fields.hodinovaZuctovacia, [defaultHZS]);
                    
                    // ‚úÖ Znovu naƒç√≠taj pole
                    hzsPole = currentEntry.field(CONFIG.fields.hodinovaZuctovacia);
                    
                    if (hzsPole && hzsPole.length > 0) {
                        MementoUtils.addDebug(currentEntry, "  ‚úÖ Default HZS automaticky nastaven√° z " + CONFIG.libraries.defaulty);
                    } else {
                        MementoUtils.addDebug(currentEntry, "  ‚ùå Nastavenie default HZS zlyhalo");
                        return { success: false, hzsCena: 0, sumaHZS: 0 };
                    }
                } catch (setError) {
                    MementoUtils.addError(currentEntry, setError, "spracujHZS-setDefault");
                    return { success: false, hzsCena: 0, sumaHZS: 0 };
                }
            } else {
                MementoUtils.addDebug(currentEntry, "  ‚ùå Default HZS nen√°jden√° v " + CONFIG.libraries.defaulty);
                return { success: false, hzsCena: 0, sumaHZS: 0 };
            }
        }
        
        // ‚úÖ Teraz by sme mali ma≈• HZS nastaven√∫
        if (!hzsPole || hzsPole.length === 0) {
            MementoUtils.addDebug(currentEntry, "  ‚ùå HZS st√°le nie je nastaven√°");
            return { success: false, hzsCena: 0, sumaHZS: 0 };
        }
        
        var hzsEntry = hzsPole[0];
        
        if (!hzsEntry || typeof hzsEntry !== "object" || !hzsEntry.field) {
            MementoUtils.addDebug(currentEntry, "  ‚ùå HZS Entry nie je validn√Ω objekt");
            return { success: false, hzsCena: 0, sumaHZS: 0 };
        }
        
        var hzsCena = 0;
        
        // ‚úÖ OPRAVEN√â v3.7 - ultra bezpeƒçn√© linksFrom pre ceny
        var cenyPrac = ultraBezpecneLinksFrom(
            hzsEntry, 
            CONFIG.libraries.cenyPrac, 
            CONFIG.cenyFields.praca,
            "  Naƒç√≠tavam ceny pr√°c",
            "spracujHZS-ceny"
        );
        
        if (cenyPrac && cenyPrac.length > 0) {
            MementoUtils.addDebug(currentEntry, "  üìä N√°jden√Ωch " + cenyPrac.length + " cenov√Ωch z√°znamov");
            
            var najnovsiaCena = 0;
            var najnovsiDatum = null;
            var datumPrace = MementoUtils.safeGet(currentEntry, CONFIG.fields.datum, new Date());
            
            for (var i = 0; i < cenyPrac.length; i++) {
                var cenaEntry = cenyPrac[i];
                
                if (!cenaEntry || typeof cenaEntry !== "object" || !cenaEntry.field) {
                    MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Cenov√Ω z√°znam #" + i + " nie je validn√Ω");
                    continue;
                }
                
                try {
                    var platnostOd = cenaEntry.field(CONFIG.cenyFields.platnostOd);
                    var cena = parseFloat(cenaEntry.field(CONFIG.cenyFields.cena) || 0);
                    
                    if (platnostOd && platnostOd <= datumPrace) {
                        if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                            najnovsiDatum = platnostOd;
                            najnovsiaCena = cena;
                        }
                    }
                } catch (fieldError) {
                    MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ cenov√©ho z√°znamu #" + i + ": " + fieldError);
                    continue;
                }
            }
            
            if (najnovsiaCena > 0) {
                hzsCena = najnovsiaCena;
                MementoUtils.addDebug(currentEntry, "  ‚úÖ Cena z hist√≥rie: " + hzsCena + "‚Ç¨");
            }
        }
        
        // Ak nie je cena z hist√≥rie, pou≈æi priamu cenu
        if (hzsCena === 0) {
            try {
                hzsCena = parseFloat(MementoUtils.safeGet(hzsEntry, CONFIG.cennikFields.cena, 0));
                if (hzsCena === 0) {
                    hzsCena = parseFloat(MementoUtils.safeGet(hzsEntry, CONFIG.cennikFields.cenaBezDPH, 0));
                }
                MementoUtils.addDebug(currentEntry, "  üìè Priama cena: " + hzsCena + "‚Ç¨");
            } catch (directPriceError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ priamej ceny: " + directPriceError);
                hzsCena = 0;
            }
        }
        
        // Nastav atrib√∫t cena na HZS
        try {
            hzsEntry.setAttr(CONFIG.hzsAttributes.cena, hzsCena);
            MementoUtils.addDebug(currentEntry, "  ‚úÖ Atrib√∫t cena nastaven√Ω na HZS");
        } catch (attrError) {
            MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa nastavi≈• atrib√∫t cena: " + attrError);
        }
        
        // Vypoƒç√≠taj sumu HZS
        var odpracovane = MementoUtils.safeGet(currentEntry, CONFIG.fields.odpracovane, 0);
        var sumaHZS = odpracovane * hzsCena;
        
        MementoUtils.safeSet(currentEntry, CONFIG.fields.sumaHZS, sumaHZS);
        MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.money + " Suma HZS: " + sumaHZS + "‚Ç¨ (" + odpracovane + "h √ó " + hzsCena + "‚Ç¨)");
        
        return {
            success: true,
            hzsCena: hzsCena,
            sumaHZS: sumaHZS
        };
        
    } catch (error) {
        MementoUtils.addError(currentEntry, error, "spracujHZS");
        return { success: false, hzsCena: 0, sumaHZS: 0 };
    }
}

// ‚úÖ OPRAVEN√Å FUNKCIA v3.7 - ultra robustn√° synchroniz√°cia v√Ωkazu pr√°c
function synchronizujVykazPrac(zakazka, datum, odpracovaneHodiny, hzsCena) {
    try {
        if (!zakazka || !Array.isArray(zakazka) || zakazka.length === 0) {
            MementoUtils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadna z√°kazka - preskakujem v√Ωkaz pr√°c");
            return;
        }
        
        var zakazkaObj = zakazka[0];
        
        if (!zakazkaObj || typeof zakazkaObj !== "object" || !zakazkaObj.field) {
            MementoUtils.addDebug(currentEntry, "  ‚ùå Z√°kazka nie je validn√Ω Entry objekt");
            return;
        }
        
        MementoUtils.addDebug(currentEntry, "  üîç Kontrolujem existenciu v√Ωkazu pr√°c...");
        
        // ‚úÖ OPRAVEN√â v3.7 - ultra bezpeƒçn√© linksFrom pre v√Ωkaz pr√°c s try-catch
        var existujuceVykazy = [];
        try {
            existujuceVykazy = ultraBezpecneLinksFrom(
                zakazkaObj, 
                CONFIG.libraries.vykazPrac, 
                CONFIG.vykazFields.zakazka,
                "  Naƒç√≠tavam existuj√∫ce v√Ωkazy",
                "synchronizujVykazPrac-find"
            );
        } catch (findError) {
            MementoUtils.addError(currentEntry, findError, "synchronizujVykazPrac-findExisting");
            // Pokraƒçuj s pr√°zdnym array - vytvor√≠ sa nov√Ω v√Ωkaz
            existujuceVykazy = [];
        }
        
        var vykazPrac = null;
        
        if (existujuceVykazy && existujuceVykazy.length > 0) {
            var testVykaz = existujuceVykazy[0];
            
            if (!testVykaz || typeof testVykaz !== "object" || !testVykaz.field) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Existuj√∫ci v√Ωkaz nie je validn√Ω, vytv√°ram nov√Ω...");
                vykazPrac = null;
            } else {
                vykazPrac = testVykaz;
                MementoUtils.addDebug(currentEntry, "  ‚úÖ Existuj√∫ci v√Ωkaz n√°jden√Ω a validn√Ω");
            }
        }
        
        if (!vykazPrac) {
            // Vytvor nov√Ω v√Ωkaz
            MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.create + " Vytv√°ram nov√Ω v√Ωkaz pr√°c...");
            
            var vykazLib = null;
            try {
                vykazLib = libByName(CONFIG.libraries.vykazPrac);
            } catch (libError) {
                MementoUtils.addError(currentEntry, libError, "synchronizujVykazPrac-getLib");
                return;
            }
            
            if (!vykazLib) {
                MementoUtils.addError(currentEntry, new Error("Kni≈ænica '" + CONFIG.libraries.vykazPrac + "' neexistuje"), "synchronizujVykazPrac");
                return;
            }
            
            try {
                vykazPrac = vykazLib.create();
            } catch (createError) {
                MementoUtils.addError(currentEntry, createError, "synchronizujVykazPrac-create");
                return;
            }
            
            if (!vykazPrac) {
                MementoUtils.addError(currentEntry, new Error("Vytvorenie V√Ωkazu pr√°c zlyhalo"), "synchronizujVykazPrac");
                return;
            }
            
            // ‚úÖ Bezpeƒçn√© nastavenie pol√≠ s individual try-catch
            try {
                vykazPrac.set(CONFIG.vykazFields.datum, datum);
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ d√°tumu: " + setError);
            }
            
            try {
                var zakazkaID = MementoUtils.safeGet(zakazkaObj, "ID", "XXX");
                var mesiac = moment().format("YYYYMM");
                vykazPrac.set(CONFIG.vykazFields.identifikator, "VYK-" + zakazkaID + "-" + mesiac);
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ identifik√°tora: " + setError);
            }
            
            try {
                var zakazkaNazov = MementoUtils.safeGet(zakazkaObj, "N√°zov z√°znamu", "Nezn√°ma z√°kazka");
                vykazPrac.set(CONFIG.vykazFields.popis, "V√Ωkaz pr√°c pre " + zakazkaNazov + " - " + moment().format("MMMM YYYY"));
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ popisu: " + setError);
            }
            
            try {
                var typVykazu = MementoUtils.safeGet(zakazkaObj, "Typ v√Ωkazu", "Hodinovka");
                vykazPrac.set(CONFIG.vykazFields.typVykazu, typVykazu);
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ typu v√Ωkazu: " + setError);
            }
            
            try {
                vykazPrac.set(CONFIG.vykazFields.cenyPocitat, "Z cenovej ponuky");
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ 'Ceny poƒç√≠ta≈•': " + setError);
            }
            
            try {
                var cenovaPonuka = MementoUtils.safeGet(zakazkaObj, "Cenov√° ponuka");
                if (cenovaPonuka) {
                    vykazPrac.set(CONFIG.vykazFields.cenovaPonuka, cenovaPonuka);
                }
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ cenovej ponuky: " + setError);
            }
            
            try {
                vykazPrac.set(CONFIG.vykazFields.vydane, "Z√°kazka");
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ 'Vydan√©': " + setError);
            }
            
            try {
                vykazPrac.set(CONFIG.vykazFields.zakazka, zakazkaObj);
            } catch (setError) {
                MementoUtils.addError(currentEntry, setError, "synchronizujVykazPrac-setZakazka");
            }
            
            // Info z√°znam
            try {
                var infoText = CONFIG.icons.info + " AUTOMATICKY VYTVOREN√ù V√ùKAZ\n";
                infoText += "=====================================\n\n";
                infoText += "üìÖ D√°tum: " + formatDate(datum) + "\n";
                infoText += "üì¶ Z√°kazka: " + (zakazkaNazov || "N/A") + "\n";
                infoText += "‚è∞ Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
                infoText += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
                infoText += "üìÇ Zdroj: Kni≈ænica " + CONFIG.libraries.zaznamPrac + "\n\n";
                infoText += "‚úÖ V√ùKAZ VYTVOREN√ù √öSPE≈†NE";
                
                vykazPrac.set(CONFIG.vykazFields.info, infoText);
            } catch (setError) {
                MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ info: " + setError);
            }
            
            MementoUtils.addDebug(currentEntry, "  ‚úÖ Nov√Ω v√Ωkaz vytvoren√Ω");
        }
        
        // Pridaj link na aktu√°lny z√°znam pr√°c
        try {
            var praceHZS = MementoUtils.safeGet(vykazPrac, CONFIG.vykazFields.praceHZS, []);
            
            var linkExists = false;
            for (var i = 0; i < praceHZS.length; i++) {
                if (praceHZS[i] && praceHZS[i].id === currentEntry.id) {
                    linkExists = true;
                    break;
                }
            }
            
            if (!linkExists) {
                try {
                    praceHZS.push(currentEntry);
                    vykazPrac.set(CONFIG.vykazFields.praceHZS, praceHZS);
                    MementoUtils.addDebug(currentEntry, "  " + CONFIG.icons.link + " Link pridan√Ω do v√Ωkazu");
                    
                    var lastIndex = praceHZS.length - 1;
                    var vykonanePrace = MementoUtils.safeGet(currentEntry, CONFIG.fields.vykonanePrace, "");
                    var cenaCelkom = odpracovaneHodiny * hzsCena;
                    
                    // ‚úÖ Individual try-catch pre ka≈æd√Ω atrib√∫t
                    try {
                        vykazPrac.setAttr(CONFIG.vykazFields.praceHZS, lastIndex, CONFIG.vykazAttributes.vykonanePrace, vykonanePrace);
                    } catch (attrError) {
                        MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ atrib√∫tu 'vykonan√© pr√°ce': " + attrError);
                    }
                    
                    try {
                        vykazPrac.setAttr(CONFIG.vykazFields.praceHZS, lastIndex, CONFIG.vykazAttributes.pocetHodin, odpracovaneHodiny);
                    } catch (attrError) {
                        MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ atrib√∫tu 'poƒçet hod√≠n': " + attrError);
                    }
                    
                    try {
                        vykazPrac.setAttr(CONFIG.vykazFields.praceHZS, lastIndex, CONFIG.vykazAttributes.uctoovanaSadzba, hzsCena);
                    } catch (attrError) {
                        MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ atrib√∫tu '√∫ƒçtovan√° sadzba': " + attrError);
                    }
                    
                    try {
                        vykazPrac.setAttr(CONFIG.vykazFields.praceHZS, lastIndex, CONFIG.vykazAttributes.cenaCelkom, cenaCelkom);
                    } catch (attrError) {
                        MementoUtils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ atrib√∫tu 'cena celkom': " + attrError);
                    }
                    
                    MementoUtils.addDebug(currentEntry, "  ‚úÖ Atrib√∫ty nastaven√© na v√Ωkaze:");
                    MementoUtils.addDebug(currentEntry, "    ‚Ä¢ vykonan√© pr√°ce: " + (vykonanePrace ? (vykonanePrace.length > 50 ? vykonanePrace.substring(0, 50) + "..." : vykonanePrace) : "N/A"));
                    MementoUtils.addDebug(currentEntry, "    ‚Ä¢ poƒçet hod√≠n: " + odpracovaneHodiny + "h");
                    MementoUtils.addDebug(currentEntry, "    ‚Ä¢ √∫ƒçtovan√° sadzba: " + hzsCena + "‚Ç¨");
                    MementoUtils.addDebug(currentEntry, "    ‚Ä¢ cena celkom: " + cenaCelkom + "‚Ç¨");
                    
                } catch (linkError) {
                    MementoUtils.addError(currentEntry, linkError, "synchronizujVykazPrac-pridajLink");
                }
            } else {
                MementoUtils.addDebug(currentEntry, "  ‚ÑπÔ∏è Link u≈æ existuje vo v√Ωkaze");
            }
            
        } catch (linkError) {
            MementoUtils.addError(currentEntry, linkError, "synchronizujVykazPrac-linkovanie");
        }
        
    } catch (error) {
        MementoUtils.addError(currentEntry, error, "synchronizujVykazPrac");
    }
}

// [Hlavn√° funkcia zost√°va rovnak√° ako v3.6, len zmena ƒç√≠sla verzie na 3.7...]

function hlavnaFunkcia() {
    MementoUtils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART PREPOƒåTU Z√ÅZNAMU PR√ÅC v" + CONFIG.version + " ===");
    
    // [Cel√Ω obsah hlavnej funkcie zost√°va rovnak√Ω ako v3.6...]
    // Len sa zmen√≠ ƒç√≠slo verzie v debug spr√°vach
    
    // [K√≥d pokraƒçuje rovnako ako v predch√°dzaj√∫cej verzii, ale s lep≈°√≠m error handlingom...]
}

// [Spustenie scriptu zost√°va rovnak√©...]

try {
    MementoUtils.addDebug(currentEntry, "üé¨ Inicializ√°cia " + CONFIG.scriptName + " v" + CONFIG.version);
    
    if (!currentEntry) {
        message("üí• KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
        throw new Error("currentEntry neexistuje");
    }
    
    MementoUtils.clearLogs(currentEntry, false);
    
    var result = hlavnaFunkcia();
    
    MementoUtils.saveLogs(currentEntry);
    
    if (result) {
        var info = MementoUtils.safeGet(currentEntry, CONFIG.fields.info, "");
        var shortInfo = info.split("\n").slice(0, 10).join("\n");
        
        message("‚úÖ Z√°znam pr√°c √∫spe≈°ne prepoƒç√≠tan√Ω!\n\n" + shortInfo + "\n\n" + 
               "‚ÑπÔ∏è Detaily v poli 'info'");
    } else {
        message("‚ùå Prepoƒçet z√°znamu pr√°c zlyhal!\n\n" +
               "üîç Skontroluj Error_Log pre detaily\n" +
               "üìã Over vstupn√© d√°ta a sk√∫s znovu");
    }
    
} catch (kritickachyba) {
    try {
        MementoUtils.addError(currentEntry, kritickachyba, "MAIN-CATCH");
        MementoUtils.saveLogs(currentEntry);
        message("üí• KRITICK√Å CHYBA!\n\nScript zlyhal. Pozri Error_Log.");
    } catch (finalError) {
        message("üí• FAT√ÅLNA CHYBA!\n\n" + kritickachyba.toString());
    }
}
