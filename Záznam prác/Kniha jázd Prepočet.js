// ==============================================
// MEMENTO DATABASE - KNIHA J√ÅZD (ROUTE CALCULATION & PAYROLL) - FIXED
// ==============================================
// Kni≈ænica: Kniha j√°zd
// √öƒçel: Automatick√Ω prepoƒçet vzdialenosti, ƒçasu jazdy a miezd pos√°dky s atrib√∫tmi zast√°vok
// 
// OPRAVY v tejto verzii:
// - Pridan√° funkcia getDefaultZdrzanie()
// - Pridan√° funkcia convertDurationToHours()
// - Opraven√° logika nastavenia default zdr≈æania len ak je pr√°zdne alebo 0
// - Lep≈°√≠ error handling pre Duration atrib√∫ty
// 
// POLIA V KNI≈ΩNICI "Kniha j√°zd":
// - ≈†tart (Link to Entry ‚Üí Miesta) - zaƒçiatok trasy
// - Zast√°vky (Link to Entry ‚Üí Miesta) - zast√°vky na trase  
//   ‚Ü≥ atrib√∫ty: "trvanie" (Duration), "zdr≈æanie" (Duration), "km" (Number)
// - Cieƒæ (Link to Entry ‚Üí Miesta) - koniec trasy
//   ‚Ü≥ atrib√∫ty: "trvanie" (Duration), "km" (Number)
// - Km (Number) - vypoƒç√≠tan√° vzdialenos≈•
// - ƒåas jazdy (Number) - vypoƒç√≠tan√Ω ƒças jazdy bez zast√°vok
// - ƒåas na zast√°vkach (Number) - s√∫ƒçet zdr≈æan√≠ na zast√°vkach
// - Celkov√Ω ƒças (Number) - ƒças jazdy + ƒças na zast√°vkach
// - Pos√°dka (Link to Entry ‚Üí Zamestnanci) - ƒçlenovia pos√°dky
// - ≈†of√©r (Link to Entry ‚Üí Zamestnanci) - ≈°of√©r vozidla
// - D√°tum (Date) - d√°tum jazdy
// - Mzdov√© n√°klady (Number) - vypoƒç√≠tan√© mzdy pos√°dky na z√°klade celkov√©ho ƒçasu
// - Debug_Log (Text/Memo) - debug inform√°cie
// - Error_Log (Text/Memo) - chyby a probl√©my
// 
// LINKED KNI≈ΩNICE:
// - "Miesta": GPS, N√°zov
// - "Zamestnanci": Meno  
// - "sadzby zamestnancov": Zamestnanec (Link to Entry), Platnos≈• od, Sadzba
// - "ASISTANTO Defaults": Default zdr≈æanie (Duration)
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();
// Konfigur√°cia scriptu
var CONFIG = {
    // Debug nastavenia
    debug: true, // V≈ΩDY akt√≠vny debug
    debugFieldName: "Debug_Log",
    errorFieldName: "Error_Log",
    
    // N√°zvy kni≈æn√≠c
    sadzbyLibrary: "sadzby zamestnancov",
    miestalibrary: "Miesta",
    zamestnancilibrary: "Zamestnanci",
    defaultsLibrary: "ASISTANTO Defaults",
    
    // N√°zvy pol√≠ - kni≈ænica "Kniha j√°zd"
    fields: centralConfig.bookOfRides,
    
    // N√°zvy atrib√∫tov
    attributes: {
        trvanie: "trvanie",     // ƒças jazdy do tohto bodu
        zdrzanie: "zdr≈æanie",   // ƒças str√°ven√Ω na zast√°vke
        km: "km"                // vzdialenos≈• do tohto bodu
    },
    
    // N√°zvy pol√≠ - kni≈ænica "Miesta"
    miestalFields: {
        gps: "GPS",
        nazov: "N√°zov"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "sadzby zamestnancov"
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "Zamestnanci"
    zamestnancilFields: {
        meno: "Meno"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "ASISTANTO Defaults"
    defaults: {
        defaultZdrzanie: "Default zdr≈æanie"  // Duration pole, 10 min
    },
    
    // OSRM API konfigur√°cia
    useOSRM: true,
    osrmServers: [
        "http://router.project-osrm.org/route/v1/driving/",
        "https://routing.openstreetmap.de/routed-car/route/v1/driving/",
        "http://osrm.valhalla.mapzen.com/route/v1/driving/"
    ],
    osrmTimeout: 15000,
    maxRetries: 2,
    minApiInterval: 100, // ms medzi API volaniami
    
    // Fallback nastavenia
    averageSpeedKmh: 50,        // Priemern√° r√Ωchlos≈•
    cityDelayMinutes: 5,        // Fallback zdr≈æanie na zast√°vke v min√∫tach
    trafficMultiplier: 1.2,     // Faktor pre dopravn√© z√°pchy
    
    // Cache nastavenia
    enableCaching: true,
    cacheTimeout: 300000        // 5 min√∫t v ms
};

// Glob√°lne premenn√© pre logging a performance
var debugLog = [];
var errorLog = [];
var routeCache = {};
var lastApiCall = 0;
var performanceMetrics = {
    osrmSuccessCount: 0,
    totalApiCalls: 0,
    totalResponseTime: 0,
    errorCount: 0
};

// ==============================================
// DEBUG A ERROR LOGGING SYST√âM
// ==============================================

function addDebug(message) {
    // Debug log sa vytv√°ra V≈ΩDY
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    debugLog.push("[" + timestamp + "] " + message);
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var prefix = location ? "[" + location + "] " : "";
    errorLog.push("[" + timestamp + "] ‚ùå " + prefix + message);
    performanceMetrics.errorCount++;
}

function logPerformanceMetrics() {
    if (performanceMetrics.totalApiCalls > 0) {
        var successRate = (performanceMetrics.osrmSuccessCount / performanceMetrics.totalApiCalls * 100).toFixed(1);
        var avgResponseTime = (performanceMetrics.totalResponseTime / performanceMetrics.totalApiCalls).toFixed(0);
        var errorRate = (performanceMetrics.errorCount / performanceMetrics.totalApiCalls * 100).toFixed(1);
        
        addDebug("üìä PERFORMANCE METRICS:");
        addDebug("  OSRM √∫spe≈°nos≈•: " + successRate + "% (" + performanceMetrics.osrmSuccessCount + "/" + performanceMetrics.totalApiCalls + ")");
        addDebug("  Priemern√Ω response time: " + avgResponseTime + "ms");
        addDebug("  Error rate: " + errorRate + "%");
    }
}

function saveLogs() {
    var currentEntry = entry();
    
    // Pridaj performance metrics na koniec debug logu
    logPerformanceMetrics();
    
    // V≈ædy ulo≈æ debug log
    try {
        currentEntry.set(CONFIG.debugFieldName, debugLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania debug logu
    }
    
    try {
        currentEntry.set(CONFIG.errorFieldName, errorLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania error logu  
    }
}

// ==============================================
// VALIDAƒåN√â A POMOCN√â FUNKCIE
// ==============================================

function roundTimeToQuarter(timeHours) {
    // Zaokr√∫hli ƒças na 15 min hore (0.25h)
    return Math.ceil(timeHours * 4) / 4;
}

function convertHoursToDuration(hours) {
    // Konvertuj hodiny na milisekundy pre Duration typ
    // Duration v Memento = milisekundy
    return Math.round(hours * 60 * 60 * 1000);
}

function convertDurationToHours(duration) {
    // Konvertuj Duration (milisekundy) na hodiny
    if (!duration || isNaN(duration)) {
        return 0;
    }
    return duration / (60 * 60 * 1000);
}

function convertHoursToTimeString(hours) {
    // Konvertuj hodiny na HH:MM form√°t
    var totalMinutes = Math.round(hours * 60);
    var h = Math.floor(totalMinutes / 60);
    var m = totalMinutes % 60;
    return h.toString().padStart(2, '0') + ':' + m.toString().padStart(2, '0');
}

function validateGPSCoordinates(lat, lon) {
    if (typeof lat !== 'number' || typeof lon !== 'number') {
        return false;
    }
    if (isNaN(lat) || isNaN(lon)) {
        return false;
    }
    if (lat < -90 || lat > 90) {
        return false;
    }
    if (lon < -180 || lon > 180) {
        return false;
    }
    return true;
}

function sanitizeApiInput(value) {
    if (typeof value === 'number') {
        return Math.round(value * 1000000) / 1000000; // 6 desatinn√Ωch miest max
    }
    return value;
}

function rateLimitedDelay() {
    var now = new Date().getTime();
    var timeSinceLastCall = now - lastApiCall;
    
    if (timeSinceLastCall < CONFIG.minApiInterval) {
        var delayNeeded = CONFIG.minApiInterval - timeSinceLastCall;
        addDebug("‚è≥ Rate limiting delay: " + delayNeeded + "ms");
    }
    lastApiCall = now;
}

// ==============================================
// NOV√Å FUNKCIA PRE Z√çSKANIE DEFAULT ZDR≈ΩANIA
// ==============================================

function getDefaultZdrzanie() {
    addDebug("üîç === Z√çSKAVAM DEFAULT ZDR≈ΩANIE ===");
    
    try {
        var defaultsLib = libByName(CONFIG.defaultsLibrary);
        if (!defaultsLib) {
            addError("Kni≈ænica '" + CONFIG.defaultsLibrary + "' neexistuje", "getDefaultZdrzanie");
            return CONFIG.cityDelayMinutes / 60; // Fallback na konfigur√°ciu
        }
        
        var defaultEntry = defaultsLib.lastEntry();
        if (!defaultEntry) {
            addError("Kni≈ænica '" + CONFIG.defaultsLibrary + "' je pr√°zdna", "getDefaultZdrzanie");
            return CONFIG.cityDelayMinutes / 60; // Fallback na konfigur√°ciu
        }
        
        var defaultZdrzanieDuration = defaultEntry.field(CONFIG.defaults.defaultZdrzanie);
        if (!defaultZdrzanieDuration) {
            addError("Pole '" + CONFIG.defaults.defaultZdrzanie + "' je pr√°zdne", "getDefaultZdrzanie");
            return CONFIG.cityDelayMinutes / 60; // Fallback na konfigur√°ciu
        }
        
        addDebug("  üìã Na≈°iel default zdr≈æanie Duration: " + defaultZdrzanieDuration + " ms");
        
        // Konvertuj Duration na hodiny
        var defaultZdrztanieHours = convertDurationToHours(defaultZdrzanieDuration);
        var defaultZdrztanieMinutes = defaultZdrztanieHours * 60;
        
        addDebug("  ‚úÖ Default zdr≈æanie: " + defaultZdrztanieMinutes.toFixed(0) + " min (" + defaultZdrztanieHours.toFixed(3) + " h)");
        
        return defaultZdrztanieHours;
        
    } catch (error) {
        addError("Chyba pri z√≠skavan√≠ default zdr≈æania: " + error.toString(), "getDefaultZdrzanie");
        var fallbackHours = CONFIG.cityDelayMinutes / 60;
        addDebug("  üîÑ Pou≈æ√≠vam fallback: " + CONFIG.cityDelayMinutes + " min (" + fallbackHours.toFixed(3) + " h)");
        return fallbackHours;
    }
}

function isZdrztanieEmpty(zdrztanieValue) {
    // Skontroluj ƒçi je zdr≈æanie pr√°zdne alebo 0
    if (zdrztanieValue === null || zdrztanieValue === undefined) {
        return true;
    }
    
    if (typeof zdrztanieValue === 'number') {
        return zdrztanieValue === 0 || isNaN(zdrztanieValue);
    }
    
    if (typeof zdrztanieValue === 'string') {
        return zdrztanieValue === "" || zdrztanieValue === "00:00" || zdrztanieValue === "0:00";
    }
    
    return false;
}

// ==============================================
// CACHE SYST√âM PRE OPTIMALIZ√ÅCIU
// ==============================================

function getCacheKey(fromLat, fromLon, toLat, toLon, type) {
    var lat1 = sanitizeApiInput(fromLat);
    var lon1 = sanitizeApiInput(fromLon);
    var lat2 = sanitizeApiInput(toLat);
    var lon2 = sanitizeApiInput(toLon);
    return lat1 + "," + lon1 + "‚Üí" + lat2 + "," + lon2 + ":" + type;
}

function getCachedResult(cacheKey) {
    if (!CONFIG.enableCaching) return null;
    
    var cached = routeCache[cacheKey];
    if (cached) {
        var age = new Date().getTime() - cached.timestamp;
        if (age < CONFIG.cacheTimeout) {
            addDebug("üìã Cache hit: " + cacheKey);
            return cached.data;
        } else {
            addDebug("üìã Cache expired: " + cacheKey);
            delete routeCache[cacheKey];
        }
    }
    return null;
}

function setCachedResult(cacheKey, data) {
    if (!CONFIG.enableCaching) return;
    
    routeCache[cacheKey] = {
        data: data,
        timestamp: new Date().getTime()
    };
    addDebug("üìã Cache set: " + cacheKey);
}

// ==============================================
// GPS EXTRAKCIA A SPRACOVANIE
// ==============================================

function extractGPSFromEntry(entryObj, pointType, pointName) {
    addDebug("--- Spracov√°vam " + pointType + ": " + pointName + " ---");
    
    if (!entryObj) {
        addError(pointType + " (" + pointName + "): Entry objekt je null", "extractGPSFromEntry");
        return null;
    }
    
    // Sk√∫s pr√≠stup k entry objektu
    var hasFieldMethod = false;
    try {
        if (typeof entryObj.field === 'function') {
            addDebug("  ‚úÖ Priamy pr√≠stup k entry objektu");
            hasFieldMethod = true;
        }
    } catch (methodError) {
        addDebug("  ‚ùå Chyba pri kontrole .field() met√≥dy: " + methodError);
    }
    
    if (!hasFieldMethod) {
        addError(pointType + " (" + pointName + "): Objekt nem√° .field() met√≥du", "extractGPSFromEntry");
        return null;
    }
    
    var gpsFieldNames = [CONFIG.miestalFields.gps, "Gps", "gps"];
    
    for (var f = 0; f < gpsFieldNames.length; f++) {
        var fieldName = gpsFieldNames[f];
        
        try {
            var gpsLocation = entryObj.field(fieldName);
            
            if (gpsLocation) {
                addDebug("  üéØ Na≈°iel GPS pole '" + fieldName + "': " + typeof gpsLocation);
                
                var lat = null, lon = null;
                
                // Detailn√° anal√Ωza GPS objektu
                if (typeof gpsLocation === 'object' && gpsLocation !== null) {
                    try {
                        // V√Ωpis dostupn√Ωch keys pre debug
                        var objKeys = [];
                        for (var key in gpsLocation) {
                            objKeys.push(key);
                        }
                        addDebug("    GPS object keys: " + objKeys.join(", "));
                        
                        // ≈†tandardn√© properties
                        if (typeof gpsLocation.lat !== 'undefined') {
                            lat = gpsLocation.lat;
                            addDebug("    Na≈°iel .lat property: " + lat);
                        }
                        if (typeof gpsLocation.lon !== 'undefined') {
                            lon = gpsLocation.lon;
                            addDebug("    Na≈°iel .lon property: " + lon);
                        }
                        if (typeof gpsLocation.lng !== 'undefined') {
                            lon = gpsLocation.lng;
                            addDebug("    Na≈°iel .lng property: " + lon);
                        }
                        if (typeof gpsLocation.latitude !== 'undefined') {
                            lat = gpsLocation.latitude;
                            addDebug("    Na≈°iel .latitude property: " + lat);
                        }
                        if (typeof gpsLocation.longitude !== 'undefined') {
                            lon = gpsLocation.longitude;
                            addDebug("    Na≈°iel .longitude property: " + lon);
                        }
                        
                        // Methods
                        if (!lat && typeof gpsLocation.lat === 'function') {
                            lat = gpsLocation.lat();
                            addDebug("    Volal .lat() method: " + lat);
                        }
                        if (!lon && typeof gpsLocation.lon === 'function') {
                            lon = gpsLocation.lon();
                            addDebug("    Volal .lon() method: " + lon);
                        }
                        
                        // Array-like pr√≠stup
                        if (!lat && !lon && gpsLocation.length >= 2) {
                            lat = gpsLocation[0];
                            lon = gpsLocation[1];
                            addDebug("    Array-like GPS: [" + lat + ", " + lon + "]");
                        }
                    } catch (accessError) {
                        addDebug("    Chyba pri pr√≠stupe k GPS properties: " + accessError);
                    }
                }
                // String form√°t "48.123,19.456"
                else if (typeof gpsLocation === 'string' && gpsLocation.length > 0) {
                    addDebug("    GPS string: '" + gpsLocation + "'");
                    var parts = gpsLocation.split(',');
                    if (parts.length >= 2) {
                        lat = parseFloat(parts[0].trim());
                        lon = parseFloat(parts[1].trim());
                        addDebug("    GPS string parsed: lat=" + lat + ", lon=" + lon);
                    }
                }
                // Number array
                else if (gpsLocation instanceof Array && gpsLocation.length >= 2) {
                    lat = parseFloat(gpsLocation[0]);
                    lon = parseFloat(gpsLocation[1]);
                    addDebug("    GPS array: [" + lat + ", " + lon + "]");
                }
                
                // Valid√°cia GPS s√∫radn√≠c
                if (lat !== null && lon !== null && !isNaN(lat) && !isNaN(lon)) {
                    if (validateGPSCoordinates(lat, lon)) {
                        addDebug("  ‚úÖ GPS √∫spe≈°ne extrahovan√©: " + lat + ", " + lon);
                        return {
                            lat: parseFloat(lat),
                            lon: parseFloat(lon),
                            name: pointName,
                            type: pointType
                        };
                    } else {
                        addDebug("  ‚ùå GPS s√∫radnice mimo platn√©ho rozsahu: lat=" + lat + ", lon=" + lon);
                    }
                } else {
                    addDebug("  ‚ùå GPS pole '" + fieldName + "' obsahuje neplatn√© hodnoty: lat=" + lat + ", lon=" + lon);
                }
            } else {
                addDebug("  GPS pole '" + fieldName + "' je pr√°zdne alebo neexistuje");
            }
        } catch (error) {
            addDebug("  ‚ùå Chyba pri ƒç√≠tan√≠ GPS poƒæa '" + fieldName + "': " + error);
        }
    }
    
    addError(pointType + " (" + pointName + "): ≈Ωiadne platn√© GPS s√∫radnice nen√°jden√©", "extractGPSFromEntry");
    return null;
}

// ==============================================
// OSRM API A MATEMATICK√â V√ùPOƒåTY
// ==============================================

function callOSRMAPI(fromLat, fromLon, toLat, toLon, apiType, retryCount, serverIndex) {
    if (!CONFIG.useOSRM) {
        return null;
    }
    
    retryCount = retryCount || 0;
    serverIndex = serverIndex || 0;
    
    if (serverIndex >= CONFIG.osrmServers.length) {
        addDebug("    ‚ùå V≈°etky OSRM servery zlyhali pre " + apiType);
        return null;
    }
    
    // Check cache first
    var cacheKey = getCacheKey(fromLat, fromLon, toLat, toLon, apiType);
    var cachedResult = getCachedResult(cacheKey);
    if (cachedResult) {
        return cachedResult;
    }
    
    // Rate limiting
    rateLimitedDelay();
    
    var baseUrl = CONFIG.osrmServers[serverIndex];
    var startTime = new Date().getTime();
    
    try {
        var coordinates = fromLon + "," + fromLat + ";" + toLon + "," + toLat;
        var url = baseUrl + coordinates + "?overview=false&geometries=geojson&steps=false";
        
        addDebug("    üîó Server " + (serverIndex + 1) + "/" + CONFIG.osrmServers.length);
        addDebug("    üìç " + fromLat.toFixed(6) + "," + fromLon.toFixed(6) + " ‚Üí " + toLat.toFixed(6) + "," + toLon.toFixed(6));
        
        var httpObj = http();
        httpObj.timeout = CONFIG.osrmTimeout;
        
        var response = httpObj.get(url);
        var endTime = new Date().getTime();
        var responseTime = endTime - startTime;
        
        performanceMetrics.totalApiCalls++;
        performanceMetrics.totalResponseTime += responseTime;
        
        addDebug("    üì° HTTP " + response.code + " (" + responseTime + "ms)");
        
        if (response.code === 200) {
            try {
                var data = JSON.parse(response.body);
                addDebug("    üîç OSRM response code: " + data.code);
                
                if (data.code === "Ok" && data.routes && data.routes.length > 0) {
                    var route = data.routes[0];
                    
                    if (route.legs && route.legs.length > 0) {
                        var leg = route.legs[0];
                        var distanceKm = leg.distance / 1000;
                        var timeHours = leg.duration / 3600;
                        
                        var result = {
                            distance: distanceKm,
                            time: timeHours,
                            source: "OSRM"
                        };
                        
                        addDebug("    ‚úÖ OSRM v√Ωsledok: " + distanceKm.toFixed(2) + " km, " + (timeHours * 60).toFixed(0) + " min");
                        addDebug("    üöÄ Priemern√° r√Ωchlos≈•: " + (distanceKm / timeHours).toFixed(1) + " km/h");
                        
                        performanceMetrics.osrmSuccessCount++;
                        
                        // Cache result
                        setCachedResult(cacheKey, result);
                        
                        return result;
                    } else {
                        addDebug("    ‚ùå ≈Ωiadne legs v route");
                    }
                } else {
                    addDebug("    ‚ùå OSRM chyba: " + data.code);
                    if (data.message) {
                        addDebug("    üìù Spr√°va: " + data.message);
                    }
                    
                    if ((data.code === "NoRoute" || data.code === "NoSegment") && serverIndex + 1 < CONFIG.osrmServers.length) {
                        addDebug("    üîÑ Sk√∫≈°am ƒèal≈°√≠ OSRM server...");
                        return callOSRMAPI(fromLat, fromLon, toLat, toLon, apiType, 0, serverIndex + 1);
                    }
                }
            } catch (jsonError) {
                addDebug("    ‚ùå JSON parsing chyba: " + jsonError);
                addDebug("    üìÑ Response preview: " + response.body.substring(0, 200));
            }
        } else if (response.code >= 500 && response.code < 600) {
            addDebug("    ‚ùå Server chyba (" + response.code + ")");
            
            if (retryCount < CONFIG.maxRetries) {
                addDebug("    üîÑ Retry " + (retryCount + 1) + "/" + CONFIG.maxRetries);
                return callOSRMAPI(fromLat, fromLon, toLat, toLon, apiType, retryCount + 1, serverIndex);
            } else if (serverIndex + 1 < CONFIG.osrmServers.length) {
                addDebug("    üîÑ Sk√∫≈°am ƒèal≈°√≠ server...");
                return callOSRMAPI(fromLat, fromLon, toLat, toLon, apiType, 0, serverIndex + 1);
            }
        } else {
            addDebug("    ‚ùå HTTP status: " + response.code);
            
            if (serverIndex + 1 < CONFIG.osrmServers.length) {
                addDebug("    üîÑ Sk√∫≈°am ƒèal≈°√≠ server...");
                return callOSRMAPI(fromLat, fromLon, toLat, toLon, apiType, 0, serverIndex + 1);
            }
        }
        
    } catch (error) {
        addDebug("    ‚ùå HTTP/Network chyba: " + error.toString());
        
        if (retryCount < CONFIG.maxRetries) {
            addDebug("    üîÑ Network retry " + (retryCount + 1) + "/" + CONFIG.maxRetries);
            return callOSRMAPI(fromLat, fromLon, toLat, toLon, apiType, retryCount + 1, serverIndex);
        } else if (serverIndex + 1 < CONFIG.osrmServers.length) {
            addDebug("    üîÑ Network error, sk√∫≈°am ƒèal≈°√≠ server...");
            return callOSRMAPI(fromLat, fromLon, toLat, toLon, apiType, 0, serverIndex + 1);
        }
    }
    
    addDebug("    ‚ùå V≈°etky pokusy pre " + apiType + " zlyhali");
    return null;
}

function calculateHaversineDistance(lat1, lon1, lat2, lon2) {
    var R = 6371; // Polomer Zeme v km
    
    var dLat = (lat2 - lat1) * (Math.PI / 180);
    var dLon = (lon2 - lon1) * (Math.PI / 180);
    var lat1Rad = lat1 * (Math.PI / 180);
    var lat2Rad = lat2 * (Math.PI / 180);
    
    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1Rad) * Math.cos(lat2Rad) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
    
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    
    return R * c;
}

function estimateDrivingTime(distanceKm, numberOfStops) {
    // Z√°kladn√Ω ƒças na z√°klade vzdialenosti a priemernej r√Ωchlosti
    var baseTimeHours = distanceKm / CONFIG.averageSpeedKmh;
    
    // Pridaj delay na zast√°vky
    var stopDelayHours = (numberOfStops * CONFIG.cityDelayMinutes) / 60;
    
    // Aplikuj traffic multiplier
    var totalTimeHours = (baseTimeHours + stopDelayHours) * CONFIG.trafficMultiplier;
    
    addDebug("    üìä Odhad ƒçasu: " + distanceKm.toFixed(1) + "km √∑ " + CONFIG.averageSpeedKmh + "km/h = " + baseTimeHours.toFixed(2) + "h");
    addDebug("    ‚è∏Ô∏è Delay zast√°vok: " + numberOfStops + " √ó " + CONFIG.cityDelayMinutes + "min = " + stopDelayHours.toFixed(2) + "h");
    addDebug("    üö¶ Traffic faktor: " + CONFIG.trafficMultiplier + "x");
    addDebug("    ‚è±Ô∏è Celkov√Ω odhad: " + totalTimeHours.toFixed(2) + "h");
    
    return totalTimeHours;
}

function calculateSegmentDistanceAndTime(fromCoord, toCoord, segmentIndex, totalSegments) {
    addDebug("  üìè Segment " + (segmentIndex + 1) + "/" + totalSegments + ": " + fromCoord.name + " ‚Üí " + toCoord.name);
    
    // Pok√∫s 1: OSRM API pre distance a time
    var osrmResult = callOSRMAPI(
        fromCoord.lat, fromCoord.lon, 
        toCoord.lat, toCoord.lon,
        "route"
    );
    
    if (osrmResult) {
        addDebug("    ‚úÖ OSRM: " + osrmResult.distance.toFixed(2) + " km, " + (osrmResult.time * 60).toFixed(0) + " min");
        return {
            distance: osrmResult.distance,
            time: osrmResult.time,
            source: "OSRM"
        };
    }
    
    // Pok√∫s 2: Fallback na matematik
    addDebug("    üìä OSRM nedostupn√©, pou≈æ√≠vam matematick√© odhady");
    var haversineDistance = calculateHaversineDistance(
        fromCoord.lat, fromCoord.lon,
        toCoord.lat, toCoord.lon
    );
    
    var estimatedTime = estimateDrivingTime(haversineDistance, 0); // 0 stops pre segment
    
    addDebug("    üìê Fallback: " + haversineDistance.toFixed(2) + " km, " + (estimatedTime * 60).toFixed(0) + " min");
    return {
        distance: haversineDistance,
        time: estimatedTime,
        source: "Fallback"
    };
}

// ==============================================
// NASTAVENIE ATRIB√öTOV ZAST√ÅVOK A CIEƒΩA - OPRAVEN√Å VERZIA
// ==============================================

function setStopAttributes(currentEntry, segmentData) {
    addDebug("üè∑Ô∏è === NASTAVENIE ATRIB√öTOV ZAST√ÅVOK A CIEƒΩA ===");
    
    var atributSuccess = 0;
    var atributChyby = 0;
    
    // Z√≠skaj default zdr≈æanie raz na zaƒçiatku
    var defaultZdrztanieHours = getDefaultZdrzanie();
    addDebug("üïê Default zdr≈æanie: " + (defaultZdrztanieHours * 60).toFixed(0) + " min (" + defaultZdrztanieHours.toFixed(3) + " h)");
    
    // Spracuj ka≈æd√Ω segment a nastav atrib√∫ty
    for (var i = 0; i < segmentData.length; i++) {
        var segment = segmentData[i];
        var pointType = segment.pointType;
        var pointIndex = segment.pointIndex;
        var distance = segment.distance;
        var time = segment.time;
        
        addDebug("üîß Nastavujem atrib√∫ty pre " + pointType + " " + (pointIndex + 1) + ":");
        addDebug("  üìè Vzdialenos≈•: " + distance.toFixed(1) + " km (zaokr√∫hlen√©)");
        addDebug("  ‚è±Ô∏è ƒåas: " + (time * 60).toFixed(0) + " min");
        addDebug("  üÜî Point index: " + pointIndex + ", Point type: " + pointType);
        
        try {
            // Nastav atrib√∫ty podƒæa typu bodu
            if (pointType === "Zast√°vka") {
                addDebug("  üéØ Sprac√∫vam zast√°vku - vstupujem do IF bloku");
                
                addDebug("  üìã Nastavujem atrib√∫ty zast√°vky " + (pointIndex + 1) + ":");
                addDebug("    - km: " + (Math.round(distance * 10) / 10).toFixed(1));
                addDebug("    - trvanie: " + convertHoursToTimeString(time) + " (" + (time * 60).toFixed(0) + " min)");
                addDebug("    - zdr≈æanie: kontrolujem existuj√∫ce hodnoty...");
                
                // ‚úÖ SPR√ÅVNE API: entry().field("pole")[index].setAttr("atrib√∫t", hodnota)
                var kmSuccess = false, trvanieSuccess = false, zdrztanieSuccess = false;
                
                try {
                    var zastavkyPole = entry().field(CONFIG.fields.zastavky);
                    if (zastavkyPole && zastavkyPole.length > pointIndex) {
                        var zastavkaEntry = zastavkyPole[pointIndex];
                        
                        // Zaokr√∫hli km na 1 desatinn√© miesto
                        var roundedDistance = Math.round(distance * 10) / 10;
                        zastavkaEntry.setAttr(CONFIG.attributes.km, roundedDistance);
                        kmSuccess = true;
                        addDebug("    ‚úÖ km atrib√∫t nastaven√Ω: " + roundedDistance + " km");
                    } else {
                        addDebug("    ‚ùå Zast√°vka " + pointIndex + " neexistuje v poli");
                    }
                } catch (kmError) {
                    addDebug("    ‚ùå km atrib√∫t zlyhalo: " + kmError.toString());
                }
                
                try {
                    var zastavkyPole2 = entry().field(CONFIG.fields.zastavky);
                    if (zastavkyPole2 && zastavkyPole2.length > pointIndex) {
                        var zastavkaEntry2 = zastavkyPole2[pointIndex];
                        
                        // Konvertuj ƒças na Duration form√°t (milisekundy)
                        var trvanieDuration = convertHoursToDuration(time);
                        var trvanieTimeString = convertHoursToTimeString(time);
                        
                        zastavkaEntry2.setAttr(CONFIG.attributes.trvanie, trvanieDuration);
                        trvanieSuccess = true;
                        addDebug("    ‚úÖ trvanie atrib√∫t nastaven√Ω: " + trvanieTimeString + " (" + trvanieDuration + " ms)");
                    }
                } catch (trvanieError) {
                    addDebug("    ‚ùå trvanie atrib√∫t zlyhalo: " + trvanieError.toString());
                    
                    // Sk√∫s alternat√≠vny form√°t - HH:MM string
                    try {
                        var zastavkyPole2Alt = entry().field(CONFIG.fields.zastavky);
                        if (zastavkyPole2Alt && zastavkyPole2Alt.length > pointIndex) {
                            var zastavkaEntry2Alt = zastavkyPole2Alt[pointIndex];
                            var trvanieString = convertHoursToTimeString(time);
                            
                            zastavkaEntry2Alt.setAttr(CONFIG.attributes.trvanie, trvanieString);
                            trvanieSuccess = true;
                            addDebug("    ‚úÖ trvanie atrib√∫t nastaven√Ω (string): " + trvanieString);
                        }
                    } catch (trvanieStringError) {
                        addDebug("    ‚ùå trvanie string form√°t tie≈æ zlyhalo: " + trvanieStringError.toString());
                    }
                }
                
                // ‚úÖ OPRAVEN√â SPRACOVANIE ZDR≈ΩANIA - iba ak nie je u≈æ vyplnen√©
                try {
                    var zastavkyPole3 = entry().field(CONFIG.fields.zastavky);
                    if (zastavkyPole3 && zastavkyPole3.length > pointIndex) {
                        var zastavkaEntry3 = zastavkyPole3[pointIndex];
                        
                        // Skontroluj ƒçi u≈æ existuje zdr≈æanie atrib√∫t
                        var existujuceZdrzanie = null;
                        try {
                            existujuceZdrzanie = zastavkaEntry3.attr(CONFIG.attributes.zdrzanie);
                            addDebug("    üìã Aktu√°lne zdr≈æanie: " + existujuceZdrzanie);
                        } catch (checkError) {
                            addDebug("    üìã Zdr≈æanie atrib√∫t neexistuje alebo je pr√°zdny");
                        }
                        
                        if (!isZdrztanieEmpty(existujuceZdrzanie)) {
                            // Zdr≈æanie u≈æ je nastaven√© - nenastav znovu
                            var existujuceHours = convertDurationToHours(existujuceZdrzanie);
                            var existujuceTimeString = convertHoursToTimeString(existujuceHours);
                            addDebug("    ‚ÑπÔ∏è zdr≈æanie u≈æ existuje: " + existujuceTimeString + " - ponech√°vam");
                            zdrztanieSuccess = true; // Pova≈æuj za √∫spe≈°n√©
                        } else {
                            // Zdr≈æanie nie je nastaven√© - nastav predvolen√∫ hodnotu
                            var zdrzanieDuration = convertHoursToDuration(defaultZdrztanieHours);
                            var zdrztanieTimeString = convertHoursToTimeString(defaultZdrztanieHours);
                            
                            zastavkaEntry3.setAttr(CONFIG.attributes.zdrzanie, zdrzanieDuration);
                            zdrztanieSuccess = true;
                            addDebug("    ‚úÖ zdr≈æanie atrib√∫t nastaven√Ω (default): " + zdrztanieTimeString + " (" + zdrzanieDuration + " ms)");
                        }
                    }
                } catch (zdrztanieError) {
                    addDebug("    ‚ùå zdr≈æanie atrib√∫t zlyhalo: " + zdrztanieError.toString());
                    
                    // Sk√∫s alternat√≠vny form√°t - HH:MM string
                    try {
                        var zastavkyPole3Alt = entry().field(CONFIG.fields.zastavky);
                        if (zastavkyPole3Alt && zastavkyPole3Alt.length > pointIndex) {
                            var zastavkaEntry3Alt = zastavkyPole3Alt[pointIndex];
                            
                            // Skontroluj existuj√∫ce zdr≈æanie aj pre string variant
                            var existujuceZdrztanieAlt = null;
                            try {
                                existujuceZdrztanieAlt = zastavkaEntry3Alt.attr(CONFIG.attributes.zdrzanie);
                            } catch (checkErrorAlt) {
                                // Ignoruj chybu
                            }
                            
                            if (!isZdrztanieEmpty(existujuceZdrztanieAlt)) {
                                addDebug("    ‚ÑπÔ∏è zdr≈æanie u≈æ existuje (string): " + existujuceZdrztanieAlt + " - ponech√°vam");
                                zdrztanieSuccess = true;
                            } else {
                                var zdrztanieString = convertHoursToTimeString(defaultZdrztanieHours);
                                zastavkaEntry3Alt.setAttr(CONFIG.attributes.zdrzanie, zdrztanieString);
                                zdrztanieSuccess = true;
                                addDebug("    ‚úÖ zdr≈æanie atrib√∫t nastaven√Ω (string default): " + zdrztanieString);
                            }
                        }
                    } catch (zdrztanieStringError) {
                        addDebug("    ‚ùå zdr≈æanie string form√°t tie≈æ zlyhalo: " + zdrztanieStringError.toString());
                    }
                }
                
                // Overenie √∫spe≈°nosti
                if (kmSuccess && trvanieSuccess && zdrztanieSuccess) {
                    addDebug("    üéâ V≈°etky atrib√∫ty zast√°vky √∫spe≈°ne nastaven√©");
                    atributSuccess++;
                    
                    // Overenie nastavenia
                    try {
                        var zastavkyPoleCheck = entry().field(CONFIG.fields.zastavky);
                        if (zastavkyPoleCheck && zastavkyPoleCheck.length > pointIndex) {
                            var zastavkaCheck = zastavkyPoleCheck[pointIndex];
                            var kontrolaKm = zastavkaCheck.attr(CONFIG.attributes.km);
                            var kontrolaTrvanie = zastavkaCheck.attr(CONFIG.attributes.trvanie);
                            var kontrolaZdrzanie = zastavkaCheck.attr(CONFIG.attributes.zdrzanie);
                            addDebug("    ‚úÖ Overenie - km: " + kontrolaKm + ", trvanie: " + kontrolaTrvanie + ", zdr≈æanie: " + kontrolaZdrzanie);
                        }
                    } catch (checkError) {
                        addDebug("    ‚ö†Ô∏è Nepodarilo sa overi≈• atrib√∫ty: " + checkError.toString());
                    }
                } else {
                    addError("Nepodarilo sa nastavi≈• v≈°etky atrib√∫ty zast√°vky " + (pointIndex + 1), "setStopAttributes_zastavka_" + pointIndex);
                    atributChyby++;
                }
                
            } else if (pointType === "Cieƒæ") {
                addDebug("  üéØ Sprac√∫vam cieƒæ - vstupujem do ELSE IF bloku");
                
                // Pre cieƒæ nastavuj: km, trvanie
                addDebug("  üìã Nastavujem atrib√∫ty cieƒæa:");
                addDebug("    - km: " + (Math.round(distance * 10) / 10).toFixed(1));
                addDebug("    - trvanie: " + convertHoursToTimeString(time) + " (" + (time * 60).toFixed(0) + " min)");
                
                var cielKmSuccess = false, cielTrvanieSuccess = false;
                
                try {
                    var cielPole = entry().field(CONFIG.fields.ciel);
                    if (cielPole && cielPole.length > 0) {
                        var cielEntry = cielPole[0];
                        
                        // Zaokr√∫hli km na 1 desatinn√© miesto
                        var roundedDistanceCiel = Math.round(distance * 10) / 10;
                        cielEntry.setAttr(CONFIG.attributes.km, roundedDistanceCiel);
                        cielKmSuccess = true;
                        addDebug("    ‚úÖ cieƒæ km atrib√∫t nastaven√Ω: " + roundedDistanceCiel + " km");
                    } else {
                        addDebug("    ‚ùå Cieƒæ neexistuje v poli");
                    }
                } catch (cielKmError) {
                    addDebug("    ‚ùå cieƒæ km zlyhalo: " + cielKmError.toString());
                }
                
                try {
                    var cielPole2 = entry().field(CONFIG.fields.ciel);
                    if (cielPole2 && cielPole2.length > 0) {
                        var cielEntry2 = cielPole2[0];
                        
                        // Konvertuj ƒças na Duration form√°t (milisekundy)
                        var cielTrvanieDuration = convertHoursToDuration(time);
                        var cielTrvanieTimeString = convertHoursToTimeString(time);
                        
                        cielEntry2.setAttr(CONFIG.attributes.trvanie, cielTrvanieDuration);
                        cielTrvanieSuccess = true;
                        addDebug("    ‚úÖ cieƒæ trvanie atrib√∫t nastaven√Ω: " + cielTrvanieTimeString + " (" + cielTrvanieDuration + " ms)");
                    }
                } catch (cielTrvanieError) {
                    addDebug("    ‚ùå cieƒæ trvanie zlyhalo: " + cielTrvanieError.toString());
                    
                    // Sk√∫s alternat√≠vny form√°t - HH:MM string
                    try {
                        var cielPole2Alt = entry().field(CONFIG.fields.ciel);
                        if (cielPole2Alt && cielPole2Alt.length > 0) {
                            var cielEntry2Alt = cielPole2Alt[0];
                            var cielTrvanieString = convertHoursToTimeString(time);
                            
                            cielEntry2Alt.setAttr(CONFIG.attributes.trvanie, cielTrvanieString);
                            cielTrvanieSuccess = true;
                            addDebug("    ‚úÖ cieƒæ trvanie atrib√∫t nastaven√Ω (string): " + cielTrvanieString);
                        }
                    } catch (cielTrvanieStringError) {
                        addDebug("    ‚ùå cieƒæ trvanie string form√°t tie≈æ zlyhalo: " + cielTrvanieStringError.toString());
                    }
                }
                
                if (cielKmSuccess && cielTrvanieSuccess) {
                    addDebug("    üéâ V≈°etky atrib√∫ty cieƒæa √∫spe≈°ne nastaven√©");
                    atributSuccess++;
                    
                    // Overenie nastavenia
                    try {
                        var cielPoleCheck = entry().field(CONFIG.fields.ciel);
                        if (cielPoleCheck && cielPoleCheck.length > 0) {
                            var cielCheck = cielPoleCheck[0];
                            var kontrolaKmCiel = cielCheck.attr(CONFIG.attributes.km);
                            var kontrolaTrvanieCiel = cielCheck.attr(CONFIG.attributes.trvanie);
                            addDebug("    ‚úÖ Overenie cieƒæ - km: " + kontrolaKmCiel + ", trvanie: " + kontrolaTrvanieCiel);
                        }
                    } catch (checkCielError) {
                        addDebug("    ‚ö†Ô∏è Nepodarilo sa overi≈• atrib√∫ty cieƒæa: " + checkCielError.toString());
                    }
                } else {
                    addError("Nepodarilo sa nastavi≈• v≈°etky atrib√∫ty cieƒæa", "setStopAttributes_ciel");
                    atributChyby++;
                }
            } else {
                addDebug("  ‚ùì Nezn√°my pointType: '" + pointType + "' - preskakujem");
            }
            
        } catch (generalError) {
            addError("Chyba pri nastavovan√≠ atrib√∫tov pre " + pointType + " " + (pointIndex + 1) + ": " + generalError.toString(), "setStopAttributes_general_" + i);
            atributChyby++;
        }
    }
    
    addDebug("üìä V√ùSLEDKY NASTAVENIA ATRIB√öTOV:");
    addDebug("  ‚úÖ √öspe≈°n√©: " + atributSuccess);
    addDebug("  ‚ùå Chyby: " + atributChyby);
    
    return {
        success: atributSuccess > 0,
        totalSuccess: atributSuccess,
        totalErrors: atributChyby
    };
}

// ==============================================
// V√ùPOƒåET CELKOV√âHO ƒåASU Z ATRIB√öTOV - ROZ≈†√çREN√Å VERZIA
// ==============================================

function calculateTotalTimeFromAttributes(currentEntry, segmentData) {
    addDebug("‚è∞ === V√ùPOƒåET CELKOV√âHO ƒåASU Z ATRIB√öTOV ===");
    
    var celkovyCasJazdy = 0; // S√∫ƒçet v≈°etk√Ωch "trvanie" hodn√¥t z atrib√∫tov
    var celkovyZdrzanie = 0; // S√∫ƒçet v≈°etk√Ωch "zdr≈æanie" hodn√¥t z atrib√∫tov
    
    // Spoƒç√≠taj ƒçasy z atrib√∫tov zast√°vok
    addDebug("üìã Poƒç√≠tam ƒçasy z atrib√∫tov zast√°vok...");
    try {
        var zastavkyPole = currentEntry.field(CONFIG.fields.zastavky);
        if (zastavkyPole && zastavkyPole.length > 0) {
            for (var i = 0; i < zastavkyPole.length; i++) {
                var zastavka = zastavkyPole[i];
                
                try {
                    // Trvanie atrib√∫t
                    var trvanieAttr = zastavka.attr(CONFIG.attributes.trvanie);
                    if (trvanieAttr) {
                        var trvanieHours = convertDurationToHours(trvanieAttr);
                        celkovyCasJazdy += trvanieHours;
                        addDebug("  üîó Zast√°vka " + (i + 1) + " trvanie: " + (trvanieHours * 60).toFixed(0) + " min");
                    }
                    
                    // Zdr≈æanie atrib√∫t
                    var zdrztanieAttr = zastavka.attr(CONFIG.attributes.zdrzanie);
                    if (zdrztanieAttr && !isZdrztanieEmpty(zdrztanieAttr)) {
                        var zdrztanieHours = convertDurationToHours(zdrztanieAttr);
                        celkovyZdrzanie += zdrztanieHours;
                        addDebug("  ‚è∏Ô∏è Zast√°vka " + (i + 1) + " zdr≈æanie: " + (zdrztanieHours * 60).toFixed(0) + " min");
                    }
                    
                } catch (attrError) {
                    addDebug("  ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ atrib√∫tov zast√°vky " + (i + 1) + ": " + attrError.toString());
                }
            }
        }
    } catch (zastavkyError) {
        addError("Chyba pri spracovan√≠ zast√°vok: " + zastavkyError.toString(), "calculateTotalTimeFromAttributes_zastavky");
    }
    
    // Spoƒç√≠taj ƒças z atrib√∫tov cieƒæa
    addDebug("üìã Poƒç√≠tam ƒças z atrib√∫tov cieƒæa...");
    try {
        var cielPole = currentEntry.field(CONFIG.fields.ciel);
        if (cielPole && cielPole.length > 0) {
            var ciel = cielPole[0];
            
            try {
                var cielTrvanieAttr = ciel.attr(CONFIG.attributes.trvanie);
                if (cielTrvanieAttr) {
                    var cielTrvanieHours = convertDurationToHours(cielTrvanieAttr);
                    celkovyCasJazdy += cielTrvanieHours;
                    addDebug("  üîó Cieƒæ trvanie: " + (cielTrvanieHours * 60).toFixed(0) + " min");
                }
            } catch (cielAttrError) {
                addDebug("  ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ atrib√∫tov cieƒæa: " + cielAttrError.toString());
            }
        }
    } catch (cielError) {
        addError("Chyba pri spracovan√≠ cieƒæa: " + cielError.toString(), "calculateTotalTimeFromAttributes_ciel");
    }
    
    var celkovyCas = celkovyCasJazdy + celkovyZdrzanie;
    
    addDebug("üìä S√öHRN ƒåASOV Z ATRIB√öTOV:");
    addDebug("  üöó ƒåas jazdy (z trvanie atrib√∫tov): " + (celkovyCasJazdy * 60).toFixed(0) + " min (" + celkovyCasJazdy.toFixed(2) + " h)");
    addDebug("  ‚è∏Ô∏è ƒåas na zast√°vkach (z zdr≈æanie atrib√∫tov): " + (celkovyZdrzanie * 60).toFixed(0) + " min (" + celkovyZdrzanie.toFixed(2) + " h)");
    addDebug("  ‚è±Ô∏è Celkov√Ω ƒças: " + (celkovyCas * 60).toFixed(0) + " min (" + celkovyCas.toFixed(2) + " h)");
    
    // Ulo≈æ ƒçasy do pol√≠
    var casJazdySuccess = false;
    var casNaZastavkachSuccess = false;
    var celkovyCasSuccess = false;
    
    try {
        var roundedCasJazdy = roundTimeToQuarter(celkovyCasJazdy);
        currentEntry.set(CONFIG.fields.casJazdy, roundedCasJazdy);
        addDebug("  üíæ ƒåas jazdy ulo≈æen√Ω: " + roundedCasJazdy.toFixed(2) + " h");
        casJazdySuccess = true;
    } catch (casJazdyError) {
        addError("Nepodarilo sa ulo≈æi≈• ƒças jazdy: " + casJazdyError.toString(), "calculateTotalTime_casJazdy");
    }
    
    try {
        var roundedCasNaZastavkach = roundTimeToQuarter(celkovyZdrzanie);
        currentEntry.set(CONFIG.fields.casNaZastavkach, roundedCasNaZastavkach);
        addDebug("  üíæ ƒåas na zast√°vkach ulo≈æen√Ω: " + roundedCasNaZastavkach.toFixed(2) + " h");
        casNaZastavkachSuccess = true;
    } catch (casNaZastavkachError) {
        addError("Nepodarilo sa ulo≈æi≈• ƒças na zast√°vkach: " + casNaZastavkachError.toString(), "calculateTotalTime_casNaZastavkach");
    }
    
    try {
        var roundedCelkovyCas = roundTimeToQuarter(celkovyCas);
        currentEntry.set(CONFIG.fields.celkovyCas, roundedCelkovyCas);
        addDebug("  üíæ Celkov√Ω ƒças ulo≈æen√Ω: " + roundedCelkovyCas.toFixed(2) + " h");
        celkovyCasSuccess = true;
    } catch (celkovyCasError) {
        addError("Nepodarilo sa ulo≈æi≈• celkov√Ω ƒças: " + celkovyCasError.toString(), "calculateTotalTime_celkovyCas");
    }
    
    // Valid√°cia: Skontroluj konzistenciu
    addDebug("üîç VALID√ÅCIA ƒåASOV:");
    addDebug("  S√∫ƒçet trvanie atrib√∫tov: " + celkovyCasJazdy.toFixed(2) + " h");
    addDebug("  Ulo≈æen√Ω 'ƒåas jazdy': " + (casJazdySuccess ? roundedCasJazdy.toFixed(2) : "CHYBA") + " h");
    addDebug("  S√∫ƒçet zdr≈æanie atrib√∫tov: " + celkovyZdrzanie.toFixed(2) + " h");
    addDebug("  Ulo≈æen√Ω 'ƒåas na zast√°vkach': " + (casNaZastavkachSuccess ? roundedCasNaZastavkach.toFixed(2) : "CHYBA") + " h");
    
    if (casJazdySuccess && celkovyCasSuccess && casNaZastavkachSuccess) {
        return {
            success: true,
            casJazdy: roundedCasJazdy,
            casNaZastavkach: roundedCasNaZastavkach,
            celkovyCas: roundedCelkovyCas
        };
    } else {
        return false;
    }
}

// ==============================================
// V√ùPOƒåET TRASY S ATRIB√öTMI - ROZ≈†√çREN√Å VERZIA
// ==============================================

function calculateRouteDistanceAndTime() {
    addDebug("üìè === KROK 1: V√ùPOƒåET TRASY S ATRIB√öTMI ===");
    
    var currentEntry = entry();
    var step1Success = false; // Valid√°cia z√°kladn√Ωch pol√≠
    var step2Success = false; // GPS extrakcia
    var step3Success = false; // V√Ωpoƒçet trasy
    var step4Success = false; // Nastavenie atrib√∫tov
    var step5Success = false; // V√Ωpoƒçet celkov√©ho ƒçasu
    
    // KROK 1.1: Valid√°cia z√°kladn√Ωch pol√≠
    addDebug("üìã KROK 1.1: Z√≠skavam polia trasy...");
    
    var start = currentEntry.field(CONFIG.fields.start);
    var zastavky = currentEntry.field(CONFIG.fields.zastavky);
    var ciel = currentEntry.field(CONFIG.fields.ciel);
    
    addDebug("  üéØ ≈†tart: " + (start && start.length > 0 ? start.length + " z√°znamov" : "CH√ùBA"));
    addDebug("  üõë Zast√°vky: " + (zastavky && zastavky.length > 0 ? zastavky.length + " z√°znamov" : "≈æiadne"));
    addDebug("  üèÅ Cieƒæ: " + (ciel && ciel.length > 0 ? ciel.length + " z√°znamov" : "CH√ùBA"));
    
    // Valid√°cia minim√°lnych po≈æiadaviek
    if (!start || start.length === 0) {
        addError("Pole ≈†tart nie je vyplnen√©", "krok1_1");
    } else if (!ciel || ciel.length === 0) {
        addError("Pole Cieƒæ nie je vyplnen√©", "krok1_1");
    } else {
        addDebug("‚úÖ Z√°kladn√© polia trasy s√∫ v poriadku");
        step1Success = true;
    }
    
    if (step1Success) {
        // KROK 1.2: Zostavenie kompletnej trasy
        addDebug("üó∫Ô∏è KROK 1.2: Zostavujem komplettn√∫ trasu...");
        
        var routeEntries = [];
        var routeTypes = [];
        var routeIndices = []; // Index v r√°mci typu (pre atrib√∫ty)
        
        // Pridaj ≈†tart
        for (var s = 0; s < start.length; s++) {
            routeEntries.push(start[s]);
            routeTypes.push("≈†tart");
            routeIndices.push(s);
        }
        
        // Pridaj Zast√°vky
        if (zastavky && zastavky.length > 0) {
            for (var z = 0; z < zastavky.length; z++) {
                routeEntries.push(zastavky[z]);
                routeTypes.push("Zast√°vka");
                routeIndices.push(z);
            }
        }
        
        // Pridaj Cieƒæ
        for (var c = 0; c < ciel.length; c++) {
            routeEntries.push(ciel[c]);
            routeTypes.push("Cieƒæ");
            routeIndices.push(c);
        }
        
        addDebug("  üìç Celkovo bodov trasy: " + routeEntries.length);
        
        if (routeEntries.length < 2) {
            addError("Nedostatok bodov pre trasu: " + routeEntries.length + "/2", "krok1_2");
        } else {
            step2Success = true;
        }
    }
    
    if (step1Success && step2Success) {
        // KROK 1.3: GPS extrakcia
        addDebug("üõ∞Ô∏è KROK 1.3: Extrakcia GPS s√∫radn√≠c...");
        
        var coordinates = [];
        var gpsChyby = 0;
        
        for (var i = 0; i < routeEntries.length; i++) {
            var entryObj = routeEntries[i];
            var pointType = routeTypes[i];
            
            // Z√≠skaj n√°zov miesta
            var pointName = pointType;
            try {
                var nazov = entryObj.field(CONFIG.miestalFields.nazov);
                if (nazov && nazov.length > 0) {
                    pointName = nazov;
                }
            } catch (error) {
                addDebug("Chyba pri z√≠skavan√≠ n√°zvu pre " + pointType + ": " + error);
            }
            
            // Extrahuj GPS s√∫radnice
            var gpsCoords = extractGPSFromEntry(entryObj, pointType, pointName);
            
            if (gpsCoords) {
                // Pridaj dodatoƒçn√© inform√°cie pre atrib√∫ty
                gpsCoords.routeType = pointType;
                gpsCoords.routeIndex = routeIndices[i];
                coordinates.push(gpsCoords);
            } else {
                gpsChyby++;
            }
        }
        
        addDebug("üìä GPS extrakcia: " + coordinates.length + " √∫spe≈°n√Ωch, " + gpsChyby + " ch√Ωb");
        
        if (coordinates.length < 2) {
            addError("Nedostatok platn√Ωch GPS s√∫radn√≠c: " + coordinates.length + "/2", "krok1_3");
        } else {
            step3Success = true;
        }
    }
    
    if (step1Success && step2Success && step3Success) {
        // KROK 1.4: Spracovanie segmentov trasy s atrib√∫tmi
        addDebug("‚ö° KROK 1.4: Sprac√∫vam segmenty trasy s atrib√∫tmi...");
        
        var totalDistance = 0;
        var totalTime = 0;
        var osrmSuccessCount = 0;
        var totalSegments = coordinates.length - 1;
        var segmentChyby = 0;
        var segmentData = []; // Pre atrib√∫ty a celkov√Ω ƒças
        
        try {
            for (var seg = 0; seg < coordinates.length - 1; seg++) {
                var from = coordinates[seg];
                var to = coordinates[seg + 1];
                
                try {
                    var segmentResult = calculateSegmentDistanceAndTime(from, to, seg, totalSegments);
                    
                    if (segmentResult) {
                        var distance = segmentResult.distance;
                        var time = segmentResult.time;
                        var dataSource = segmentResult.source;
                        
                        if (dataSource === "OSRM") {
                            osrmSuccessCount++;
                        }
                        
                        totalDistance += distance;
                        totalTime += time;
                        
                        // Ulo≈æi≈• segment data pre atrib√∫ty (target point m√° atrib√∫ty)
                        segmentData.push({
                            pointType: to.routeType,
                            pointIndex: to.routeIndex,
                            distance: distance,
                            time: time,
                            source: dataSource
                        });
                        
                        addDebug("    ‚úÖ Segment " + (seg + 1) + ": " + distance.toFixed(1) + " km, " + 
                                (time * 60).toFixed(0) + " min (" + dataSource + ") ‚Üí " + to.routeType);
                    } else {
                        addError("Segment " + (seg + 1) + " sa nepodarilo spracova≈•", "krok1_4_segment_" + seg);
                        segmentChyby++;
                    }
                    
                } catch (segmentError) {
                    addError("Chyba pri spracovan√≠ segmentu " + (seg + 1) + ": " + segmentError.toString(), "krok1_4_segment_" + seg);
                    segmentChyby++;
                }
            }
            
            // Ulo≈æ celkov√∫ vzdialenos≈•
            if (totalSegments > segmentChyby) {
                var roundedDistance = Math.round(totalDistance * 10) / 10;
                
                try {
                    currentEntry.set(CONFIG.fields.km, roundedDistance);
                    addDebug("  üíæ Celkov√° vzdialenos≈• ulo≈æen√°: " + roundedDistance + " km");
                    step3Success = true;
                } catch (distanceError) {
                    addError("Nepodarilo sa ulo≈æi≈• vzdialenos≈•: " + distanceError.toString(), "krok1_4_save_distance");
                }
                
                addDebug("‚úÖ SEGMENTY TRASY DOKONƒåEN√â:");
                addDebug("  üìè Celkov√° vzdialenos≈•: " + totalDistance.toFixed(1) + " km");
                addDebug("  ‚è±Ô∏è Celkov√Ω ƒças segmentov: " + totalTime.toFixed(2) + " h (" + Math.round(totalTime * 60) + " min)");
                addDebug("  üó∫Ô∏è OSRM √∫spechy: " + osrmSuccessCount + "/" + totalSegments + " segmentov");
                addDebug("  üìã Segment data pre atrib√∫ty: " + segmentData.length + " z√°znamov");
                
            } else {
                addError("Pr√≠li≈° veƒæa ch√Ωb pri spracovan√≠ segmentov: " + segmentChyby + "/" + totalSegments, "krok1_4");
            }
            
        } catch (segmentProcessingError) {
            addError("Kritick√° chyba pri spracovan√≠ segmentov: " + segmentProcessingError.toString(), "krok1_4");
        }
    }
    
    if (step1Success && step2Success && step3Success && segmentData.length > 0) {
        // KROK 1.5: Nastavenie atrib√∫tov zast√°vok a cieƒæa
        addDebug("üè∑Ô∏è KROK 1.5: Nastavujem atrib√∫ty...");
        
        var atributResult = setStopAttributes(currentEntry, segmentData);
        if (atributResult && atributResult.success) {
            addDebug("‚úÖ Atrib√∫ty √∫spe≈°ne nastaven√©");
            step4Success = true;
        } else {
            addDebug("‚ö†Ô∏è Probl√©my pri nastavovan√≠ atrib√∫tov");
            // Pokraƒçuj aj tak - atrib√∫ty nie s√∫ kritick√©
            step4Success = true;
        }
    }
    
    if (step1Success && step2Success && step3Success && step4Success && segmentData.length > 0) {
        // KROK 1.6: V√Ωpoƒçet celkov√©ho ƒçasu z atrib√∫tov
        addDebug("‚è∞ KROK 1.6: Vypoƒç√≠tavam celkov√Ω ƒças z atrib√∫tov...");
        
        var timeResult = calculateTotalTimeFromAttributes(currentEntry, segmentData);
        if (timeResult && timeResult.success) {
            addDebug("‚úÖ Celkov√Ω ƒças √∫spe≈°ne vypoƒç√≠tan√Ω z atrib√∫tov");
            step5Success = true;
            
            return {
                success: true,
                distance: totalDistance,
                casJazdy: timeResult.casJazdy,
                casNaZastavkach: timeResult.casNaZastavkach,
                celkovyCas: timeResult.celkovyCas,
                osrmCount: osrmSuccessCount,
                totalSegments: totalSegments,
                errorCount: segmentChyby,
                atributResult: atributResult
            };
        } else {
            addError("Nepodarilo sa vypoƒç√≠ta≈• celkov√Ω ƒças z atrib√∫tov", "krok1_6");
        }
    }
    
    addDebug("‚ùå V√Ωpoƒçet trasy ne√∫spe≈°n√Ω");
    return false;
}

// ==============================================
// KONTROLA A LINKOVANIE ≈†OF√âRA DO POS√ÅDKY
// ==============================================

function kontrolujSoferaVPosadke() {
    addDebug("üë®‚Äç‚úàÔ∏è === KONTROLA ≈†OF√âRA V POS√ÅDKE ===");
    
    var currentEntry = entry();
    var soferPridany = false;
    
    // Z√≠skaj ≈°of√©ra a pos√°dku
    var sofer = currentEntry.field(CONFIG.fields.sofer);
    var posadka = currentEntry.field(CONFIG.fields.posadka);
    
    addDebug("üîç Kontrolujem ≈°of√©ra a pos√°dku...");
    addDebug("  üë®‚Äç‚úàÔ∏è ≈†of√©r: " + (sofer && sofer.length > 0 ? sofer.length + " z√°znamov" : "CH√ùBA"));
    addDebug("  üë• Pos√°dka: " + (posadka && posadka.length > 0 ? posadka.length + " ƒçlenov" : "PR√ÅZDNA"));
    
    // Ak nie je ≈°of√©r vyplnen√Ω, preskaƒç
    if (!sofer || sofer.length === 0) {
        addDebug("‚ö†Ô∏è ≈†of√©r nie je vyplnen√Ω - preskakujem kontrolu");
        return false;
    }
    
    // Vezmi prv√©ho ≈°of√©ra (ak je viac)
    var soferZaznam = sofer[0];
    
    // Z√≠skaj meno ≈°of√©ra pre debug
    var menoSofera = "Nezn√°my";
    try {
        var tempMeno = soferZaznam.field(CONFIG.zamestnancilFields.meno);
        if (tempMeno) {
            menoSofera = tempMeno;
        }
    } catch (menoError) {
        addDebug("  ‚ö†Ô∏è Nepodarilo sa z√≠ska≈• meno ≈°of√©ra");
    }
    
    addDebug("üë®‚Äç‚úàÔ∏è ≈†of√©r: " + menoSofera);
    
    // Ak nie je pos√°dka, vytvor ju so ≈°of√©rom
    if (!posadka || posadka.length === 0) {
        addDebug("üìù Pos√°dka je pr√°zdna - prid√°vam ≈°of√©ra");
        
        try {
            currentEntry.set(CONFIG.fields.posadka, sofer);
            addDebug("‚úÖ ≈†of√©r pridan√Ω do pr√°zdnej pos√°dky");
            soferPridany = true;
        } catch (setPosadkaError) {
            addError("Nepodarilo sa nastavi≈• ≈°of√©ra do pr√°zdnej pos√°dky: " + setPosadkaError.toString(), "kontrolujSofera_setPosadka");
        }
    } else {
        // Skontroluj ƒçi ≈°of√©r u≈æ je v pos√°dke
        addDebug("üîç Kontrolujem ƒçi ≈°of√©r u≈æ je v pos√°dke...");
        
        var soferUzVPosadke = false;
        
        for (var i = 0; i < posadka.length; i++) {
            var clenPosadky = posadka[i];
            
            if (!clenPosadky) {
                addDebug("    ‚ö†Ô∏è ƒålen pos√°dky " + (i + 1) + " je null");
                continue;
            }
            
            // Z√≠skaj meno ƒçlena pos√°dky pre porovnanie
            var menoClenaPosadky = "Nezn√°my";
            try {
                var tempMenoClen = clenPosadky.field(CONFIG.zamestnancilFields.meno);
                if (tempMenoClen) {
                    menoClenaPosadky = tempMenoClen;
                }
            } catch (menoClenError) {
                addDebug("    ‚ö†Ô∏è Nepodarilo sa z√≠ska≈• meno ƒçlena " + (i + 1));
            }
            
            addDebug("    üë§ ƒålen " + (i + 1) + ": " + menoClenaPosadky);
            
            // Porovnaj objekty - sk√∫s r√¥zne sp√¥soby
            try {
                // Met√≥da 1: Porovnanie objektov
                if (clenPosadky === soferZaznam) {
                    addDebug("    ‚úÖ ≈†of√©r n√°jden√Ω v pos√°dke (object comparison)");
                    soferUzVPosadke = true;
                    break;
                }
                
                // Met√≥da 2: Porovnanie mien (ak object comparison nefunguje)
                if (menoSofera !== "Nezn√°my" && menoClenaPosadky !== "Nezn√°my" && 
                    menoSofera === menoClenaPosadky) {
                    addDebug("    ‚úÖ ≈†of√©r n√°jden√Ω v pos√°dke (name comparison)");
                    soferUzVPosadke = true;
                    break;
                }
                
                // Met√≥da 3: Porovnanie cez field values (ak maj√∫ ID)
                try {
                    var soferField = soferZaznam.field("ID") || soferZaznam.field("id");
                    var clenField = clenPosadky.field("ID") || clenPosadky.field("id");
                    
                    if (soferField && clenField && soferField === clenField) {
                        addDebug("    ‚úÖ ≈†of√©r n√°jden√Ω v pos√°dke (ID comparison)");
                        soferUzVPosadke = true;
                        break;
                    }
                } catch (idError) {
                    // ID polja nemusia existova≈•
                }
                
            } catch (porovnanieError) {
                addDebug("    ‚ö†Ô∏è Chyba pri porovnan√≠: " + porovnanieError.toString());
            }
        }
        
        if (soferUzVPosadke) {
            addDebug("‚úÖ ≈†of√©r u≈æ je v pos√°dke - neprid√°vam");
        } else {
            addDebug("‚ùå ≈†of√©r nie je v pos√°dke - prid√°vam ho");
            
            try {
                // Vytvor nov√∫ pos√°dku s existuj√∫cimi ƒçlenmi + ≈°of√©r
                var novaPosadka = [];
                
                // Pridaj existuj√∫cich ƒçlenov
                for (var j = 0; j < posadka.length; j++) {
                    novaPosadka.push(posadka[j]);
                }
                
                // Pridaj ≈°of√©ra
                novaPosadka.push(soferZaznam);
                
                addDebug("üìù Nastavujem roz≈°√≠ren√∫ pos√°dku: " + (posadka.length) + " + 1 = " + novaPosadka.length + " ƒçlenov");
                
                currentEntry.set(CONFIG.fields.posadka, novaPosadka);
                addDebug("‚úÖ ≈†of√©r √∫spe≈°ne pridan√Ω do pos√°dky");
                soferPridany = true;
                
            } catch (linkError) {
                addError("Nepodarilo sa prida≈• ≈°of√©ra do pos√°dky: " + linkError.toString(), "kontrolujSofera_link");
                
                // Sk√∫s alternat√≠vny pr√≠stup cez link() met√≥du
                try {
                    addDebug("üîÑ Sk√∫≈°am alternat√≠vnu link() met√≥du...");
                    currentEntry.link(CONFIG.fields.posadka, soferZaznam);
                    addDebug("‚úÖ ≈†of√©r pridan√Ω cez link() met√≥du");
                    soferPridany = true;
                } catch (linkAltError) {
                    addError("Link() met√≥da tie≈æ zlyhala: " + linkAltError.toString(), "kontrolujSofera_linkAlt");
                }
            }
        }
    }
    
    if (soferPridany) {
        addDebug("üéâ ≈†of√©r √∫spe≈°ne pridan√Ω do pos√°dky!");
        
        // Over aktu√°lny stav pos√°dky
        try {
            var aktualnaPosadka = currentEntry.field(CONFIG.fields.posadka);
            addDebug("üìä Aktu√°lna pos√°dka: " + (aktualnaPosadka ? aktualnaPosadka.length + " ƒçlenov" : "null"));
        } catch (checkError) {
            addDebug("‚ö†Ô∏è Nepodarilo sa overi≈• aktu√°lnu pos√°dku");
        }
    }
    
    return soferPridany;
}

// ==============================================
// V√ùPOƒåET MIEZD POS√ÅDKY S CELKOV√ùM ƒåASOM - ROZ≈†√çREN√Å VERZIA
// ==============================================

function calculateMzdy() {
    addDebug("üí∞ === KROK 2: V√ùPOƒåET MIEZD POS√ÅDKY (CELKOV√ù ƒåAS) ===");
    
    var currentEntry = entry();
    var step1Success = false; // Valid√°cia z√°kladn√Ωch √∫dajov
    var step2Success = false; // Spracovanie pos√°dky
    var step3Success = false; // Finaliz√°cia miezd
    
    var celkoveMzdy = 0;
    var pocetSpracovanych = 0;
    var pocetChyb = 0;
    var hodinovkyZamestnancov = []; // Lok√°lne ulo≈æenie hodinoviek namiesto atrib√∫tov
    
    // KROK 2.1: Valid√°cia z√°kladn√Ωch √∫dajov
    addDebug("üìã KROK 2.1: Z√≠skavam z√°kladn√© √∫daje pre mzdy...");
    
    var datumJazdy = currentEntry.field(CONFIG.fields.datum);
    var celkovyCasHodiny = currentEntry.field(CONFIG.fields.celkovyCas); // ZMENEN√â: pou≈æ√≠va celkov√Ω ƒças
    var posadka = currentEntry.field(CONFIG.fields.posadka);
    
    addDebug("  üìÖ D√°tum jazdy: " + (datumJazdy ? moment(datumJazdy).format("DD.MM.YYYY") : "CH√ùBA"));
    addDebug("  ‚è±Ô∏è Celkov√Ω ƒças: " + (celkovyCasHodiny ? celkovyCasHodiny.toFixed(2) + " h" : "CH√ùBA"));
    addDebug("  üë• Pos√°dka: " + (posadka && posadka.length > 0 ? posadka.length + " ƒçlenov" : "CH√ùBA"));
    
    // Fallback na ƒças jazdy ak celkov√Ω ƒças nie je dostupn√Ω
    if (!celkovyCasHodiny || celkovyCasHodiny <= 0) {
        addDebug("‚ö†Ô∏è Celkov√Ω ƒças nedostupn√Ω, sk√∫≈°am ƒças jazdy ako fallback...");
        var casJazdyHodiny = currentEntry.field(CONFIG.fields.casJazdy);
        if (casJazdyHodiny && casJazdyHodiny > 0) {
            celkovyCasHodiny = casJazdyHodiny;
            addDebug("  üîÑ Pou≈æijem ƒças jazdy: " + celkovyCasHodiny.toFixed(2) + " h");
        }
    }
    
    // Valid√°cia z√°kladn√Ωch po≈æiadaviek
    if (!datumJazdy) {
        addError("D√°tum jazdy nie je vyplnen√Ω", "krok2_1");
    } else if (!celkovyCasHodiny || celkovyCasHodiny <= 0) {
        addError("Celkov√Ω ƒças ani ƒças jazdy nie je vypoƒç√≠tan√Ω alebo je neplatn√Ω", "krok2_1");
    } else if (!posadka || posadka.length === 0) {
        addError("Pos√°dka nie je dostupn√° alebo je pr√°zdna", "krok2_1");
    } else {
        addDebug("‚úÖ Z√°kladn√© √∫daje pre mzdy s√∫ v poriadku");
        step1Success = true;
    }
    
    if (step1Success) {
        // KROK 2.2: Spracovanie ka≈æd√©ho ƒçlena pos√°dky
        addDebug("üë• KROK 2.2: Sprac√∫vam ƒçlenov pos√°dky s celkov√Ωm ƒçasom...");
        addDebug("üîó Hodinovky sa ukladaj√∫ lok√°lne v scripte namiesto atrib√∫tov");
        addDebug("üìä Debug logging: V≈ΩDY AKT√çVNY");
        
        for (var i = 0; i < posadka.length; i++) {
            var zamestnanec = posadka[i];
            addDebug("\n--- Zamestnanec " + (i + 1) + "/" + posadka.length + " ---");
            
            if (!zamestnanec) {
                addError("Zamestnanec na poz√≠cii " + i + " je null", "krok2_2_zamestnanec_" + i);
                hodinovkyZamestnancov[i] = 0; // Nastav 0 pre null zamestnancov
                pocetChyb++;
            } else {
                try {
                    // Z√≠skaj meno zamestnanca
                    var menoZamestnanca = "Nezn√°my";
                    try {
                        var tempMeno = zamestnanec.field(CONFIG.zamestnancilFields.meno);
                        if (tempMeno) {
                            menoZamestnanca = tempMeno;
                        }
                    } catch (menoError) {
                        addDebug("  ‚ö†Ô∏è Nepodarilo sa z√≠ska≈• meno");
                    }
                    
                    addDebug("  üë§ " + menoZamestnanca);
                    
                    // Inicializuj hodinovku pre tohto zamestnanca
                    hodinovkyZamestnancov[i] = 0;
                    
                    // N√°jdi sadzby zamestnanca pomocou linksFrom
                    addDebug("  üîç Hƒæad√°m sadzby cez linksFrom...");
                    var sadzbyZamestnanca = null;
                    var linksFromSuccess = false;
                    
                    try {
                        sadzbyZamestnanca = zamestnanec.linksFrom(CONFIG.sadzbyLibrary, CONFIG.sadzbyFields.zamestnanec);
                        if (sadzbyZamestnanca && sadzbyZamestnanca.length > 0) {
                            addDebug("  ‚úÖ Na≈°iel " + sadzbyZamestnanca.length + " sadzieb");
                            linksFromSuccess = true;
                        } else {
                            addError("Zamestnanec " + menoZamestnanca + " nem√° sadzby", "krok2_2_linksFrom_zamestnanec_" + i);
                            pocetChyb++;
                        }
                    } catch (linksError) {
                        addError("LinksFrom zlyhalo pre " + menoZamestnanca + ": " + linksError.toString(), "krok2_2_linksFrom_zamestnanec_" + i);
                        pocetChyb++;
                    }
                    
                    if (linksFromSuccess) {
                        // N√°jdi najnov≈°iu platn√∫ sadzbu k d√°tumu jazdy
                        var aktualnaHodinovka = null;
                        var najnovsiDatum = null;
                        
                        addDebug("  üìã Analyzujem sadzby k d√°tumu " + moment(datumJazdy).format("DD.MM.YYYY") + ":");
                        
                        for (var j = 0; j < sadzbyZamestnanca.length; j++) {
                            var sadzbaEntry = sadzbyZamestnanca[j];
                            
                            if (!sadzbaEntry) {
                                addDebug("    ‚ö†Ô∏è Sadzba " + j + " je null");
                            } else {
                                try {
                                    var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
                                    var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
                                    
                                    addDebug("    üìã Sadzba " + j + ": " + hodinovka + " ‚Ç¨/h od " + 
                                            (platnostOd ? moment(platnostOd).format("DD.MM.YYYY") : "?"));
                                    
                                    if (platnostOd && hodinovka && platnostOd <= datumJazdy) {
                                        if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                                            najnovsiDatum = platnostOd;
                                            aktualnaHodinovka = hodinovka;
                                            addDebug("    ‚úÖ Najnov≈°ia platn√° sadzba: " + hodinovka + " ‚Ç¨/h");
                                        }
                                    } else {
                                        addDebug("    ‚ùå Sadzba neplatn√° k d√°tumu");
                                    }
                                } catch (sadzbaFieldError) {
                                    addDebug("    ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ sadzby " + j + ": " + sadzbaFieldError.toString());
                                }
                            }
                        }
                        
                        if (!aktualnaHodinovka || aktualnaHodinovka <= 0) {
                            addError("Nena≈°la sa platn√° sadzba pre " + menoZamestnanca + " k d√°tumu", "krok2_2_sadzba_zamestnanec_" + i);
                            pocetChyb++;
                        } else {
                            addDebug("  üí∂ Fin√°lna hodinovka: " + aktualnaHodinovka + " ‚Ç¨/h");
                            
                            // Ulo≈æ hodinovku do lok√°lneho poƒæa
                            hodinovkyZamestnancov[i] = aktualnaHodinovka;
                            addDebug("  üíæ Hodinovka ulo≈æen√° lok√°lne: " + aktualnaHodinovka + " ‚Ç¨/h");
                            
                            // Vypoƒç√≠taj mzdu pre tohto zamestnanca - ZMENEN√â: pou≈æ√≠va celkov√Ω ƒças
                            var mzdaZamestnanca = aktualnaHodinovka * celkovyCasHodiny;
                            addDebug("  üí∞ Mzda: " + aktualnaHodinovka + " ‚Ç¨/h √ó " + celkovyCasHodiny.toFixed(2) + " h = " + mzdaZamestnanca.toFixed(2) + " ‚Ç¨");
                            
                            // Priebe≈æne pripoƒç√≠taj k celkov√Ωm mzd√°m
                            celkoveMzdy += mzdaZamestnanca;
                            pocetSpracovanych++;
                        }
                    }
                    
                } catch (zamestnanecError) {
                    addError("Chyba pri spracovan√≠ zamestnanca " + (i + 1) + ": " + zamestnanecError.toString(), "krok2_2_general_zamestnanec_" + i);
                    pocetChyb++;
                }
            }
        }
        
        addDebug("\nüìä KROK 2.2 V√ùSLEDKY:");
        addDebug("  ‚úÖ Spracovan√Ωch: " + pocetSpracovanych + "/" + posadka.length);
        addDebug("  ‚ùå Ch√Ωb: " + pocetChyb);
        addDebug("  üí∞ Celkov√© mzdy: " + celkoveMzdy.toFixed(2) + " ‚Ç¨");
        addDebug("  üìã Hodinovky lok√°lne: [" + hodinovkyZamestnancov.join(", ") + "] ‚Ç¨/h");
        addDebug("  ‚è±Ô∏è Z√°kladn√Ω ƒças: " + celkovyCasHodiny.toFixed(2) + " h (celkov√Ω ƒças jazdy + zast√°vky)");
        
        // Nastav atrib√∫t hodinovka s priemernou hodnotou
        if (pocetSpracovanych > 0) {
            var sumaHodinoviek = 0;
            var pocetPlatnychHodinoviek = 0;
            
            for (var h = 0; h < hodinovkyZamestnancov.length; h++) {
                if (hodinovkyZamestnancov[h] > 0) {
                    sumaHodinoviek += hodinovkyZamestnancov[h];
                    pocetPlatnychHodinoviek++;
                }
            }
            
            if (pocetPlatnychHodinoviek > 0) {
                var priemernaHodinovka = sumaHodinoviek / pocetPlatnychHodinoviek;
                addDebug("  üßÆ Priemern√° hodinovka: " + priemernaHodinovka.toFixed(2) + " ‚Ç¨/h");
                
                // Sk√∫s nastavenie atrib√∫tov s error handling - ‚úÖ SPR√ÅVNE API podƒæa dokument√°cie
                var atributSuccess = false;
                
                try {
                    // ‚úÖ SPR√ÅVNE: entry().field("pole")[index].setAttr("atrib√∫t", hodnota)
                    var posadkaPole = entry().field(CONFIG.fields.posadka);
                    if (posadkaPole && posadkaPole.length > 0) {
                        // Nastav priemern√° hodinovka pre prv√©ho ƒçlena ako reprezentat√≠vnu hodnotu
                        posadkaPole[0].setAttr("hodinovka", priemernaHodinovka);
                        addDebug("  ‚úÖ Atrib√∫t hodinovka nastaven√Ω (priemern√° na prvom ƒçlenovi)");
                        atributSuccess = true;
                    }
                } catch (attr1Error) {
                    addDebug("  ‚ùå Atrib√∫t hodinovka zlyhalo: " + attr1Error.toString());
                }
                
                // Sk√∫s nastavenie individu√°lnych atrib√∫tov pre ka≈æd√©ho ƒçlena pos√°dky
                if (!atributSuccess) {
                    try {
                        addDebug("  üîÑ Sk√∫≈°am individu√°lne atrib√∫ty pre ka≈æd√©ho ƒçlena...");
                        var individualSuccess = 0;
                        var posadkaPole2 = entry().field(CONFIG.fields.posadka);
                        
                        for (var p = 0; p < posadkaPole2.length; p++) {
                            if (hodinovkyZamestnancov[p] > 0) {
                                try {
                                    posadkaPole2[p].setAttr("hodinovka", hodinovkyZamestnancov[p]);
                                    addDebug("    üíæ ƒålen " + (p + 1) + " hodinovka: " + hodinovkyZamestnancov[p] + " ‚Ç¨/h");
                                    individualSuccess++;
                                } catch (individualError) {
                                    addDebug("    ‚ùå ƒålen " + (p + 1) + " atrib√∫t zlyhalo: " + individualError.toString());
                                }
                            }
                        }
                        
                        if (individualSuccess > 0) {
                            addDebug("  ‚úÖ Individu√°lne atrib√∫ty nastaven√© pre " + individualSuccess + " ƒçlenov");
                            atributSuccess = true;
                        }
                    } catch (attr2Error) {
                        addDebug("  ‚ùå Individu√°lne atrib√∫ty zlyhali: " + attr2Error.toString());
                    }
                }
                
                // Overenie nastavenia atrib√∫tov
                if (atributSuccess) {
                    try {
                        var posadkaPoleCheck = entry().field(CONFIG.fields.posadka);
                        for (var check = 0; check < Math.min(posadkaPoleCheck.length, 3); check++) {
                            var kontrolaHodinovka = posadkaPoleCheck[check].attr("hodinovka");
                            if (kontrolaHodinovka) {
                                addDebug("  ‚úÖ Overenie ƒçlen " + (check + 1) + ": " + kontrolaHodinovka + " ‚Ç¨/h");
                            }
                        }
                    } catch (checkError) {
                        addDebug("  ‚ö†Ô∏è Chyba pri overen√≠ atrib√∫tov: " + checkError.toString());
                    }
                } else {
                    addDebug("  üí° Pozn√°mka: Hodinovky s√∫ ulo≈æen√© lok√°lne v scripte");
                }
            }
        }
        
        if (pocetSpracovanych > 0) {
            step2Success = true;
        } else {
            addError("≈Ωiadni zamestnanci neboli √∫spe≈°ne spracovan√≠", "krok2_2");
        }
    }
    
    if (step1Success && step2Success) {
        // KROK 2.3: Finaliz√°cia a ulo≈æenie miezd
        addDebug("üíæ KROK 2.3: Finaliz√°cia miezd...");
        
        try {
            var finalMzdy = Math.round(celkoveMzdy * 100) / 100;
            currentEntry.set(CONFIG.fields.mzdy, finalMzdy);
            addDebug("  üíæ Mzdov√© n√°klady ulo≈æen√©: " + finalMzdy + " ‚Ç¨");
            step3Success = true;
        } catch (saveError) {
            addError("Nepodarilo sa ulo≈æi≈• mzdov√© n√°klady: " + saveError.toString(), "krok2_3");
        }
    }
    
    if (step1Success && step2Success && step3Success) {
        addDebug("‚úÖ MZDOV√â N√ÅKLADY √öSPE≈†NE DOKONƒåEN√â (CELKOV√ù ƒåAS)");
        return {
            success: true,
            totalMzdy: celkoveMzdy,
            pocetSpracovanych: pocetSpracovanych,
            pocetChyb: pocetChyb,
            pocetCelkom: posadka.length,
            celkovyCas: celkovyCasHodiny
        };
    } else {
        addDebug("‚ùå V√Ωpoƒçet mzdov√Ωch n√°kladov ne√∫spe≈°n√Ω");
        return false;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA - SUCCESS FLAG WORKFLOW
// ==============================================

function hlavnaFunkcia() {
    addDebug("üöÄ === ≈†TART KNIHA J√ÅZD WORKFLOW (FIXED) ===");
    
    var currentEntry = entry();
    var globalSuccess = false;
    
    addDebug("Debug re≈æim: V≈ΩDY AKT√çVNY");
    addDebug("‚úÖ OPRAVY v tejto verzii:");
    addDebug("  - Pridan√° funkcia getDefaultZdrzanie()");
    addDebug("  - Pridan√° funkcia convertDurationToHours()");
    addDebug("  - Opraven√° funkcia isZdrztanieEmpty()");
    addDebug("  - Pou≈æ√≠va sa calculateTotalTimeFromAttributes() namiesto estimate");
    addDebug("  - Default zdr≈æanie sa nastavuje len ak je pr√°zdne alebo 0");
    addDebug("Nov√© polia: ƒåas na zast√°vkach='" + CONFIG.fields.casNaZastavkach + "', Celkov√Ω ƒças='" + CONFIG.fields.celkovyCas + "'");
    addDebug("Nov√© atrib√∫ty: trvanie='" + CONFIG.attributes.trvanie + "', zdr≈æanie='" + CONFIG.attributes.zdrzanie + "', km='" + CONFIG.attributes.km + "'");
    addDebug("Mzdov√© n√°klady sa poƒç√≠taj√∫ z celkov√©ho ƒçasu namiesto ƒçasu jazdy");
    
    // Vyma≈æ predch√°dzaj√∫ce logy hneƒè na zaƒçiatku
    currentEntry.set(CONFIG.debugFieldName, "");
    currentEntry.set(CONFIG.errorFieldName, "");
    addDebug("üßπ Vymazan√© predch√°dzaj√∫ce logy");
    
    // Reset performance metrics
    performanceMetrics = {
        osrmSuccessCount: 0,
        totalApiCalls: 0,
        totalResponseTime: 0,
        errorCount: 0
    };
    
    // Test HTTP funkcionality
    try {
        var testHttp = http();
        if (testHttp) {
            addDebug("‚úÖ HTTP funkcia dostupn√° v Memento");
        } else {
            addDebug("‚ùå HTTP funkcia nedostupn√°");
        }
    } catch (httpError) {
        addDebug("‚ùå HTTP funkcia chyba: " + httpError);
    }
    
    var trasaResult = false;
    var soferResult = false;
    var mzdyResult = false;
    
    // KROK 1: V√Ωpoƒçet vzdialenosti, ƒçasu trasy a atrib√∫tov
    addDebug("\nüìè === F√ÅZA 1: V√ùPOƒåET TRASY S ATRIB√öTMI ===");
    try {
        trasaResult = calculateRouteDistanceAndTime();
        if (trasaResult && trasaResult.success) {
            addDebug("‚úÖ F√°za 1 √∫spe≈°n√° - trasa s atrib√∫tmi vypoƒç√≠tan√°");
            globalSuccess = true;
        } else {
            addDebug("‚ùå F√°za 1 ne√∫spe≈°n√° - trasu sa nepodarilo vypoƒç√≠ta≈•");
        }
    } catch (trasaError) {
        addError("Kritick√° chyba pri v√Ωpoƒçte trasy: " + trasaError.toString(), "main_trasa");
    }
    
    // KROK 1.5: Kontrola a linkovanie ≈°of√©ra do pos√°dky
    addDebug("\nüë®‚Äç‚úàÔ∏è === F√ÅZA 1.5: KONTROLA ≈†OF√âRA ===");
    try {
        soferResult = kontrolujSoferaVPosadke();
        if (soferResult) {
            addDebug("‚úÖ F√°za 1.5 - ≈°of√©r pridan√Ω do pos√°dky");
        } else {
            addDebug("‚ÑπÔ∏è F√°za 1.5 - ≈°of√©r u≈æ bol v pos√°dke alebo nie je vyplnen√Ω");
        }
    } catch (soferError) {
        addError("Kritick√° chyba pri kontrole ≈°of√©ra: " + soferError.toString(), "main_sofer");
    }
    
    // KROK 2: V√Ωpoƒçet mzdov√Ωch n√°kladov pos√°dky s celkov√Ωm ƒçasom
    addDebug("\nüí∞ === F√ÅZA 2: V√ùPOƒåET MZDOV√ùCH N√ÅKLADOV (CELKOV√ù ƒåAS) ===");
    if (trasaResult && trasaResult.success) {
        try {
            mzdyResult = calculateMzdy();
            if (mzdyResult && mzdyResult.success) {
                addDebug("‚úÖ F√°za 2 √∫spe≈°n√° - mzdov√© n√°klady vypoƒç√≠tan√© z celkov√©ho ƒçasu");
            } else {
                addDebug("‚ùå F√°za 2 ne√∫spe≈°n√° - mzdov√© n√°klady sa nepodarilo vypoƒç√≠ta≈•");
            }
        } catch (mzdyError) {
            addError("Kritick√° chyba pri v√Ωpoƒçte mzdov√Ωch n√°kladov: " + mzdyError.toString(), "main_mzdy");
        }
    } else {
        addDebug("‚ö†Ô∏è Preskakujem v√Ωpoƒçet mzdov√Ωch n√°kladov - celkov√Ω ƒças nie je dostupn√Ω");
    }
    
    // Finaliz√°cia a spr√°va pou≈æ√≠vateƒæovi
    addDebug("\nüèÅ === KONIEC KNIHA J√ÅZD WORKFLOW (FIXED) ===");
    
    saveLogs();
    
    // Zostavy fin√°lnu spr√°vu
    var finalMessage = "";
    
    if (globalSuccess) {
        finalMessage = "‚úÖ Kniha j√°zd dokonƒçen√°! (OPRAVEN√Å VERZIA)\n\n";
        
        // Spr√°va o trase
        if (trasaResult && trasaResult.success) {
            var casJazdyMinutes = Math.round(trasaResult.casJazdy * 60);
            var casNaZastavkachMinutes = Math.round(trasaResult.casNaZastavkach * 60);
            var celkovyCasMinutes = Math.round(trasaResult.celkovyCas * 60);
            
            var casJazdyDisplay = casJazdyMinutes >= 60 ? 
                Math.floor(casJazdyMinutes / 60) + "h " + (casJazdyMinutes % 60) + "min" : 
                casJazdyMinutes + "min";
            var casNaZastavkachDisplay = casNaZastavkachMinutes >= 60 ? 
                Math.floor(casNaZastavkachMinutes / 60) + "h " + (casNaZastavkachMinutes % 60) + "min" : 
                casNaZastavkachMinutes + "min";
            var celkovyCasDisplay = celkovyCasMinutes >= 60 ? 
                Math.floor(celkovyCasMinutes / 60) + "h " + (celkovyCasMinutes % 60) + "min" : 
                celkovyCasMinutes + "min";
                
            finalMessage += "üìè Vzdialenos≈•: " + trasaResult.distance.toFixed(1) + " km\n";
            finalMessage += "üöó ƒåas jazdy: " + casJazdyDisplay + "\n";
            finalMessage += "‚è∏Ô∏è ƒåas na zast√°vkach: " + casNaZastavkachDisplay + "\n";
            finalMessage += "‚è±Ô∏è Celkov√Ω ƒças: " + celkovyCasDisplay + "\n";
            finalMessage += "üó∫Ô∏è OSRM √∫spechy: " + trasaResult.osrmCount + "/" + trasaResult.totalSegments + " segmentov\n";
            
            if (trasaResult.atributResult) {
                finalMessage += "üè∑Ô∏è Atrib√∫ty: " + trasaResult.atributResult.totalSuccess + " nastaven√Ωch\n";
                if (trasaResult.atributResult.totalErrors > 0) {
                    finalMessage += "‚ö†Ô∏è Atrib√∫t chyby: " + trasaResult.atributResult.totalErrors + " (pozrite Debug_Log)\n";
                }
            }
        }
        
        // Spr√°va o ≈°of√©r kontrole
        if (soferResult) {
            finalMessage += "\nüë®‚Äç‚úàÔ∏è ≈†of√©r pridan√Ω do pos√°dky\n";
        }
        
        // Spr√°va o mzdov√Ωch n√°kladoch
        if (mzdyResult && mzdyResult.success) {
            finalMessage += "\nüí∞ Mzdov√© n√°klady: " + mzdyResult.totalMzdy.toFixed(2) + " ‚Ç¨\n";
            finalMessage += "üë• Spracovan√Ωch: " + mzdyResult.pocetSpracovanych + "/" + mzdyResult.pocetCelkom + " ƒçlenov\n";
            finalMessage += "‚è∞ Z√°klad: " + mzdyResult.celkovyCas.toFixed(2) + " h (celkov√Ω ƒças)\n";
            
            if (mzdyResult.pocetChyb > 0) {
                finalMessage += "‚ö†Ô∏è Chyby: " + mzdyResult.pocetChyb + " ƒçlenov (pozrite Error_Log)\n";
            }
        }
        
        // Performance metrics
        if (performanceMetrics.totalApiCalls > 0) {
            var successRate = Math.round(performanceMetrics.osrmSuccessCount / performanceMetrics.totalApiCalls * 100);
            finalMessage += "\nüìä API performance: " + successRate + "% √∫spe≈°nos≈•";
        }
        
        message(finalMessage);
    } else {
        var chybovaSprava = "‚ùå Kniha j√°zd sa nepodarila dokonƒçi≈•!\n";
        if (errorLog.length > 0) {
            chybovaSprava += "Pozrite Error_Log pre detaily.";
        }
        message(chybovaSprava);
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

addDebug("=== INICIALIZ√ÅCIA KNIHA J√ÅZD SCRIPTU (FIXED) ===");
addDebug("Script verzia: v2.2.0 - Fixed default zdr≈æanie + improved Duration handling");
addDebug("Timestamp: " + moment().format("DD.MM.YY HH:mm:ss"));

try {
    hlavnaFunkcia();
} catch (kritickachyba) {
    addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "main");
    saveLogs();
    message("‚ùå KRITICK√Å CHYBA! Pozrite Error_Log.");
}