// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA PREPOƒå√çTA≈§ Z√ÅZNAM
// Verzia: 2.5 | D√°tum: 11.08.2025 | Autor: JavaScript Expert  
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// ‚úÖ OPRAVEN√â v2.5: TRY-CATCH SYNTAX ERROR
//    - Opraven√Ω try without catch syntax error na riadku 450
//    - Zaisten√© spr√°vne p√°rovanie v≈°etk√Ωch try-catch blokov
//    - Testovan√© na JavaScript syntax validator
// ==============================================

var CONFIG = {
    debug: true,
    version: "2.6",
    
    // N√°zvy pol√≠ - Doch√°dzka (presn√© z knowledge base)
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod", 
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©", 
        mzdoveNaklady: "Mzdov√© n√°klady",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy atrib√∫tov pre zamestnancov (PRESN√â z knowledge base)
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka", 
        priplatok: "+pr√≠platok (‚Ç¨/h)",  // OPRAVEN√â: presn√Ω n√°zov s (‚Ç¨/h)
        premia: "+pr√©mia (‚Ç¨)",
        pokuta: "-pokuta (‚Ç¨)",
        dennaMzda: "denn√° mzda"
    },
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov"
    },
    
    // Polia v kni≈ænici sadzby zamestnancov
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    }
};

// Glob√°lne premenn√©
var debugLog = [];
var errorLog = [];
var currentEntry = entry();

// ==============================================
// DEBUG SYST√âM (podƒæa working examples)
// ==============================================

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm");
    var errorText = "[" + timestamp + "] ERROR: " + message;
    if (location) {
        errorText += " (Loc: " + location + ")";
    }
    errorLog.push(errorText);
}

function saveLogs() {
    try {
        // Vyma≈æ star√© logy
        currentEntry.set(CONFIG.fields.debugLog, "");
        currentEntry.set(CONFIG.fields.errorLog, "");
        
        // Ulo≈æ nov√© logy
        if (debugLog.length > 0) {
            currentEntry.set(CONFIG.fields.debugLog, debugLog.join("\n"));
        }
        if (errorLog.length > 0) {
            currentEntry.set(CONFIG.fields.errorLog, errorLog.join("\n"));
        }
    } catch (saveError) {
        // Posledn√° z√°chrana
    }
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function roundToQuarter(timeMs) {
    // Zaokr√∫hli na 15 min√∫t
    var quarterMs = 15 * 60 * 1000;
    return Math.round(timeMs / quarterMs) * quarterMs;
}

function formatTime(timeMs) {
    var date = new Date(timeMs);
    return ("0" + date.getHours()).slice(-2) + ":" + ("0" + date.getMinutes()).slice(-2);
}

function calculateHours(prichodMs, odchodMs) {
    // Ak odchod < pr√≠chod, pr√°ca cez polnoc
    if (odchodMs < prichodMs) {
        odchodMs += 24 * 60 * 60 * 1000;
        addDebug("Detekovan√° pr√°ca cez polnoc");
    }
    
    var rozdielMs = odchodMs - prichodMs;
    return Math.round((rozdielMs / (1000 * 60 * 60)) * 100) / 100;
}

// ==============================================
// HƒΩADANIE SADZIEB (podƒæa working pattern)
// ==============================================

function findValidSalary(zamestnanecObject, datum) {
    addDebug("Hƒæad√°m sadzbu pre zamestnanca k d√°tumu: " + moment(datum).format("DD.MM.YYYY"));
    
    try {
        var sadzby = zamestnanecObject.linksFrom(CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            addDebug("≈Ωiadne sadzby nen√°jden√©");
            return 0;
        }
        
        var platnaHodinovka = 0;
        var najnovsiDatum = null;
        
        for (var i = 0; i < sadzby.length; i++) {
            var sadzbaEntry = sadzby[i];
            var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
            var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
            
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    platnaHodinovka = hodinovka;
                }
            }
        }
        
        addDebug("Platn√° hodinovka: " + platnaHodinovka + " ‚Ç¨/h");
        return platnaHodinovka;
        
    } catch (error) {
        addError("Chyba pri hƒæadan√≠ sadzby: " + error.toString(), "findValidSalary");
        return 0;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA - KOMPLETN√ù WORKFLOW
// ==============================================

function hlavnaFunkcia() {
    addDebug("=== ≈†TART DOCH√ÅDZKA PREPOƒåTU v" + CONFIG.version + " ===");
    
    // Reset logov
    debugLog = [];
    errorLog = [];
    
    var globalSuccess = false; // Defin√≠cia glob√°lneho √∫spechu
    
    // KRITICK√Å VALID√ÅCIA - skontroluj ƒçi currentEntry existuje
    if (!currentEntry) {
        addError("KRITICK√Å CHYBA: currentEntry neexistuje", "startup");
        saveLogs();
        message("üí• KRITICK√Å CHYBA!\n\ncurrentEntry je nedefinovan√©.");
        globalSuccess = false;
    } else {
        // Pokraƒçuj s hlavnou logikou len ak currentEntry existuje
        var step1Success = false;
        var step2Success = false;
        var step3Success = false;
        var step4Success = false;
        var step5Success = false;
        var step6Success = false;
        var step7Success = false;
        
        // Premenn√© pre pou≈æitie naprieƒç krokmi
        var datum, prichodRaw, odchodRaw, zamestnanci;
        var prichodRounded, odchodRounded, pracovnaDobaHodiny;
        var pocetPracovnikov, odpracovaneTotal, celkoveMzdy, uspesneSpracovani;
    
    try {
        // KROK 1: Z√≠skanie vstupn√Ωch d√°t
        addDebug("üìã KROK 1: Z√≠skavam vstupn√© d√°ta...");
        
        var datum, prichodRaw, odchodRaw, zamestnanci;
        
        try {
            datum = currentEntry.field(CONFIG.fields.datum);
            addDebug("‚úì D√°tum naƒç√≠tan√Ω: " + (datum ? moment(datum).format("DD.MM.YYYY") : "NULL"));
        } catch (datumError) {
            addError("Chyba pri naƒç√≠tan√≠ d√°tumu: " + datumError.toString(), "datum");
            step1Success = false;
        }
        
        try {
            prichodRaw = currentEntry.field(CONFIG.fields.prichod);
            addDebug("‚úì Pr√≠chod naƒç√≠tan√Ω: " + (prichodRaw ? formatTime(prichodRaw) : "NULL"));
        } catch (prichodError) {
            addError("Chyba pri naƒç√≠tan√≠ pr√≠chodu: " + prichodError.toString(), "prichod");
            step1Success = false;
        }
        
        try {
            odchodRaw = currentEntry.field(CONFIG.fields.odchod);
            addDebug("‚úì Odchod naƒç√≠tan√Ω: " + (odchodRaw ? formatTime(odchodRaw) : "NULL"));
        } catch (odchodError) {
            addError("Chyba pri naƒç√≠tan√≠ odchodu: " + odchodError.toString(), "odchod");
            step1Success = false;
        }
        
        try {
            zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
            addDebug("‚úì Zamestnanci naƒç√≠tan√≠: " + (zamestnanci ? zamestnanci.length : "NULL"));
        } catch (zamestnancyError) {
            addError("Chyba pri naƒç√≠tan√≠ zamestnancov: " + zamestnancyError.toString(), "zamestnanci");
            step1Success = false;
        }
        
        // Valid√°cia
        if (!datum || !prichodRaw || !odchodRaw || !zamestnanci || zamestnanci.length === 0) {
            addError("Ch√Ωbaj√∫ povinn√© √∫daje", "validacia");
            step1Success = false;
        } else {
            addDebug("‚úÖ Vstupn√© d√°ta OK - D√°tum: " + moment(datum).format("DD.MM.YYYY") + 
                     ", Zamestnanci: " + zamestnanci.length);
            step1Success = true;
        }
        var step2Success = false;
        var step3Success = false;
        var step4Success = false;
        var step5Success = false;
        var step6Success = false;
        var step7Success = false;
        
        if (step1Success) {
            // KROK 2: Zaokr√∫hƒæovanie ƒçasov na 15 min√∫t
            addDebug("‚è∞ KROK 2: Zaokr√∫hƒæujem ƒçasy na 15 min√∫t...");
            
            prichodRounded = roundToQuarter(prichodRaw);
            odchodRounded = roundToQuarter(odchodRaw);
            
            addDebug("P√¥vodne: " + formatTime(prichodRaw) + " - " + formatTime(odchodRaw));
            addDebug("Zaokr√∫hlen√©: " + formatTime(prichodRounded) + " - " + formatTime(odchodRounded));
            
            // Ulo≈æ zaokr√∫hlen√© ƒçasy
            try {
                currentEntry.set(CONFIG.fields.prichod, prichodRounded);
                currentEntry.set(CONFIG.fields.odchod, odchodRounded);
                step2Success = true;
            } catch (roundError) {
                addError("Chyba pri ukladan√≠ zaokr√∫hlen√Ωch ƒçasov: " + roundError.toString(), "round");
                step2Success = false;
            }
        }
        
        if (step1Success && step2Success) {
            // KROK 3: V√Ωpoƒçet pracovnej doby
            addDebug("üßÆ KROK 3: Poƒç√≠tam pracovn√∫ dobu...");
            
            pracovnaDobaHodiny = calculateHours(prichodRounded, odchodRounded);
            
            if (pracovnaDobaHodiny <= 0 || pracovnaDobaHodiny > 24) {
                addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny + " h", "pracovnaDoba");
                step3Success = false;
            } else {
                addDebug("Pracovn√° doba: " + pracovnaDobaHodiny + " h");
                try {
                    currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
                    step3Success = true;
                } catch (workError) {
                    addError("Chyba pri ukladan√≠ pracovnej doby: " + workError.toString(), "workTime");
                    step3Success = false;
                }
            }
        }
        
        if (step1Success && step2Success && step3Success) {
            // KROK 4: Poƒçet pracovn√≠kov a odpracovan√© hodiny
            addDebug("üìä KROK 4: Poƒç√≠tam celkov√© hodnoty...");
            
            pocetPracovnikov = zamestnanci.length;
            odpracovaneTotal = Math.round((pocetPracovnikov * pracovnaDobaHodiny) * 100) / 100;
            
            try {
                currentEntry.set(CONFIG.fields.pocetPracovnikov, pocetPracovnikov);
                currentEntry.set(CONFIG.fields.odpracovane, odpracovaneTotal);
                
                addDebug("Poƒçet pracovn√≠kov: " + pocetPracovnikov);
                addDebug("Odpracovan√© celkom: " + odpracovaneTotal + " h");
                step4Success = true;
            } catch (totalError) {
                addError("Chyba pri ukladan√≠ celkov√Ωch hodn√¥t: " + totalError.toString(), "totals");
                step4Success = false;
            }
        }
        if (step1Success && step2Success && step3Success && step4Success) {
            // KROK 5: Spracovanie zamestnancov a atrib√∫ty 
            addDebug("üë• KROK 5: Sprac√∫vam zamestnancov s atrib√∫tmi...");
            
            celkoveMzdy = 0;
            uspesneSpracovani = 0;
            
            for (var i = 0; i < zamestnanci.length; i++) {
                var zamestnanec = zamestnanci[i];
                
                try {
                    addDebug("üë§ Sprac√∫vam zamestnanca " + (i + 1) + "/" + zamestnanci.length);
                    
                    // 1. Nastav odpracovan√© hodiny
                    entry().field(CONFIG.fields.zamestnanci)[i].setAttr(CONFIG.attributes.odpracovane, pracovnaDobaHodiny);
                    addDebug("  Odpracovan√©: " + pracovnaDobaHodiny + " h");
                    
                    // 2. N√°jdi hodinov√∫ sadzbu 
                    var hodinovka = findValidSalary(zamestnanec, datum);
                    entry().field(CONFIG.fields.zamestnanci)[i].setAttr(CONFIG.attributes.hodinovka, hodinovka);
                    addDebug("  Hodinovka: " + hodinovka + " ‚Ç¨/h");
                    
                    // 3. Z√≠skaj pr√≠platky a odmeny
                    var priplatok = 0;
                    var premia = 0; 
                    var pokuta = 0;
                    
                    try {
                        priplatok = entry().field(CONFIG.fields.zamestnanci)[i].attr(CONFIG.attributes.priplatok) || 0;
                        premia = entry().field(CONFIG.fields.zamestnanci)[i].attr(CONFIG.attributes.premia) || 0;
                        pokuta = entry().field(CONFIG.fields.zamestnanci)[i].attr(CONFIG.attributes.pokuta) || 0;
                    } catch (attrError) {
                        addDebug("  Pou≈æ√≠vam default hodnoty pre pr√≠platky");
                    }
                    
                    addDebug("  Pr√≠platok: " + priplatok + " ‚Ç¨/h, Pr√©mia: " + premia + " ‚Ç¨, Pokuta: " + pokuta + " ‚Ç¨");
                    
                    // 4. Vypoƒç√≠taj denn√∫ mzdu
                    var dennaMzda = (pracovnaDobaHodiny * hodinovka) + 
                                   (pracovnaDobaHodiny * priplatok) + 
                                   premia - pokuta;
                    
                    dennaMzda = Math.round(dennaMzda * 100) / 100;
                    
                    entry().field(CONFIG.fields.zamestnanci)[i].setAttr(CONFIG.attributes.dennaMzda, dennaMzda);
                    addDebug("  Denn√° mzda: " + dennaMzda + " ‚Ç¨");
                    
                    celkoveMzdy += dennaMzda;
                    uspesneSpracovani++;
                    
                } catch (employeeError) {
                    addError("Chyba pri spracovan√≠ zamestnanca " + (i + 1) + ": " + employeeError.toString(), "zamestnanec_" + i);
                }
            }
            
            if (uspesneSpracovani > 0) {
                step5Success = true;
            }
        }
        
        if (step1Success && step2Success && step3Success && step4Success && step5Success) {
            // KROK 6: Mzdov√© n√°klady
            addDebug("üí∞ KROK 6: Finalizujem mzdov√© n√°klady...");
            
            celkoveMzdy = Math.round(celkoveMzdy * 100) / 100;
            try {
                currentEntry.set(CONFIG.fields.mzdoveNaklady, celkoveMzdy);
                addDebug("Celkov√© mzdov√© n√°klady: " + celkoveMzdy + " ‚Ç¨");
                addDebug("√öspe≈°ne spracovan√Ωch: " + uspesneSpracovani + "/" + zamestnanci.length);
                step6Success = true;
            } catch (salaryError) {
                addError("Chyba pri ukladan√≠ mzdov√Ωch n√°kladov: " + salaryError.toString(), "salaries");
                step6Success = false;
            }
        }
        
        if (step1Success && step2Success && step3Success && step4Success && step5Success && step6Success) {
            // KROK 7: Info pole
            addDebug("üìù KROK 7: Vytv√°ram info z√°znam...");
            
            try {
                var timestamp = moment().format("DD.MM.YYYY HH:mm");
                var datumStr = moment(datum).format("DD.MM.YYYY");
                
                var infoMessage = "üìä AUTOMATICK√ù PREPOƒåET DOCH√ÅDZKY\n" +
                                 "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n" +
                                 "üïê Vytvoren√©: " + timestamp + "\n" +
                                 "üìÖ D√°tum doch√°dzky: " + datumStr + "\n" +
                                 "ü§ñ Script: Doch√°dzka Prepoƒç√≠ta≈• z√°znam v" + CONFIG.version + "\n\n" +
                                 
                                 "‚è∞ ƒåASY (zaokr√∫hlen√© na 15 min):\n" +
                                 "‚Ä¢ Pr√≠chod: " + formatTime(prichodRounded) + "\n" +
                                 "‚Ä¢ Odchod: " + formatTime(odchodRounded) + "\n" +
                                 "‚Ä¢ Pracovn√° doba: " + pracovnaDobaHodiny + " h\n\n" +
                                 
                                 "üë• ZAMESTNANCI:\n" +
                                 "‚Ä¢ Poƒçet pracovn√≠kov: " + pocetPracovnikov + "\n" +
                                 "‚Ä¢ Odpracovan√© celkom: " + odpracovaneTotal + " h\n" +
                                 "‚Ä¢ √öspe≈°ne spracovan√≠: " + uspesneSpracovani + "/" + zamestnanci.length + "\n\n" +
                                 
                                 "üè∑Ô∏è ATRIB√öTY ZAMESTNANCOV:\n" +
                                 "‚Ä¢ odpracovan√© = Pracovn√° doba (" + pracovnaDobaHodiny + " h)\n" +
                                 "‚Ä¢ hodinovka = LinksFrom sadzby zamestnancov k d√°tumu\n" +
                                 "‚Ä¢ denn√° mzda = (odpracovan√© √ó hodinovka) + (odpracovan√© √ó pr√≠platok) + pr√©mia - pokuta\n\n" +
                                 
                                 "üí∞ FINANƒåN√â V√ùSLEDKY:\n" +
                                 "‚Ä¢ Celkov√© mzdov√© n√°klady: " + celkoveMzdy + " ‚Ç¨\n" +
                                 "‚Ä¢ Vzorec aplikovan√Ω podƒæa TODO ≈°pecifik√°cie\n\n" +
                                 
                                 "üîß TECHNICK√â DETAILY:\n" +
                                 "‚Ä¢ Prepojenie s kni≈ænicou: sadzby zamestnancov\n" +
                                 "‚Ä¢ LinksFrom syntax: objekt.linksFrom(kni≈ænica, pole)\n" +
                                 "‚Ä¢ Atrib√∫ty API: entry().field(pole)[index].attr/setAttr()\n" +
                                 "‚Ä¢ currentEntry.set() pre z√°kladn√© polia\n" +
                                 "‚Ä¢ Null-safe pr√≠stup ku v≈°etk√Ωm poliam\n\n" +
                                 
                                 "üìã Pre debug inform√°cie pozri Debug_Log\n" +
                                 "‚ùó Pri chyb√°ch pozri Error_Log";
                
                currentEntry.set(CONFIG.fields.info, infoMessage);
                addDebug("‚úÖ Info z√°znam vytvoren√Ω");
                step7Success = true;
                
            } catch (infoError) {
                addError("Chyba pri vytv√°ran√≠ info z√°znamu: " + infoError.toString(), "info");
                step7Success = false;
            }
        }
        
        // Nastavenie celkov√©ho √∫spechu
        if (step1Success && step2Success && step3Success && step4Success && step5Success && step6Success && step7Success) {
            addDebug("üéâ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE!");
            globalSuccess = true;
        } else {
            addDebug("‚ùå PREPOƒåET ZLYHAL - niektor√© kroky neboli √∫spe≈°n√©");
            globalSuccess = false;
        }
    } // Koniec else bloku pre currentEntry valid√°ciu
        
    } catch (kritickachyba) {
        addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "hlavnaFunkcia");
        globalSuccess = false;
    }
    
    // Ulo≈æ logy a informuj u≈æ√≠vateƒæa
    saveLogs();
    
    if (globalSuccess) {
        message("‚úÖ Doch√°dzka prepoƒç√≠tan√° √∫spe≈°ne!\n\n" +
               "‚è∞ ƒåasy zaokr√∫hlen√© na 15 min\n" +
               "üìä Pracovn√° doba: " + currentEntry.field(CONFIG.fields.pracovnaDoba) + " h\n" +
               "üë• Zamestnanci: " + currentEntry.field(CONFIG.fields.pocetPracovnikov) + " os√¥b\n" +
               "üí∞ Mzdov√© n√°klady: " + currentEntry.field(CONFIG.fields.mzdoveNaklady) + " ‚Ç¨\n\n" +
               "‚ÑπÔ∏è Detaily v poli 'info'");
    } else {
        message("‚ùå Prepoƒçet doch√°dzky zlyhal!\n\n" +
               "üîç Skontroluj Error_Log pre detaily\n" +
               "üìã Overte vstupn√© d√°ta a sk√∫ste znovu");
    }
    
    return globalSuccess;
}

// ==============================================
// SPUSTENIE SCRIPTU S KRITICK√ùM ERROR HANDLING
// ==============================================

// NAJVY≈†≈†IA √öROVE≈á TRY-CATCH - zabezpeƒç√≠ error log V≈ΩDY
try {
    addDebug("üé¨ Inicializ√°cia Doch√°dzka script v" + CONFIG.version + " - OPRAVEN√â atrib√∫ty n√°zvy");
    
    // Okam≈æit√© ulo≈æenie debug info
    try {
        currentEntry.set(CONFIG.fields.debugLog, debugLog.join("\n"));
    } catch (saveError) {
        // Pokraƒçuj aj keƒè sa debug log nepodar√≠ ulo≈æi≈•
    }
    
    // Spustenie hlavnej funkcie
    hlavnaFunkcia();
    
} catch (spusteniaChyba) {
    // KRITICK√â ERROR HANDLING - V≈ΩDY sa pok√∫si ulo≈æi≈• error
    
    addError("KRITICK√Å CHYBA SPUSTENIA: " + spusteniaChyba.toString(), "startup");
    addError("Script version: " + CONFIG.version, "startup");
    addError("Line/Stack: " + (spusteniaChyba.stack || "No stack trace"), "startup");
    
    // Okam≈æit√© ulo≈æenie error logu
    try {
        currentEntry.set(CONFIG.fields.errorLog, errorLog.join("\n"));
        message("üí• KRITICK√Å CHYBA!\n\nError log ulo≈æen√Ω. Pozri Error_Log pre detaily.\nChyba: " + spusteniaChyba.toString());
    } catch (finalSaveError) {
        // Posledn√° z√°chrana - message s chybou
        message("üí• KRITICK√Å CHYBA!\n\nNepodarilo sa ulo≈æi≈• error log.\nP√¥vodn√° chyba: " + spusteniaChyba.toString() + 
                "\nSave chyba: " + finalSaveError.toString());
    }
}