// ==============================================
// DOCH√ÅDZKA GROUP SUMMARY
// Verzia: 5.0 | D√°tum: 20.08.2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// üìã FUNKCIA:
//    - Po ulo≈æen√≠ doch√°dzky vytvor√≠ s√∫hrnn√∫ notifik√°ciu
//    - Pre Telegram skupinu/t√©mu s prehƒæadom v≈°etk√Ωch zamestnancov
//    - Vyu≈æ√≠va ASISTANTO Notifications Helper
//    - Neodosiela priamo - len vytv√°ra z√°znam
// ‚úÖ v5.0 ZMENY:
//    - Opraven√© v≈°etky syntax chyby
//    - Pridan√Ω proper lazy loading
//    - Action mode kompatibilita
//    - Vylep≈°en√© error handling
//    - Konzistentn√© funkcie a vz≈•ahy
// ==============================================

// Lazy loading premenn√©
var utils = null;
var notifHelper = null;
var currentEntry = null;

// ==============================================
// LAZY LOADING FUNKCIE
// ==============================================

/**
 * Z√≠ska MementoUtils s lazy loading
 */
function getUtils() {
    if (!utils) {
        try {
            if (typeof MementoUtils !== 'undefined') {
                utils = MementoUtils;
            } else {
                throw new Error("MementoUtils kni≈ænica nie je dostupn√°!");
            }
        } catch(e) {
            showError("MementoUtils nie je naƒç√≠tan√©. Script nem√¥≈æe pokraƒçova≈•.", e);
            cancel();
        }
    }
    return utils;
}

/**
 * Z√≠ska ASISTANTONotifications helper
 */
function getNotifHelper() {
    if (!notifHelper) {
        try {
            if (typeof ASISTANTONotifications !== 'undefined') {
                notifHelper = ASISTANTONotifications;
            } else {
                getUtils().addDebug(getCurrentEntry(), "‚ö†Ô∏è ASISTANTONotifications nie je dostupn√Ω");
            }
        } catch(e) {
            // Optional dependency
        }
    }
    return notifHelper;
}

/**
 * Detekuje ƒçi be≈æ√≠ v Action mode
 */
function isActionMode() {
    try {
        return typeof entry === 'undefined' || !entry();
    } catch(e) {
        return true;
    }
}

/**
 * Z√≠ska aktu√°lny entry (kompatibiln√© s Action mode)
 */
function getCurrentEntry() {
    if (!currentEntry) {
        if (isActionMode()) {
            var selected = lib().entries();
            if (selected && selected.length > 0) {
                currentEntry = selected[0];
            } else {
                showError("≈Ωiadne z√°znamy nie s√∫ vybran√©!");
                cancel();
            }
        } else {
            currentEntry = entry();
        }
        
        if (!currentEntry) {
            showError("≈Ωiadny z√°znam na spracovanie!");
            cancel();
        }
    }
    return currentEntry;
}

/**
 * Zobraz√≠ error spr√°vu
 */
function showError(msg, error) {
    var fullMessage = "‚ùå " + msg;
    if (error) {
        fullMessage += "\n\nDetail: " + error.toString();
    }
    
    if (typeof message === 'function') {
        message(fullMessage);
    }
}

// ==============================================
// KONFIGUR√ÅCIA
// ==============================================

var CONFIG = {
    debug: true,
    version: "5.0",
    scriptName: "Doch√°dzka Group Summary",
    
    // Kni≈ænice
    defaultsLibrary: "ASISTANTO Defaults",
    notificationsLibrary: "Notifications",
    telegramGroupsLibrary: "Telegram Groups",
    
    // N√°zvy pol√≠ v Defaults
    defaultsFields: {
        dochadzkaGroupEnabled: "Doch√°dzka skupinov√© notifik√°cie",
        telegramGroupLink: "Telegram skupina doch√°dzky",
        telegramDochadzkaId: "Telegram Doch√°dzka ID",
        nazovFirmy: "N√°zov firmy",
        includeFinancials: "Zahrn√∫≈• finanƒçn√© √∫daje",
        summaryDelay: "Oneskorenie s√∫hrnu (min)"
    },
    
    // N√°zvy pol√≠ v Doch√°dzke
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod",
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        mzdoveNaklady: "Mzdov√© n√°klady",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        poznamka: "Pozn√°mka",
        id: "ID",
        notifikacie: "Notifik√°cie"
    },
    
    // N√°zvy atrib√∫tov
    attributes: {
        odpracovane: "odpracovan√©",
        dennaMzda: "denn√° mzda",
        hodinovka: "hodinovka"
    },
    
    // Polia v ASISTANTO Telegram Groups
    telegramGroupsFields: {
        chatId: "Chat ID",
        threadId: "Thread ID",
        threadName: "N√°zov t√©my",
        groupName: "N√°zov skupiny"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        var utils = getUtils();
        var currentEntry = getCurrentEntry();
        
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
        // 0. CLEANUP - Vyma≈æ star√© notifik√°cie ak existuj√∫
        var cleanupModule = getCleanupModule();
        if (cleanupModule) {
            var cleanupResult = cleanupModule.cleanupOldNotifications(currentEntry);
            if (cleanupResult.deleted > 0) {
                utils.addDebug(currentEntry, "üßπ Vymazan√Ωch " + cleanupResult.deleted + " star√Ωch notifik√°ci√≠");
            }
        }
        
        // 1. Kontrola ƒçi s√∫ povolen√© skupinov√© notifik√°cie
        var settings = loadAllSettings();
        
        var enabled = settings[CONFIG.defaultsFields.dochadzkaGroupEnabled];
        utils.addDebug(currentEntry, "Skupinov√© notifik√°cie povolen√©: " + enabled);
        
        if (!enabled) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è Skupinov√© notifik√°cie s√∫ vypnut√©");
            return;
        }
        
        // 2. Kontrola ƒçi je nastaven√° skupina
        var targetGroup = findTargetGroup(settings);
        
        if (!targetGroup) {
            utils.addDebug(currentEntry, "‚ùå Nie je nastaven√° ≈æiadna Telegram skupina pre doch√°dzku");
            utils.addError(currentEntry, "Nie je nastaven√° Telegram skupina pre doch√°dzku", CONFIG.scriptName);
            return;
        }
        
        // 3. Z√≠skaj zamestnancov
        var zamestnanci = utils.safeGetLinks(currentEntry, CONFIG.fields.zamestnanci);
        if (!zamestnanci || zamestnanci.length === 0) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è ≈Ωiadni zamestnanci v z√°zname");
            return;
        }
        
        utils.addDebug(currentEntry, "üë• Poƒçet zamestnancov: " + zamestnanci.length);
        
        // 4. Priprav s√∫hrnn√∫ spr√°vu
        var summaryMessage = prepareSummaryMessage(zamestnanci, settings);
        
        // 5. Vytvor notifik√°ciu pomocou Notifications Helper
        var notification = createGroupNotification(summaryMessage, targetGroup);
        
        if (notification) {
            // 6. Linkuj notifik√°ciu k doch√°dzke
            if (cleanupModule) {
                cleanupModule.linkNotificationsToDochadzka(currentEntry, [notification]);
            }
            
            utils.addInfo(currentEntry, "Vytvoren√° skupinov√° notifik√°cia", {
                notificationId: notification.field("ID"),
                skupina: targetGroup.name,
                pocetZamestnancov: zamestnanci.length,
                datum: utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY")
            });
            
            utils.addDebug(currentEntry, "‚úÖ === KONIEC - Skupinov√° notifik√°cia vytvoren√° ===");
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• skupinov√∫ notifik√°ciu", CONFIG.scriptName);
        }
        
    } catch (error) {
        getUtils().addError(getCurrentEntry(), error.toString(), CONFIG.scriptName, error);
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Naƒç√≠ta v≈°etky nastavenia z Defaults kni≈ænice
 */
function loadAllSettings() {
    var settings = {};
    var utils = getUtils();
    
    for (var key in CONFIG.defaultsFields) {
        if (CONFIG.defaultsFields.hasOwnProperty(key)) {
            settings[CONFIG.defaultsFields[key]] = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields[key]);
        }
    }
    
    utils.addDebug(getCurrentEntry(), "üìã Nastavenia naƒç√≠tan√© z " + CONFIG.defaultsLibrary);
    
    return settings;
}

/**
 * N√°jde cieƒæov√∫ Telegram skupinu/t√©mu
 */
function findTargetGroup(settings) {
    var targetGroup = null;
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    // Najprv sk√∫s z√≠ska≈• linknut√Ω z√°znam (preferovan√Ω sp√¥sob)
    var telegramGroupLink = CONFIG.defaultsFields.telegramGroupLink;
    if (telegramGroupLink && settings[telegramGroupLink]) {
        utils.addDebug(currentEntry, "üìé Kontrolujem linknut√Ω z√°znam z '" + telegramGroupLink + "'");
        targetGroup = getTargetGroupFromLink(telegramGroupLink);
    }
    
    if (!targetGroup) {
        // Fallback na star√© textov√© pole pre sp√§tn√∫ kompatibilitu
        var telegramId = settings[CONFIG.defaultsFields.telegramDochadzkaId];
        if (telegramId) {
            utils.addDebug(currentEntry, "üìù Pou≈æ√≠vam textov√© pole 'Telegram Doch√°dzka ID' (legacy): " + telegramId);
            targetGroup = findTargetGroupByTextId(telegramId);
        }
    }
    
    return targetGroup;
}

/**
 * Z√≠ska cieƒæov√∫ skupinu z Link to Entry poƒæa
 */
function getTargetGroupFromLink(linkFieldName) {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    try {
        var defaultsLib = libByName(CONFIG.defaultsLibrary);
        if (!defaultsLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.defaultsLibrary + " nen√°jden√°", "getTargetGroupFromLink");
            return null;
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (!defaultsEntries || defaultsEntries.length === 0) {
            return null;
        }
        
        var defaultsEntry = defaultsEntries[0];
        var linkedGroups = defaultsEntry.field(linkFieldName);
        // Debug info
        utils.addDebug(currentEntry, "üîó Linknut√© skupiny z '" + linkFieldName + "': "     + linkedGroups); 
        if (!linkedGroups) {
            return null;
        }
        
        // Konvertuj na array ak nie je
        // var groupsArray = Array.isArray(linkedGroups) ? linkedGroups : [linkedGroups];
        // var group = groupsArray[0];
        // // Debug info
        // addDebug(currentEntry, "üîç Skupina z linku: " + group.field(CONFIG.telegramGroupsFields.threadName));
        var group = null;
        if (Array.isArray(linkedGroups) && linkedGroups.length > 0) {
            group = linkedGroups[0];
        } else if (linkedGroups) {
            group = linkedGroups;
        }

        if (!group) {
            return null;
        }
        
        // // Z√≠skaj potrebn√© √∫daje
        // var chatId = group.field(CONFIG.telegramGroupsFields.chatId);
        // var threadId = group.field(CONFIG.telegramGroupsFields.threadId);
        // var nazov = group.field(CONFIG.telegramGroupsFields.groupName) || 
        //             group.field(CONFIG.telegramGroupsFields.threadName);
        
        // if (!chatId) {
        //     utils.addError(currentEntry, "Linknut√° skupina nem√° Chat ID", "getTargetGroupFromLink");
        //     return null;
        // }
              // OPRAVA: Pou≈æitie entry() met√≥dy pre z√≠skanie skutoƒçn√©ho Entry objektu
        var actualEntry = null;
        try {
            // Ak m√° entry() met√≥du, pou≈æi≈• ju
            if (group.entry && typeof group.entry === 'function') {
                actualEntry = group.entry();
            } else {
                // Inak sk√∫s priamo
                actualEntry = group;
            }
        } catch (e) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Nepodarilo sa z√≠ska≈• entry objekt: " + e.toString());
            actualEntry = group;
        }
        
        // Teraz z√≠skaj √∫daje
        var chatId = null;
        var threadId = null;
        var nazov = null;
        
        try {
            chatId = actualEntry.field(CONFIG.telegramGroupsFields.chatId);
            threadId = actualEntry.field(CONFIG.telegramGroupsFields.threadId);
            nazov = actualEntry.field(CONFIG.telegramGroupsFields.groupName) || 
                    actualEntry.field(CONFIG.telegramGroupsFields.threadName);
        } catch (fieldError) {
            utils.addError(currentEntry, "Chyba pri ƒç√≠tan√≠ pol√≠ z linknutej skupiny: " + fieldError.toString() + "Line: " + fieldError.lineNumber);
            return null;
        }
        
        if (!chatId) {
            utils.addError(currentEntry, "Linknut√° skupina nem√° Chat ID", "getTargetGroupFromLink");
            return null;
        }

        var result = {
            entries: [actualEntry],
            //entries: [group],
            chatId: chatId,
            threadId: threadId,
            isThread: !!threadId,
            name: nazov || (threadId ? "T√©ma #" + threadId : "Skupina")
        };
        
        utils.addDebug(currentEntry, "‚úÖ Z√≠skan√° skupina z linku: " + result.name + 
                      " (Chat: " + chatId + (threadId ? ", Thread: " + threadId : "") + ")");
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString() +", line: " + error.lineNumber, "getTargetGroupFromLink", error);
        return null;
    }
}

/**
 * N√°jde cieƒæov√∫ skupinu/t√©mu podƒæa ID (star√Ω sp√¥sob pre sp√§tn√∫ kompatibilitu)
 */
function findTargetGroupByTextId(telegramId) {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    try {
        var telegramGroups = libByName(CONFIG.telegramGroupsLibrary);
        if (!telegramGroups) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.telegramGroupsLibrary + " nen√°jden√°", "findTargetGroupByTextId");
            return null;
        }
        
        // Rozpoznaj ƒçi je to skupina alebo t√©ma
        var isThread = telegramId.indexOf("/") > -1;
        var result = {
            isThread: isThread,
            entries: []
        };
        
        if (isThread) {
            // Form√°t: "-1001234567890/123"
            var parts = telegramId.split("/");
            var chatId = parts[0];
            var threadId = parts[1];
            
            utils.addDebug(currentEntry, "üîç Hƒæad√°m t√©mu: Chat ID = " + chatId + ", Thread ID = " + threadId);
            
            // N√°jdi v≈°etky skupiny
            var allGroups = telegramGroups.entries();
            
            for (var i = 0; i < allGroups.length; i++) {
                var group = allGroups[i];
                if (group.field(CONFIG.telegramGroupsFields.chatId) === chatId && 
                    group.field(CONFIG.telegramGroupsFields.threadId) === threadId) {
                    result.entries.push(group);
                    result.threadName = group.field(CONFIG.telegramGroupsFields.groupName) + " - " + 
                                       (group.field(CONFIG.telegramGroupsFields.threadName) || "T√©ma #" + threadId);
                    result.chatId = chatId;
                    result.threadId = threadId;
                    result.name = result.threadName;
                    utils.addDebug(currentEntry, "‚úÖ Na≈°la sa t√©ma: " + result.threadName);
                    break;
                }
            }
        } else {
            // Jednoduch√° skupina
            utils.addDebug(currentEntry, "üîç Hƒæad√°m skupinu: Chat ID = " + telegramId);
            
            var groups = telegramGroups.find(CONFIG.telegramGroupsFields.chatId, telegramId);
            if (groups && groups.length > 0) {
                result.entries.push(groups[0]);
                result.name = groups[0].field(CONFIG.telegramGroupsFields.groupName) || "Skupina";
                result.chatId = telegramId;
                utils.addDebug(currentEntry, "‚úÖ Na≈°la sa skupina: " + result.name);
            }
        }
        
        return result.entries.length > 0 ? result : null;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString() + "Line: " + error.lineNumber, "findTargetGroupByTextId" , error);
        return null;
    }
}

/**
 * Priprav√≠ s√∫hrnn√∫ spr√°vu s nov√Ωm dizajnom
 */
function prepareSummaryMessage(zamestnanci, settings) {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    
    var datum = currentEntry.field(CONFIG.fields.datum);
    var datumFormatted = utils.formatDate(datum, "D.M.YYYY");
    var dayName = moment(datum).format("dddd");
    var prichod = currentEntry.field(CONFIG.fields.prichod);
    var odchod = currentEntry.field(CONFIG.fields.odchod);
    
    // Header - jednoduch√Ω a profesion√°lny
    var message = "*S√∫hrn doch√°dzky - " + datumFormatted + " (" + dayName + ")*\n";
    message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
    
    // Z√°kladn√© info
    if (prichod || odchod) {
        var prichodFormatted = prichod ? utils.formatTime(prichod) : "‚Äî";
        var odchodFormatted = odchod ? utils.formatTime(odchod) : "‚Äî";
        message += "ƒåas: " + prichodFormatted + " - " + odchodFormatted + "\n";
    }
    
    message += "Poƒçet pracovn√≠kov: " + zamestnanci.length + "\n";
    
    // Celkov√© hodiny
    var totalHours = currentEntry.field(CONFIG.fields.odpracovane) || 0;
    if (totalHours > 0) {
        message += "Celkom odpracovan√©: " + totalHours + "h\n";
    }
    
    // Mzdov√© n√°klady
    var includeFinancials = settings[CONFIG.defaultsFields.includeFinancials];
    if (includeFinancials) {
        var mzdoveNaklady = currentEntry.field(CONFIG.fields.mzdoveNaklady);
        if (mzdoveNaklady) {
            message += "Mzdov√© n√°klady: " + utils.formatMoney(mzdoveNaklady) + "\n";
        }
    }
    
    // Pr√°zdny riadok pred zamestnancami
    message += "\n*Zamestnanci:*\n";
    
    // Zoraƒè zamestnancov podƒæa priezviska
    var sortedEmployees = sortEmployees(zamestnanci);
    
    for (var i = 0; i < sortedEmployees.length; i++) {
        var emp = sortedEmployees[i];
        message += formatEmployeeDetailNew(emp, i + 1, includeFinancials);
    }
    
    // Pozn√°mka ak existuje
    var poznamka = currentEntry.field(CONFIG.fields.poznamka);
    if (poznamka) {
        message += "\n_Pozn√°mka: " + poznamka + "_\n";
    }
    
    return message;
}

/**
 * Zorad√≠ zamestnancov podƒæa priezviska
 */
function sortEmployees(zamestnanci) {
    var sorted = zamestnanci.slice(); // K√≥pia array
    var utils = getUtils();
    
    sorted.sort(function(a, b) {
        var priezviskoA = utils.safeGet(a, "Priezvisko", "").toLowerCase();
        var priezviskoB = utils.safeGet(b, "Priezvisko", "").toLowerCase();
        
        if (priezviskoA < priezviskoB) return -1;
        if (priezviskoA > priezviskoB) return 1;
        return 0;
    });
    
    return sorted;
}

/**
 * Form√°tuje detail zamestnanca - nov√Ω form√°t
 */
function formatEmployeeDetailNew(zamestnanec, poradie, includeFinancials) {
    var utils = getUtils();
    var detail = poradie + ". ";
    
    // Nick (Priezvisko) form√°t
    var nick = utils.safeGet(zamestnanec, "Nick", "");
    var priezvisko = utils.safeGet(zamestnanec, "Priezvisko", "");
    
    if (nick && priezvisko) {
        detail += nick + " (" + priezvisko + ")";
    } else if (nick) {
        detail += nick;
    } else if (priezvisko) {
        detail += priezvisko;
    } else {
        detail += "Nezn√°my";
    }
    
    // Odpracovan√© hodiny
    var odpracovane = getEmployeeAttribute(zamestnanec, CONFIG.attributes.odpracovane);
    if (odpracovane && odpracovane > 0) {
        detail += " - " + odpracovane.toFixed(1).replace('.0', '') + "h";
    }
    
    // Denn√° mzda ak s√∫ financie povolen√©
    if (includeFinancials) {
        var dennaMzda = getEmployeeAttribute(zamestnanec, CONFIG.attributes.dennaMzda);
        if (dennaMzda && dennaMzda > 0) {
            detail += " (" + utils.formatMoney(dennaMzda) + ")";
        }
    }
    
    detail += "\n";
    
    return detail;
}

/**
 * Z√≠ska atrib√∫t zamestnanca z poƒæa
 */
function getEmployeeAttribute(zamestnanec, attributeName) {
    var currentEntry = getCurrentEntry();
    
    try {
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        if (zamArray && zamArray.length > 0) {
            for (var i = 0; i < zamArray.length; i++) {
                if (zamArray[i].field("ID") === zamestnanec.field("ID")) {
                    return zamArray[i].attr(attributeName);
                }
            }
        }
        
        return null;
        
    } catch (error) {
        return null;
    }
}

// /**
//  * Vytvor√≠ skupinov√∫ notifik√°ciu pomocou Notifications Helper
//  */
// function createGroupNotification(message, targetGroup) {
//     var utils = getUtils();
//     var currentEntry = getCurrentEntry();
//     var notifHelper = getNotifHelper();
    
//     if (!notifHelper) {
//         utils.addError(currentEntry, "ASISTANTONotifications nie je dostupn√Ω", "createGroupNotification");
//         return null;
//     }
    
//     try {
//         // Priprav d√°ta pre notifik√°ciu
//         var notificationData = {
//             typSpravy: "Doch√°dzka",
//             zdrojSpravy: "Automatick√°",
//             sprava: message,
//             predmet: "S√∫hrnn√° doch√°dzka - " + utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY"),
//             adresat: targetGroup.isThread ? "T√©ma" : "Skupina",
//             formatovanie: "Markdown",
//             priorita: "Norm√°lna",
//             zdrojovaKniznica: "Doch√°dzka",
//             zdrojovyId: currentEntry.field(CONFIG.fields.id)
//         };
        
//         // Pridaj spr√°vnu skupinu/t√©mu
//         if (targetGroup.isThread || !targetGroup.isThread) {
//             notificationData.skupinaTema = targetGroup.entries;
//         }
        
//         // Oneskorenie ak je nastaven√©
//         var delay = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields.summaryDelay);
//         if (delay && delay > 0) {
//             var sendAt = moment().add(delay, 'minutes').toDate();
//             notificationData.poslatO = sendAt;
//             utils.addDebug(currentEntry, "‚è∞ Notifik√°cia bude odoslan√° o: " + utils.formatDate(sendAt));
//         }
        
//         // Vytvor notifik√°ciu pomocou Helper
//         var notification = notifHelper.createNotification(notificationData);
        
//         if (notification) {
//             utils.addDebug(currentEntry, "‚úÖ Notifik√°cia vytvoren√°: ID #" + notification.field("ID"));
//             return notification;
//         } else {
//             utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "createGroupNotification");
//             return null;
//         }
        
//     } catch (error) {
//         utils.addError(currentEntry, error.toString(), "createGroupNotification", error);
//         return null;
//     }
// }

function createGroupNotification(message, targetGroup) {
    var utils = getUtils();
    var currentEntry = getCurrentEntry();
    var notifHelper = getNotifHelper();
    
    if (!notifHelper) {
        utils.addError(currentEntry, "ASISTANTONotifications nie je dostupn√Ω", "createGroupNotification");
        return null;
    }
    
    try {
        // OPRAVA: Spr√°vne mapovanie n√°zvov pol√≠
        var notificationData = {
            // Pou≈æ√≠vaj presn√© n√°zvy pol√≠ z Notifications Helper
            "Typ spr√°vy": "Doch√°dzka",
            "Zdroj spr√°vy": "Automatick√°", 
            "Spr√°va": message,  // Zmena z 'sprava' na 'Spr√°va'
            "Predmet": "S√∫hrnn√° doch√°dzka - " + utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY"),
            "Adres√°t": targetGroup.isThread ? "T√©ma" : "Skupina",
            "Form√°tovanie": "Markdown",
            "Priorita": "Norm√°lna",
            "Zdrojov√° kni≈ænica": "Doch√°dzka",
            "Zdrojov√Ω ID": currentEntry.field(CONFIG.fields.id).toString()
        };
        
        // OPRAVA: Spr√°vne priradenie skupiny/t√©my
        if (targetGroup.entries && targetGroup.entries.length > 0) {
            notificationData["Skupina/T√©ma"] = targetGroup.entries;
        }
        
        // Oneskorenie ak je nastaven√©
        var delay = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields.summaryDelay);
        if (delay && delay > 0) {
            var sendAt = moment().add(delay, 'minutes').toDate();
            notificationData["Posla≈• o"] = sendAt;
            utils.addDebug(currentEntry, "‚è∞ Notifik√°cia bude odoslan√° o: " + utils.formatDate(sendAt));
        }
        
        // Debug - vyp√≠≈° ƒço posielame
        utils.addDebug(currentEntry, "üì§ Vytv√°ram notifik√°ciu s d√°tami: " + JSON.stringify(Object.keys(notificationData)));
        
        // Vytvor notifik√°ciu pomocou Helper
        var notification = notifHelper.createNotification(notificationData);
        
        if (notification) {
            utils.addDebug(currentEntry, "‚úÖ Notifik√°cia vytvoren√°: ID #" + notification.field("ID"));
            return notification;
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "createGroupNotification");
            return null;
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString() + "Line: " + error.lineNumber, "createGroupNotification", error);
        return null;
    }
}
// ==============================================
// CLEANUP MODULE (s lazy loading)
// ==============================================

/**
 * Z√≠ska cleanup modul s lazy loading
 */
function getCleanupModule() {
    // Inline defin√≠cia modulu
    return (function() {
        'use strict';
        
        var CONFIG = {
            version: "1.0",
            fields: {
                notifikacie: "Notifik√°cie",
                messageId: "Message ID",
                chatId: "Chat ID",
                status: "Status"
            }
        };
        
        function cleanupOldNotifications(dochadzkaEntry) {
            var result = {
                deleted: 0,
                telegramDeleted: 0,
                errors: [],
                success: true
            };
            
            try {
                var utils = getUtils();
                utils.addDebug(dochadzkaEntry, "üßπ === CLEANUP NOTIFIK√ÅCI√ç ===");
                
                var linkedNotifications = utils.safeGetLinks(dochadzkaEntry, CONFIG.fields.notifikacie);
                
                if (!linkedNotifications || linkedNotifications.length === 0) {
                    utils.addDebug(dochadzkaEntry, "‚ÑπÔ∏è ≈Ωiadne linknut√© notifik√°cie na vymazanie");
                    return result;
                }
                
                utils.addDebug(dochadzkaEntry, "üìã Na≈°iel som " + linkedNotifications.length + " notifik√°ci√≠ na vymazanie");
                
                for (var i = 0; i < linkedNotifications.length; i++) {
                    var notif = linkedNotifications[i];
                    //var notifId = notif.field("ID");
                    var notifId = utils.safeGet(notif, "ID", "Nezn√°me ID");
                    
                    try {
                        // Pok√∫s sa vymaza≈• Telegram spr√°vu
                        if (typeof ASISTANTOTelegram !== 'undefined' && ASISTANTOTelegram.deleteTelegramMessage) {
                            var messageId = notif.field(CONFIG.fields.messageId);
                            var chatId = notif.field(CONFIG.fields.chatId);
                            
                            if (messageId && chatId) {
                                var deleteResult = ASISTANTOTelegram.deleteTelegramMessage(chatId, messageId);
                                if (deleteResult.success) {
                                    result.telegramDeleted++;
                                }
                            }
                        }
                        
                        // Vyma≈æ notifik√°ciu
                        notif.remove();
                        result.deleted++;
                        
                        utils.addDebug(dochadzkaEntry, "‚úÖ Notifik√°cia #" + notifId + " vymazan√°");
                        
                    } catch (error) {
                        result.errors.push("Notifik√°cia #" + notifId + ": " + error.toString());
                    }
                }
                
                // Vyƒçisti pole
                dochadzkaEntry.set(CONFIG.fields.notifikacie, []);
                
                utils.addDebug(dochadzkaEntry, "üßπ Cleanup dokonƒçen√Ω: " + result.deleted + " vymazan√Ωch");
                
                return result;
                
            } catch (error) {
                utils.addError(dochadzkaEntry, "Chyba v cleanup: " + error.toString() + "Line: " + error.lineNumber);
                result.success = false;
                return result;
            }
        }
        
        function linkNotificationsToDochadzka(dochadzkaEntry, notifications) {
            try {
                if (!notifications || notifications.length === 0) return true;
                
                var existingNotifs = dochadzkaEntry.field(CONFIG.fields.notifikacie) || [];
                var allNotifs = existingNotifs.concat(notifications);
                
                dochadzkaEntry.set(CONFIG.fields.notifikacie, allNotifs);
                
                getUtils().addDebug(dochadzkaEntry, "üîó Linknut√Ωch " + notifications.length + " notifik√°ci√≠");
                
                return true;
                
            } catch (error) {
                getUtils().addError(dochadzkaEntry, "Chyba pri linkovan√≠: " + error.toString() + "Line: " + error.lineNumber);
                return false;
            }
        }
        
        return {
            version: CONFIG.version,
            cleanupOldNotifications: cleanupOldNotifications,
            linkNotificationsToDochadzka: linkNotificationsToDochadzka
        };
    })();
}

// ==============================================
// SPUSTENIE HLAVNEJ FUNKCIE
// ==============================================

main();