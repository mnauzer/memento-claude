// ==============================================
// MEMENTO DATABASE - MATERI√ÅL NASTAVENIE POL√ç BULK ACTION
// Verzia: 1.1 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Materi√°l | Trigger: Bulk Action
// ==============================================
// üìã FUNKCIA:
//    - Hromadn√© nastavenie pol√≠ pre prepoƒçet cien oznaƒçen√Ωch materi√°lov
//    - Nastavuje polia pre prepoƒçet na vybran√Ωch z√°znamoch
//    - Umo≈æ≈àuje jednotne nakonfigurova≈• oznaƒçen√© materi√°ly
//    - Vytvor√≠ info z√°znam pre ka≈æd√Ω upraven√Ω materi√°l
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (dial√≥gy, logging)
// üìù ARGUMENTY:
//    - "Prepoƒçet ceny" (Options: "Pevn√° cena", "Podƒæa prir√°≈æky", "Neprepoƒç√≠tava≈•"): Sp√¥sob prepoƒçtu ceny
//    - "Obchodn√° prir√°≈æka" (Number): Percentu√°lna prir√°≈æka k n√°kupnej cene
//    - "Zaokr√∫hƒæovanie cien" (Options: "Nahor", "Nadol", "Nezaokr√∫hƒæova≈•", "Najbli≈æ≈°ie"): Typ zaokr√∫hƒæovania
//    - "Hodnota zaokr√∫henia" (Options: "Desatiny", "Jednotky", "Desiatky", "Stovky"): Presnos≈• zaokr√∫hƒæovania
//    - "Zmena n√°kupnej ceny" (Options: "Upozorni≈•", "Prepoƒç√≠ta≈•", "Upozorni≈• a prepoƒç√≠ta≈•", "Ignorova≈•"): Akcia pri zmene ceny
//    - "Percento zmeny" (Number): Prah percentu√°lnej zmeny pre trigger
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;

var CONFIG = {
    scriptName: "Materi√°l Nastavenie pol√≠ Bulk Action",
    version: "1.1.0",

    // Kni≈ænice
    libraries: {
        inventory: (centralConfig.libraries && centralConfig.libraries.inventory) || "Materi√°l"
    },

    // Polia Materi√°l
    materialFields: {
        name: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.name) || "N√°zov",
        category: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.category) || "Kateg√≥ria",
        priceCalculation: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceCalculation) || "Prepoƒçet ceny",
        markupPercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.markupPercentage) || "Obchodn√° prir√°≈æka",
        priceRounding: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceRounding) || "Zaokr√∫hƒæovanie cien",
        roundingValue: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.roundingValue) || "Hodnota zaokr√∫henia",
        purchasePriceChange: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceChange) || "Zmena n√°kupnej ceny",
        changePercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.changePercentage) || "Percento zmeny",
        icons: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.icons) || "icons",

        // Spoloƒçn√© polia
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },

    // Ikony
    icons: (centralConfig.icons) || {
        start: "üöÄ",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è",
        settings: "‚öôÔ∏è",
        processing: "üîß",
        material: "üì¶"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Inicializ√°cia ≈°tatist√≠k
        var stats = {
            total: 0,
            updated: 0,
            skipped: 0,
            errors: 0,
            processedMaterials: []
        };

        utils.addDebug(entry(), CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");

        // Z√≠skanie oznaƒçen√Ωch z√°znamov
        var selectedMaterials = getSelectedMaterials();
        if (!selectedMaterials || selectedMaterials.length === 0) {
            utils.showErrorDialog("‚ö†Ô∏è UPOZORNENIE\n\n≈Ωiadne z√°znamy nie s√∫ oznaƒçen√©!\n\nPre pou≈æitie bulk action oznaƒçte materi√°ly, ktor√© chcete upravi≈•.");
            return false;
        }

        stats.total = selectedMaterials.length;
        utils.addDebug(entry(), CONFIG.icons.info + " Oznaƒçen√Ωch materi√°lov: " + stats.total);

        // Z√≠skanie a valid√°cia argumentov
        var arguments = getAndValidateArguments();
        if (!arguments.isValid) {
            utils.showErrorDialog("‚ùå CHYBA ARGUMENTOV\n\n" + arguments.errorMessage);
            return false;
        }

        utils.addDebug(entry(), CONFIG.icons.info + " Argumenty √∫spe≈°ne naƒç√≠tan√©");

        // Spracovanie materi√°lov
        for (var i = 0; i < selectedMaterials.length; i++) {
            var material = selectedMaterials[i];
            processMaterial(material, arguments, stats);
        }

        // Vytvorenie zhrnutia
        createSummary(stats, arguments);

        // Zobrazenie v√Ωsledkov
        showResults(stats);

        return true;

    } catch (error) {
        utils.addError(entry(), "Kritick√° chyba v hlavnej funkcii", "main", error);
        utils.showErrorDialog("Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// Z√çSKANIE OZNAƒåEN√ùCH Z√ÅZNAMOV
// ==============================================

function getSelectedMaterials() {
    try {
        var selectedMaterials = selectedEntries();
        utils.addDebug(entry(), CONFIG.icons.info + " Z√≠skan√© oznaƒçen√© z√°znamy: " + (selectedMaterials ? selectedMaterials.length : 0));
        return selectedMaterials;
    } catch (error) {
        utils.addError(entry(), "Chyba pri z√≠skavan√≠ oznaƒçen√Ωch z√°znamov", "getSelectedMaterials", error);
        return [];
    }
}

// ==============================================
// Z√çSKANIE A VALID√ÅCIA ARGUMENTOV
// ==============================================

function getAndValidateArguments() {
    try {
        var arguments = {
            priceCalculation: getSafeArgument("Prepoƒçet ceny", ""),
            markupPercentage: getSafeArgument("Obchodn√° prir√°≈æka", null),
            priceRounding: getSafeArgument("Zaokr√∫hƒæovanie cien", ""),
            roundingValue: getSafeArgument("Hodnota zaokr√∫henia", ""),
            purchasePriceChange: getSafeArgument("Zmena n√°kupnej ceny", ""),
            changePercentage: getSafeArgument("Percento zmeny", null),
            isValid: true,
            errorMessage: ""
        };

        // Kontrola ƒçi aspo≈à jeden argument je zadan√Ω
        var hasAnyArgument = false;
        if (arguments.priceCalculation && arguments.priceCalculation.trim() !== "") hasAnyArgument = true;
        if (arguments.markupPercentage !== null && !isNaN(arguments.markupPercentage)) hasAnyArgument = true;
        if (arguments.priceRounding && arguments.priceRounding.trim() !== "") hasAnyArgument = true;
        if (arguments.roundingValue && arguments.roundingValue.trim() !== "") hasAnyArgument = true;
        if (arguments.purchasePriceChange && arguments.purchasePriceChange.trim() !== "") hasAnyArgument = true;
        if (arguments.changePercentage !== null && !isNaN(arguments.changePercentage)) hasAnyArgument = true;

        if (!hasAnyArgument) {
            arguments.isValid = false;
            arguments.errorMessage = "Nie je zadan√Ω ≈æiadny argument!\n\nZadajte aspo≈à jednu hodnotu pre nastavenie.";
        }

        utils.addDebug(entry(), CONFIG.icons.info + " Argumenty - priceCalculation: " + arguments.priceCalculation +
                      ", markupPercentage: " + arguments.markupPercentage +
                      ", priceRounding: " + arguments.priceRounding);

        return arguments;

    } catch (error) {
        utils.addError(entry(), "Chyba pri z√≠skavan√≠ argumentov", "getAndValidateArguments", error);
        return {
            isValid: false,
            errorMessage: "Chyba pri spracovan√≠ argumentov: " + error.toString()
        };
    }
}

function getSafeArgument(argName, defaultValue) {
    try {
        var value = arg(argName);
        return value !== null && value !== undefined ? value : defaultValue;
    } catch (error) {
        utils.addError(entry(), "Chyba pri z√≠skavan√≠ argumentu", "getSafeArgument", error + " (argument: " + argName + ")");
        return defaultValue;
    }
}

// ==============================================
// SPRACOVANIE MATERI√ÅLU
// ==============================================

function processMaterial(material, arguments, stats) {
    try {
        var materialName = utils.safeGet(material, CONFIG.materialFields.name, "Nezn√°my materi√°l");
        var hasChanges = false;
        var materialChanges = [];

        utils.addDebug(material, CONFIG.icons.processing + " Spracov√°vam materi√°l: " + materialName);

        // Vyƒçistenie logov materi√°lu
        utils.clearLogs(material, [CONFIG.materialFields.debugLog, CONFIG.materialFields.errorLog]);

        // Nastavenie jednotliv√Ωch pol√≠
        hasChanges = setPriceCalculation(material, arguments.priceCalculation, materialChanges) || hasChanges;
        hasChanges = setMarkupPercentage(material, arguments.markupPercentage, materialChanges) || hasChanges;
        hasChanges = setPriceRounding(material, arguments.priceRounding, materialChanges) || hasChanges;
        hasChanges = setRoundingValue(material, arguments.roundingValue, materialChanges) || hasChanges;
        hasChanges = setPurchasePriceChange(material, arguments.purchasePriceChange, materialChanges) || hasChanges;
        hasChanges = setChangePercentage(material, arguments.changePercentage, materialChanges) || hasChanges;

        if (hasChanges) {
            // Pridanie ikony indikuj√∫cej nastavenie
            addSettingsIcon(material);

            // Vytvorenie info z√°znamu pre tento materi√°l
            createMaterialInfoRecord(material, materialChanges, arguments);

            stats.updated++;
            stats.processedMaterials.push({
                name: materialName,
                changes: materialChanges,
                status: "updated"
            });

            utils.addDebug(material, CONFIG.icons.success + " Materi√°l √∫spe≈°ne aktualizovan√Ω s " + materialChanges.length + " zmenami");
        } else {
            stats.skipped++;
            stats.processedMaterials.push({
                name: materialName,
                changes: [],
                status: "skipped"
            });

            utils.addDebug(material, CONFIG.icons.info + " Materi√°l preskoƒçen√Ω - ≈æiadne zmeny");
        }

    } catch (error) {
        utils.addError(material, "Chyba pri spracovan√≠ materi√°lu", "processMaterial", error);
        stats.errors++;
        stats.processedMaterials.push({
            name: materialName || "Nezn√°my materi√°l",
            changes: [],
            status: "error",
            error: error.toString()
        });
    }
}

// ==============================================
// NASTAVENIE JEDNOTLIV√ùCH POL√ç
// ==============================================

function setPriceCalculation(material, value, changes) {
    if (!value || value.trim() === "") return false;

    var currentValue = utils.safeGet(material, CONFIG.materialFields.priceCalculation, "");
    if (currentValue !== value) {
        utils.safeSet(material, CONFIG.materialFields.priceCalculation, value);
        changes.push("Prepoƒçet ceny: '" + currentValue + "' ‚Üí '" + value + "'");
        utils.addDebug(material, CONFIG.icons.settings + " Nastaven√Ω prepoƒçet ceny: " + value);
        return true;
    }
    return false;
}

function setMarkupPercentage(material, value, changes) {
    if (value === null || isNaN(value)) return false;

    var currentValue = parseFloat(utils.safeGet(material, CONFIG.materialFields.markupPercentage, 0));
    if (Math.abs(currentValue - value) > 0.01) {
        utils.safeSet(material, CONFIG.materialFields.markupPercentage, value);
        changes.push("Obchodn√° prir√°≈æka: " + currentValue + "% ‚Üí " + value + "%");
        utils.addDebug(material, CONFIG.icons.settings + " Nastaven√° obchodn√° prir√°≈æka: " + value + "%");
        return true;
    }
    return false;
}

function setPriceRounding(material, value, changes) {
    if (!value || value.trim() === "") return false;

    var currentValue = utils.safeGet(material, CONFIG.materialFields.priceRounding, "");
    if (currentValue !== value) {
        utils.safeSet(material, CONFIG.materialFields.priceRounding, value);
        changes.push("Zaokr√∫hƒæovanie: '" + currentValue + "' ‚Üí '" + value + "'");
        utils.addDebug(material, CONFIG.icons.settings + " Nastaven√© zaokr√∫hƒæovanie: " + value);
        return true;
    }
    return false;
}

function setRoundingValue(material, value, changes) {
    if (!value || value.trim() === "") return false;

    var currentValue = utils.safeGet(material, CONFIG.materialFields.roundingValue, "");
    if (currentValue !== value) {
        utils.safeSet(material, CONFIG.materialFields.roundingValue, value);
        changes.push("Hodnota zaokr√∫hƒæovania: '" + currentValue + "' ‚Üí '" + value + "'");
        utils.addDebug(material, CONFIG.icons.settings + " Nastaven√° hodnota zaokr√∫hƒæovania: " + value);
        return true;
    }
    return false;
}

function setPurchasePriceChange(material, value, changes) {
    if (!value || value.trim() === "") return false;

    var currentValue = utils.safeGet(material, CONFIG.materialFields.purchasePriceChange, "");
    if (currentValue !== value) {
        utils.safeSet(material, CONFIG.materialFields.purchasePriceChange, value);
        changes.push("Zmena n√°kupnej ceny: '" + currentValue + "' ‚Üí '" + value + "'");
        utils.addDebug(material, CONFIG.icons.settings + " Nastaven√° zmena n√°kupnej ceny: " + value);
        return true;
    }
    return false;
}

function setChangePercentage(material, value, changes) {
    if (value === null || isNaN(value)) return false;

    var currentValue = parseFloat(utils.safeGet(material, CONFIG.materialFields.changePercentage, 0));
    if (Math.abs(currentValue - value) > 0.01) {
        utils.safeSet(material, CONFIG.materialFields.changePercentage, value);
        changes.push("Percento zmeny: " + currentValue + "% ‚Üí " + value + "%");
        utils.addDebug(material, CONFIG.icons.settings + " Nastaven√© percento zmeny: " + value + "%");
        return true;
    }
    return false;
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function addSettingsIcon(material) {
    try {
        var currentIcons = utils.safeGet(material, CONFIG.materialFields.icons, "");
        var newIcon = CONFIG.icons.settings;
        if (!currentIcons.includes(newIcon)) {
            var updatedIcons = currentIcons ? currentIcons + " " + newIcon : newIcon;
            utils.safeSet(material, CONFIG.materialFields.icons, updatedIcons);
            utils.addDebug(material, CONFIG.icons.info + " Pridan√° ikona nastavenia");
        }
    } catch (error) {
        utils.addError(material, "Chyba pri prid√°van√≠ ikony", "addSettingsIcon", error);
    }
}

function createMaterialInfoRecord(material, changes, arguments) {
    try {
        var materialName = utils.safeGet(material, CONFIG.materialFields.name, "Nezn√°my materi√°l");
        var dateFormatted = utils.formatDate(new Date(), "DD.MM.YYYY HH:mm:ss");

        var infoMessage = CONFIG.icons.settings + " NASTAVENIE POL√ç MATERI√ÅLU\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        infoMessage += "üì¶ Materi√°l: " + materialName + "\n";
        infoMessage += "üìÖ D√°tum: " + dateFormatted + "\n";
        infoMessage += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n\n";

        infoMessage += "‚öôÔ∏è NASTAVEN√â HODNOTY:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        if (arguments.priceCalculation && arguments.priceCalculation.trim() !== "") {
            infoMessage += "‚Ä¢ Prepoƒçet ceny: " + arguments.priceCalculation + "\n";
        }
        if (arguments.markupPercentage !== null && !isNaN(arguments.markupPercentage)) {
            infoMessage += "‚Ä¢ Obchodn√° prir√°≈æka: " + arguments.markupPercentage + "%\n";
        }
        if (arguments.priceRounding && arguments.priceRounding.trim() !== "") {
            infoMessage += "‚Ä¢ Zaokr√∫hƒæovanie cien: " + arguments.priceRounding + "\n";
        }
        if (arguments.roundingValue && arguments.roundingValue.trim() !== "") {
            infoMessage += "‚Ä¢ Hodnota zaokr√∫hƒæovania: " + arguments.roundingValue + "\n";
        }
        if (arguments.purchasePriceChange && arguments.purchasePriceChange.trim() !== "") {
            infoMessage += "‚Ä¢ Zmena n√°kupnej ceny: " + arguments.purchasePriceChange + "\n";
        }
        if (arguments.changePercentage !== null && !isNaN(arguments.changePercentage)) {
            infoMessage += "‚Ä¢ Percento zmeny: " + arguments.changePercentage + "%\n";
        }

        if (changes.length > 0) {
            infoMessage += "\nüîÑ VYKONAN√â ZMENY:\n";
            infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            for (var i = 0; i < changes.length; i++) {
                infoMessage += "‚Ä¢ " + changes[i] + "\n";
            }
        }

        infoMessage += "\n" + CONFIG.icons.success + " NASTAVENIE DOKONƒåEN√â";

        // Nastavenie info z√°znamu
        utils.safeSet(material, CONFIG.materialFields.info, infoMessage);
        utils.addDebug(material, CONFIG.icons.info + " Info z√°znam vytvoren√Ω");

    } catch (error) {
        utils.addError(material, "Chyba pri vytv√°ran√≠ info z√°znamu", "createMaterialInfoRecord", error);
    }
}

// ==============================================
// VYTVORENIE ZHRNUTIA
// ==============================================

function createSummary(stats, arguments) {
    try {
        utils.addDebug(entry(), CONFIG.icons.info + " Vytv√°ram zhrnutie oper√°cie");
        utils.addDebug(entry(), "üìä ≈†tatistiky - Celkom: " + stats.total + ", Aktualizovan√©: " + stats.updated +
                      ", Preskoƒçen√©: " + stats.skipped + ", Chyby: " + stats.errors);
    } catch (error) {
        utils.addError(entry(), "Chyba pri vytv√°ran√≠ zhrnutia", "createSummary", error);
    }
}

// ==============================================
// ZOBRAZENIE V√ùSLEDKOV
// ==============================================

function showResults(stats) {
    try {
        var isSuccess = stats.errors === 0;
        var summaryMessage = "";

        if (isSuccess) {
            summaryMessage = CONFIG.icons.success + " √öSPE≈†NE DOKONƒåEN√â\n\n";
        } else {
            summaryMessage = CONFIG.icons.warning + " DOKONƒåEN√â S CHYBAMI\n\n";
        }

        summaryMessage += "üì¶ Oznaƒçen√© materi√°ly: " + stats.total + "\n";
        summaryMessage += CONFIG.icons.success + " Aktualizovan√©: " + stats.updated + "\n";
        summaryMessage += "‚ûñ Preskoƒçen√©: " + stats.skipped + "\n";

        if (stats.errors > 0) {
            summaryMessage += CONFIG.icons.error + " Chyby: " + stats.errors + "\n";
        }

        if (stats.updated > 0) {
            summaryMessage += "\n" + CONFIG.icons.info + " Detaily v ka≈ædom aktualizovanom materi√°li v poli 'info'";
        }

        if (isSuccess) {
            utils.showSuccessDialog(summaryMessage);
        } else {
            utils.showErrorDialog(summaryMessage);
        }

        utils.addDebug(entry(), CONFIG.icons.success + " V√Ωsledky zobrazen√© u≈æ√≠vateƒæovi");

    } catch (error) {
        utils.addError(entry(), "Chyba pri zobrazovan√≠ v√Ωsledkov", "showResults", error);
        utils.showErrorDialog("Chyba pri zobrazovan√≠ v√Ωsledkov!\n\n" + error.toString());
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();