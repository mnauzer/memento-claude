// ==============================================
// MEMENTO DATABASE - Z√ÅZNAM PR√ÅC PREPOƒåET Z√ÅZNAMU
// Verzia: 1.1 | D√°tum: 11.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Z√°znam pr√°c | Trigger: Before Save
// ==============================================
// ‚úÖ KOMPLETNE REFAKTOROVAN√â v1.1:
//    - ≈†trukt√∫ra podƒæa vzoru Doch√°dzka Prepoƒçet 3.1
//    - Spr√°vne n√°zvy pol√≠ podƒæa Knowledge Base
//    - Zaokr√∫hƒæovanie ƒçasov Od/Do na 15 min√∫t
//    - Spr√°vne pou≈æitie attr/setAttr (2 parametre)
//    - HZS spracovanie s auto-linkovan√≠m defaults
//    - V√Ωkaz pr√°c linksFrom spracovanie
//    - Robustn√© null kontroly a error handling
//    - Pekne form√°tovan√© info pole
// ==============================================

var CONFIG = {
    debug: true,
    version: "1.1",
    scriptName: "Z√°znam pr√°c Prepoƒçet",
    
    // N√°zvy pol√≠ - Z√°znam pr√°c
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        od: "Od",
        do: "Do",
        zakazka: "Z√°kazka",
        pracovnaDoba: "Pracovn√° doba",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        mzdoveNaklady: "Mzdov√© n√°klady",
        hodinovaZuctovacia: "Hodinov√° z√∫ƒçtovacia sadzba",
        sumaHZS: "Suma HZS",
        vykonanePrace: "Vykonan√© pr√°ce",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // N√°zvy atrib√∫tov pre zamestnancov
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        mzdoveNaklady: "mzdov√© n√°klady"
    },
    
    // N√°zvy atrib√∫tov pre HZS
    hzsAttributes: {
        cena: "cena"
    },
    
    // N√°zvy atrib√∫tov pre V√Ωkaz pr√°c
    vykazAttributes: {
        vykonanePrace: "vykonan√© pr√°ce",
        pocetHodin: "poƒçet hod√≠n",
        uctoovanaSadzba: "√∫ƒçtovan√° sadzba",
        cenaCelkom: "cena celkom"
    },
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        sadzbyZamestnancov: "sadzby zamestnancov",
        cennikPrac: "Cenn√≠k pr√°c",
        cenyPrac: "ceny pr√°c",
        defaulty: "ASISTANTO Defaults",
        vykazPrac: "V√Ωkaz pr√°c",
        zakazky: "Z√°kazky"
    },
    
    // Polia v kni≈ænici sadzby zamestnancov
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    // Polia v kni≈ænici ceny pr√°c
    cenyFields: {
        praca: "Pr√°ca",
        platnostOd: "Platnos≈• od",
        cena: "Cena"
    },
    
    // Polia v kni≈ænici ASISTANTO Defaults
    defaultsFields: {
        defaultHZS: "Default HZS"
    },
    
    // Polia v kni≈ænici V√Ωkaz pr√°c
    vykazFields: {
        praceHZS: "Pr√°ce HZS"
    },
    
    // Emoji pre debug a info
    icons: {
        start: "üöÄ",
        step: "üìã",
        success: "‚úÖ",
        error: "üí•",
        warning: "‚ö†Ô∏è",
        money: "üí∞",
        time: "‚è±Ô∏è",
        person: "üë§",
        info: "‚ÑπÔ∏è",
        work: "üîß",
        link: "üîó",
        calculate: "üßÆ"
    }
};

// Glob√°lne premenn√© pre logy
var debugLog = [];
var errorLog = [];
var currentEntry = entry();

// ==============================================
// DEBUG A ERROR SYST√âM
// ==============================================

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm");
    var errorText = "[" + timestamp + "] " + CONFIG.icons.error + " ERROR: " + message;
    if (location) {
        errorText += " (Loc: " + location + ")";
    }
    errorLog.push(errorText);
}

function saveLogs() {
    try {
        // Vyma≈æ star√© logy pred z√°pisom nov√Ωch
        currentEntry.set(CONFIG.fields.debugLog, "");
        currentEntry.set(CONFIG.fields.errorLog, "");
        
        // Ulo≈æ nov√© logy
        if (debugLog.length > 0) {
            currentEntry.set(CONFIG.fields.debugLog, debugLog.join("\n"));
        }
        if (errorLog.length > 0) {
            currentEntry.set(CONFIG.fields.errorLog, errorLog.join("\n"));
        }
    } catch (saveError) {
        // Nem√¥≈æeme logova≈• chybu logovania
    }
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function roundToQuarter(timeMs) {
    if (!timeMs || timeMs === null) {
        return null;
    }
    // Zaokr√∫hli na 15 min√∫t
    var quarterMs = 15 * 60 * 1000;
    return Math.round(timeMs / quarterMs) * quarterMs;
}

function formatTime(timeMs) {
    if (!timeMs) return "NULL";
    var date = new Date(timeMs);
    return ("0" + date.getHours()).slice(-2) + ":" + ("0" + date.getMinutes()).slice(-2);
}

function calculateHours(odMs, doMs) {
    if (!odMs || !doMs) {
        return 0;
    }
    
    // Ak do < od, pr√°ca cez polnoc
    if (doMs < odMs) {
        doMs += 24 * 60 * 60 * 1000;
        addDebug(CONFIG.icons.time + " Detekovan√° pr√°ca cez polnoc");
    }
    
    var rozdielMs = doMs - odMs;
    return Math.round((rozdielMs / (1000 * 60 * 60)) * 100) / 100;
}

// ==============================================
// HƒΩADANIE SADZIEB
// ==============================================

function findValidSalary(zamestnanecObject, datum) {
    if (!zamestnanecObject || !datum) {
        addError("Neplatn√© parametre pre hƒæadanie sadzby", "findValidSalary");
        return 0;
    }
    
    addDebug("üîç Hƒæad√°m sadzbu pre zamestnanca k d√°tumu: " + moment(datum).format("DD.MM.YYYY"));
    
    try {
        var sadzby = zamestnanecObject.linksFrom(CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            addDebug(CONFIG.icons.warning + " ≈Ωiadne sadzby nen√°jden√©");
            return 0;
        }
        
        var platnaHodinovka = 0;
        var najnovsiDatum = null;
        
        for (var i = 0; i < sadzby.length; i++) {
            var sadzbaEntry = sadzby[i];
            var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
            var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
            
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    platnaHodinovka = hodinovka;
                }
            }
        }
        
        if (platnaHodinovka > 0) {
            addDebug(CONFIG.icons.success + " Platn√° hodinovka: " + platnaHodinovka + " ‚Ç¨/h");
        } else {
            addDebug(CONFIG.icons.warning + " ≈Ωiadna platn√° sadzba k d√°tumu");
        }
        
        return platnaHodinovka;
        
    } catch (error) {
        addError("Chyba pri hƒæadan√≠ sadzby: " + error.toString(), "findValidSalary");
        return 0;
    }
}

// ==============================================
// HZS SPRACOVANIE
// ==============================================

function getDefaultHZS() {
    try {
        addDebug(CONFIG.icons.link + " Hƒæad√°m default HZS v kni≈ænici ASISTANTO Defaults");
        
        var defaultsLib = libByName(CONFIG.libraries.defaulty);
        if (!defaultsLib) {
            addError("Kni≈ænica ASISTANTO Defaults nen√°jden√°", "getDefaultHZS");
            return null;
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (defaultsEntries && defaultsEntries.length > 0) {
            var defaultEntry = defaultsEntries[0];
            var defaultHZS = defaultEntry.field(CONFIG.defaultsFields.defaultHZS);
            
            if (defaultHZS && defaultHZS.length > 0) {
                addDebug(CONFIG.icons.success + " Default HZS n√°jden√©");
                return defaultHZS;
            }
        }
        
        addDebug(CONFIG.icons.warning + " Default HZS nen√°jden√©");
        return null;
        
    } catch (error) {
        addError("Chyba pri z√≠skavan√≠ default HZS: " + error.toString(), "getDefaultHZS");
        return null;
    }
}

function getHZSPrice(hzsZaznam, datum) {
    if (!hzsZaznam || !datum) {
        return 0;
    }
    
    try {
        // Najprv sk√∫s n√°js≈• cenu v linksFrom "ceny pr√°c"
        var ceny = hzsZaznam.linksFrom(CONFIG.libraries.cenyPrac, CONFIG.cenyFields.praca);
        
        if (ceny && ceny.length > 0) {
            addDebug("  Na≈°iel som " + ceny.length + " historick√Ωch cien");
            
            var platnaCena = 0;
            var najnovsiDatum = null;
            
            for (var i = 0; i < ceny.length; i++) {
                var cenaEntry = ceny[i];
                var platnostOd = cenaEntry.field(CONFIG.cenyFields.platnostOd);
                var cena = cenaEntry.field(CONFIG.cenyFields.cena);
                
                if (platnostOd && cena && platnostOd <= datum) {
                    if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                        najnovsiDatum = platnostOd;
                        platnaCena = cena;
                    }
                }
            }
            
            if (platnaCena > 0) {
                addDebug("  " + CONFIG.icons.success + " Platn√° historick√° cena: " + platnaCena + " ‚Ç¨");
                return platnaCena;
            }
        }
        
        // Ak nen√°jde historick√∫ cenu, pou≈æi priamu cenu z Cenn√≠ka pr√°c
        var cenaBezDPH = hzsZaznam.field("Cena bez DPH");
        if (cenaBezDPH) {
            addDebug("  Pou≈æ√≠vam priamu cenu z Cenn√≠ka pr√°c: " + cenaBezDPH + " ‚Ç¨");
            return cenaBezDPH;
        }
        
        addDebug("  " + CONFIG.icons.warning + " ≈Ωiadna cena nen√°jden√°");
        return 0;
        
    } catch (error) {
        addError("Chyba pri z√≠skavan√≠ HZS ceny: " + error.toString(), "getHZSPrice");
        return 0;
    }
}

// ==============================================
// SPRACOVANIE ZAMESTNANCOV
// ==============================================

function processEmployee(zamestnanec, index, pracovnaDobaHodiny, datum) {
    if (!zamestnanec) {
        addError("Neplatn√Ω zamestnanec na poz√≠cii " + index, "processEmployee");
        return 0;
    }
    
    try {
        var nick = zamestnanec.field("Nick") || "Nezn√°my";
        var priezvisko = zamestnanec.field("Priezvisko") || "";
        addDebug(CONFIG.icons.person + " Sprac√∫vam zamestnanca " + (index + 1) + ": " + nick + " (" + priezvisko + ")");
        
        // 1. N√°jdi hodinovku
        var aktualnaHodinovka = findValidSalary(zamestnanec, datum);
        
        // 2. Nastav atrib√∫ty - SPR√ÅVNA SYNTAX (2 parametre)
        try {
            currentEntry.setAttr(CONFIG.fields.zamestnanci, index, CONFIG.attributes.odpracovane, pracovnaDobaHodiny);
            addDebug("  " + CONFIG.icons.success + " Odpracovan√© nastaven√©: " + pracovnaDobaHodiny + "h");
        } catch (attrError) {
            addError("Nepodarilo sa nastavi≈• odpracovan√©: " + attrError.toString(), "attr_odpracovane");
        }
        
        try {
            currentEntry.setAttr(CONFIG.fields.zamestnanci, index, CONFIG.attributes.hodinovka, aktualnaHodinovka);
            addDebug("  " + CONFIG.icons.success + " Hodinovka nastaven√°: " + aktualnaHodinovka + " ‚Ç¨/h");
        } catch (attrError) {
            addError("Nepodarilo sa nastavi≈• hodinovku: " + attrError.toString(), "attr_hodinovka");
        }
        
        // 3. Vypoƒç√≠taj mzdov√© n√°klady
        var mzdoveNaklady = pracovnaDobaHodiny * aktualnaHodinovka;
        
        try {
            currentEntry.setAttr(CONFIG.fields.zamestnanci, index, CONFIG.attributes.mzdoveNaklady, mzdoveNaklady);
            addDebug("  " + CONFIG.icons.money + " Mzdov√© n√°klady: " + mzdoveNaklady.toFixed(2) + " ‚Ç¨");
        } catch (attrError) {
            addError("Nepodarilo sa nastavi≈• mzdov√© n√°klady: " + attrError.toString(), "attr_mzdove");
        }
        
        return mzdoveNaklady;
        
    } catch (error) {
        addError("Chyba pri spracovan√≠ zamestnanca " + index + ": " + error.toString(), "processEmployee");
        return 0;
    }
}

// ==============================================
// SPRACOVANIE V√ùKAZU PR√ÅC
// ==============================================

function processVykazPrac(zakazka, currentEntry, hzsCena, odpracovaneHodiny) {
    if (!zakazka) {
        addDebug(CONFIG.icons.warning + " ≈Ωiadna z√°kazka, preskakujem v√Ωkaz pr√°c");
        return;
    }
    
    try {
        addDebug(CONFIG.icons.link + " KROK 8: Kontrolujem v√Ωkaz pr√°c pre z√°kazku...");
        
        // Z√≠skaj v√Ωkazy pr√°c linknut√© na z√°kazku
        var vykazyPrac = zakazka.linksFrom(CONFIG.libraries.vykazPrac, "Z√°kazka");
        
        if (!vykazyPrac || vykazyPrac.length === 0) {
            addDebug("  ≈Ωiadny v√Ωkaz pr√°c nen√°jden√Ω pre t√∫to z√°kazku");
            return;
        }
        
        addDebug("  Na≈°iel som " + vykazyPrac.length + " v√Ωkaz(ov) pr√°c");
        
        // Spracuj prv√Ω v√Ωkaz (zvyƒçajne je len jeden na z√°kazku)
        var vykaz = vykazyPrac[0];
        
        // Pridaj link na aktu√°lny z√°znam pr√°c
        var existujucePrace = vykaz.field(CONFIG.vykazFields.praceHZS) || [];
        existujucePrace.push(currentEntry);
        vykaz.set(CONFIG.vykazFields.praceHZS, existujucePrace);
        
        // Nastav atrib√∫ty linku
        var linkIndex = existujucePrace.length - 1;
        
        // Vykonan√© pr√°ce
        var vykonanePrace = currentEntry.field(CONFIG.fields.vykonanePrace) || "";
        vykaz.setAttr(CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.vykonanePrace, vykonanePrace);
        
        // Poƒçet hod√≠n
        vykaz.setAttr(CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.pocetHodin, odpracovaneHodiny);
        
        // √öƒçtovan√° sadzba
        vykaz.setAttr(CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.uctoovanaSadzba, hzsCena);
        
        // Cena celkom
        var cenaCelkom = odpracovaneHodiny * hzsCena;
        vykaz.setAttr(CONFIG.vykazFields.praceHZS, linkIndex, CONFIG.vykazAttributes.cenaCelkom, cenaCelkom);
        
        addDebug("  " + CONFIG.icons.success + " V√Ωkaz pr√°c aktualizovan√Ω:");
        addDebug("    ‚Ä¢ Vykonan√© pr√°ce: " + vykonanePrace.substring(0, 50) + "...");
        addDebug("    ‚Ä¢ Poƒçet hod√≠n: " + odpracovaneHodiny + "h");
        addDebug("    ‚Ä¢ √öƒçtovan√° sadzba: " + hzsCena + " ‚Ç¨");
        addDebug("    ‚Ä¢ Cena celkom: " + cenaCelkom.toFixed(2) + " ‚Ç¨");
        
    } catch (error) {
        addError("Chyba pri spracovan√≠ v√Ωkazu pr√°c: " + error.toString(), "processVykazPrac");
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function hlavnaFunkcia() {
    addDebug(CONFIG.icons.start + " === ≈†TART PREPOƒåTU Z√ÅZNAMU PR√ÅC ===");
    addDebug("Script verzia: " + CONFIG.version);
    
    // Premenn√© pre sledovanie √∫spe≈°nosti krokov
    var step1Success = false;
    var step2Success = false;
    var step3Success = false;
    var step4Success = false;
    var step5Success = false;
    var step6Success = false;
    var step7Success = false;
    var step8Success = false;
    var step9Success = false;
    
    // Z√°kladn√© premenn√©
    var datum = null;
    var odRaw = null;
    var doRaw = null;
    var odRounded = null;
    var doRounded = null;
    var zamestnanci = null;
    var zakazka = null;
    var pracovnaDobaHodiny = 0;
    var pocetPracovnikov = 0;
    var odpracovaneTotal = 0;
    var celkoveMzdy = 0;
    var hzsPole = null;
    var hzsCena = 0;
    var sumaHZS = 0;
    
    // KROK 1: Naƒç√≠tanie a valid√°cia vstupn√Ωch d√°t
    try {
        addDebug(CONFIG.icons.step + " KROK 1: Naƒç√≠tavam vstupn√© d√°ta...");
        
        datum = currentEntry.field(CONFIG.fields.datum);
        odRaw = currentEntry.field(CONFIG.fields.od);
        doRaw = currentEntry.field(CONFIG.fields.do);
        zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
        zakazka = currentEntry.field(CONFIG.fields.zakazka);
        
        addDebug("  üìÖ D√°tum: " + (datum ? moment(datum).format("DD.MM.YYYY") : "NULL"));
        addDebug("  üïê Od (raw): " + formatTime(odRaw));
        addDebug("  üïê Do (raw): " + formatTime(doRaw));
        addDebug("  " + CONFIG.icons.person + " Zamestnanci: " + (zamestnanci ? zamestnanci.length : 0));
        addDebug("  üì¶ Z√°kazka: " + (zakazka ? "√ÅNO" : "NIE"));
        
        // Valid√°cia
        if (!datum || !odRaw || !doRaw || !zamestnanci || zamestnanci.length === 0) {
            addError("Ch√Ωbaj√∫ povinn√© √∫daje", "validacia");
            step1Success = false;
        } else {
            addDebug(CONFIG.icons.success + " Vstupn√© d√°ta OK");
            step1Success = true;
        }
        
    } catch (inputError) {
        addError("Chyba pri naƒç√≠tan√≠ vstupn√Ωch d√°t: " + inputError.toString(), "input");
        step1Success = false;
    }
    
    // KROK 2: Zaokr√∫hƒæovanie ƒçasov
    if (step1Success) {
        try {
            addDebug(CONFIG.icons.time + " KROK 2: Zaokr√∫hƒæujem ƒçasy na 15 min√∫t...");
            
            odRounded = roundToQuarter(odRaw);
            doRounded = roundToQuarter(doRaw);
            
            if (!odRounded || !doRounded) {
                addError("Zaokr√∫hƒæovanie ƒçasov zlyhalo", "rounding");
                step2Success = false;
            } else {
                addDebug("  P√¥vodne: " + formatTime(odRaw) + " - " + formatTime(doRaw));
                addDebug("  Zaokr√∫hlen√©: " + formatTime(odRounded) + " - " + formatTime(doRounded));
                
                currentEntry.set(CONFIG.fields.od, odRounded);
                currentEntry.set(CONFIG.fields.do, doRounded);
                
                addDebug(CONFIG.icons.success + " ƒåasy zaokr√∫hlen√© a ulo≈æen√©");
                step2Success = true;
            }
        } catch (roundError) {
            addError("Chyba pri zaokr√∫hƒæovan√≠: " + roundError.toString(), "round");
            step2Success = false;
        }
    }
    
    // KROK 3: V√Ωpoƒçet pracovnej doby
    if (step2Success) {
        try {
            addDebug(CONFIG.icons.calculate + " KROK 3: Poƒç√≠tam pracovn√∫ dobu...");
            
            pracovnaDobaHodiny = calculateHours(odRounded, doRounded);
            
            if (pracovnaDobaHodiny <= 0 || pracovnaDobaHodiny > 24) {
                addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny, "pracovna_doba");
                step3Success = false;
            } else {
                addDebug("  " + CONFIG.icons.time + " Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
                currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
                addDebug("  üíæ Pracovn√° doba ulo≈æen√°");
                step3Success = true;
            }
            
        } catch (calcError) {
            addError("Chyba pri v√Ωpoƒçte pracovnej doby: " + calcError.toString(), "calc");
            step3Success = false;
        }
    }
    
    // KROK 4: Poƒçet pracovn√≠kov a odpracovan√©
    if (step3Success) {
        try {
            addDebug(CONFIG.icons.step + " KROK 4: Poƒç√≠tam odpracovan√© hodiny...");
            
            pocetPracovnikov = zamestnanci.length;
            odpracovaneTotal = pracovnaDobaHodiny * pocetPracovnikov;
            
            addDebug("  " + CONFIG.icons.person + " Poƒçet pracovn√≠kov: " + pocetPracovnikov);
            addDebug("  üìä Odpracovan√©: " + pracovnaDobaHodiny + "h √ó " + pocetPracovnikov + " = " + odpracovaneTotal + "h");
            
            currentEntry.set(CONFIG.fields.pocetPracovnikov, pocetPracovnikov);
            currentEntry.set(CONFIG.fields.odpracovane, odpracovaneTotal);
            
            addDebug(CONFIG.icons.success + " Poƒçty ulo≈æen√©");
            step4Success = true;
            
        } catch (countError) {
            addError("Chyba pri poƒç√≠tan√≠: " + countError.toString(), "count");
            step4Success = false;
        }
    }
    
    // KROK 5: Spracovanie zamestnancov a v√Ωpoƒçet miezd
    if (step4Success) {
        try {
            addDebug(CONFIG.icons.money + " KROK 5: Sprac√∫vam zamestnancov a poƒç√≠tam mzdy...");
            
            celkoveMzdy = 0;
            var spracovaniUspesni = 0;
            
            for (var i = 0; i < zamestnanci.length; i++) {
                var mzda = processEmployee(zamestnanci[i], i, pracovnaDobaHodiny, datum);
                celkoveMzdy += mzda;
                if (mzda > 0) {
                    spracovaniUspesni++;
                }
            }
            
            addDebug("üìä S√öHRN ZAMESTNANCOV:");
            addDebug("  ‚Ä¢ Spracovan√≠: " + spracovaniUspesni + "/" + zamestnanci.length);
            addDebug("  ‚Ä¢ Celkov√© mzdy: " + celkoveMzdy.toFixed(2) + " ‚Ç¨");
            
            currentEntry.set(CONFIG.fields.mzdoveNaklady, celkoveMzdy);
            
            if (spracovaniUspesni > 0) {
                addDebug(CONFIG.icons.success + " Mzdy vypoƒç√≠tan√©");
                step5Success = true;
            } else {
                addError("≈Ωiadny zamestnanec nebol √∫spe≈°ne spracovan√Ω", "mzdy");
                step5Success = false;
            }
            
        } catch (mzdyError) {
            addError("Chyba pri v√Ωpoƒçte miezd: " + mzdyError.toString(), "mzdy");
            step5Success = false;
        }
    }
    
    // KROK 6: HZS spracovanie s auto-linkovan√≠m
    if (step5Success) {
        try {
            addDebug(CONFIG.icons.money + " KROK 6: Sprac√∫vam HZS...");
            
            hzsPole = currentEntry.field(CONFIG.fields.hodinovaZuctovacia);
            
            // Ak nie je HZS vyplnen√©, sk√∫s auto-linkova≈• default
            if (!hzsPole || hzsPole.length === 0) {
                addDebug("  " + CONFIG.icons.warning + " HZS nie je vyplnen√©, hƒæad√°m default...");
                
                var defaultHZS = getDefaultHZS();
                if (defaultHZS) {
                    currentEntry.set(CONFIG.fields.hodinovaZuctovacia, defaultHZS);
                    addDebug("  " + CONFIG.icons.success + " Default HZS nastaven√©");
                    
                    // D√îLE≈ΩIT√â: Znovu naƒç√≠taj pole po linkovan√≠
                    hzsPole = currentEntry.field(CONFIG.fields.hodinovaZuctovacia);
                } else {
                    addDebug("  " + CONFIG.icons.warning + " Default HZS nen√°jden√©, pokraƒçujem bez HZS");
                }
            }
            
            // Ak m√°me HZS, spracuj ho
            if (hzsPole && hzsPole.length > 0) {
                var hzsZaznam = hzsPole[0];
                hzsCena = getHZSPrice(hzsZaznam, datum);
                
                if (hzsCena > 0) {
                    // Nastav atrib√∫t cena - SPR√ÅVNA SYNTAX (2 parametre)
                    try {
                        currentEntry.setAttr(CONFIG.fields.hodinovaZuctovacia, 0, CONFIG.hzsAttributes.cena, hzsCena);
                        addDebug("  " + CONFIG.icons.success + " Atrib√∫t cena nastaven√Ω: " + hzsCena + " ‚Ç¨");
                    } catch (attrError) {
                        addError("Nepodarilo sa nastavi≈• atrib√∫t cena: " + attrError.toString(), "attr_cena");
                    }
                    
                    // Vypoƒç√≠taj sumu HZS
                    sumaHZS = odpracovaneTotal * hzsCena;
                    currentEntry.set(CONFIG.fields.sumaHZS, sumaHZS);
                    
                    addDebug("  " + CONFIG.icons.calculate + " Suma HZS: " + odpracovaneTotal + "h √ó " + hzsCena + "‚Ç¨ = " + sumaHZS.toFixed(2) + " ‚Ç¨");
                    step6Success = true;
                } else {
                    addDebug("  " + CONFIG.icons.warning + " Cena HZS je 0 alebo nen√°jden√°");
                    step6Success = true; // Nie je to kritick√° chyba
                }
            } else {
                addDebug("  " + CONFIG.icons.info + " ≈Ωiadne HZS, preskakujem v√Ωpoƒçet");
                step6Success = true; // Nie je to kritick√° chyba
            }
            
        } catch (hzsError) {
            addError("Chyba pri spracovan√≠ HZS: " + hzsError.toString(), "hzs");
            step6Success = true; // Nie je to kritick√° chyba
        }
    }
    
    // KROK 7: V√Ωkaz pr√°c spracovanie
    if (step6Success && zakazka) {
        try {
            processVykazPrac(zakazka, currentEntry, hzsCena, odpracovaneTotal);
            step7Success = true;
        } catch (vykazError) {
            addError("Chyba pri spracovan√≠ v√Ωkazu pr√°c: " + vykazError.toString(), "vykaz");
            step7Success = true; // Nie je to kritick√° chyba
        }
    } else {
        step7Success = true; // Nie je z√°kazka, tak OK
    }
    
    // KROK 8: Vytvorenie info z√°znamu
    if (step1Success && step2Success && step3Success) {
        try {
            addDebug(CONFIG.icons.info + " KROK 9: Vytv√°ram info z√°znam...");
            
            var infoMessage = CONFIG.icons.work + " Z√ÅZNAM PR√ÅC - AUTOMATICK√ù PREPOƒåET\n" +
                            "=====================================\n\n" +
                            "üìÖ D√°tum: " + moment(datum).format("DD.MM.YYYY") + "\n" +
                            CONFIG.icons.time + " Pracovn√Ω ƒças: " + formatTime(odRounded) + " - " + formatTime(doRounded) + "\n" +
                            CONFIG.icons.time + " Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n\n";
            
            if (zakazka && zakazka.length > 0) {
                var zakazkaObj = zakazka[0];
                var cisloZakazky = zakazkaObj.field("ƒå√≠slo") || "";
                var nazovZakazky = zakazkaObj.field("N√°zov z√°znamu") || "";
                infoMessage += "üì¶ Z√°kazka: " + cisloZakazky + " - " + nazovZakazky + "\n";
            }
            
            infoMessage += "\n" + CONFIG.icons.person + " ZAMESTNANCI:\n" +
                         "‚Ä¢ Poƒçet: " + pocetPracovnikov + " os√¥b\n" +
                         "‚Ä¢ Odpracovan√© spolu: " + odpracovaneTotal + " hod√≠n\n\n" +
                         CONFIG.icons.money + " MZDOV√â N√ÅKLADY:\n" +
                         "‚Ä¢ Celkom: " + celkoveMzdy.toFixed(2) + " ‚Ç¨\n" +
                         "‚Ä¢ Priemer na osobu: " + (pocetPracovnikov > 0 ? (celkoveMzdy / pocetPracovnikov).toFixed(2) : "0") + " ‚Ç¨\n";
            
            if (hzsCena > 0) {
                infoMessage += "\nüíº HZS KALKUL√ÅCIA:\n" +
                             "‚Ä¢ Hodinov√° sadzba: " + hzsCena + " ‚Ç¨/h\n" +
                             "‚Ä¢ Odpracovan√©: " + odpracovaneTotal + " h\n" +
                             "‚Ä¢ Suma HZS: " + sumaHZS.toFixed(2) + " ‚Ç¨\n";
            }
            
            infoMessage += "\n" + CONFIG.icons.work + " TECHNICK√â INFO:\n" +
                         "‚Ä¢ Script verzia: " + CONFIG.version + "\n" +
                         "‚Ä¢ ƒåas generovania: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n" +
                         "‚Ä¢ Trigger: Before Save\n\n" +
                         "üìù Pre detaily pozri Debug_Log";
            
            currentEntry.set(CONFIG.fields.info, infoMessage);
            addDebug(CONFIG.icons.success + " Info z√°znam vytvoren√Ω");
            step8Success = true;
            
        } catch (infoError) {
            addError("Chyba pri vytv√°ran√≠ info z√°znamu: " + infoError.toString(), "info");
            step8Success = false;
        }
    }
    
    // Fin√°lne vyhodnotenie
    var globalSuccess = step1Success && step2Success && step3Success && 
                       step4Success && step5Success;
    
    if (globalSuccess) {
        addDebug("üéâ === PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE! ===");
    } else {
        addDebug(CONFIG.icons.error + " === PREPOƒåET ZLYHAL ===");
        addDebug("Kroky: 1=" + step1Success + " 2=" + step2Success + " 3=" + step3Success + 
                " 4=" + step4Success + " 5=" + step5Success + " 6=" + step6Success + 
                " 7=" + step7Success + " 8=" + step8Success);
    }
    
    return globalSuccess;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    addDebug("üé¨ Inicializ√°cia " + CONFIG.scriptName + " v" + CONFIG.version);
    
    // Kontrola existencie currentEntry
    if (!currentEntry) {
        addError("KRITICK√Å CHYBA: currentEntry neexistuje", "startup");
        message(CONFIG.icons.error + " KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
    } else {
        // Spustenie hlavnej funkcie
        var result = hlavnaFunkcia();
        
        // Ulo≈æ logy
        saveLogs();
        
        // Informuj pou≈æ√≠vateƒæa
        if (result) {
            message(CONFIG.icons.success + " Z√°znam pr√°c prepoƒç√≠tan√Ω √∫spe≈°ne!\n\n" +
                   CONFIG.icons.time + " ƒåasy zaokr√∫hlen√© na 15 min\n" +
                   "üìä Pracovn√° doba: " + currentEntry.field(CONFIG.fields.pracovnaDoba) + " h\n" +
                   CONFIG.icons.person + " Zamestnanci: " + currentEntry.field(CONFIG.fields.pocetPracovnikov) + " os√¥b\n" +
                   CONFIG.icons.money + " Mzdov√© n√°klady: " + currentEntry.field(CONFIG.fields.mzdoveNaklady) + " ‚Ç¨\n" +
                   "üíº Suma HZS: " + (currentEntry.field(CONFIG.fields.sumaHZS) || 0) + " ‚Ç¨\n\n" +
                   CONFIG.icons.info + " Detaily v poli 'info'");
        } else {
            message(CONFIG.icons.error + " Prepoƒçet z√°znamu pr√°c zlyhal!\n\n" +
                   "üîç Skontroluj Error_Log pre detaily\n" +
                   CONFIG.icons.step + " Over vstupn√© d√°ta a sk√∫s znovu");
        }
    }
    
} catch (kritickachyba) {
    // Posledn√° z√°chrana
    try {
        addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "critical");
        saveLogs();
        message(CONFIG.icons.error + " KRITICK√Å CHYBA!\n\nScript zlyhal. Pozri Error_Log.");
    } catch (finalError) {
        message(CONFIG.icons.error + " FAT√ÅLNA CHYBA!\n\n" + kritickachyba.toString());
    }
} 