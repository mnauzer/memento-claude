
// ==============================================
// DOCH√ÅDZKA PREPOƒåET - AUTOMATICK√ù V√ùPOƒåET
// Verzia: 7.3 | D√°tum: August 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Automatick√Ω v√Ωpoƒçet odpracovan√Ωch hod√≠n
//    - V√Ωpoƒçet prest√°vok podƒæa pracovnej doby
//    - V√Ωpoƒçet mzdov√Ωch n√°kladov pre v≈°etk√Ωch zamestnancov
//    - Kontrola v√≠kendov a sviatkov
//    - Prepoƒçet prestojov (rozdiel medzi odpracovan√Ωm a na z√°kazk√°ch)
//    - Nastavenie atrib√∫tov na zamestnancoch
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0+ (nov√° verzia)
//    - MementoConfig v7.0+ (centralizovan√Ω CONFIG)
//    - MementoCore v7.0+ (z√°kladn√© funkcie)
//    - MementoBusiness v7.0+ (business logika)
// ==============================================
// ‚úÖ REFAKTOROVAN√â v7.3:
//    - Opraven√© v≈°etky return statements
//    - Pou≈æitie nov√©ho MementoUtils bez fallbackov
//    - Priamy pr√≠stup k centr√°lnemu CONFIGu
//    - Zachovan√© v≈°etky p√¥vodn√© funkcie
//    - Spr√°vny v√Ωpoƒçet prest√°vok
//    - ƒåist√Ω pracovn√Ω ƒças
// ==============================================


// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================


// Jednoduch√Ω import v≈°etk√©ho cez MementoUtils
var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();
var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Doch√°dzka Prepoƒçet",
    version: "7.3.5",  // Aktualizovan√° verzia
    
    // Referencie na centr√°lny config
    fields: {
        attendance: centralConfig.fields.attendance,
        obligations: centralConfig.fields.obligations,
        common: centralConfig.fields.common,
        // Pridan√© mapovanie pre arrival/departure polia
        date: centralConfig.fields.attendance.date,
        employees: centralConfig.fields.attendance.employees,
        obligations: centralConfig.fields.attendance.obligations,
        arrival: centralConfig.fields.attendance.arrival,      // "Pr√≠chod"
        departure: centralConfig.fields.attendance.departure,  // "Odchod"
        pracovnaDoba: centralConfig.fields.attendance.workTime, // "Pracovn√° doba"
        odpracovane: centralConfig.fields.attendance.workedHours, // "Odpracovan√©"
        pocetPracovnikov: centralConfig.fields.attendance.employeeCount, // "Poƒçet pracovn√≠kov"
        info: centralConfig.fields.common.info
    },
    attributes: centralConfig.fields.attendance.employeeAttributes, 
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    
    // Lok√°lne nastavenia pre tento script
    settings: {
        roundToQuarterHour: true,  // VYPNUT√â - ako quickfix!
        roundDirection: "nearest", // "up", "down", "nearest"
        includeBreaks: true,
        breakThreshold: 6, // hod√≠n
        breakDuration: 30  // min√∫t
    },

     // Kon≈°tanty pre z√°v√§zky
    obligationTypes: {
        wages: centralConfig.constants.obligationTypes.wages
    },
    obligationStates: {
        paid: centralConfig.constants.obligationStates.paid,
        unpaid: centralConfig.constants.obligationStates.unpaid,
        partiallyPaid: centralConfig.constants.obligationStates.partiallyPaid
    },
    
    // Spr√°vne mapovanie pre sadzby
    sadzbyFields: centralConfig.fields.wages
};

function validateInputData() {
    try {
               
        // Definuj povinn√© polia
        var requiredFields = [
            CONFIG.fields.attendance.date,
            CONFIG.fields.attendance.arrival,
            CONFIG.fields.attendance.departure,
            CONFIG.fields.attendance.employees
        ];
        
        // Validuj povinn√© polia
        if (!utils.validateRequiredFields(currentEntry, requiredFields)) {
            return { success: false, error: "Ch√Ωbaj√∫ povinn√© polia" };
        }
        
        // Z√≠skaj hodnoty
        var date = utils.safeGet(currentEntry, CONFIG.fields.attendance.date);
        var arrival = utils.safeGet(currentEntry, CONFIG.fields.attendance.arrival);
        var departure = utils.safeGet(currentEntry, CONFIG.fields.attendance.departure);
        var employees = utils.safeGet(currentEntry, CONFIG.fields.attendance.employees);
        
        // Dodatoƒçn√© kontroly
        if (!date) {
            return { success: false, error: "D√°tum nie je vyplnen√Ω" };
        }
        
        if (!arrival || !departure) {
            return { success: false, error: "Pr√≠chod alebo odchod nie je vyplnen√Ω" };
        }
        
        if (!employees || employees.length === 0) {
            return { success: false, error: "≈Ωiadni zamestnanci v z√°zname" };
        }
        
        utils.addDebug(currentEntry, "  ‚Ä¢ D√°tum: " + moment(date).format("DD.MM.YYYY") + " (" + utils.getDayNameSK(moment(date).day()).toUpperCase() + ")");
        utils.addDebug(currentEntry, "  ‚Ä¢ ƒåas: " + moment(arrival).format("HH:mm") + " - " + moment(departure).format("HH:mm"));
        utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet zamestnancov: " + employees.length);
        utils.addDebug(currentEntry, " Valid√°cia √∫spe≈°n√°", "success");
        message("validateInputData: " + date);
        return {
            success: true,
            date: date,
            arrival: arrival,
            departure: departure,
            employees: employees
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "validateInputData", error);
        return { success: false, error: error.toString() };
    }
}
// ==============================================
// KROK 2: V√ùPOƒåET PRACOVNEJ DOBY
// ==============================================

// function calculateWorkTime(arrival, departure) {
//     try {
//         utils.addDebug(currentEntry, "--- V√Ωpoƒçet pracovnej doby");
        
//         // V√Ωpoƒçet hod√≠n - priamo bez √∫prav ƒçasu
//         var workHours = utils.calculateWorkHours(arrival, departure);
        
//         if (!workHours || workHours.error) {
//             return { success: false, error: workHours ? workHours.error : "Nepodarilo sa vypoƒç√≠ta≈• hodiny" };
//         }
        
//         var pracovnaDobaHodiny = workHours.totalMinutes / 60;
//         pracovnaDobaHodiny = Math.round(pracovnaDobaHodiny * 100) / 100;
        
//         // Ulo≈æ do poƒæa
//         currentEntry.set(CONFIG.fields.attendance.workTime, pracovnaDobaHodiny);
        
//         utils.addDebug(currentEntry, "‚úÖ Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
//         //utils.addDebug(currentEntry, "  ‚Ä¢ Pr√≠chod: " + moment(arrival).format("HH:mm"));
//         utils.addDebug(currentEntry, "  ‚Ä¢ Pr√≠chod: " + utils.formatTime(arrival));
//         utils.addDebug(currentEntry, "  ‚Ä¢ Odchod: " + moment(departure).format("HH:mm"));
        
//         return {
//             success: true,
//             arrivalRounded: arrival,      // Pou≈æ√≠vame origin√°lne ƒçasy
//             departureRounded: departure,  // Pou≈æ√≠vame origin√°lne ƒçasy
//             pracovnaDobaHodiny: pracovnaDobaHodiny,
//             workHours: workHours
//         };
        
//     } catch (error) {
//         utils.addError(currentEntry, error.toString(), "calculateWorkTime", error);
//         return { success: false, error: error.toString() };
//     }
// }
function calculateWorkTime(arrival, departure) {
    try {
        utils.addDebug(currentEntry, "  V√Ωpoƒçet pracovnej doby", "calculation");
        
        // Spracuj ƒçasy cez nov√© funkcie
        var arrivalParsed = utils.parseTimeInput(arrival);
        var departureParsed = utils.parseTimeInput(departure);
        
        if (!arrivalParsed || !departureParsed) {
            return { success: false, error: "Nepodarilo sa spracova≈• ƒçasy" };
        }
        
        // Zaokr√∫hli ƒçasy ak je to povolen√©
        var arrivalFinal = arrivalParsed;
        var departureFinal = departureParsed;
        
        if (CONFIG.settings.roundToQuarterHour) {
            arrivalFinal = utils.roundTimeToQuarter(arrivalParsed); // Pr√≠chod zaokr√∫hli  
            departureFinal = utils.roundTimeToQuarter(departureParsed); // Odchod zaokr√∫hli
            
            utils.addDebug(currentEntry, "  Zaokr√∫hlenie aktivovan√©:", "round");
            utils.addDebug(currentEntry, "  ‚Ä¢ Pr√≠chod: " + utils.formatTime(arrivalParsed) + " ‚Üí " + utils.formatTime(arrivalFinal));
            utils.addDebug(currentEntry, "  ‚Ä¢ Odchod: " + utils.formatTime(departureParsed) + " ‚Üí " + utils.formatTime(departureFinal));
            utils.safeSet(currentEntry, CONFIG.fields.attendance.arrival, arrivalFinal.toDate());
            utils.safeSet(currentEntry, CONFIG.fields.attendance.departure, departureFinal.toDate()); 
        }
        
        // V√Ωpoƒçet hod√≠n s nov√Ωmi ƒçasmi
        var workHours = utils.calculateWorkHours(arrivalFinal, departureFinal);
        
        if (!workHours || workHours.error) {
            return { success: false, error: workHours ? workHours.error : "Nepodarilo sa vypoƒç√≠ta≈• hodiny" };
        }
        
        var pracovnaDobaHodiny = workHours.totalMinutes / 60;
        pracovnaDobaHodiny = Math.round(pracovnaDobaHodiny * 100) / 100;
        
        // Ulo≈æ do poƒæa
        currentEntry.set(CONFIG.fields.attendance.workTime, pracovnaDobaHodiny);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
        
        return {
            success: true,
            arrivalRounded: arrivalFinal,
            departureRounded: departureFinal,
            arrivalOriginal: arrivalParsed,
            departureOriginal: departureParsed,
            pracovnaDobaHodiny: pracovnaDobaHodiny,
            workHours: workHours
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateWorkTime", error);
        return { success: false, error: error.toString() };
    }
}
// ==============================================
// KROK 3: SPRACOVANIE ZAMESTNANCOV
// ==============================================

function processEmployees(zamestnanci, pracovnaDobaHodiny, datum) {
 message("processEmployees: " + datum);
    try {
        var result = {
            success: false,
            pocetPracovnikov: zamestnanci.length,
            odpracovaneTotal: 0,
            pracovnaDoba: pracovnaDobaHodiny,
            celkoveMzdy: 0,
            detaily: []
        };
              // N√°jdi existuj√∫ce z√°v√§zky pre t√∫to doch√°dzku
        var existingObligations = utils.findLinkedObligations(creditor);
        utils.addDebug(currentEntry, "üìä N√°jden√© existuj√∫ce z√°v√§zky: " + existingObligations.length);  
        // Ulo≈æ poƒçet pracovn√≠kov
        utils.safeSet(currentEntry, CONFIG.fields.pocetPracovnikov, result.pocetPracovnikov);
        
        // Spracuj ka≈æd√©ho zamestnanca
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            
            if (!zamestnanec) {
                utils.addDebug(currentEntry, "Zamestnanec[" + i + "] je null - preskakujem", "warning");
                continue;
            }
            
            var employeeName = utils.formatEmployeeName(zamestnanec);
            utils.addDebug(currentEntry, " [" + (i+1) + "/" + result.pocetPracovnikov + "] " + employeeName, "person");
            
            // Spracuj zamestnanca
            var empResult = processEmployee(zamestnanec, pracovnaDobaHodiny, datum, i, existingObligations, );
            
            if (empResult.success) {
                result.odpracovaneTotal += pracovnaDobaHodiny;
                result.celkoveMzdy += empResult.dennaMzda;
                result.detaily.push(empResult);
                result.success = true;
                result.created += empResult.created;
                result.updated += empResult.updated;
                result.totalAmount += empResult.totalAmount;
                result.obligationSuccess = empResult.obligationSuccess;
            } else {
                result.success = false;
            }
            
        }
        utils.addDebug(currentEntry, "üìä V√Ωsledky:");
        utils.addDebug(currentEntry, "  ‚úÖ Vytvoren√©: " + result.created);
        utils.addDebug(currentEntry, "  üîÑ Aktualizovan√©: " + result.updated);
        utils.addDebug(currentEntry, "  üí∞ Celkov√° suma: " + utils.formatMoney(result.totalAmount));
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployees", error);
        return { success: false };
    }
}

function processEmployee(zamestnanec, pracovnaDobaHodiny, datum, index, obligations) {
     message("processEmployee: " + datum);

    try {
        // N√°jdi platn√∫ hodinovku
        var hodinovka = utils.findValidSalary(currentEntry, zamestnanec, datum);
        
        if (!hodinovka || hodinovka <= 0) {
            utils.addDebug(currentEntry, "  ‚ùå Preskakujem - nem√° platn√∫ sadzbu");
            return { success: false };
        }
        
        var zamArray = currentEntry.field(CONFIG.fields.attendance.employees);
        
        if (zamArray && zamArray.length > index && zamArray[index]) {
            // Nastav atrib√∫ty pomocou .attr() met√≥dy
            zamArray[index].setAttr(CONFIG.attributes.workedHours, pracovnaDobaHodiny);
            zamArray[index].setAttr(CONFIG.attributes.hourlyRate, hodinovka);
            
            // Z√≠skaj pr√≠platky
            var priplatok = zamArray[index].attr(CONFIG.attributes.bonus) || 0;
            var premia = zamArray[index].attr(CONFIG.attributes.premium) || 0;
            var pokuta = zamArray[index].attr(CONFIG.attributes.penalty) || 0;
            
            // Vypoƒç√≠taj denn√∫ mzdu
            var dennaMzda = (pracovnaDobaHodiny * (hodinovka + priplatok)) + premia - pokuta;
            dennaMzda = Math.round(dennaMzda * 100) / 100;
            
            // Nastav denn√∫ mzdu atrib√∫t sa nastavuje .setAtt("pole", hodnot)
            zamArray[index].setAttr(CONFIG.attributes.dailyWage, dennaMzda);
            
            utils.addDebug(currentEntry, "  ‚Ä¢ Denn√° mzda: " + dennaMzda + " ‚Ç¨");
            
            // Spracuj z√°v√§zky
            var obligationResult = processObligation(datum, {
                entry: zamestnanec,
                index: index,
                dailyWage: dennaMzda,
                name: utils.formatEmployeeName(zamestnanec),
                obligations: obligations
            });
                
            utils.addDebug(currentEntry, "Spracovan√© √∫spe≈°ne", "success");
            return {
                success: true,
                hodinovka: hodinovka,
                dennaMzda: dennaMzda,
                priplatok: priplatok,
                premia: premia,
                pokuta: pokuta,
                zamestnanec: zamestnanec,  // Pridan√© pre info z√°znam
                created: obligationResult.created,
                updated: obligationResult.updated,
                totalAmount: obligationResult.totalAmount,
                errors: obligationResult.errors,
                total: obligationResult.total,
                obligationSuccess: obligationResult.success
                
            };
        } else {
            utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• zamesnanca na indexe " + index, "processEmployee");
            return { success: false };
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployee", error);
        return { success: false };
    }
}

function processObligation(date, empData) {
    message("processObligation: " + date);
    var employee = empData.entry;

    var result = {
        created: 0,
        updated: 0,
        errors: 0,
        total: 0,
        totalAmount: 0,
        success: false
    };
    
    try {
        utils.addDebug(currentEntry, utils.getIcon("search") +
        " Hƒæad√°m z√°v√§zok " + utils.formatEmployeeName(employee));
        

        
             
        utils.addDebug(currentEntry, "  ‚Ä¢ " + empData.name);
        
        try {
            // N√°jdi existuj√∫ci z√°v√§zok pre tohto zamestnanca
            var existingObligation = null;
            for (var j = 0; j < empData.obligations.length; j++) {
                var obligation = empData.obligations[j];
                var linkedEmployee = utils.safeGetLinks(obligation, CONFIG.fields.obligations.employee);
                
                if (linkedEmployee && linkedEmployee.length > 0 && 
                    linkedEmployee[0].field("ID") === employee.field("ID")) {
                    existingObligation = obligation;
                    break;
                }
            }
            
            if (existingObligation) {
                utils.addDebug(currentEntry, utils.getIcon("search") +
        "  * Updatujem z√°v√§zok pre " + utils.formatEmployeeName(employee));
                // Aktualizuj existuj√∫ci
                if (utils.updateObligation(date, existingObligation, empData.dailyWage)) {
                    result.updated++;
                    result.totalAmount += empData.dailyWage;
                } else {
                    result.errors++;
                }
            } else {
                // Vytvor nov√Ω
                utils.addDebug(currentEntry, utils.getIcon("search") +
        "  + Vytv√°ram z√°v√§zok pre " + utils.formatEmployeeName(employee));
                if (utils.createObligation(date, empData, "attendance")) {
                    result.created++;
                    result.totalAmount += empData.dailyWage;
                } else {
                    result.errors++;
                }
            }
            
            result.total++;
            
        } catch (error) {
            utils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnanca: " + error.toString(), "processObligations");
            result.errors++;
            }
        
        result.success = result.errors === 0 && result.total > 0;
        
        
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri spracovan√≠: " + error.toString(), "processObligations", error);
        return result;
    }
}

// ==============================================
// KROK 4: CELKOV√â V√ùPOƒåTY
// ==============================================

function calculateTotals(employeeResult) {
    try {
        // Ulo≈æ celkov√© hodnoty
        utils.safeSet(currentEntry, CONFIG.fields.attendance.workedHours, employeeResult.odpracovaneTotal);
        utils.safeSet(currentEntry, CONFIG.fields.attendance.wageCosts, employeeResult.celkoveMzdy);
        utils.safeSet(currentEntry, CONFIG.fields.attendance.onProjects, 0);
        utils.safeSet(currentEntry, CONFIG.fields.attendance.downtime, 0);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Pracovn√° doba: " + employeeResult.pracovnaDoba + " hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Odpracovan√© spolu: " + employeeResult.odpracovaneTotal + " hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy));
        utils.addDebug(currentEntry, "  ‚Ä¢ Na z√°kazk√°ch: " + "0 hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Prestoje: " + "0 hod√≠n");
        utils.addDebug(currentEntry, " Celkov√© v√Ωpoƒçty √∫spe≈°n√©", "success");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateTotals", error);
        return false;
    }
}

function zobrazSuhrn() {
    var summaryData = {
        success: true,
        date: currentEntry.field(CONFIG.fields.attendance.date),
        employeeCount: currentEntry.field(CONFIG.fields.attendance.employeeCount),
        totalHours: currentEntry.field(CONFIG.fields.attendance.workedHours),
        totalCosts: currentEntry.field(CONFIG.fields.attendance.wageCosts),
        errors: [] // M√¥≈æe≈° prida≈• chyby ak ich m√°≈°
    };
    
    utils.showProcessingSummary(currentEntry, summaryData, CONFIG);
}

// ==============================================
// KROK 5: VYTVORENIE INFO Z√ÅZNAMU
// ==============================================

function createInfoRecord(workTimeResult, employeeResult) {
    try {
        var date = currentEntry.field(CONFIG.fields.attendance.date);
        var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
        var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();


        var infoMessage = "üìã DOCH√ÅDZKA - AUTOMATICK√ù PREPOƒåET\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        
        infoMessage += "üìÖ D√°tum: " + dateFormatted + " (" + dayName + ")\n";
        infoMessage += "‚è∞ Pracovn√Ω ƒças: " + moment(workTimeResult.arrivalRounded).format("HH:mm") + 
                       " - " + moment(workTimeResult.departureRounded).format("HH:mm") + "\n";
        infoMessage += "‚è±Ô∏è Pracovn√° doba: " + workTimeResult.pracovnaDobaHodiny + " hod√≠n\n\n";
        
        infoMessage += "üë• ZAMESTNANCI (" + employeeResult.pocetPracovnikov + " " + utils.selectOsobaForm(employeeResult.pocetPracovnikov) +")\n";;
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        for (var i = 0; i < employeeResult.detaily.length; i++) {
            var detail = employeeResult.detaily[i];
            infoMessage += "üë§ " + (i+1) + ": " + utils.formatEmployeeName(employeeResult.detaily[i].zamestnanec) + "\n";
            infoMessage += "‚Ä¢ Hodinovka: " + detail.hodinovka + " ‚Ç¨/h\n";
            if (detail.priplatok > 0) infoMessage += "  + Pr√≠platok: " + detail.priplatok + " ‚Ç¨/h\n";
            if (detail.premia > 0) infoMessage += "  + Pr√©mia: " + detail.premia + " ‚Ç¨\n";
            if (detail.pokuta > 0) infoMessage += "  - Pokuta: " + detail.pokuta + " ‚Ç¨\n";
            infoMessage += "  = Denn√° mzda: " + detail.dennaMzda + " ‚Ç¨\n\n";
        }
        
        infoMessage += "üí∞ S√öHRN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Odpracovan√© celkom: " + employeeResult.odpracovaneTotal + " hod√≠n\n";
        infoMessage += "‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy) + "\n\n";
        
        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ ƒåas spracovania: " + moment().format("HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + (utils.version || "N/A") + "\n";
        
        if (typeof MementoConfig !== 'undefined') {
            infoMessage += "‚Ä¢ MementoConfig: v" + MementoConfig.version + "\n";
        }
        
        infoMessage += "\n‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE";
        
        currentEntry.set(CONFIG.fields.info, infoMessage);
        
        utils.addDebug(currentEntry, "‚úÖ Info z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createInfoRecord", error);
        return false;
    }
}
// ==============================================
// VYTVORENIE INFO_TELEGRAM Z√ÅZNAMU
// ==============================================

function createTelegramInfoRecord(workTimeResult, employeeResult) {
    try {
        var date = currentEntry.field(CONFIG.fields.attendance.date);
        var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
        var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();

        // HTML form√°tovan√° spr√°va (namiesto Markdown)
        var telegramInfo = "üìã <b>DOCH√ÅDZKA - AUTOMATICK√ù PREPOƒåET</b>\n";
        telegramInfo += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
        
        telegramInfo += "üìÖ <b>D√°tum:</b> " + dateFormatted + " (" + dayName + ")\n";
        telegramInfo += "‚è∞ <b>Pracovn√Ω ƒças:</b> " + utils.formatTime(workTimeResult.arrivalRounded) + 
                        " - " + utils.formatTime(workTimeResult.departureRounded) + "\n";
        telegramInfo += "‚è±Ô∏è <b>Pracovn√° doba:</b> " + workTimeResult.pracovnaDobaHodiny + " hod√≠n\n\n";
        
        telegramInfo += "üë• <b>ZAMESTNANCI</b> (" + employeeResult.pocetPracovnikov + " " + 
                        utils.selectOsobaForm(employeeResult.pocetPracovnikov) + ")\n";
        telegramInfo += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        for (var i = 0; i < employeeResult.detaily.length; i++) {
            var detail = employeeResult.detaily[i];
            var empName = utils.formatEmployeeName(employeeResult.detaily[i].zamestnanec);
            
            telegramInfo += "‚Ä¢ <b>" + empName + "</b>\n";
            telegramInfo += "  üí∂ Hodinovka: " + detail.hodinovka + " ‚Ç¨/h\n";
            
            if (detail.priplatok > 0) {
                telegramInfo += "  ‚ûï Pr√≠platok: " + detail.priplatok + " ‚Ç¨/h\n";
            }
            if (detail.premia > 0) {
                telegramInfo += "  üéÅ Pr√©mia: " + detail.premia + " ‚Ç¨\n";
            }
            if (detail.pokuta > 0) {
                telegramInfo += "  ‚ûñ Pokuta: " + detail.pokuta + " ‚Ç¨\n";
            }
            
            telegramInfo += "  üí∞ <b>Denn√° mzda: " + detail.dennaMzda + " ‚Ç¨</b>\n\n";
        }
        
        telegramInfo += "üí∞ <b>S√öHRN</b>\n";
        telegramInfo += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        telegramInfo += "‚Ä¢ Odpracovan√© celkom: <b>" + employeeResult.odpracovaneTotal + " hod√≠n</b>\n";
        telegramInfo += "‚Ä¢ Mzdov√© n√°klady: <b>" + utils.formatMoney(employeeResult.celkoveMzdy) + "</b>\n\n";
        
        telegramInfo += "üîß <i>Script: " + CONFIG.scriptName + " v" + CONFIG.version + "</i>\n";
        telegramInfo += "‚è∞ <i>Spracovan√©: " + moment().format("HH:mm:ss") + "</i>\n";
        telegramInfo += "üìù <i>Z√°znam #" + currentEntry.field("ID") + "</i>";
        
        // Ulo≈æ do poƒæa info_telegram
        currentEntry.set("info_telegram", telegramInfo);
        
        utils.addDebug(currentEntry, utils.getIcon("success") + " Info_telegram z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createTelegramInfoRecord", error);
        return false;
    }
}


// Helper funkcia pre escape markdown znakov
function escapeMarkdown(text) {
    if (!text) return "";
    
    // Najsk√¥r odstr√°≈à v≈°etky existuj√∫ce backslashes
    text = String(text).replace(/\\/g, '');
    
    // Potom escape-ni markdown znaky OKREM lom√≠tka (/)
    // Lom√≠tko nech√°me bez escape-u aby nevznikli odkazy na botov
    return text
        .replace(/\*/g, "\\*")
        .replace(/_/g, "\\_")
        .replace(/\[/g, "\\[")
        .replace(/\]/g, "\\]")
        .replace(/\(/g, "\\(")
        .replace(/\)/g, "\\)")
        .replace(/~/g, "\\~")
        .replace(/`/g, "\\`")
        .replace(/>/g, "\\>")
        .replace(/#/g, "\\#")
        .replace(/\+/g, "\\+")
        .replace(/-/g, "\\-")
        .replace(/=/g, "\\=")
        .replace(/\|/g, "\\|")
        .replace(/\{/g, "\\{")
        .replace(/\}/g, "\\}")
        .replace(/\./g, "\\.")
        .replace(/!/g, "\\!");
        // POZOR: Neescapujeme lom√≠tko (/) aby ‚Ç¨/h nefungovalo ako odkaz
}
// ==============================================
// FIN√ÅLNY S√öHRN
// ==============================================

function logFinalSummary(steps) {
   
    try {
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, "=== DOCH√ÅDZKA PREPOƒåET ===");
        utils.addDebug(currentEntry, "MementoUtils verzia: " + utils.version);
        // Kontrola z√°vislost√≠
        var depCheck = utils.checkDependencies(['config', 'core', 'business']);
        if (!depCheck.success) {
            utils.addError(currentEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
            message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly!\n\n" + depCheck.missing.join(", "));
            return false;
        }
        // Debug info o naƒç√≠tan√Ωch moduloch
        utils.addDebug(currentEntry, "=== ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===", "start");
        utils.addDebug(currentEntry, "ƒåas spustenia: " + utils.formatDate(moment()) ,"calendar");
        
         // Kroky prepoƒçtu
        var steps = {
            step1: { success: false, name: "Naƒç√≠tanie a valid√°cia d√°t" },
            step2: { success: false, name: "V√Ωpoƒçet pracovnej doby" },
            step3: { success: false, name: "Spracovanie zamestnancov" },
            step4: { success: false, name: "Celkov√© v√Ωpoƒçty" },
            step5: { success: false, name: "Vytvorenie info z√°znamu" },
            step6: { success: false, name: "Vytvorenie info_telegram z√°znamu" }
        };

        // KROK 1: Valid√°cia vstupn√Ωch d√°t
        utils.addDebug(currentEntry, " KROK 1: Valid√°cia vstupn√Ωch d√°t", "validation");
        var validationResult = validateInputData();  // ‚úÖ Volaj bez parametrov
        if (!validationResult.success) {
            utils.addError(currentEntry, "Valid√°cia zlyhala: " + validationResult.error, CONFIG.scriptName);
            message("‚ùå " + validationResult.error);
            return false;
        }
        steps.step1.success = true;

        // KROK 2: V√Ωpoƒçet pracovn√©ho ƒçasu
        utils.addDebug(currentEntry, " KROK 2: Z√≠skavanie √∫dajov", "update");
        var isHoliday = utils.isHoliday(validationResult.date);
        var isWeekend = utils.isWeekend(validationResult.date);
        var workTimeResult = calculateWorkTime(validationResult.arrival,validationResult.departure);    

        if (!workTimeResult.success) {
            utils.addError(currentEntry, "V√Ωpoƒçet ƒçasu zlyhal: " + workTimeResult.error, CONFIG.scriptName);
            return false;
        }

      
        steps.step2.success = true;
        
        // KROK 3: Spracovanie zamestnancov
        utils.addDebug(currentEntry, " KROK 3: Spracovanie zamestnancov", "group");
        var employeeResult = processEmployees(validationResult.employees, workTimeResult.pracovnaDobaHodiny, validationResult.date);
        steps.step3.success = employeeResult.success;
        
        // KROK 4: Celkov√© v√Ωpoƒçty
        utils.addDebug(currentEntry, " KROK 4: Celkov√© v√Ωpoƒçty", "calculation");
        if (employeeResult.success) {
            steps.step4.success = calculateTotals(employeeResult);
        }
        
        // KROK 5: Info z√°znam
        utils.addDebug(currentEntry, " KROK 5: Vytvorenie info z√°znamu", "note");
        steps.step5.success = createInfoRecord(workTimeResult, employeeResult);
        steps.step6.success = createTelegramInfoRecord(workTimeResult, employeeResult) && steps.step5.success;  
        
        var farba = "#FFFFFF"; // Biela - ≈°tandard
        if (isHoliday) {
            farba = "#FFE6CC"; // Oran≈æov√° - sviatok
        } else if (isWeekend) {
            farba = "#FFFFCC"; // ≈Ωlt√° - v√≠kend
        }
        // pre nastav√≠me zaokr√∫hlen√© ƒçasy pr√≠chodu a odchodu
       
        utils.safeSet(currentEntry, CONFIG.fields.common.backgroundColor, farba);

        return true;
        // Fin√°lny log
        logFinalSummary(steps);
        // // Vypoƒç√≠taj hrub√Ω pracovn√Ω ƒças
        // var hrubyCasMinuty = calculateTimeDifference(prichod, odchod);
        // if (hrubyCasMinuty <= 0) {
        //     utils.addError(currentEntry, "Nespr√°vny ƒças pr√≠chodu/odchodu", "ƒçasov√Ω v√Ωpoƒçet");
        //     message("‚ùå Chyba: ƒåas odchodu mus√≠ by≈• po ƒçase pr√≠chodu!");
        //     return false;
        // }
        
        // utils.addDebug(currentEntry, "‚è±Ô∏è Hrub√Ω pracovn√Ω ƒças: " + formatMinutesToTime(hrubyCasMinuty));
        
        // // Vypoƒç√≠taj prest√°vku
        // var breakSettings = getDefaultBreakSettings();
        // var prestavkaMinuty = calculateBreakDuration(hrubyCasMinuty);
        
        // utils.addDebug(currentEntry, "‚è∏Ô∏è Prest√°vka: " + prestavkaMinuty + " min√∫t");
        
        // // Vypoƒç√≠taj ƒçist√Ω pracovn√Ω ƒças
        // var cistyPracovnyCasMinuty = hrubyCasMinuty - prestavkaMinuty;
        // var cistyPracovnyCasHodiny = cistyPracovnyCasMinuty / 60;
        
        // utils.addDebug(currentEntry, "‚úÖ ƒåist√Ω pracovn√Ω ƒças: " + formatMinutesToTime(cistyPracovnyCasMinuty) + " (" + cistyPracovnyCasHodiny.toFixed(2) + "h)");
        
        // KROK 4: Kontrola v√≠kendu a sviatkov
        // utils.addDebug(currentEntry, "\nüìã KROK 4: Kontrola v√≠kendu a sviatkov");
        
        // var jeVikend = utils.isWeekend(datum);
        // var jeSviatok = utils.isHoliday(datum);
        
        // if (jeVikend) {
        //     utils.addDebug(currentEntry, "üìÖ V√≠kendov√° zmena - " + moment(datum).format("dddd"));
        // }
        // if (jeSviatok) {
        //     utils.addDebug(currentEntry, "üéâ Pr√°ca poƒças sviatku");
        // }
        
        // KROK 5: Spracovanie z√°znamov pr√°ce
        // utils.addDebug(currentEntry, "\nüìã KROK 5: Spracovanie z√°znamov pr√°ce");
        
        // var hoursOnProjects = 0;
        // for (var i = 0; i < praceLinks.length; i++) {
        //     var praca = praceLinks[i];
        //     var odpracovaneNaPraci = utils.safeGet(praca, CONFIG.fields.workRecord.workedHours, 0);
        //     hoursOnProjects += odpracovaneNaPraci;
            
        //     utils.addDebug(currentEntry, "  üî® Pr√°ca #" + (i + 1) + ": " + odpracovaneNaPraci + "h");
        // }
        
        // // KROK 6: Spracovanie zamestnancov
        // utils.addDebug(currentEntry, "\nüìã KROK 6: Spracovanie zamestnancov");
        
        // if (zamestnanci.length === 0) {
        //     utils.addError(currentEntry, "≈Ωiadni zamestnanci na spracovanie", "zamestnanci");
        //     message("‚ùå Chyba: Pridajte aspo≈à jedn√©ho zamestnanca!");
        //     return false;
        // }
        
        // var pocetPracovnikov = zamestnanci.length;
        // var spracovaniZamestnanci = 0;
        
        // for (var j = 0; j < zamestnanci.length; j++) {
        //     var zamestnanec = zamestnanci[j];
            
        //     utils.addDebug(currentEntry, "\n--- Zamestnanec " + (j + 1) + "/" + pocetPracovnikov + " ---");
            
        //     // Z√≠skaj detaily zamestnanca
        //     var details = utils.getEmployeeDetails(zamestnanec, datum);
        //     if (!details) {
        //         utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• √∫daje zamestnanca", "employee_" + j);
        //         continue;
        //     }
            
        //     spracovaniZamestnanci++;
            
        //     utils.addDebug(currentEntry, "üë§ " + details.fullName);
        //     utils.addDebug(currentEntry, "üìç Nick: " + details.nick);
            
        //     // Vypoƒç√≠taj mzdu
        //     var mzdaCalc = utils.calculateDailyWage(zamestnanec, cistyPracovnyCasHodiny, datum);
            
        //     utils.addDebug(currentEntry, "üí∞ Hodinov√° sadzba: " + utils.formatMoney(mzdaCalc.hourlyRate) + "/h");
        //     utils.addDebug(currentEntry, "üïê Odpracovan√©: " + cistyPracovnyCasHodiny.toFixed(2) + "h");
            
        //     // Pr√≠platky za v√≠kend/sviatok
        //     var priplatok = 0;
        //     if (jeVikend) {
        //         priplatok += mzdaCalc.wage * 0.5; // 50% pr√≠platok za v√≠kend
        //         utils.addDebug(currentEntry, "üìÖ V√≠kendov√Ω pr√≠platok: +" + utils.formatMoney(mzdaCalc.wage * 0.5));
        //     }
        //     if (jeSviatok) {
        //         priplatok += mzdaCalc.wage * 1.0; // 100% pr√≠platok za sviatok
        //         utils.addDebug(currentEntry, "üéâ Sviatkov√Ω pr√≠platok: +" + utils.formatMoney(mzdaCalc.wage * 1.0));
        //     }
            
        //     var celkovaMzda = mzdaCalc.wage + priplatok;
            
        //     utils.addDebug(currentEntry, "üí∏ Z√°kladn√° mzda: " + utils.formatMoney(mzdaCalc.wage));
        //     if (priplatok > 0) {
        //         utils.addDebug(currentEntry, "‚ûï Pr√≠platky spolu: " + utils.formatMoney(priplatok));
        //     }
        //     utils.addDebug(currentEntry, "üí∞ Celkov√° mzda: " + utils.formatMoney(celkovaMzda));
            
        //     // Nastav atrib√∫ty na Link to Entry poli
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.workedHours, cistyPracovnyCasHodiny, j);
            
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.hourlyRate, mzdaCalc.hourlyRate, j);
            
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.dailyWage, mzdaCalc.wage, j);
            
        //     if (priplatok > 0) {
        //         utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                              CONFIG.attributes.employees.bonus, priplatok, j);
        //     }
            
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.costs, celkovaMzda, j);
            
        //     // Pripoƒç√≠taj k celkov√Ωm hodnot√°m
        //     totalOdpracovane += cistyPracovnyCasHodiny;
        //     totalMzdoveNaklady += celkovaMzda;
        // }
        
        // // Kontrola ƒçi sme spracovali aspo≈à jedn√©ho zamestnanca
        // if (spracovaniZamestnanci === 0) {
        //     utils.addError(currentEntry, "Nepodarilo sa spracova≈• ≈æiadneho zamestnanca", "zamestnanci");
        //     message("‚ùå Chyba: Nepodarilo sa spracova≈• zamestnancov!");
        //     return false;
        // }
        
        // KROK 7: V√Ωpoƒçet prestojov
        // utils.addDebug(currentEntry, "\nüìã KROK 7: V√Ωpoƒçet prestojov");
        
        // totalPracovnaDoba = hrubyCasMinuty / 60;  // Hrub√Ω ƒças v hodin√°ch
        // totalCistyPracovnyCas = cistyPracovnyCasHodiny * pocetPracovnikov;  // ƒåist√Ω ƒças * poƒçet ƒæud√≠
        // totalNaZakazkach = hoursOnProjects;
        // totalPrestoje = Math.max(0, totalOdpracovane - totalNaZakazkach);
        // totalPrestavka = prestavkaMinuty / 60;  // Prest√°vka v hodin√°ch
        
        // utils.addDebug(currentEntry, "‚è±Ô∏è Hrub√° pracovn√° doba: " + totalPracovnaDoba.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "‚è∏Ô∏è Prest√°vka: " + totalPrestavka.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "‚úÖ ƒåist√Ω pracovn√Ω ƒças (v≈°etci): " + totalCistyPracovnyCas.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "üî® Na z√°kazk√°ch: " + totalNaZakazkach.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "‚è∏Ô∏è Prestoje: " + totalPrestoje.toFixed(2) + "h");
        
        // // KROK 8: Nastavenie s√∫hrnn√Ωch pol√≠
        // utils.addDebug(currentEntry, "\nüìã KROK 8: Nastavenie s√∫hrnn√Ωch pol√≠");
        
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.employeeCount, pocetPracovnikov);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.workTime, totalPracovnaDoba);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.workedHours, totalOdpracovane);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.onProjects, totalNaZakazkach);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.downtime, totalPrestoje);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.wageCosts, totalMzdoveNaklady);
        // utils.safeSet(currentEntry, "Prest√°vka", totalPrestavka);  // Prest√°vka pole
        // utils.safeSet(currentEntry, "ƒåist√Ω pracovn√Ω ƒças", totalCistyPracovnyCas);  // ƒåist√Ω pracovn√Ω ƒças pole
        
       
        // utils.safeSet(currentEntry, CONFIG.fields.common.backgroundColor, farba);
        
        // KROK 10: Info pole
        //vytvorInfoZaznam();
        
        // Z√°vereƒçn√© ≈°tatistiky
        // utils.addDebug(currentEntry, "\nüìä === V√ùSLEDKY PREPOƒåTU ===");
        // utils.addDebug(currentEntry, "Pracovn√≠kov: " + employeeResult.pocetPracovnikov, "group");
        // //utils.addDebug(currentEntry, "‚è±Ô∏è Hrub√Ω ƒças: " + formatMinutesToTime(hrubyCasMinuty));
        // //utils.addDebug(currentEntry, "‚è∏Ô∏è Prest√°vka: " + prestavkaMinuty + " min√∫t");
        // //utils.addDebug(currentEntry, "‚úÖ ƒåist√Ω ƒças: " + formatMinutesToTime(cistyPracovnyCasMinuty));
        // utils.addDebug(currentEntry, "Mzdov√© n√°klady: " + utils.formatMoney(totalMzdoveNaklady), "money");
        // utils.addDebug(currentEntry, "=== PREPOƒåET DOKONƒåEN√ù ===", "checkmark");
        
        //
       
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message("‚ùå Kritick√° chyba!\n\n" + error.lineNumber + ": " + error.toString());
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
} else {
    // Zobraz s√∫hrn u≈æ√≠vateƒæovi
    zobrazSuhrn();
}