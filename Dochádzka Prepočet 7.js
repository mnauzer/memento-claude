
// ==============================================
// DOCH√ÅDZKA PREPOƒåET - AUTOMATICK√ù V√ùPOƒåET
// Verzia: 7.3 | D√°tum: August 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Automatick√Ω v√Ωpoƒçet odpracovan√Ωch hod√≠n
//    - V√Ωpoƒçet prest√°vok podƒæa pracovnej doby
//    - V√Ωpoƒçet mzdov√Ωch n√°kladov pre v≈°etk√Ωch zamestnancov
//    - Kontrola v√≠kendov a sviatkov
//    - Prepoƒçet prestojov (rozdiel medzi odpracovan√Ωm a na z√°kazk√°ch)
//    - Nastavenie atrib√∫tov na zamestnancoch
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================


// Jednoduch√Ω import v≈°etk√©ho cez MementoUtils
var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();
var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Doch√°dzka Prepoƒçet",
    version: "7.4.4",  // Aktualizovan√° verzia
    
    // Referencie na centr√°lny config
    fields: {
        place: centralConfig.fields.place,
        vehicle: centralConfig.fields.vehicle,
        bookOfRides: centralConfig.fields.bookOfRides,
        account: centralConfig.fields.account,
        notifications: centralConfig.fields.notifications,
        rideLog: centralConfig.fields.rideLog,
        cashBook: centralConfig.fields.cashBook,
        workRecord: centralConfig.fields.workRecord,
        attendance: centralConfig.fields.attendance,
        obligations: centralConfig.fields.obligations,
        common: centralConfig.fields.common,
        // Pridan√© mapovanie pre arrival/departure polia
        date: centralConfig.fields.attendance.date,
        employees: centralConfig.fields.attendance.employees,
        arrival: centralConfig.fields.attendance.arrival,      // "Pr√≠chod"
        departure: centralConfig.fields.attendance.departure,  // "Odchod"
        pracovnaDoba: centralConfig.fields.attendance.workTime, // "Pracovn√° doba"
        odpracovane: centralConfig.fields.attendance.workedHours, // "Odpracovan√©"
        pocetPracovnikov: centralConfig.fields.attendance.employeeCount, // "Poƒçet pracovn√≠kov"
        info: centralConfig.fields.common.info
    },
    attributes: centralConfig.fields.attendance.employeeAttributes, 
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    
    // Lok√°lne nastavenia pre tento script
    settings: {
        roundToQuarterHour: true,  // VYPNUT√â - ako quickfix!
        roundDirection: "nearest", // "up", "down", "nearest"
        includeBreaks: true,
        breakThreshold: 6, // hod√≠n
        breakDuration: 30  // min√∫t
    },

     // Kon≈°tanty pre z√°v√§zky
    obligationTypes: {
        wages: centralConfig.constants.obligationTypes.wages
    },
    obligationStates: {
        paid: centralConfig.constants.obligationStates.paid,
        unpaid: centralConfig.constants.obligationStates.unpaid,
        partiallyPaid: centralConfig.constants.obligationStates.partiallyPaid
    },
    
    // Spr√°vne mapovanie pre sadzby
    sadzbyFields: centralConfig.fields.wages
};

function validateInputData() {
    try {
               
        // Definuj povinn√© polia
        var requiredFields = [
            CONFIG.fields.attendance.date,
            CONFIG.fields.attendance.arrival,
            CONFIG.fields.attendance.departure,
            CONFIG.fields.attendance.employees
        ];
        
        // Validuj povinn√© polia
        if (!utils.validateRequiredFields(currentEntry, requiredFields)) {
            return { success: false, error: "Ch√Ωbaj√∫ povinn√© polia" };
        }
        
        // Z√≠skaj hodnoty
        var date = utils.safeGet(currentEntry, CONFIG.fields.attendance.date);
        var arrival = utils.safeGet(currentEntry, CONFIG.fields.attendance.arrival);
        var departure = utils.safeGet(currentEntry, CONFIG.fields.attendance.departure);
        var employees = utils.safeGet(currentEntry, CONFIG.fields.attendance.employees);
        
        // Dodatoƒçn√© kontroly
        if (!date) {
            return { success: false, error: "D√°tum nie je vyplnen√Ω" };
        }
        
        if (!arrival || !departure) {
            return { success: false, error: "Pr√≠chod alebo odchod nie je vyplnen√Ω" };
        }
        
        if (!employees || employees.length === 0) {
            return { success: false, error: "≈Ωiadni zamestnanci v z√°zname" };
        }
        
        utils.addDebug(currentEntry, "  ‚Ä¢ D√°tum: " + moment(date).format("DD.MM.YYYY") + " (" + utils.getDayNameSK(moment(date).day()).toUpperCase() + ")");
        utils.addDebug(currentEntry, "  ‚Ä¢ ƒåas: " + moment(arrival).format("HH:mm") + " - " + moment(departure).format("HH:mm"));
        utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet zamestnancov: " + employees.length);
        utils.addDebug(currentEntry, " Valid√°cia √∫spe≈°n√°", "success");
        return {
            success: true,
            date: date,
            arrival: arrival,
            departure: departure,
            employees: employees
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "validateInputData", error);
        return { success: false, error: error.toString() };
    }
}

function calculateWorkTime(arrival, departure) {
    try {
        utils.addDebug(currentEntry, "  V√Ωpoƒçet pracovnej doby", "calculation");
        
        // Spracuj ƒçasy cez nov√© funkcie
        var arrivalParsed = utils.parseTimeInput(arrival);
        var departureParsed = utils.parseTimeInput(departure);
        
        if (!arrivalParsed || !departureParsed) {
            return { success: false, error: "Nepodarilo sa spracova≈• ƒçasy" };
        }
        
        // Zaokr√∫hli ƒçasy ak je to povolen√©
        var arrivalFinal = arrivalParsed;
        var departureFinal = departureParsed;
        
        if (CONFIG.settings.roundToQuarterHour) {
            arrivalFinal = utils.roundTimeToQuarter(arrivalParsed); // Pr√≠chod zaokr√∫hli  
            departureFinal = utils.roundTimeToQuarter(departureParsed); // Odchod zaokr√∫hli
            
            utils.addDebug(currentEntry, "  Zaokr√∫hlenie aktivovan√©:", "round");
            utils.addDebug(currentEntry, "  ‚Ä¢ Pr√≠chod: " + utils.formatTime(arrivalParsed) + " ‚Üí " + utils.formatTime(arrivalFinal));
            utils.addDebug(currentEntry, "  ‚Ä¢ Odchod: " + utils.formatTime(departureParsed) + " ‚Üí " + utils.formatTime(departureFinal));
            utils.safeSet(currentEntry, CONFIG.fields.attendance.arrival, arrivalFinal.toDate());
            utils.safeSet(currentEntry, CONFIG.fields.attendance.departure, departureFinal.toDate()); 
        }
        
        // V√Ωpoƒçet hod√≠n s nov√Ωmi ƒçasmi
        var workHours = utils.calculateWorkHours(arrivalFinal, departureFinal);
        
        if (!workHours || workHours.error) {
            return { success: false, error: workHours ? workHours.error : "Nepodarilo sa vypoƒç√≠ta≈• hodiny" };
        }
        
        var pracovnaDobaHodiny = workHours.totalMinutes / 60;
        pracovnaDobaHodiny = Math.round(pracovnaDobaHodiny * 100) / 100;
        
        // Ulo≈æ do poƒæa
        utils.safeSet(currentEntry, CONFIG.fields.attendance.workTime, pracovnaDobaHodiny);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
        
        return {
            success: true,
            arrivalRounded: arrivalFinal,
            departureRounded: departureFinal,
            arrivalOriginal: arrivalParsed,
            departureOriginal: departureParsed,
            pracovnaDobaHodiny: pracovnaDobaHodiny,
            workHours: workHours
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateWorkTime", error);
        return { success: false, error: error.toString() };
    }
}
// ==============================================
// KROK 3: SPRACOVANIE ZAMESTNANCOV
// ==============================================

function processEmployees(zamestnanci, pracovnaDobaHodiny, datum) {

    try {
        var result = {
            success: false,
            pocetPracovnikov: zamestnanci.length,
            odpracovaneTotal: 0,
            pracovnaDoba: pracovnaDobaHodiny,
            celkoveMzdy: 0,
            detaily: [],
            created: 0,
            updated: 0,
            totalAmount: 0,
            obligationSuccess: false

        };
              // N√°jdi existuj√∫ce z√°v√§zky pre t√∫to doch√°dzku
        var existingObligations = utils.findLinkedObligations('attendance');
        utils.addDebug(currentEntry, utils.getIcon("document") + "  N√°jden√© existuj√∫ce z√°v√§zky: " + existingObligations.length);  
        // Ulo≈æ poƒçet pracovn√≠kov
        utils.safeSet(currentEntry, CONFIG.fields.pocetPracovnikov, result.pocetPracovnikov);
        
        // Spracuj ka≈æd√©ho zamestnanca
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            
            if (!zamestnanec) {
                utils.addDebug(currentEntry, "Zamestnanec[" + i + "] je null - preskakujem", "warning");
                continue;
            }
            
            var employeeName = utils.formatEmployeeName(zamestnanec);
            utils.addDebug(currentEntry, " [" + (i+1) + "/" + result.pocetPracovnikov + "] " + employeeName, "person");
            
            // Spracuj zamestnanca
            var empResult = processEmployee(zamestnanec, pracovnaDobaHodiny, datum, i, existingObligations);
            
            if (empResult.success) {
                result.odpracovaneTotal += pracovnaDobaHodiny;
                result.celkoveMzdy += empResult.dennaMzda;
                result.detaily.push(empResult);
                result.success = true;
                result.created += empResult.created;
                result.updated += empResult.updated;
                result.totalAmount += empResult.totalAmount;
                result.obligationSuccess = empResult.obligationSuccess;
            } else {
                result.success = false;
            }
            
        }
        utils.addDebug(currentEntry,utils.getIcon("note") +  "  Z√°v√§zky z tohto z√°znamu:");
        utils.addDebug(currentEntry,utils.getIcon("checkmark") + "    Vytvoren√©: " + result.created);
        utils.addDebug(currentEntry,utils.getIcon("update") +  "    Aktualizovan√©: " + result.updated);
        utils.addDebug(currentEntry,utils.getIcon("money") +  "    Celkov√° suma: " + utils.formatMoney(result.totalAmount));
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployees", error);
        return { success: false };
    }
}

function processEmployee(zamestnanec, pracovnaDobaHodiny, datum, index, obligations) {
    try {
        // N√°jdi platn√∫ hodinovku
        var hodinovka = utils.findValidSalary(currentEntry, zamestnanec, datum);
        
        if (!hodinovka || hodinovka <= 0) {
            utils.addDebug(currentEntry, "  ‚ùå Preskakujem - nem√° platn√∫ sadzbu");
            return { success: false };
        }
        
        var zamArray = currentEntry.field(CONFIG.fields.attendance.employees);
        
        if (zamArray && zamArray.length > index && zamArray[index]) {
            // Nastav atrib√∫ty pomocou .attr() met√≥dy
            zamArray[index].setAttr(CONFIG.attributes.workedHours, pracovnaDobaHodiny);
            zamArray[index].setAttr(CONFIG.attributes.hourlyRate, hodinovka);
            
            // Z√≠skaj pr√≠platky
            var priplatok = zamArray[index].attr(CONFIG.attributes.bonus) || 0;
            var premia = zamArray[index].attr(CONFIG.attributes.premium) || 0;
            var pokuta = zamArray[index].attr(CONFIG.attributes.penalty) || 0;
            
            // Vypoƒç√≠taj denn√∫ mzdu
            var dennaMzda = (pracovnaDobaHodiny * (hodinovka + priplatok)) + premia - pokuta;
            dennaMzda = Math.round(dennaMzda * 100) / 100;
            
            // Nastav denn√∫ mzdu atrib√∫t sa nastavuje .setAtt("pole", hodnot)
            zamArray[index].setAttr(CONFIG.attributes.dailyWage, dennaMzda);
            
            utils.addDebug(currentEntry, "  ‚Ä¢ Denn√° mzda: " + dennaMzda + " ‚Ç¨");
            
            // Spracuj z√°v√§zky
            var obligationResult = processObligation(datum, {
                entry: zamestnanec,
                dailyWage: dennaMzda,
                name: utils.formatEmployeeName(zamestnanec),
            }, obligations);
                
            utils.addDebug(currentEntry, "Spracovan√© √∫spe≈°ne", "success");
            return {
                success: true,
                hodinovka: hodinovka,
                dennaMzda: dennaMzda,
                priplatok: priplatok,
                premia: premia,
                pokuta: pokuta,
                zamestnanec: zamestnanec,  // Pridan√© pre info z√°znam
                created: obligationResult.created,
                updated: obligationResult.updated,
                totalAmount: obligationResult.totalAmount,
                errors: obligationResult.errors,
                total: obligationResult.total,
                obligationResult: obligationResult
                
            };
        } else {
            utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• zamesnanca na indexe " + index, "processEmployee");
            return { success: false };
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployee", error);
        return { success: false };
    }
}

function processObligation(date, empData, obligations) {
    var employee = empData.entry;
    var result = {
        created: 0,
        updated: 0,
        errors: 0,
        total: 0,
        totalAmount: 0,
        success: false
    };
   
    try {
        utils.addDebug(currentEntry, utils.getIcon("search") +
        " Hƒæad√°m z√°v√§zok " + utils.formatEmployeeName(employee));
        try {
            // N√°jdi existuj√∫ci z√°v√§zok pre tohto zamestnanca
            var existingObligation = null;
            for (var j = 0; j < obligations.length; j++) {
                var obligation = obligations[j];
                var linkedEmployee = utils.safeGetLinks(obligation, CONFIG.fields.obligations.employee);
          
                if (linkedEmployee && linkedEmployee.length > 0 && 
                    linkedEmployee[0].field("ID") === employee.field("ID")) {
                        utils.addDebug(currentEntry, utils.getIcon("exclamation") + "n√°jden√Ω z√°v√§zok" )
                        existingObligation = obligation;
                    break;
                }
            }

            if (existingObligation) {
                // Aktualizuj existuj√∫ci
                if (utils.updateObligation(date, existingObligation, empData.dailyWage)) {
                    result.updated++;
                    result.totalAmount += empData.dailyWage;
                } else {
                    result.errors++;
                }
            } else {
                // Vytvor nov√Ω
                if (utils.createObligation(date, empData, "attendance")) {
                    result.created++;
                    result.totalAmount += empData.dailyWage;
                } else {
                    result.errors++;
                }
            }
            
            result.total++;
            
        } catch (error) {
            utils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnanca: " + error.toString(), "processObligations");
            result.errors++;
            }
        
        result.success = result.errors === 0 && result.total > 0;
        
        
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri spracovan√≠: " + error.toString(), "processObligations", error);
        return result;
    }
}

function linkWorkRecords() {
    try {
        // Z√≠skaj z√°kladn√© √∫daje z doch√°dzky
        var dochadzkaDate = utils.safeGet(currentEntry, CONFIG.fields.date);
        var dochadzkaEmployees = utils.safeGetLinks(currentEntry, CONFIG.fields.employees);
        var dochadzkaPrichod = utils.safeGet(currentEntry, CONFIG.fields.arrival);
        var dochadzkaOdchod = utils.safeGet(currentEntry, CONFIG.fields.departure);
        
        if (!dochadzkaDate || !dochadzkaEmployees || dochadzkaEmployees.length === 0) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Ch√Ωbaj√∫ z√°kladn√© √∫daje pre linkovanie");
            return {
                success: false,
                linkedCount: 0,
                message: "Ch√Ωbaj√∫ z√°kladn√© √∫daje"
            };
        }
        
        utils.addDebug(currentEntry, "  üìÖ D√°tum doch√°dzky: " + utils.formatDate(dochadzkaDate));
        utils.addDebug(currentEntry, "  ‚è∞ ƒåasy doch√°dzky: " + utils.formatTime(dochadzkaPrichod) + " - " + utils.formatTime(dochadzkaOdchod));
        utils.addDebug(currentEntry, "  üë• Poƒçet zamestnancov: " + dochadzkaEmployees.length);
        
        // Z√≠skaj kni≈ænicu z√°znamov pr√°ce
        var workRecordsLib = libByName(CONFIG.libraries.workRecords);
        if (!workRecordsLib) {
            utils.addError(currentEntry, "Kni≈ænica 'Z√°znam pr√°ce' nen√°jden√°", "linkWorkRecords");
            return {
                success: false,
                linkedCount: 0,
                message: "Kni≈ænica nen√°jden√°"
            };
        }
        
        // N√°jdi z√°znamy pr√°ce pre dan√Ω d√°tum
        //var workRecords = workRecordsLib.find(moment(dochadzkaDate).format("DD.MM.YYYY"));
        // var workRecords = workRecordsLib.filter(function(record) {
        //     return record.datum === moment(dochadzkaDate).format("DD.MM.YYYY");
        // });

        var workRecords = [];
        var targetDate = moment(dochadzkaDate).format("DD.MM.YYYY");

        workRecordsLib.entries().forEach(function(record) {
            
            if (moment(record.field(CONFIG.fields.workRecord.date)).format("DD.MM.YYYY") === targetDate) {
                workRecords.push(record);
            }
        });


        
        utils.addDebug(currentEntry, "  üîç N√°jden√Ωch z√°znamov pr√°ce pre d√°tum: " + workRecords.length);
        
        if (workRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy pr√°ce pre tento d√°tum");
            return {
                success: true,
                linkedCount: 0,
                message: "≈Ωiadne z√°znamy pr√°ce"
            };
        }
        
        // Z√≠skaj ID v≈°etk√Ωch zamestnancov z doch√°dzky
        var dochadzkaEmployeeIds = [];
        for (var i = 0; i < dochadzkaEmployees.length; i++) {
            var empId = dochadzkaEmployees[i].field("ID");
            if (empId) {
                dochadzkaEmployeeIds.push(empId);
            }
        }
        
        // Filtruj z√°znamy pr√°ce podƒæa zamestnancov a ƒçasov
        var matchingWorkRecords = [];
        var warningRecords = [];
        var workedOnOrders = 0;
        
        for (var j = 0; j < workRecords.length; j++) {
            var workRecord = workRecords[j];
            var workEmployees = utils.safeGetLinks(workRecord, CONFIG.fields.workRecord.employees);
            var workStartTime = utils.safeGet(workRecord, CONFIG.fields.workRecord.startTime);
            var workEndTime = utils.safeGet(workRecord, CONFIG.fields.workRecord.endTime);
            var workedOnOrder = utils.safeGet(workRecord, CONFIG.fields.workRecord.workTime);
            // Kontrola ƒçi m√° z√°znam aspo≈à jedn√©ho zhodn√©ho zamestnanca
            var hasMatchingEmployee = false;
            for (var k = 0; k < workEmployees.length; k++) {
                var workEmpId = workEmployees[k].field("ID");
                if (dochadzkaEmployeeIds.indexOf(workEmpId) !== -1) {
                    workedOnOrders += workedOnOrder;
                    hasMatchingEmployee = true;
                }
            }
            
            if (hasMatchingEmployee) {
                utils.addDebug(currentEntry, "  ‚úÖ Z√°znam #" + workRecord.field("ID") + " m√° zhodn√Ωch zamestnancov");
                
                // Kontrola ƒçasov
                var timeWarning = false;
                var warningMessage = "";
                
                if (workStartTime && workEndTime && dochadzkaPrichod && dochadzkaOdchod) {
                    // Konvertuj ƒçasy na min√∫ty pre porovnanie
                    var dochadzkaStart = utils.parseTimeToMinutes(dochadzkaPrichod);
                    var dochadzkaEnd = utils.parseTimeToMinutes(dochadzkaOdchod);
                    var workStart = utils.parseTimeToMinutes(workStartTime);
                    var workEnd = utils.parseTimeToMinutes(workEndTime);
                    
                    if (workStart < dochadzkaStart || workEnd > dochadzkaEnd) {
                        timeWarning = true;
                        warningMessage = "ƒåasy pr√°ce presahuj√∫ doch√°dzku! ";
                        warningMessage += "(" + workStartTime + "-" + workEndTime + " vs " + dochadzkaPrichod + "-" + dochadzkaOdchod + ")";
                    }
                }
                
                if (timeWarning) {
                    utils.addDebug(currentEntry, "  ‚ö†Ô∏è " + warningMessage);
                    warningRecords.push({
                        record: workRecord,
                        warning: warningMessage
                    });
                } else {
                    matchingWorkRecords.push(workRecord);
                }
            }
        }
        
        utils.addDebug(currentEntry, "  üìä Z√°znamy na linkovanie: " + matchingWorkRecords.length);
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Z√°znamy s upozornen√≠m: " + warningRecords.length);
        
        // Pridaj v≈°etky z√°znamy (aj tie s upozornen√≠m)
        var allRecordsToLink = matchingWorkRecords.slice(); // K√≥pia norm√°lnych z√°znamov
        
        // Pridaj aj z√°znamy s upozornen√≠m
        for (var w = 0; w < warningRecords.length; w++) {
            allRecordsToLink.push(warningRecords[w].record);
        }
        
        if (allRecordsToLink.length > 0) {
            // Nastav pole Pr√°ce
            utils.safeSet(currentEntry, CONFIG.fields.attendance.works, allRecordsToLink);
            
            // Oznaƒç z√°znamy s upozornen√≠m farebne
            for (var wr = 0; wr < warningRecords.length; wr++) {
                var warningRecord = warningRecords[wr].record;
                
                // Nastav ≈ælt√∫ farbu pozadia pre upozornenie
                utils.setColor(currentEntry, "fg", "warning");
                
                // Pridaj info do info poƒæa z√°znamu pr√°ce
                var existingInfo = utils.safeGet(warningRecord, CONFIG.fields.common.info || "info", "");
                var warningInfo = "\n‚ö†Ô∏è UPOZORNENIE (Doch√°dzka #" + currentEntry.field("ID") + "):\n";
                warningInfo += warningRecords[wr].warning + "\n";
                warningInfo += "ƒåas kontroly: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
                
                utils.safeSet(warningRecord, CONFIG.fields.common.info || "info", existingInfo + warningInfo);
            }
            
            utils.addDebug(currentEntry, "  ‚úÖ Nalinkovan√Ωch z√°znamov: " + allRecordsToLink.length);
        }
        

        return {
            success: true,
            linkedCount: allRecordsToLink.length,
            normalCount: matchingWorkRecords.length,
            warningCount: warningRecords.length,
            workedOnOrders: workedOnOrders,
            message: "√öspe≈°ne nalinkovan√©"
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "linkWorkRecords", error);
        return {
            success: false,
            linkedCount: 0,
            message: "Chyba: " + error.toString()
        };
    }
}

function linkRideLogRecords() {
    try {
        // Z√≠skaj z√°kladn√© √∫daje z doch√°dzky
        var dochadzkaDate = utils.safeGet(currentEntry, CONFIG.fields.date);
        var dochadzkaEmployees = utils.safeGetLinks(currentEntry, CONFIG.fields.employees);
        
        // Z√≠skaj kni≈ænicu z√°znamov pr√°ce
        var rideLogRecordsLib = libByName(CONFIG.libraries.rideLog);
        if (!rideLogRecordsLib) {
            utils.addError(currentEntry, "Kni≈ænica 'Kniha j√°zd' nen√°jden√°", "linkRideLogRecords");
            return {
                success: false,
                linkedCount: 0,
                message: "Kni≈ænica nen√°jden√°"
            };
        }
        
        var rideLog = [];
        var targetDate = moment(dochadzkaDate).format("DD.MM.YYYY");

        rideLogRecordsLib.entries().forEach(function(record) {
            if (moment(record.field(CONFIG.fields.rideLog.date)).format("DD.MM.YYYY") === targetDate) {
                rideLog.push(record);
            }
        });
        
        utils.addDebug(currentEntry, "  üîç N√°jden√Ωch z√°znamov j√°zd pre d√°tum: " + rideLog.length);
        
        if (rideLog.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy j√°zd pre tento d√°tum");
            return {
                success: true,
                linkedCount: 0,
                message: "≈Ωiadne z√°znamy j√°zd"
            };
        }
        
        // Z√≠skaj ID v≈°etk√Ωch zamestnancov z doch√°dzky
        var dochadzkaEmployeeIds = [];
        for (var i = 0; i < dochadzkaEmployees.length; i++) {
            var empId = dochadzkaEmployees[i].field("ID");
            if (empId) {
                dochadzkaEmployeeIds.push(empId);
            }
        }
        
        // Filtruj z√°znamy pr√°ce podƒæa zamestnancov a ƒçasov
        var matchingRideLog = [];
        var warningRecords = [];
        
        for (var j = 0; j < rideLog.length; j++) {
            var rideLogRecord = rideLog[j];
            var crew = utils.safeGetLinks(rideLogRecord, CONFIG.fields.rideLog.crew);
            // Kontrola ƒçi m√° z√°znam aspo≈à jedn√©ho zhodn√©ho zamestnanca
            var hasMatchingEmployee = false;
            for (var k = 0; k < crew.length; k++) {
                var crewId = crew[k].field("ID");
                if (dochadzkaEmployeeIds.indexOf(crewId) !== -1) {
                    hasMatchingEmployee = true;
                }
            }
            
            if (hasMatchingEmployee) {
                utils.addDebug(currentEntry, "  ‚úÖ Z√°znam #" + rideLogRecord.field("ID") + " m√° zhodn√Ωch zamestnancov");
                matchingRideLog.push(rideLogRecord);
            }
        }
        
        utils.addDebug(currentEntry, "  üìä Z√°znamy na linkovanie: " + matchingRideLog.length);
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Z√°znamy s upozornen√≠m: " + warningRecords.length);
        
        // Pridaj v≈°etky z√°znamy (aj tie s upozornen√≠m)
        var allRecordsToLink = matchingRideLog.slice(); // K√≥pia norm√°lnych z√°znamov
        
        // Pridaj aj z√°znamy s upozornen√≠m
        for (var w = 0; w < warningRecords.length; w++) {
            allRecordsToLink.push(warningRecords[w].record);
        }
        
        if (allRecordsToLink.length > 0) {
            // Nastav pole Pr√°ce
            utils.safeSet(currentEntry, CONFIG.fields.attendance.rides, allRecordsToLink);
            utils.addDebug(currentEntry, "  ‚úÖ Nalinkovan√Ωch z√°znamov: " + allRecordsToLink.length);
        }
        

        return {
            success: true,
            linkedCount: allRecordsToLink.length,
            normalCount: matchingRideLog.length,
            warningCount: warningRecords.length,
            message: "√öspe≈°ne nalinkovan√©"
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "linkRideLog", error);
        return {
            success: false,
            linkedCount: 0,
            message: "Chyba: " + error.toString()
        };
    }
}

function linkCashBookRecords() {
    try {
        // Z√≠skaj z√°kladn√© √∫daje z doch√°dzky
        var dochadzkaDate = utils.safeGet(currentEntry, CONFIG.fields.date);
        var dochadzkaEmployees = utils.safeGetLinks(currentEntry, CONFIG.fields.employees);
        
        // Z√≠skaj kni≈ænicu z√°znamov pr√°ce
        var cashBookRecordsLib = libByName(CONFIG.libraries.cashBook);
        if (!cashBookRecordsLib) {
            utils.addError(currentEntry, "Kni≈ænica 'Poklad≈àa' nen√°jden√°", "linkCashBookRecords");
            return {
                success: false,
                linkedCount: 0,
                message: "Kni≈ænica nen√°jden√°"
            };
        }
        
        var cashBook = [];
        var targetDate = moment(dochadzkaDate).format("DD.MM.YYYY");

        cashBookRecordsLib.entries().forEach(function(record) {
            if (moment(record.field(CONFIG.fields.cashBook.date)).format("DD.MM.YYYY") === targetDate) {
                cashBook.push(record);
            }
        });
        
        utils.addDebug(currentEntry, "  üîç N√°jden√Ωch z√°znamov Pokladne pre d√°tum: " + cashBook.length);
        
        if (cashBook.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy Pokladne pre tento d√°tum");
            return {
                success: true,
                linkedCount: 0,
                message: "≈Ωiadne z√°znamy Pokladne"
            };
        }
        
        // Z√≠skaj ID v≈°etk√Ωch zamestnancov z doch√°dzky
        var dochadzkaEmployeeIds = [];
        for (var i = 0; i < dochadzkaEmployees.length; i++) {
            var empId = dochadzkaEmployees[i].field("ID");
            if (empId) {
                dochadzkaEmployeeIds.push(empId);
            }
        }
        
        // Filtruj z√°znamy pokladne podƒæa zamestnancov a ƒçasov
        var matchingCashBook = [];
        var warningRecords = [];
        
        for (var j = 0; j < cashBook.length; j++) {
            var cashBookRecord = cashBook[j];
            // Kontrola ƒçi m√° z√°znam aspo≈à jedn√©ho zhodn√©ho zamestnanca
            var paidBy = utils.safeGet(cashBookRecord, CONFIG.fields.cashBook.paidBy);
            var paidTo = utils.safeGet(cashBookRecord, CONFIG.fields.cashBook.paidTo);
            var hasMatchingEmployee = false;
            if (paidBy && paidBy.length > 0){
                var paidById = paidBy[0].field("ID");
            }
            if (paidTo && paidTo.length > 0){
                var paidToId = paidTo[0].field("ID");
            }
            if (dochadzkaEmployeeIds.indexOf(paidById) !== -1 || dochadzkaEmployeeIds.indexOf(paidToId) !== -1) {
                hasMatchingEmployee = true;
            } 
            
            if (hasMatchingEmployee) {
                utils.addDebug(currentEntry, "  ‚úÖ Z√°znam #" + cashBookRecord.field("ID") + " m√° zhodn√Ωch zamestnancov");
                matchingCashBook.push(cashBookRecord);
            }
        }
        
        utils.addDebug(currentEntry, "  üìä Z√°znamy na linkovanie: " + matchingCashBook.length);
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Z√°znamy s upozornen√≠m: " + warningRecords.length);
        
        // Pridaj v≈°etky z√°znamy (aj tie s upozornen√≠m)
        var allRecordsToLink = matchingCashBook.slice(); // K√≥pia norm√°lnych z√°znamov
        
        // Pridaj aj z√°znamy s upozornen√≠m
        for (var w = 0; w < warningRecords.length; w++) {
            allRecordsToLink.push(warningRecords[w].record);
        }
        
        if (allRecordsToLink.length > 0) {
            // Nastav pole Pr√°ce
            utils.safeSet(currentEntry, CONFIG.fields.attendance.cashBook, allRecordsToLink);
            utils.addDebug(currentEntry, "  ‚úÖ Nalinkovan√Ωch z√°znamov: " + allRecordsToLink.length);
        }
        

        return {
            success: true,
            linkedCount: allRecordsToLink.length,
            normalCount: matchingCashBook.length,
            warningCount: warningRecords.length,
            message: "√öspe≈°ne nalinkovan√©"
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "linkCashBook", error);
        return {
            success: false,
            linkedCount: 0,
            message: "Chyba: " + error.toString()
        };
    }
}

// ==============================================
// KROK 4: CELKOV√â V√ùPOƒåTY
// ==============================================

function setEntryFields(employeeResult, workLinkResult, rideLogLinkResult, cashBookResult, entryIcons, entryStatus) {
    try {
        // Ulo≈æ celkov√© hodnoty
        var workHoursDiff = workLinkResult.workedOnOrders - employeeResult.odpracovaneTotal;
        if (workHoursDiff > 0) {
            utils.addDebug(currentEntry, "‚ùó Odpracovan√Ω ƒças na z√°kazk√°ch je vy≈°≈°√≠ ako ƒças v doch√°dzke: " + workHoursDiff + " hod√≠n");
            utils.setColor(currentEntry, "fg", "red");
        } else if (workHoursDiff < 0) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Odpracovan√Ω ƒças na z√°kazk√°ch je ni≈æ≈°√≠ ako ƒças v doch√°dzke: " + workHoursDiff + " hod√≠n");
            utils.setColor(currentEntry, "fg", "blue");
        } else {
            utils.addDebug(currentEntry, "‚òëÔ∏è Odpracovan√Ω ƒças na z√°kazk√°ch sed√≠ na chlp s doch√°dzkou ");
            utils.setColor(currentEntry, "fg", "yellow");
        }
        
        utils.safeSet(currentEntry, CONFIG.fields.attendance.workedHours, employeeResult.odpracovaneTotal);
        utils.safeSet(currentEntry, CONFIG.fields.attendance.wageCosts, employeeResult.celkoveMzdy);
        utils.safeSet(currentEntry, CONFIG.fields.attendance.onProjects, 0);
        utils.safeSet(currentEntry, CONFIG.fields.attendance.downtime, 0);
        utils.safeSet(currentEntry,CONFIG.fields.attendance.downtime, workHoursDiff)
        utils.safeSet(currentEntry,CONFIG.fields.attendance.workedOnOrders, workLinkResult.workedOnOrders)
        utils.safeSet(currentEntry,CONFIG.fields.attendance.entryIcons, entryIcons)
        utils.safeSet(currentEntry,CONFIG.fields.attendance.entryStatus, entryStatus)

        utils.addDebug(currentEntry, "  ‚Ä¢ Pracovn√° doba: " + employeeResult.pracovnaDoba + " hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Odpracovan√© spolu: " + employeeResult.odpracovaneTotal + " hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy));
        utils.addDebug(currentEntry, "  ‚Ä¢ Na z√°kazk√°ch: " + workLinkResult.workedOnOrders +" hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Prestoje: " + workHoursDiff + " hod√≠n");
        utils.addDebug(currentEntry, " Celkov√© v√Ωpoƒçty √∫spe≈°n√©", "success");
         
        var isHoliday = utils.isHoliday(validationResult.date);
        var isWeekend = utils.isWeekend(validationResult.date);
         //var farba = "#FFFFFF"; // Biela - ≈°tandard
        if (isHoliday) {
            utils.setColor(currentEntry, "bg", "pastel blue")
        } else if (isWeekend) {
            utils.setColor(currentEntry, "bg", "pastel orange")
        }

        return {
            success: true
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "setEntryFields", error);
        return false;
    }
}

function zobrazSuhrn() {
    var summaryData = {
        success: true,
        date: currentEntry.field(CONFIG.fields.attendance.date),
        employeeCount: currentEntry.field(CONFIG.fields.attendance.employeeCount),
        totalHours: currentEntry.field(CONFIG.fields.attendance.workedHours),
        totalCosts: currentEntry.field(CONFIG.fields.attendance.wageCosts),
        errors: [] // M√¥≈æe≈° prida≈• chyby ak ich m√°≈°
    };
    
    utils.showProcessingSummary(currentEntry, summaryData, CONFIG);
}

// ==============================================
// KROK 5: VYTVORENIE INFO Z√ÅZNAMU
// ==============================================

function createInfoRecord(workTimeResult, employeeResult) {
    try {
        var date = currentEntry.field(CONFIG.fields.attendance.date);
        var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
        var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();


        var infoMessage = "üìã DOCH√ÅDZKA - AUTOMATICK√ù PREPOƒåET\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        
        infoMessage += "üìÖ D√°tum: " + dateFormatted + " (" + dayName + ")\n";
        infoMessage += "‚è∞ Pracovn√Ω ƒças: " + moment(workTimeResult.arrivalRounded).format("HH:mm") + 
                       " - " + moment(workTimeResult.departureRounded).format("HH:mm") + "\n";
        infoMessage += "‚è±Ô∏è Pracovn√° doba: " + workTimeResult.pracovnaDobaHodiny + " hod√≠n\n\n";
        
        infoMessage += "üë• ZAMESTNANCI (" + employeeResult.pocetPracovnikov + " " + utils.selectOsobaForm(employeeResult.pocetPracovnikov) +")\n";;
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        for (var i = 0; i < employeeResult.detaily.length; i++) {
            var detail = employeeResult.detaily[i];
            infoMessage += "üë§ " + (i+1) + ": " + utils.formatEmployeeName(employeeResult.detaily[i].zamestnanec) + "\n";
            infoMessage += "‚Ä¢ Hodinovka: " + detail.hodinovka + " ‚Ç¨/h\n";
            if (detail.priplatok > 0) infoMessage += "  + Pr√≠platok: " + detail.priplatok + " ‚Ç¨/h\n";
            if (detail.premia > 0) infoMessage += "  + Pr√©mia: " + detail.premia + " ‚Ç¨\n";
            if (detail.pokuta > 0) infoMessage += "  - Pokuta: " + detail.pokuta + " ‚Ç¨\n";
            infoMessage += "  = Denn√° mzda: " + detail.dennaMzda + " ‚Ç¨\n\n";
        }
        
        infoMessage += "üí∞ S√öHRN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Odpracovan√© celkom: " + employeeResult.odpracovaneTotal + " hod√≠n\n";
        infoMessage += "‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy) + "\n\n";
        
        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ ƒåas spracovania: " + moment().format("HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + (utils.version || "N/A") + "\n";
        
        if (typeof MementoConfig !== 'undefined') {
            infoMessage += "‚Ä¢ MementoConfig: v" + MementoConfig.version + "\n";
        }
        
        infoMessage += "\n‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE";
        
        currentEntry.set(CONFIG.fields.info, infoMessage);
        
        utils.addDebug(currentEntry, "‚úÖ Info z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createInfoRecord", error);
        return false;
    }
}

/**
 * Pomocn√° funkcia na zbieranie d√°t z linkovan√Ωch z√°znamov
 * @returns {Object} Objekt s agregovan√Ωmi √∫dajmi
 */
function collectLinkedRecordsData() {
    var data = {
        workRecords: {
            count: 0,
            records: [],
            totalHours: 0,
            totalHZS: 0
        },
        rideLog: {
            count: 0,
            records: [],
            totalKm: 0,
            totalTime: 0,
            totalCost: 0
        },
        cashBook: {
            count: 0,
            accounts: {}, // Objekt pre √∫ƒçty
            totalIncome: 0,
            totalExpenses: 0,
            balance: 0
        },
        obligations: {
            count: 0,
            records: [],
            totalAmount: 0
        }
    };
    
    try {
        utils.addDebug(currentEntry, "=== ZBIERANIE D√ÅT Z LINKOVAN√ùCH Z√ÅZNAMOV ===");
        
        // Z√çSKAJ LINKOVAN√â Z√ÅZNAMY PR√ÅCE
        var workLinks = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.works || "Pr√°ce");
        utils.addDebug(currentEntry, "Z√°znamy pr√°ce: " + workLinks.length);
        
        if (workLinks && workLinks.length > 0) {
            data.workRecords.count = workLinks.length;
            
            for (var i = 0; i < workLinks.length; i++) {
                var work = workLinks[i];
                var odpracovane = utils.safeGet(work, CONFIG.fields.workRecord.workTime, 0);
                var pocetPrac = utils.safeGet(currentEntry, CONFIG.fields.attendance.employeeCount, 1); // poƒç√≠ta≈• ƒæud√≠ v doch√°dzke nie v z√°zname pr√°c (zvy≈°n√Ω pracovn√≠ci bud√∫ v druhom z√°zname)
                var odpracTotal = odpracovane * pocetPrac;
                //var hzs = work.field(CONFIG.fields.workRecord.hzs)[0].attr("cena") || 0; // zisti sadzbu HZS zo z√°znamu
                var hzs = utils.safeGet(work, CONFIG.fields.workRecord.hzs)[0].field("Cena") || 0; // zisti sadzbu HZS zo z√°znamu
                var zakazka = utils.safeGetLinks(work, CONFIG.fields.workRecord.customer);
                var zakazkaNazov = zakazka && zakazka.length > 0 ? 
                                  utils.safeGet(zakazka[0], "N√°zov", "Bez n√°zvu") : "Bez z√°kazky";
                var hzsSum = hzs * odpracTotal;
                data.workRecords.records.push({
                    zakazka: zakazkaNazov,
                    odpracovane: odpracovane,
                    pocetPracovnikov: pocetPrac,
                    odpracovaneTotal: odpracTotal.toFixed(2),
                    hzs: hzs,
                    hzsSum: hzsSum
                });
                
                data.workRecords.totalHours += odpracTotal;
                data.workRecords.totalHZS += hzsSum;
            }
        }
        
        // Z√çSKAJ LINKOVAN√â JAZDY
        var rideLinks = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.rides || "Kniha j√°zd");
        utils.addDebug(currentEntry, "Z√°znamy j√°zd: " + rideLinks.length);
        
        if (rideLinks && rideLinks.length > 0) {
            data.rideLog.count = rideLinks.length;
            
            for (var j = 0; j < rideLinks.length; j++) {
                var ride = rideLinks[j];
                var km = utils.safeGet(ride, CONFIG.fields.bookOfRides.km || "Km", 0);
                var sadzbaKm = utils.safeGet(ride, "Sadzba za km", 0) || 0.193;
                var naklady = km * sadzbaKm;
                var vehicle = utils.safeGet(ride, CONFIG.fields.bookOfRides.vehicle)[0];
                var vehicleName = utils.safeGet(vehicle, CONFIG.fields.vehicle.name);
                var start = utils.safeGet(ride, CONFIG.fields.bookOfRides.start)[0]
                var startName = utils.safeGet(start, CONFIG.fields.place.name);
                var destination = utils.safeGet(ride, CONFIG.fields.bookOfRides.destination)[0]
                var destinationName = utils.safeGet(destination, CONFIG.fields.place.name);
                var stops = utils.safeGet(ride, CONFIG.fields.bookOfRides.stops)
                var trasa = startName + " - " + destinationName;

                data.rideLog.records.push({
                    vehicle: vehicleName,
                    stops: stops.length,
                    trasa: trasa,
                    km: km,
                    sadzbaKm: sadzbaKm,
                    naklady: naklady
                });
                
                data.rideLog.totalKm += km;
                data.rideLog.totalCost += naklady;
            }
        }
        
        // Z√çSKAJ LINKOVAN√â POKLADNIƒåN√â DOKLADY S √öƒåTAMI
        var cashLinks = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.cashBook || "Poklad≈àa");
        utils.addDebug(currentEntry, "Z√°znamy pokladne: " + cashLinks.length);
        
        if (cashLinks && cashLinks.length > 0) {
            data.cashBook.count = cashLinks.length;
            
            // KROK 1: Najprv vytvor zoznam v≈°etk√Ωch unik√°tnych √∫ƒçtov z linkovan√Ωch transakci√≠
            var uniqueAccounts = {}; // Objekt pre ulo≈æenie unik√°tnych √∫ƒçtov
            var dailyAccountsData = {}; // D√°ta pre denn√Ω prehƒæad
            
            for (var k = 0; k < cashLinks.length; k++) {
                var cash = cashLinks[k];
                
                // Z√≠skaj √∫ƒçty z transakcie
                var fromAccountLinks = utils.safeGetLinks(cash, CONFIG.fields.cashBook.fromAccount || "Z pokladne");
                var toAccountLinks = utils.safeGetLinks(cash, CONFIG.fields.cashBook.toAccount || "Do pokladne");
                
                // Pridaj fromAccount do zoznamu ak existuje
                if (fromAccountLinks && fromAccountLinks.length > 0) {
                    var fromAccount = fromAccountLinks[0];
                    var fromAccountId = fromAccount.field("ID");
                    if (!uniqueAccounts[fromAccountId]) {
                        uniqueAccounts[fromAccountId] = fromAccount;
                        utils.addDebug(currentEntry, "Na≈°iel som √∫ƒçet (from): " + utils.safeGet(fromAccount, "N√°zov"));
                    }
                }
                
                // Pridaj toAccount do zoznamu ak existuje
                if (toAccountLinks && toAccountLinks.length > 0) {
                    var toAccount = toAccountLinks[0];
                    var toAccountId = toAccount.field("ID");
                    if (!uniqueAccounts[toAccountId]) {
                        uniqueAccounts[toAccountId] = toAccount;
                        utils.addDebug(currentEntry, "Na≈°iel som √∫ƒçet (to): " + utils.safeGet(toAccount, "N√°zov"));
                    }
                }
            }
            
            utils.addDebug(currentEntry, "Celkov√Ω poƒçet unik√°tnych √∫ƒçtov: " + Object.keys(uniqueAccounts).length);
            
            // KROK 2: Pre ka≈æd√Ω √∫ƒçet z√≠skaj v≈°etky transakcie pomocou linksFrom
            for (var accountId in uniqueAccounts) {
                var account = uniqueAccounts[accountId];
                var accountName = utils.safeGet(account, CONFIG.fields.account.name || "N√°zov", "Nezn√°my √∫ƒçet");
                
                utils.addDebug(currentEntry, "\n=== Spracov√°vam √∫ƒçet: " + accountName + " ===");
                
                // Z√≠skaj v≈°etky transakcie z pokladne ktor√© obsahuj√∫ tento √∫ƒçet
                //var fromTransactions = account.linksFrom(CONFIG.libraries.cashBook || "Poklad≈àa", CONFIG.fields.cashBook.fromAccount || "Z pokladne");
                var fromTransactions = utils.safeGetLinksFrom(account, CONFIG.libraries.cashBook, CONFIG.fields.cashBook.fromAccount);
                var toTransactions = utils.safeGetLinksFrom(account, CONFIG.libraries.cashBook, CONFIG.fields.cashBook.toAccount);
                
                utils.addDebug(currentEntry, "  ‚Ä¢ Transakcie z √∫ƒçtu (fromAccount): " + fromTransactions.length);
                utils.addDebug(currentEntry, "  ‚Ä¢ Transakcie na √∫ƒçet (toAccount): " + toTransactions.length);
                
                var allIncome = 0;
                var allExpenses = 0;
                var dailyIncome = 0;
                var dailyExpenses = 0;
                var dailyIncomeRecords = [];
                var dailyExpenseRecords = [];
                
                // Spracuj v√Ωdavky (fromAccount transakcie)
                for (var i = 0; i < fromTransactions.length; i++) {
                    var trans = fromTransactions[i];
                    var pohyb = utils.safeGet(trans, CONFIG.fields.cashBook.transactionType || "Pohyb", "");
                    
                    // Z√≠skaj sumu
                    var suma = getSumaFromCashRecord(trans);
                    
                    if ((pohyb === "V√Ωdavok" || pohyb === "V√Ωdaj" || pohyb === "PP" || pohyb === "Priebe≈æn√° polo≈æka") && suma > 0) {
                        allExpenses += suma;
                        
                        // Ak je t√°to transakcia v na≈°ich linkovan√Ωch z√°znamoch, poƒç√≠taj ju do denn√©ho s√∫hrnu
                        if (isTransactionInLinks(trans, cashLinks)) {
                            dailyExpenses += suma;
                            dailyExpenseRecords.push({
                                popis: utils.safeGet(trans, CONFIG.fields.cashBook.description || "Popis", "Bez popisu"),
                                suma: suma
                            });
                        }
                    }
                }
                
                // Spracuj pr√≠jmy (toAccount transakcie)
                for (var j = 0; j < toTransactions.length; j++) {
                    var trans = toTransactions[j];
                    var pohyb = utils.safeGet(trans, CONFIG.fields.cashBook.transactionType || "Pohyb", "");
                    
                    // Z√≠skaj sumu
                    var suma = getSumaFromCashRecord(trans);

                    if ((pohyb === "Pr√≠jem" || pohyb === "PP" || pohyb === "Priebe≈æn√° polo≈æka") && suma > 0) {
                        allIncome += suma;
                        
                        // Ak je t√°to transakcia v na≈°ich linkovan√Ωch z√°znamoch, poƒç√≠taj ju do denn√©ho s√∫hrnu
                        if (isTransactionInLinks(trans, cashLinks)) {
                            dailyIncome += suma;
                            dailyIncomeRecords.push({
                                popis: utils.safeGet(trans, CONFIG.fields.cashBook.description || "Popis", "Bez popisu"),
                                suma: suma
                            });
                        }
                    }
                }
                
                // Vypoƒç√≠taj koneƒçn√Ω stav √∫ƒçtu
                var initialBalance = utils.safeGet(account, CONFIG.fields.account.initialValue || "Poƒçiatoƒçn√Ω stav", 0);
                var calculatedBalance = initialBalance + allIncome - allExpenses;
                
                utils.addDebug(currentEntry, "\nüìä V√Ωpoƒçet stavu √∫ƒçtu:");
                utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçiatoƒçn√Ω stav: " + utils.formatMoney(initialBalance));
                utils.addDebug(currentEntry, "  ‚Ä¢ V≈°etky pr√≠jmy: " + utils.formatMoney(allIncome));
                utils.addDebug(currentEntry, "  ‚Ä¢ V≈°etky v√Ωdavky: " + utils.formatMoney(allExpenses));
                utils.addDebug(currentEntry, "  ‚Ä¢ Vypoƒç√≠tan√Ω stav: " + utils.formatMoney(calculatedBalance));
                
                // Aktualizuj pole "Stav" v √∫ƒçte
                try {
                    account.set(CONFIG.fields.account.balance || "Stav", calculatedBalance);
                    utils.addDebug(currentEntry, "  ‚úÖ Stav √∫ƒçtu aktualizovan√Ω");
                } catch (updateError) {
                    utils.addError(currentEntry, "Nepodarilo sa aktualizova≈• stav √∫ƒçtu: " + updateError.toString(), "collectLinkedRecordsData");
                }
                
                // Ulo≈æ d√°ta pre zobrazenie
                data.cashBook.accounts[accountId] = {
                    name: accountName,
                    balance: calculatedBalance,
                    income: dailyIncomeRecords,
                    expenses: dailyExpenseRecords,
                    totalIncome: dailyIncome,
                    totalExpenses: dailyExpenses,
                    saldo: dailyIncome - dailyExpenses
                };
                
                data.cashBook.totalIncome += dailyIncome;
                data.cashBook.totalExpenses += dailyExpenses;
            }
            
            data.cashBook.balance = data.cashBook.totalIncome - data.cashBook.totalExpenses;
        }
        
        // Z√çSKAJ Z√ÅV√ÑZKY CEZ LINKSFROM
        var obligationsLib = libByName(CONFIG.libraries.obligations);
        if (obligationsLib) {
            var obligations = currentEntry.linksFrom(CONFIG.libraries.obligations, CONFIG.fields.obligations.attendance || "Doch√°dzka");
            utils.addDebug(currentEntry, "Z√°v√§zky (linksFrom): " + obligations.length);
            
            if (obligations && obligations.length > 0) {
                data.obligations.count = obligations.length;
                
                for (var l = 0; l < obligations.length; l++) {
                    var obligation = obligations[l];
                    var typ = utils.safeGet(obligation, CONFIG.fields.obligations.type || "Typ", "");
                    var suma = utils.safeGet(obligation, CONFIG.fields.obligations.amount || "Suma", 0);
                    var popis = utils.safeGet(obligation, CONFIG.fields.obligations.description || "Popis", "");
                    var splatnost = utils.safeGet(obligation, CONFIG.fields.obligations.dueDate || "Splatnos≈•");
                    
                    data.obligations.records.push({
                        typ: typ,
                        popis: popis,
                        suma: suma,
                        splatnost: splatnost
                    });
                    
                    data.obligations.totalAmount += suma;
                }
            }
        }
        
        utils.addDebug(currentEntry, "=== ZBIERANIE DOKONƒåEN√â ===");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri zbieran√≠ d√°t z linkovan√Ωch z√°znamov", "collectLinkedRecordsData", error);
    }
    
    return data;
}
 // Pomocn√© funkcie
function getSumaFromCashRecord(record) {
    var isVat = utils.safeGet(record, CONFIG.fields.cashBook.isVat || "s DPH", false);
    var suma = 0;
    
    if (isVat) {
        suma = utils.safeGet(record, CONFIG.fields.cashBook.sumTotal || "Suma s DPH", 0);
    }
    
    if (!suma || suma === 0) {
        suma = utils.safeGet(record, CONFIG.fields.cashBook.sum || "Suma", 0);
    }
    return suma;
}

function isTransactionInLinks(transaction, linkedTransactions) {
    var transId = transaction.field("ID");
    for (var i = 0; i < linkedTransactions.length; i++) {
        if (linkedTransactions[i].field("ID") === transId) {
            return true;
        }
    }
    return false;
}
/**
 * Vytvor√≠ Telegram info z√°znam s komplexn√Ωm sum√°rom
 * @param {Object} workTimeResult - V√Ωsledky pracovn√©ho ƒçasu
 * @param {Object} employeeResult - V√Ωsledky zamestnancov
 * @param {Object} linkedRecordsData - Objekt s √∫dajmi z linkovan√Ωch z√°znamov
 * @returns {Object} {success: boolean, message: string}
 */
function prepareNotificationInfoRecord(workTimeResult, employeeResult, linkedRecordsData) {
    try {
        var date = currentEntry.field(CONFIG.fields.attendance.date);
        var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
        var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();

        // Inicializuj linkedRecordsData ak nebol poskytnut√Ω
        if (!linkedRecordsData) {
            linkedRecordsData = collectLinkedRecordsData();
        }

        // HTML form√°tovan√° spr√°va
        var telegramInfo = "üìã <b> DOCH√ÅDZKA - DENN√ù S√öHRN „äôÔ∏è„äôÔ∏è„äôÔ∏è</b>\n";
        telegramInfo += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
        
        telegramInfo += "üìÖ <b>D√°tum:</b> " + dateFormatted + " (" + dayName + ")\n";
        telegramInfo += "‚è∞ <b>Pracovn√Ω ƒças:</b> " + utils.formatTime(workTimeResult.arrivalRounded) + 
                        " - " + utils.formatTime(workTimeResult.departureRounded) + "\n";
        telegramInfo += "‚è±Ô∏è <b>Pracovn√° doba:</b> " + workTimeResult.pracovnaDobaHodiny + " hod√≠n\n\n";
        
        // ZAMESTNANCI
        telegramInfo += "üë• <b>ZAMESTNANCI</b> (" + employeeResult.pocetPracovnikov + " " + 
                        utils.selectOsobaForm(employeeResult.pocetPracovnikov) + ")\n";
        telegramInfo += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        for (var i = 0; i < employeeResult.detaily.length; i++) {
            var detail = employeeResult.detaily[i];
            var empName = utils.formatEmployeeName(detail.zamestnanec);
            
            telegramInfo += "‚Ä¢ <b>" + empName + "</b>\n";
            telegramInfo += "  üí∂ Hodinovka: " + detail.hodinovka + " ‚Ç¨/h\n";
            
            if (detail.priplatok > 0) {
                telegramInfo += "  ‚ûï Pr√≠platok: " + detail.priplatok + " ‚Ç¨/h\n";
            }
            if (detail.premia > 0) {
                telegramInfo += "  üéÅ Pr√©mia: " + detail.premia + " ‚Ç¨\n";
            }
            if (detail.pokuta > 0) {
                telegramInfo += "  ‚ûñ Pokuta: " + detail.pokuta + " ‚Ç¨\n";
            }
            
            telegramInfo += "  üí∞ <b>Denn√° mzda: " + detail.dennaMzda + " ‚Ç¨</b>\n\n";
        }
        
        // Z√ÅZNAMY PR√ÅCE
        if (linkedRecordsData.workRecords && linkedRecordsData.workRecords.count > 0) {
            telegramInfo += "üî® <b>Z√ÅZNAMY PR√ÅCE</b> (" + linkedRecordsData.workRecords.count + ")\n";
            telegramInfo += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            
            for (var j = 0; j < linkedRecordsData.workRecords.records.length; j++) {
                var work = linkedRecordsData.workRecords.records[j];
                telegramInfo += "‚Ä¢ " + work.zakazka + "\n";
                telegramInfo += "  ‚è±Ô∏è " + work.odpracovane + " h √ó " + work.pocetPracovnikov + " os = " + 
                               work.odpracovaneTotal + " h\n";
                if (work.hzs > 0) {
                    telegramInfo += "  üíµ HZS: " + utils.formatMoney(work.hzs) + "\n";
                }
            }
            
            telegramInfo += "\nüìä S√∫hrn pr√°ce:\n";
            telegramInfo += "‚Ä¢ Odpracovan√©: " + linkedRecordsData.workRecords.totalHours.toFixed(2) + " hod√≠n\n";
            telegramInfo += "‚Ä¢ HZS celkom: " + utils.formatMoney(linkedRecordsData.workRecords.totalHZS) + "\n\n";
        }
        
        // KNIHA J√ÅZD
        if (linkedRecordsData.rideLog && linkedRecordsData.rideLog.count > 0) {
            telegramInfo += "üöó <b>KNIHA J√ÅZD</b> (" + linkedRecordsData.rideLog.count + ")\n";
            telegramInfo += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            
            for (var k = 0; k < linkedRecordsData.rideLog.records.length; k++) {
                var ride = linkedRecordsData.rideLog.records[k];
                telegramInfo += "‚Ä¢ " + ride.vehicle + " - " + ride.trasa + "\n";
                telegramInfo += "  üìè " + ride.km + " km √ó " + ride.sadzbaKm.toFixed(3) + " ‚Ç¨/km = " + 
                               utils.formatMoney(ride.naklady) + "\n";
            }
            
            telegramInfo += "\nüìä S√∫hrn j√°zd:\n";
            telegramInfo += "‚Ä¢ Celkom km: " + linkedRecordsData.rideLog.totalKm + " km\n";
            telegramInfo += "‚Ä¢ N√°klady: " + utils.formatMoney(linkedRecordsData.rideLog.totalCost) + "\n\n";
        }
        
        // POKLAD≈áA - NOV√ù FORM√ÅT S √öƒåTAMI
        if (linkedRecordsData.cashBook && linkedRecordsData.cashBook.count > 0) {
            telegramInfo += "üí≥ <b>POKLAD≈áA</b> (" + linkedRecordsData.cashBook.count + " transakci√≠)\n";
            telegramInfo += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
            
            // Iteruj cez v≈°etky √∫ƒçty
            for (var accountId in linkedRecordsData.cashBook.accounts) {
                var account = linkedRecordsData.cashBook.accounts[accountId];
                
                // Hlaviƒçka √∫ƒçtu
                telegramInfo += "üí∞ <b>" + account.name.toUpperCase() + "</b> (stav: " + 
                               utils.formatMoney(account.balance) + ")\n";
                
                // V√Ωdavky
                telegramInfo += "üìâ V√Ωdavky (" + account.expenses.length + "): " + 
                               utils.formatMoney(account.totalExpenses) + "\n";
                
                if (account.expenses.length > 0 && account.expenses.length <= 3) {
                    // Ak je m√°lo transakci√≠, zobraz detaily
                    for (var m = 0; m < account.expenses.length; m++) {
                        var exp = account.expenses[m];
                        telegramInfo += "  ‚Ä¢ " + exp.popis + ": -" + utils.formatMoney(exp.suma) + "\n";
                    }
                }
                
                // Pr√≠jmy
                telegramInfo += "üìà Pr√≠jmy (" + account.income.length + "): " + 
                               utils.formatMoney(account.totalIncome) + "\n";
                
                if (account.income.length > 0 && account.income.length <= 3) {
                    // Ak je m√°lo transakci√≠, zobraz detaily
                    for (var n = 0; n < account.income.length; n++) {
                        var inc = account.income[n];
                        telegramInfo += "  ‚Ä¢ " + inc.popis + ": +" + utils.formatMoney(inc.suma) + "\n";
                    }
                }
                
                // Saldo √∫ƒçtu
                telegramInfo += "üíé <b>Saldo: " + (account.saldo >= 0 ? "+" : "") + 
                               utils.formatMoney(account.saldo) + "</b>\n\n";
            }
            
            // Celkov√Ω s√∫hrn pokladne
            telegramInfo += "üìä <b>CELKOV√ù S√öHRN POKLADNE:</b>\n";
            telegramInfo += "‚Ä¢ Pr√≠jmy spolu: +" + utils.formatMoney(linkedRecordsData.cashBook.totalIncome) + "\n";
            telegramInfo += "‚Ä¢ V√Ωdavky spolu: -" + utils.formatMoney(linkedRecordsData.cashBook.totalExpenses) + "\n";
            telegramInfo += "‚Ä¢ <b>Saldo d≈àa: " + (linkedRecordsData.cashBook.balance >= 0 ? "+" : "") + 
                           utils.formatMoney(linkedRecordsData.cashBook.balance) + "</b>\n\n";
        }
        
        // Z√ÅV√ÑZKY
        if (linkedRecordsData.obligations && linkedRecordsData.obligations.count > 0) {
            telegramInfo += "üìù <b>Z√ÅV√ÑZKY</b> (" + linkedRecordsData.obligations.count + ")\n";
            telegramInfo += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            
            for (var p = 0; p < linkedRecordsData.obligations.records.length; p++) {
                var obligation = linkedRecordsData.obligations.records[p];
                telegramInfo += "‚Ä¢ " + obligation.typ + " - " + obligation.popis + "\n";
                telegramInfo += "  üí∞ " + utils.formatMoney(obligation.suma) + 
                               " (splatnos≈•: " + utils.formatDate(obligation.splatnost, "DD.MM.") + ")\n";
            }
            
            telegramInfo += "\nüìä S√∫hrn z√°v√§zkov:\n";
            telegramInfo += "‚Ä¢ Celkom: " + utils.formatMoney(linkedRecordsData.obligations.totalAmount) + "\n\n";
        }
        
        // CELKOV√ù S√öHRN
        telegramInfo += "üí∞ <b>CELKOV√ù S√öHRN</b>\n";
        telegramInfo += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        telegramInfo += "‚Ä¢ Odpracovan√© (doch√°dzka): <b>" + employeeResult.odpracovaneTotal + " hod√≠n</b>\n";
        telegramInfo += "‚Ä¢ Mzdov√© n√°klady: <b>" + utils.formatMoney(employeeResult.celkoveMzdy) + "</b>\n";
        
        if (linkedRecordsData.workRecords && linkedRecordsData.workRecords.totalHours > 0) {
            var prestoje = employeeResult.odpracovaneTotal - linkedRecordsData.workRecords.totalHours;
            if (prestoje > 0) {
                telegramInfo += "‚Ä¢ ‚ö†Ô∏è Prestoje: <b>" + prestoje.toFixed(2) + " hod√≠n</b>\n";
            }
        }
        
        // Celkov√© n√°klady
        var celkoveNaklady = employeeResult.celkoveMzdy;
        if (linkedRecordsData.rideLog) celkoveNaklady += linkedRecordsData.rideLog.totalCost;
        if (linkedRecordsData.cashBook) celkoveNaklady += linkedRecordsData.cashBook.totalExpenses;
        
        telegramInfo += "‚Ä¢ üí∏ Celkov√© n√°klady d≈àa: <b>" + utils.formatMoney(celkoveNaklady) + "</b>\n";
        
        // Celkov√© v√Ωnosy
        var celkoveVynosy = 0;
        if (linkedRecordsData.workRecords) celkoveVynosy += linkedRecordsData.workRecords.totalHZS;
        if (linkedRecordsData.cashBook) celkoveVynosy += linkedRecordsData.cashBook.totalIncome;
        
        if (celkoveVynosy > 0) {
            telegramInfo += "‚Ä¢ üíµ Celkov√© v√Ωnosy d≈àa: <b>" + utils.formatMoney(celkoveVynosy) + "</b>\n";
            var zisk = celkoveVynosy - celkoveNaklady;
            telegramInfo += "‚Ä¢ üìä Hrub√Ω zisk/strata: <b>" + 
                           (zisk >= 0 ? "+" : "") + utils.formatMoney(zisk) + "</b>\n";
        }
        
      
        telegramInfo += "\nüîß <i>Script: " + CONFIG.scriptName + " v" + CONFIG.version + "</i>\n";
        telegramInfo += "‚è∞ <i>Spracovan√©: " + moment().format("HH:mm:ss") + "</i>\n";
        telegramInfo += "üìù <i>Z√°znam #" + currentEntry.field("ID") + "</i>";
        
        // Ulo≈æ do poƒæa info_telegram
        utils.safeSet(currentEntry, CONFIG.fields.common.infoTelegram, telegramInfo);
        
        utils.addDebug(currentEntry, utils.getIcon("success") + " Info_telegram z√°znam vytvoren√Ω s roz≈°√≠ren√Ωm sum√°rom");
       
        return {
            success: true,
            message: "Telegram info vytvoren√© √∫spe≈°ne"
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "prepareNotificationInfoRecord", error);
        return {
            success: false,
            error: error.toString()
        };
    }
}

// function createTelegramMessage(){
//     try {
//         var libraryName = lib().title;
//         utils.addDebug(currentEntry, utils.getIcon("start") + " === " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
//         utils.addDebug(currentEntry, "Kni≈ænica: " + libraryName);
        
//         // 1. Kontrola ƒçi m√°me info_telegram pole
//         var telegramMessage = utils.safeGet(currentEntry, CONFIG.fields.common.infoTelegram);
//         if (!telegramMessage) {
//             utils.addDebug(currentEntry, utils.getIcon("info") + " Pole info_telegram je pr√°zdne - ≈æiadna notifik√°cia");
//             return true;
//         }
        
//         // 2. Identifik√°cia kni≈ænice
//         var libraryConfig = CONFIG.libraryMapping[libraryName];
//         if (!libraryConfig) {
//             utils.addDebug(currentEntry, utils.getIcon("info") + " Kni≈ænica '" + libraryName + "' nie je nakonfigurovan√° pre notifik√°cie");
//             return true;
//         }
        
//         // 3. Kontrola povolen√≠
//         if (!checkPermissions(libraryConfig.permissionField)) {
//             utils.addDebug(currentEntry, utils.getIcon("info") + " Skupinov√© notifik√°cie s√∫ vypnut√©");
//             return true;
//         }
        
//         // 4. Z√≠skanie Telegram skupiny
//         var telegramGroup = utils.getTelegramGroup(libraryConfig.telegramGroupField);
//         if (!telegramGroup) {
//             utils.addDebug(currentEntry, utils.getIcon("warning") + " Telegram skupina nen√°jden√° alebo neakt√≠vna");
//             return true;
//         }
        
//         // 5. Cleanup star√Ωch notifik√°ci√≠
//         var cleanupResult = utils.cleanupOldNotifications();
//         if (cleanupResult.deletedCount > 0) {
//             utils.addDebug(currentEntry, utils.getIcon("delete") + " Vymazan√Ωch " + cleanupResult.deletedCount + " star√Ωch notifik√°ci√≠");
//         }
        
//         // 6. Vytvorenie novej notifik√°cie
//         var notification = utils.createNotification({
//             message: telegramMessage,
//             messageType: libraryName,
//             telegramGroup: telegramGroup
//         });
        
//         if (!notification) {
//             utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "main");
//             return false;
//         }
        
//         // 7. Nalinkuj notifik√°ciu k z√°znamu
//         utils.linkNotification(notification);
        
//         utils.addDebug(currentEntry, utils.getIcon("success") + " Notifik√°cia vytvoren√° (ID: " + notification.field("ID") + ")");
//         utils.addDebug(currentEntry, utils.getIcon("success") + " === SCRIPT DOKONƒåEN√ù ===");
        
//         return true;
        
//     } catch (error) {
//         utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
//         return false;
//     }
// }

// function sendTelegramMessage(notificationEntry) {
//     try {
        
//         // 1. Kontrola ƒçi je to nov√Ω z√°znam
//         if (!isNewRecord()) {
//             utils.addDebug(notificationEntry, "Nie je nov√Ω z√°znam - preskakujem");
//             return true;
//         }
        
//         // 2. Kontrola statusu
//         var status = utils.safeGet(notificationEntry, CONFIG.fields.notifications.status);
//         if (status !== "ƒåak√°") {
//             utils.addDebug(notificationEntry, "Status nie je 'ƒåak√°' - preskakujem");
//             return true;
//         }
        
//         // 3. Z√≠skanie Telegram ID podƒæa adres√°ta
//         var telegramData = utils.getTelegramID(notificationEntry);
//         if (!telegramData.success) {
//             utils.addError(notificationEntry, "Nepodarilo sa z√≠ska≈• Telegram √∫daje: " + telegramData.error, "main");
//             utils.updateStatus("Zlyhalo", telegramData.error);
//             return false;
//         }
        
//         utils.addDebug(notificationEntry, "Telegram √∫daje z√≠skan√©:");
//         utils.addDebug(notificationEntry, "  ‚Ä¢ Chat ID: " + telegramData.chatId);
//         if (telegramData.threadId) {
//             utils.addDebug(notificationEntry, "  ‚Ä¢ Thread ID: " + telegramData.threadId);
//         }
        
//         // 4. Pr√≠prava spr√°vy
//         var message = utils.safeGet(notificationEntry, CONFIG.fields.notifications.message);
//         if (!message) {
//             utils.addError(notificationEntry, "Spr√°va je pr√°zdna", "main");
//             utils.updateStatus("Zlyhalo", "Pr√°zdna spr√°va");
//             return false;
//         }
        
//         // 5. Odoslanie na Telegram
//         var sendToTelegramResult = utils.sendToTelegram(telegramData.chatId, message, telegramData.threadId);
        
//         if (!sendResult.success) {
//             utils.addError(notificationEntry, "Odoslanie zlyhalo: " + sendResult.error, "main");
//             utils.updateStatus("Zlyhalo", sendResult.error);
//             return false;
//         }
        
//         // 6. Aktualiz√°cia z√°znamu po √∫spe≈°nom odoslan√≠
//         updateAfterSuccess(sendResult, telegramData);
        
//         // 7. Aktualiz√°cia info poƒæa zdrojov√©ho z√°znamu
//         updateSourceEntryInfo(sendResult, telegramData);
        
//         utils.addDebug(notificationEntry, utils.getIcon("success") + " === NOTIFIK√ÅCIA √öSPE≈†NE ODOSLAN√Å ===");
        
//         return true;
        
//     } catch (error) {
//         utils.addError(notificationEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
//         updateStatus("Chyba", error.toString());
//         return false;
//     }
// }

// ==============================================
// FIN√ÅLNY S√öHRN
// ==============================================
function markCheckbox() {
    try {
        utils.safeSet(currentEntry, CONFIG.fields.obligations.obligations, true);
        utils.addDebug(currentEntry, "‚òëÔ∏è Checkbox Z√°v√§zky oznaƒçen√Ω");
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri oznaƒçovan√≠ checkboxu: " + error.toString(), "markCheckbox");
    }
}

function logFinalSummary(steps) {
   
    try {
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        var depCheck = utils.checkDependencies(['config', 'core', 'business']);
        if (!depCheck.success) {
            utils.addError(currentEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
            message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly!\n\n" + depCheck.missing.join(", "));
            return false;
        }
        utils.clearLogs(currentEntry, true);
        utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, "");
        utils.addDebug(currentEntry, "=== DOCH√ÅDZKA PREPOƒåET ===");
        utils.addDebug(currentEntry, "MementoUtils verzia: " + utils.version);
        // Kontrola z√°vislost√≠
         // KONTROLA ƒåI M√Å SCRIPT BE≈ΩA≈§
         var entryStatus = utils.safeGet(currentEntry, CONFIG.fields.attendance.entryStatus, []);
         var entryIcons = utils.safeGet(currentEntry, CONFIG.fields.attendance.entryIcons, null);
         
         if (entryStatus.indexOf("Voƒæno") !== -1) {
            message("Z√°znam je nastaven√Ω na: " + utils.safeGet(currentEntry, CONFIG.fields.attendance.dayOffReason));
            var dayOffReason = utils.safeGet(currentEntry, CONFIG.fields.attendance.dayOffReason, null);
            if (dayOffReason === "Da≈æƒè") {
                utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.weather_delay);
            } else if (dayOffReason === "Voƒæn√Ω de≈à") {
                utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.vacation);
            } else if (dayOffReason === "Dovolenka") {
                utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.vacation);
            } else if (dayOffReason === "Voƒæno - mokr√Ω ter√©n") {
                utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.soil_wet);
            }
            utils.setColor(currentEntry, "bg", "light gray");
            exit();
        }

        // Debug info o naƒç√≠tan√Ωch moduloch
        utils.addDebug(currentEntry, "=== ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===", "start");
        utils.addDebug(currentEntry, "ƒåas spustenia: " + utils.formatDate(moment()) ,"calendar");
        var calculationsResults = {
            attendance: {
                workedTime: "", // napr. 7:00-13:45
                employeesCount: 0, // Poƒçet zamestnancov v z√°zname doch√°dzky
                workTime: 0, // pracovn√° doba
                workedHours:0, // odpracovan√© - ƒças pracovnej doby za v≈°etk√Ωch zamestnancov
                wageCosts: 0 // mzdov√© n√°klady za doch√°dzku
                
            },
            obligations: {
                count: 0,
                total: 0
            },
            workRecords: {
                count: 0,
                orders: [], // z√°kazky 
                workedOnOrders: 0, // odpracovan√© na z√°kazk√°ch
                wageCosts: 0, // mzdov√© n√°klady na z√°kazk√°ch
                hzsSum: 0, // suma za hzs
                downTime: 0 // prestoje
            },
            bookOfRides: {
                count: 0,
                
            },
            cashBook: {
                count: 0,
                incomesCount: 0,
                expensesCount: 0,
                incomesSum: 0,
                expensesSum: 0,
                total: 0,
            },
            notiifications: {}
        }
         // Kroky prepoƒçtu
        var steps = {
            step1: { success: false, name: "Naƒç√≠tanie a valid√°cia d√°t" },
            step2: { success: false, name: "V√Ωpoƒçet pracovnej doby" },
            step3: { success: false, name: "Spracovanie zamestnancov" },
            step4: { success: false, name: "Linkovanie pracovn√Ωch z√°znamov" },
            step5: { success: false, name: "Linkovanie dopravy" },
            step6: { success: false, name: "Linkovanie z√°znamov pokladne" },
            step7: { success: false, name: "Celkov√© v√Ωpoƒçty" },
            step8: { success: false, name: "Vytvorenie info z√°znamu" },
            step9: { success: false, name: "Vytvorenie Telegram notifik√°cie" },
        };

        // KROK 1: Naƒç√≠tanie a valid√°cia d√°t
        utils.addDebug(currentEntry, " KROK 1: Naƒç√≠tanie a valid√°cia d√°t", "validation");
        var validationResult = validateInputData();  // ‚úÖ Volaj bez parametrov
        if (!validationResult.success) {
            utils.addError(currentEntry, "Valid√°cia zlyhala: " + validationResult.error, CONFIG.scriptName);
            message("‚ùå " + validationResult.error);
            return false;
        }
        steps.step1.success = true;

        // KROK 2: V√Ωpoƒçet pracovn√©ho ƒçasu
        utils.addDebug(currentEntry, " KROK 2: V√Ωpoƒçet pracovnej doby", "update");
        
        var workTimeResult = calculateWorkTime(validationResult.arrival,validationResult.departure);    
        if (!workTimeResult.success) {
            utils.addError(currentEntry, "V√Ωpoƒçet ƒçasu zlyhal: " + workTimeResult.error, CONFIG.scriptName);
            return false;
        }
        steps.step2.success = workTimeResult.success;
        
        // KROK 3: Spracovanie zamestnancov
        utils.addDebug(currentEntry, " KROK 3: Spracovanie zamestnancov", "group");
        var employeeResult = processEmployees(validationResult.employees, workTimeResult.pracovnaDobaHodiny, validationResult.date);
        if(employeeResult.success) {
            if (entryStatus.indexOf("Z√°v√§zky") === -1) {
                 entryStatus.push("Z√°v√§zky");
                }
            if(employeeResult.created || employeeResult.updated > 0){
                entryIcons += CONFIG.icons.obligations;
            }
        }
        steps.step3.success = employeeResult.success;
        
        // KROK 4: Linkovanie pracovn√Ωch z√°znamov
        utils.addDebug(currentEntry, " KROK 4: Linkovanie pracovn√Ωch z√°znamov", "work");
        var workLinkResult = linkWorkRecords();
        if (workLinkResult.success) {
            if (entryStatus.indexOf("Pr√°ce") === -1) {
                entryStatus.push("Pr√°ce");
                utils.addDebug(currentEntry, "üìã Linkovanie dokonƒçen√©: " + workLinkResult.linkedCount + " z√°znamov");   
            }
            if (workLinkResult.linkedCount > 0) {
                entryIcons += CONFIG.icons.work;
            }
        } else {
            utils.addError(currentEntry, "Linkovanie pracovn√Ωch z√°znamov ne√∫spe≈°n√©", CONFIG.scriptName);
        }
        steps.step4.success = workLinkResult.success;

        // KROK 5: Linkovanie dopravn√Ωch z√°znamov
        utils.addDebug(currentEntry, " KROK 5: Linkovanie dopravy", "truck");
        var rideLogLinkResult = linkRideLogRecords();
        if (rideLogLinkResult.success) {
            if (entryStatus.indexOf("Doprava") === -1) {
                entryStatus.push("Doprava");
            }
            utils.addDebug(currentEntry, "üìã Linkovanie dokonƒçen√©: " + rideLogLinkResult.linkedCount + " z√°znamov");   
            if (rideLogLinkResult.linkedCount > 0) {
                entryIcons += CONFIG.icons.truck;
            }
        } else {
            utils.addError(currentEntry, "Linkovanie z√°znamov dopravy ne√∫spe≈°n√©", CONFIG.scriptName);
        }
        steps.step5.success = rideLogLinkResult.success;
        
        // KROK 6: Linkovanie z√°znamov pokladne
        utils.addDebug(currentEntry, " KROK 6: Linkovanie z√°znamov pokladne", "payment");
        var cashBookResult = linkCashBookRecords();
        if (cashBookResult.success) {
            if (entryStatus.indexOf("Poklad≈àa") === -1) {
                entryStatus.push("Poklad≈àa");
            }
            utils.addDebug(currentEntry, "üìã Linkovanie dokonƒçen√©: " + cashBookResult.linkedCount + " z√°znamov");   
            if (cashBookResult.linkedCount > 0) {
                entryIcons += CONFIG.icons.payment;
            }
        } else {
            utils.addError(currentEntry, "Linkovanie z√°znamov dopravy ne√∫spe≈°n√©", CONFIG.scriptName);
        }
        steps.step6.success = cashBookResult.success;

        // KROK 7: Celkov√© v√Ωpoƒçty
        utils.addDebug(currentEntry, " KROK 7: Celkov√© v√Ωpoƒçty", "calculation");
        var totals = setEntryFields(employeeResult, workLinkResult, rideLogLinkResult, cashBookResult, entryIcons, entryStatus)
        steps.step7.success = totals.success;
        
        // KROK 8: Vytvorenie info z√°znamu
        utils.addDebug(currentEntry, " KROK 8: Vytvorenie info z√°znamu", "note");
        steps.step8.success = createInfoRecord(workTimeResult, employeeResult);
            
        // KROK 9: Vytvorenie Telegram notifik√°cie
        utils.addDebug(currentEntry, utils.getIcon("notification") + " KROK 9: Vytvorenie Telegram notifik√°cie", "note");

        // Najprv z√≠skaj √∫daje z linkovan√Ωch z√°znamov
        var linkedData = collectLinkedRecordsData();

        // Potom zavolaj funkciu s nov√Ωm parametrom
        var notificationRecord = prepareNotificationInfoRecord(workTimeResult, employeeResult, linkedData);
        steps.step9.success = notificationRecord.success;
        if (steps.step9.success) {
            // Odstr√°≈à star√© notifik√°cie pred vytvoren√≠m novej
            var existingNotifications = utils.getLinkedNotifications(currentEntry);
            if (existingNotifications.length > 0) {
                utils.addDebug(currentEntry, utils.getIcon("delete") + " Ma≈æem " + existingNotifications.length + " existuj√∫cich notifik√°ci√≠");
                for (var i = 0; i < existingNotifications.length; i++) {
                    utils.deleteNotificationAndTelegram(existingNotifications[i]);
                }
            }
            
            // Vytvor nov√∫ notifik√°ciu
            var newNotification = utils.createTelegramMessage(currentEntry);
            if (newNotification.success) {
                // Pridaj ikonu notifik√°cie
                entryStatus.push("Notifik√°cia");
                entryIcons += CONFIG.icons.notification;
                utils.addDebug(currentEntry, utils.getIcon("success") + " Z√°znam notifik√°cie √∫spe≈°ne vytvoren√Ω");
                utils.safeSet(currentEntry,CONFIG.fields.attendance.entryIcons, entryIcons)
                utils.safeSet(currentEntry,CONFIG.fields.attendance.entryStatus, entryStatus);
                // Vytvor inline keyboard
                var recordId = utils.safeGet(currentEntry, CONFIG.fields.common.id);
                //var recordDate = utils.formatDate(currentEntry.field(CONFIG.fields.date));
                var buttons = [{
                    text: "‚úÖ Potvrdi≈•",
                    callback_data: "confirm_attendance_" + recordId
                },
                {
                    text: "‚ö†Ô∏è Rozporova≈•", 
                    callback_data: "dispute_attendance_" + recordId
                }
                ];
                // Vytvor inline keyboard (vr√°ti pole, nie objekt)
                var inlineKeyboard = utils.createInlineKeyboard(buttons, 2);
                // Odo≈°li na Telegram
                var sendToTelegramResult = utils.sendNotificationEntry(newNotification.notification, inlineKeyboard);

                if (sendToTelegramResult.success) {
                    entryStatus.push("Telegram");
                    entryIcons += CONFIG.icons.telegram;
                    utils.addDebug(currentEntry, utils.getIcon("success") + " Telegram notifik√°cia √∫spe≈°ne odoslan√°");
                    utils.safeSet(currentEntry,CONFIG.fields.attendance.entryIcons, entryIcons);
                    utils.safeSet(currentEntry,CONFIG.fields.attendance.entryStatus, entryStatus);
                } else {
                    utils.addError(currentEntry, "Nepodarilo sa odosla≈• notifik√°ciu na Telegram", "step9");
                }
            } else {
                utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "step9");
            }
        }

        return true;
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message("‚ùå Kritick√° chyba! Line: " + error.lineNumber + ": " + error.toString());
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
} else {
    // Zobraz s√∫hrn u≈æ√≠vateƒæovi
    zobrazSuhrn();
}