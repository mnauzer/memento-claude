// ==============================================
// DOCH√ÅDZKA PREPOƒåET - AUTOMATICK√ù V√ùPOƒåET
// Verzia: 7.3.1 | D√°tum: August 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Automatick√Ω v√Ωpoƒçet odpracovan√Ωch hod√≠n
//    - V√Ωpoƒçet prest√°vok podƒæa pracovnej doby
//    - V√Ωpoƒçet mzdov√Ωch n√°kladov pre v≈°etk√Ωch zamestnancov
//    - Kontrola v√≠kendov a sviatkov
//    - Prepoƒçet prestojov (rozdiel medzi odpracovan√Ωm a na z√°kazk√°ch)
//    - Nastavenie atrib√∫tov na zamestnancoch
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0+ (nov√° verzia)
//    - MementoConfig v7.0+ (centralizovan√Ω CONFIG)
//    - MementoCore v7.0+ (z√°kladn√© funkcie)
//    - MementoBusiness v7.0+ (business logika)
// ==============================================
// ‚úÖ REFAKTOROVAN√â v7.3:
//    - Opraven√© v≈°etky return statements
//    - Pou≈æitie nov√©ho MementoUtils bez fallbackov
//    - Priamy pr√≠stup k centr√°lnemu CONFIGu
//    - Zachovan√© v≈°etky p√¥vodn√© funkcie
//    - Spr√°vny v√Ωpoƒçet prest√°vok
//    - ƒåist√Ω pracovn√Ω ƒças
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================

// Jednoduch√Ω import v≈°etk√©ho cez MementoUtils
var utils = MementoUtils;
var CONFIG = utils.config;
var currentEntry = entry();
var version = "7.3.2"; // verzia skriptu

// // Glob√°lne premenn√©
// var totalPracovnaDoba = 0;
// var totalCistyPracovnyCas = 0;
// var totalOdpracovane = 0;
// var totalNaZakazkach = 0;
// var totalPrestoje = 0;
// var totalMzdoveNaklady = 0;
// var totalPrestavka = 0;

// ==============================================
// HELPER FUNKCIE PRE ƒåASOV√â V√ùPOƒåTY
// ==============================================

/**
 * Vypoƒç√≠ta rozdiel medzi dvoma ƒçasmi v min√∫tach
 * Ak je end pred start, predpoklad√° prechod cez polnoc
 */
// function calculateTimeDifference(start, end) {
//     try {
//         if (!start || !end) {
//             return 0;
//         }
        
//         var startTime = moment(start, "HH:mm");
//         var endTime = moment(end, "HH:mm");
        
//         if (!startTime.isValid() || !endTime.isValid()) {
//             return 0;
//         }
        
//         // Ak je koniec pred zaƒçiatkom, pridaj 24 hod√≠n (prechod cez polnoc)
//         if (endTime.isBefore(startTime)) {
//             endTime.add(1, 'day');
//         }
        
//         return endTime.diff(startTime, 'minutes');
//     } catch (error) {
//         utils.addError(currentEntry, "Chyba pri v√Ωpoƒçte ƒçasu: " + error.toString(), "calculateTimeDifference", error);
//         return 0;
//     }
// }


function validateInputData(fields) {
    try {
        var validatedFields = utils.validateRequiredFields(currentEntry, fields.requiredFields);    
        utils.addDebug(currentEntry, "\nüìã KROK 1: Valid√°cia vstupn√Ωch d√°t");
        if (!validatedFields) {
            return { success: false, error: "Ch√Ωbaj√∫ povinn√© polia" };
        }
        var date = currentEntry.field(CONFIG.attendance.date);
        var arrival = currentEntry.field(CONFIG.attendance.arrival);
        var departure = currentEntry.field(CONFIG.attendance.departure);
        var employees = currentEntry.field(CONFIG.attendance.employees);
        
        // Kontrola d√°tumu
        if (!date) {
            return { success: false, error: "D√°tum nie je vyplnen√Ω" };
        }
        
        // Kontrola ƒçasu
        if (!arrival || !departure) {
            return { success: false, error: "Pr√≠chod alebo odchod nie je vyplnen√Ω" };
        }
        
        // Kontrola zamestnancov
        if (employees.length === 0) {
            return { success: false, error: "≈Ωiadni zamestnanci v z√°zname" };
        }
        
        utils.addDebug(currentEntry, "‚úÖ Valid√°cia √∫spe≈°n√°");
        utils.addDebug(currentEntry, "  ‚Ä¢ D√°tum: " + utils.formatDate(date, "DD.MM.YYYY"));
        utils.addDebug(currentEntry, "  ‚Ä¢ ƒåas: " + utils.formatTime(arrival) + " - " + utils.formatTime(departure));
        utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet zamestnancov: " + employees.length);
        
        return {
            success: true,
            date: date,
            arrival: arrival,
            departure: departure,
            employees: employees
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "validateInputData", error);
        return { success: false, error: error.toString() };
    }
}

// ==============================================
// KROK 2: V√ùPOƒåET PRACOVNEJ DOBY
// ==============================================

function calculateWorkTime(date, arrival, departure) {

    
    try {
        utils.addDebug(currentEntry, "\n‚è±Ô∏è KROK 2: V√Ωpoƒçet pracovnej doby");
        
        // Zaokr√∫hlenie ƒçasov
        var arrivalRounded = arrival;
        var departureRounded = departure;
        
        if (CONFIG.settings.roundToQuarterHour) {
            arrivalRounded = utils.roundToQuarter(arrival, 'up');
            departureRounded = utils.roundToQuarter(departure, 'down');

            // nastavenie zaokr√∫hlen√Ωch ƒçasov do z√°znamu
            currentEntry.set(CONFIG.fields.arrival, arrivalRounded);    
            currentEntry.set(CONFIG.fields.departure, departureRounded);

            
            utils.addDebug(currentEntry, "  ‚Ä¢ Zaokr√∫hlen√© ƒçasy: " + 
                utils.formatTime(arrivalRounded) + " - " + 
                utils.formatTime(departureRounded));
        }
        
        // V√Ωpoƒçet hod√≠n
        var workHours = utils.calculateWorkHours(arrivalRounded, departureRounded);
        
        if (!workHours || workHours.error) {
            return { success: false, error: workHours ? workHours.error : "Nepodarilo sa vypoƒç√≠ta≈• hodiny" };
        }
        
        var pracovnaDobaHodiny = workHours.hours + (workHours.minutes / 60);
        pracovnaDobaHodiny = Math.round(pracovnaDobaHodiny * 100) / 100;
        
        // Ulo≈æ do poƒæa
        currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
        
        utils.addDebug(currentEntry, "‚úÖ Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
        
        return {
            success: true,
            arrivalRounded: arrivalRounded,
            departureRounded: departureRounded,
            pracovnaDobaHodiny: pracovnaDobaHodiny,
            workHours: workHours
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateWorkTime", error);
        return { success: false, error: error.toString() };
    }
}

// ==============================================
// KROK 3: SPRACOVANIE ZAMESTNANCOV
// ==============================================

function processEmployees(zamestnanci, pracovnaDobaHodiny, datum) {
 
    try {
        utils.addDebug(currentEntry, "\nüë• KROK 3: Spracovanie zamestnancov");
        
        var result = {
            success: true,
            pocetPracovnikov: zamestnanci.length,
            odpracovaneTotal: 0,
            celkoveMzdy: 0,
            detaily: []
        };
        
        // Ulo≈æ poƒçet pracovn√≠kov
        currentEntry.set(CONFIG.fields.pocetPracovnikov, result.pocetPracovnikov);
        
        // Spracuj ka≈æd√©ho zamestnanca
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            
            if (!zamestnanec) {
                utils.addDebug(currentEntry, "  ‚ö†Ô∏è Zamestnanec[" + i + "] je null - preskakujem");
                continue;
            }
            
            var employeeName = utils.formatEmployeeName(zamestnanec);
            utils.addDebug(currentEntry, "\nüë§ [" + (i+1) + "/" + result.pocetPracovnikov + "] " + employeeName);
            
            // Spracuj zamestnanca
            var empResult = processEmployee(zamestnanec, pracovnaDobaHodiny, datum, i);
            
            if (empResult.success) {
                result.odpracovaneTotal += pracovnaDobaHodiny;
                result.celkoveMzdy += empResult.dennaMzda;
                result.detaily.push(empResult);
            } else {
                result.success = false;
            }
        }
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployees", error);
        return { success: false };
    }
}

/**
 * Spracuje jedn√©ho zamestnanca - OPRAVEN√â NASTAVOVANIE ATRIB√öTOV
 */
function processEmployee(zamestnanec, pracovnaDobaHodiny, datum, index) {

    
    try {
        // N√°jdi platn√∫ hodinovku
        var hodinovka = findValidSalary(zamestnanec, datum);
        
        if (!hodinovka || hodinovka <= 0) {
            utils.addDebug(currentEntry, "  ‚ùå Preskakujem - nem√° platn√∫ sadzbu");
            return { success: false };
        }
        
        // SPR√ÅVNE NASTAVENIE ATRIB√öTOV - cez pole a index
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        if (zamArray && zamArray.length > index) {
            // Nastav z√°kladn√© atrib√∫ty
            zamArray[index].setAttr(CONFIG.attributes.odpracovane, pracovnaDobaHodiny);
            zamArray[index].setAttr(CONFIG.attributes.hodinovka, hodinovka);
            
            // Z√≠skaj pr√≠platky a zr√°≈æky z existuj√∫cich atrib√∫tov
            var priplatok = zamArray[index].attr(CONFIG.attributes.priplatok) || 0;
            var premia = zamArray[index].attr(CONFIG.attributes.premia) || 0;
            var pokuta = zamArray[index].attr(CONFIG.attributes.pokuta) || 0;
            
            // Vypoƒç√≠taj denn√∫ mzdu
            var dennaMzda = (pracovnaDobaHodiny * (hodinovka + priplatok)) + premia - pokuta;
            dennaMzda = Math.round(dennaMzda * 100) / 100;
            
            // Nastav denn√∫ mzdu
            zamArray[index].attr(CONFIG.attributes.dennaMzda, dennaMzda);
            
            utils.addDebug(currentEntry, "  ‚úÖ Hodinovka: " + hodinovka + " ‚Ç¨/h");
            if (priplatok > 0) utils.addDebug(currentEntry, "  ‚úÖ Pr√≠platok: +" + priplatok + " ‚Ç¨/h");
            if (premia > 0) utils.addDebug(currentEntry, "  ‚úÖ Pr√©mia: +" + premia + " ‚Ç¨");
            if (pokuta > 0) utils.addDebug(currentEntry, "  ‚úÖ Pokuta: -" + pokuta + " ‚Ç¨");
            utils.addDebug(currentEntry, "  ‚úÖ Denn√° mzda: " + dennaMzda + " ‚Ç¨");
            
            return {
                success: true,
                hodinovka: hodinovka,
                dennaMzda: dennaMzda,
                priplatok: priplatok,
                premia: premia,
                pokuta: pokuta
            };
        } else {
            utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• pole zamestnancov pre index " + index, "processEmployee");
            return { success: false };
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployee", error);
        return { success: false };
    }
}

/**
 * N√°jde platn√∫ sadzbu pre zamestnanca
 */
function findValidSalary(zamestnanec, datum) {

    
    try {
        var employeeName = utils.formatEmployeeName(zamestnanec);
        utils.addDebug(currentEntry, "üîç Hƒæad√°m platn√∫ sadzbu");
        
        // Z√≠skaj sadzby zamestnanca
        var sadzby = zamestnanec.linksFrom(CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            utils.addError(currentEntry, "Zamestnanec " + employeeName + " nem√° ≈æiadne sadzby", "findValidSalary");
            return null;
        }
        
        utils.addDebug(currentEntry, "  ‚úÖ Na≈°iel " + sadzby.length + " sadzieb");
        
        var aktualnaHodinovka = null;
        var najnovsiDatum = null;
        
        // Analyzuj v≈°etky sadzby
        for (var i = 0; i < sadzby.length; i++) {
            var sadzba = sadzby[i];
            
            var platnostOd = sadzba.field(CONFIG.sadzbyFields.platnostOd);
            var hodinovka = sadzba.field(CONFIG.sadzbyFields.sadzba);
            
            // Kontrola platnosti k d√°tumu
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    aktualnaHodinovka = hodinovka;
                }
            }
        }
        
        if (!aktualnaHodinovka || aktualnaHodinovka <= 0) {
            utils.addError(currentEntry, "Nena≈°la sa platn√° sadzba k d√°tumu", "findValidSalary");
            return null;
        }
        
        utils.addDebug(currentEntry, "  üí∂ Platn√° hodinovka: " + aktualnaHodinovka + " ‚Ç¨/h");
        return aktualnaHodinovka;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "findValidSalary", error);
        return null;
    }
}

// ==============================================
// KROK 4: CELKOV√â V√ùPOƒåTY
// ==============================================

function calculateTotals(employeeResult) {

    
    try {
        utils.addDebug(currentEntry, "\nüí∞ KROK 4: Celkov√© v√Ωpoƒçty");
        
        // Ulo≈æ celkov√© hodnoty
        currentEntry.set(CONFIG.fields.attendance.workedHours, employeeResult.odpracovaneTotal);
        currentEntry.set(CONFIG.fields.attendance.wageCosts, employeeResult.celkoveMzdy);
        
        utils.addDebug(currentEntry, "‚úÖ Celkov√© v√Ωpoƒçty:");
        utils.addDebug(currentEntry, "  ‚Ä¢ Odpracovan√© spolu: " + employeeResult.odpracovaneTotal + " hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy));
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateTotals", error);
        return false;
    }
}

// ==============================================
// KROK 5: VYTVORENIE INFO Z√ÅZNAMU
// ==============================================


function createInfoRecord(workTimeResult, employeeResult) {

    
    try {
        utils.addDebug(currentEntry, "\nüìù KROK 5: Vytvorenie info z√°znamu");
        
        var date = currentEntry.field(CONFIG.fields.date);
        var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
        //var dayName = moment(date).format("dddd");
        var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();
        //var dayNameCapitalized = dayName.charAt(0).toUpperCase() + dayName.slice(1);
        


        var infoMessage = "üìã DOCH√ÅDZKA - AUTOMATICK√ù PREPOƒåET\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
        
        infoMessage += "üìÖ D√°tum: " + dateFormatted + " (" + dayName + ")\n";
        infoMessage += "‚è∞ Pracovn√Ω ƒças: " + utils.formatTime(workTimeResult.arrivalRounded) + 
                       " - " + utils.formatTime(workTimeResult.departureRounded) + "\n";
        infoMessage += "‚è±Ô∏è Pracovn√° doba: " + workTimeResult.pracovnaDobaHodiny + " hod√≠n\n\n";
        
        infoMessage += "üë• ZAMESTNANCI (" + employeeResult.pocetPracovnikov + " " + utils.selectOsobaForm(employeeResult.pocetPracovnikov) + ")\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        for (var i = 0; i < employeeResult.detaily.length; i++) {
            var detail = employeeResult.detaily[i];
            infoMessage += "‚Ä¢ Zamestnanec " + (i+1) + ": " + utils.formatEmployeeName(employeeResult.detaily[i].zamestnanec) + "\n";
            infoMessage += "‚Ä¢ Hodinovka: " + detail.hodinovka + " ‚Ç¨/h\n";
            if (detail.priplatok > 0) infoMessage += "  + Pr√≠platok: " + detail.priplatok + " ‚Ç¨/h\n";
            if (detail.premia > 0) infoMessage += "  + Pr√©mia: " + detail.premia + " ‚Ç¨\n";
            if (detail.pokuta > 0) infoMessage += "  - Pokuta: " + detail.pokuta + " ‚Ç¨\n";
            infoMessage += "  = Denn√° mzda: " + detail.dennaMzda + " ‚Ç¨\n\n";
        }
        
        infoMessage += "üí∞ S√öHRN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Odpracovan√© celkom: " + employeeResult.odpracovaneTotal + " hod√≠n\n";
        infoMessage += "‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy) + "\n\n";
        
        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ ƒåas spracovania: " + moment().format("HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + (utils.version || "N/A") + "\n";
        
        if (typeof MementoConfig !== 'undefined') {
            infoMessage += "‚Ä¢ MementoConfig: v" + MementoConfig.version + "\n";
        }
        
        infoMessage += "\n‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE";
        
        currentEntry.set(CONFIG.fields.info, infoMessage);
        
        utils.addDebug(currentEntry, "‚úÖ Info z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createInfoRecord", error);
        return false;
    }
}

// ==============================================
// FIN√ÅLNY S√öHRN
// ==============================================

function logFinalSummary(steps) {

    
    try {
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, "=== DOCH√ÅDZKA PREPOƒåET v7.3 ===");
        utils.addDebug(currentEntry, "MementoUtils verzia: " + utils.version);
        // Kontrola z√°vislost√≠
        var depCheck = utils.checkDependencies(['config', 'core', 'business']);
        if (!depCheck.success) {
            utils.addError(currentEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
            message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly!\n\n" + depCheck.missing.join(", "));
            return false;
        }
        // Debug info o naƒç√≠tan√Ωch moduloch
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "üìÖ ƒåas spustenia: " + utils.formatDate(moment()));
        
         // Kroky prepoƒçtu
        var steps = {
            step1: { success: false, name: "Naƒç√≠tanie a valid√°cia d√°t" },
            step2: { success: false, name: "V√Ωpoƒçet pracovnej doby" },
            step3: { success: false, name: "Spracovanie zamestnancov" },
            step4: { success: false, name: "Celkov√© v√Ωpoƒçty" },
            step5: { success: false, name: "Vytvorenie info z√°znamu" }
        };

        // KROK 1: Valid√°cia vstupn√Ωch d√°t
        utils.addDebug(currentEntry, "\nüìã KROK 1: Valid√°cia vstupn√Ωch d√°t");
        
        const { attendance } = CONFIG.fields;
        var validationResult = validateInputData(attendance);
        if (!validationResult.success) {
            utils.addError(currentEntry, "Valid√°cia zlyhala: " + validationResult.error, CONFIG.scriptName);
            return;
        }
        steps.step1.success = true;
        // var requiredFields = CONFIG.fields.attendance.requiredFields;
        
        // if (!utils.validateRequiredFields(currentEntry, requiredFields)) {
        //     utils.addError(currentEntry, "Ch√Ωbaj√∫ povinn√© polia", "valid√°cia");
        //     message("‚ùå Chyba: Vypl≈àte v≈°etky povinn√© polia!");
        //     return false;
        // }
        
        // KROK 2: Z√≠skanie √∫dajov
        utils.addDebug(currentEntry, "\nüìã KROK 2: Z√≠skavanie √∫dajov");
        
        var workTimeResult = calculateWorkTime(validationResult.date, validationResult.arrival, validationResult.departure);
        if (!workTimeResult.success) {
            utils.addError(currentEntry, "V√Ωpoƒçet ƒçasu zlyhal", CONFIG.scriptName);
            return;
        }
        steps.step2.success = true;
        // var date = utils.safeGet(currentEntry, CONFIG.fields.attendance.date);
        // var prichod = utils.safeGet(currentEntry, CONFIG.fields.attendance.arrival);
        // var odchod = utils.safeGet(currentEntry, CONFIG.fields.attendance.departure);
        // var zamestnanci = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.employees);
        // var praceLinks = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.works);
        // var jazdyLinks = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.rides);
        
        // utils.addDebug(currentEntry, "üìÖ D√°tum: " + utils.formatDate(date));
        // utils.addDebug(currentEntry, "‚è∞ Pr√≠chod: " + prichod + " | Odchod: " + odchod);
        // utils.addDebug(currentEntry, "üë• Zamestnancov: " + zamestnanci.length);
        // utils.addDebug(currentEntry, "üî® Pr√°c: " + praceLinks.length);
        // utils.addDebug(currentEntry, "üöó J√°zd: " + jazdyLinks.length);
        
        // KROK 3: Spracovanie zamestnancov
        utils.addDebug(currentEntry, "\nüìã KROK 3: V√Ωpoƒçet pracovn√©ho ƒçasu a prest√°vok");
        var employeeResult = processEmployees(validationResult.employees, workTimeResult.pracovnaDobaHodiny, validationResult.date);
        steps.step3.success = employeeResult.success;
        
        // KROK 4: Celkov√© v√Ωpoƒçty
        if (employeeResult.success) {
            steps.step4.success = calculateTotals(employeeResult);
        }
        
        // KROK 5: Info z√°znam
        steps.step5.success = createInfoRecord(workTimeResult, employeeResult);
        
        // Fin√°lny log
        logFinalSummary(steps);
        // // Vypoƒç√≠taj hrub√Ω pracovn√Ω ƒças
        // var hrubyCasMinuty = calculateTimeDifference(prichod, odchod);
        // if (hrubyCasMinuty <= 0) {
        //     utils.addError(currentEntry, "Nespr√°vny ƒças pr√≠chodu/odchodu", "ƒçasov√Ω v√Ωpoƒçet");
        //     message("‚ùå Chyba: ƒåas odchodu mus√≠ by≈• po ƒçase pr√≠chodu!");
        //     return false;
        // }
        
        // utils.addDebug(currentEntry, "‚è±Ô∏è Hrub√Ω pracovn√Ω ƒças: " + formatMinutesToTime(hrubyCasMinuty));
        
        // // Vypoƒç√≠taj prest√°vku
        // var breakSettings = getDefaultBreakSettings();
        // var prestavkaMinuty = calculateBreakDuration(hrubyCasMinuty);
        
        // utils.addDebug(currentEntry, "‚è∏Ô∏è Prest√°vka: " + prestavkaMinuty + " min√∫t");
        
        // // Vypoƒç√≠taj ƒçist√Ω pracovn√Ω ƒças
        // var cistyPracovnyCasMinuty = hrubyCasMinuty - prestavkaMinuty;
        // var cistyPracovnyCasHodiny = cistyPracovnyCasMinuty / 60;
        
        // utils.addDebug(currentEntry, "‚úÖ ƒåist√Ω pracovn√Ω ƒças: " + formatMinutesToTime(cistyPracovnyCasMinuty) + " (" + cistyPracovnyCasHodiny.toFixed(2) + "h)");
        
        // KROK 4: Kontrola v√≠kendu a sviatkov
        // utils.addDebug(currentEntry, "\nüìã KROK 4: Kontrola v√≠kendu a sviatkov");
        
        // var jeVikend = utils.isWeekend(datum);
        // var jeSviatok = utils.isHoliday(datum);
        
        // if (jeVikend) {
        //     utils.addDebug(currentEntry, "üìÖ V√≠kendov√° zmena - " + moment(datum).format("dddd"));
        // }
        // if (jeSviatok) {
        //     utils.addDebug(currentEntry, "üéâ Pr√°ca poƒças sviatku");
        // }
        
        // KROK 5: Spracovanie z√°znamov pr√°ce
        // utils.addDebug(currentEntry, "\nüìã KROK 5: Spracovanie z√°znamov pr√°ce");
        
        // var hoursOnProjects = 0;
        // for (var i = 0; i < praceLinks.length; i++) {
        //     var praca = praceLinks[i];
        //     var odpracovaneNaPraci = utils.safeGet(praca, CONFIG.fields.workRecord.workedHours, 0);
        //     hoursOnProjects += odpracovaneNaPraci;
            
        //     utils.addDebug(currentEntry, "  üî® Pr√°ca #" + (i + 1) + ": " + odpracovaneNaPraci + "h");
        // }
        
        // // KROK 6: Spracovanie zamestnancov
        // utils.addDebug(currentEntry, "\nüìã KROK 6: Spracovanie zamestnancov");
        
        // if (zamestnanci.length === 0) {
        //     utils.addError(currentEntry, "≈Ωiadni zamestnanci na spracovanie", "zamestnanci");
        //     message("‚ùå Chyba: Pridajte aspo≈à jedn√©ho zamestnanca!");
        //     return false;
        // }
        
        // var pocetPracovnikov = zamestnanci.length;
        // var spracovaniZamestnanci = 0;
        
        // for (var j = 0; j < zamestnanci.length; j++) {
        //     var zamestnanec = zamestnanci[j];
            
        //     utils.addDebug(currentEntry, "\n--- Zamestnanec " + (j + 1) + "/" + pocetPracovnikov + " ---");
            
        //     // Z√≠skaj detaily zamestnanca
        //     var details = utils.getEmployeeDetails(zamestnanec, datum);
        //     if (!details) {
        //         utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• √∫daje zamestnanca", "employee_" + j);
        //         continue;
        //     }
            
        //     spracovaniZamestnanci++;
            
        //     utils.addDebug(currentEntry, "üë§ " + details.fullName);
        //     utils.addDebug(currentEntry, "üìç Nick: " + details.nick);
            
        //     // Vypoƒç√≠taj mzdu
        //     var mzdaCalc = utils.calculateDailyWage(zamestnanec, cistyPracovnyCasHodiny, datum);
            
        //     utils.addDebug(currentEntry, "üí∞ Hodinov√° sadzba: " + utils.formatMoney(mzdaCalc.hourlyRate) + "/h");
        //     utils.addDebug(currentEntry, "üïê Odpracovan√©: " + cistyPracovnyCasHodiny.toFixed(2) + "h");
            
        //     // Pr√≠platky za v√≠kend/sviatok
        //     var priplatok = 0;
        //     if (jeVikend) {
        //         priplatok += mzdaCalc.wage * 0.5; // 50% pr√≠platok za v√≠kend
        //         utils.addDebug(currentEntry, "üìÖ V√≠kendov√Ω pr√≠platok: +" + utils.formatMoney(mzdaCalc.wage * 0.5));
        //     }
        //     if (jeSviatok) {
        //         priplatok += mzdaCalc.wage * 1.0; // 100% pr√≠platok za sviatok
        //         utils.addDebug(currentEntry, "üéâ Sviatkov√Ω pr√≠platok: +" + utils.formatMoney(mzdaCalc.wage * 1.0));
        //     }
            
        //     var celkovaMzda = mzdaCalc.wage + priplatok;
            
        //     utils.addDebug(currentEntry, "üí∏ Z√°kladn√° mzda: " + utils.formatMoney(mzdaCalc.wage));
        //     if (priplatok > 0) {
        //         utils.addDebug(currentEntry, "‚ûï Pr√≠platky spolu: " + utils.formatMoney(priplatok));
        //     }
        //     utils.addDebug(currentEntry, "üí∞ Celkov√° mzda: " + utils.formatMoney(celkovaMzda));
            
        //     // Nastav atrib√∫ty na Link to Entry poli
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.workedHours, cistyPracovnyCasHodiny, j);
            
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.hourlyRate, mzdaCalc.hourlyRate, j);
            
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.dailyWage, mzdaCalc.wage, j);
            
        //     if (priplatok > 0) {
        //         utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                              CONFIG.attributes.employees.bonus, priplatok, j);
        //     }
            
        //     utils.safeSetAttribute(currentEntry, CONFIG.fields.attendance.employees, 
        //                          CONFIG.attributes.employees.costs, celkovaMzda, j);
            
        //     // Pripoƒç√≠taj k celkov√Ωm hodnot√°m
        //     totalOdpracovane += cistyPracovnyCasHodiny;
        //     totalMzdoveNaklady += celkovaMzda;
        // }
        
        // // Kontrola ƒçi sme spracovali aspo≈à jedn√©ho zamestnanca
        // if (spracovaniZamestnanci === 0) {
        //     utils.addError(currentEntry, "Nepodarilo sa spracova≈• ≈æiadneho zamestnanca", "zamestnanci");
        //     message("‚ùå Chyba: Nepodarilo sa spracova≈• zamestnancov!");
        //     return false;
        // }
        
        // KROK 7: V√Ωpoƒçet prestojov
        // utils.addDebug(currentEntry, "\nüìã KROK 7: V√Ωpoƒçet prestojov");
        
        // totalPracovnaDoba = hrubyCasMinuty / 60;  // Hrub√Ω ƒças v hodin√°ch
        // totalCistyPracovnyCas = cistyPracovnyCasHodiny * pocetPracovnikov;  // ƒåist√Ω ƒças * poƒçet ƒæud√≠
        // totalNaZakazkach = hoursOnProjects;
        // totalPrestoje = Math.max(0, totalOdpracovane - totalNaZakazkach);
        // totalPrestavka = prestavkaMinuty / 60;  // Prest√°vka v hodin√°ch
        
        // utils.addDebug(currentEntry, "‚è±Ô∏è Hrub√° pracovn√° doba: " + totalPracovnaDoba.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "‚è∏Ô∏è Prest√°vka: " + totalPrestavka.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "‚úÖ ƒåist√Ω pracovn√Ω ƒças (v≈°etci): " + totalCistyPracovnyCas.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "üî® Na z√°kazk√°ch: " + totalNaZakazkach.toFixed(2) + "h");
        // utils.addDebug(currentEntry, "‚è∏Ô∏è Prestoje: " + totalPrestoje.toFixed(2) + "h");
        
        // // KROK 8: Nastavenie s√∫hrnn√Ωch pol√≠
        // utils.addDebug(currentEntry, "\nüìã KROK 8: Nastavenie s√∫hrnn√Ωch pol√≠");
        
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.employeeCount, pocetPracovnikov);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.workTime, totalPracovnaDoba);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.workedHours, totalOdpracovane);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.onProjects, totalNaZakazkach);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.downtime, totalPrestoje);
        // utils.safeSet(currentEntry, CONFIG.fields.attendance.wageCosts, totalMzdoveNaklady);
        // utils.safeSet(currentEntry, "Prest√°vka", totalPrestavka);  // Prest√°vka pole
        // utils.safeSet(currentEntry, "ƒåist√Ω pracovn√Ω ƒças", totalCistyPracovnyCas);  // ƒåist√Ω pracovn√Ω ƒças pole
        
        // // KROK 9: Farba z√°znamu
        // utils.addDebug(currentEntry, "\nüìã KROK 9: Nastavenie farby z√°znamu");
        
        // var farba = "#FFFFFF"; // Biela - ≈°tandard
        // if (jeSviatok) {
        //     farba = "#FFE6CC"; // Oran≈æov√° - sviatok
        // } else if (jeVikend) {
        //     farba = "#FFFFCC"; // ≈Ωlt√° - v√≠kend
        // } else if (totalPrestoje > 2) {
        //     farba = "#FFCCCC"; // ƒåerven√° - veƒæa prestojov
        // }
        
        // utils.safeSet(currentEntry, CONFIG.fields.common.backgroundColor, farba);
        
        // // KROK 10: Info pole
        // vytvorInfoZaznam();
        
        // // Z√°vereƒçn√© ≈°tatistiky
        // utils.addDebug(currentEntry, "\nüìä === V√ùSLEDKY PREPOƒåTU ===");
        // utils.addDebug(currentEntry, "üë• Pracovn√≠kov: " + pocetPracovnikov);
        // utils.addDebug(currentEntry, "‚è±Ô∏è Hrub√Ω ƒças: " + formatMinutesToTime(hrubyCasMinuty));
        // utils.addDebug(currentEntry, "‚è∏Ô∏è Prest√°vka: " + prestavkaMinuty + " min√∫t");
        // utils.addDebug(currentEntry, "‚úÖ ƒåist√Ω ƒças: " + formatMinutesToTime(cistyPracovnyCasMinuty));
        // utils.addDebug(currentEntry, "üí∞ Mzdov√© n√°klady: " + utils.formatMoney(totalMzdoveNaklady));
        // utils.addDebug(currentEntry, "‚úÖ === PREPOƒåET DOKONƒåEN√ù ===");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message("‚ùå Kritick√° chyba!\n\n" + error.lineNumber + ": " + error.toString());
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
} else {
    // Zobraz s√∫hrn u≈æ√≠vateƒæovi
    zobrazSuhrn();
}