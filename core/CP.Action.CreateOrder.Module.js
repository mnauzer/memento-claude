/**
 * CENOV√â PONUKY - Vytvorenie/Aktualiz√°cia Z√°kazky (MODULE)
 *
 * Typ scriptu: Function Library (pou≈æiteƒæn√© v in√Ωch scriptoch)
 * Kni≈ænica: Cenov√© ponuky
 *
 * Popis:
 * - Exportovateƒæn√Ω modul pre vytvorenie/aktualiz√°ciu z√°kazky z cenovej ponuky
 * - Pou≈æitie: CPCreateOrder.createOrder(entry());
 * - Pri CREATE: Vytvor√≠ z√°kazku + v≈°etky diely v Z√°kazky Diely
 * - Pri UPDATE: Sync v≈°etky polia + vytvor√≠ ch√Ωbaj√∫ce diely (existuj√∫ce diely zost√°vaj√∫ bez zmeny)
 * - Prepojenie: Z√°kazky ‚Üí linkToEntry Cenov√© ponuky (vytvor√≠ linksFrom)
 * - Automatick√© generovanie ƒç√≠sla z√°kazky pomocou MementoAutoNumber
 * - Zbieranie dielov zo v≈°etk√Ωch troch pol√≠ (Diely, Diely HZS, Subdod√°vky)
 *
 * Verzia: 2.1.0
 * D√°tum: 2025-10-12
 * Autor: ASISTANTO
 *
 * CHANGELOG:
 * v2.1.0 (2025-10-12):
 *   - FIX: Mapovanie atrib√∫tov: cena -> cena cp pre Z√°kazky Diely
 *   - Pou≈æ√≠va centralConfig.attributes.orderPartMaterials a orderPartWorks
 * v2.0.0 (2025-10-12):
 *   - MODULE VERSION: Zabalen√Ω do exportovateƒæn√©ho modulu
 *   - NOV√Å FUNKCIA: createOrder(quoteEntry) - hlavn√° exportovan√° funkcia
 *   - Pou≈æiteƒæn√© z in√Ωch scriptov, triggerov, action eventov
 *   - Vracia objekt s v√Ωsledkom: { success, message, order, partsCreated, mode }
 *   - Zachovan√° 1:1 funkcionalita z CP.Action.CreateOrder.js v1.6.0
 *   - FIX: Zbieranie dielov zo v≈°etk√Ωch troch pol√≠ (Diely, Diely HZS, Subdod√°vky)
 *   - Backward compatibility: Ak je dostupn√© entry(), automaticky sa zavol√°
 */

var CPCreateOrder = (function() {
    'use strict';

    /**
     * Hlavn√° exportovan√° funkcia pre vytvorenie/aktualiz√°ciu z√°kazky
     * @param {Entry} quoteEntry - Z√°znam z kni≈ænice "Cenov√© ponuky"
     * @returns {Object} - { success: boolean, message: string, order: Entry, partsCreated: number, mode: string }
     */
    function createOrder(quoteEntry) {
        var result = {
            success: false,
            message: "",
            order: null,
            partsCreated: 0,
            mode: "" // "CREATE" alebo "UPDATE"
        };

        if (!quoteEntry) {
            result.message = "‚ùå Parameter 'quoteEntry' is required!";
            return result;
        }

        try {
            var utils = MementoUtils;
            var centralConfig = MementoConfig.getConfig();

            utils.clearLogs(quoteEntry);
            utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            utils.addDebug(quoteEntry, "   VYTVORENIE/AKTUALIZ√ÅCIA Z√ÅKAZKY Z CENOVEJ PONUKY   ");
            utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            utils.addDebug(quoteEntry, "");

            // Z√≠skaj konfiguraƒçn√© polia
            var fields = centralConfig.fields.quote;
            var orderFields = centralConfig.fields.order;
            var quotePartFields = centralConfig.fields.quotePart;
            var orderPartFields = centralConfig.fields.orderPart;

            // Z√≠skaj kni≈ænice
            var ordersLib = libByName("Z√°kazky");
            var orderPartsLib = libByName("Z√°kazky Diely");

            if (!ordersLib) {
                throw new Error("Kni≈ænica 'Z√°kazky' nebola n√°jden√°");
            }
            if (!orderPartsLib) {
                throw new Error("Kni≈ænica 'Z√°kazky Diely' nebola n√°jden√°");
            }

            // ==============================================
            // KROK 1: KONTROLA EXISTENCIE Z√ÅKAZKY
            // ==============================================

            utils.addDebug(quoteEntry, "üìã KROK 1: Kontrola existencie z√°kazky");
            utils.addDebug(quoteEntry, "");

            var quoteNumber = utils.safeGet(quoteEntry, fields.number) || "";
            var quoteName = utils.safeGet(quoteEntry, fields.name) || "";

            utils.addDebug(quoteEntry, "  Cenov√° ponuka:");
            utils.addDebug(quoteEntry, "    ƒå√≠slo: " + quoteNumber);
            utils.addDebug(quoteEntry, "    N√°zov: " + quoteName);
            utils.addDebug(quoteEntry, "");

            // N√°jdi existuj√∫cu z√°kazku cez linksFrom
            var existingOrders = utils.safeGetLinksFrom(quoteEntry, "Z√°kazky", "Cenov√° ponuka");
            var orderExists = existingOrders.length > 0;
            var order = orderExists ? existingOrders[0] : null;

            result.mode = orderExists ? "UPDATE" : "CREATE";

            if (orderExists) {
                utils.addDebug(quoteEntry, "  ‚úÖ N√°jden√° existuj√∫ca z√°kazka:");
                utils.addDebug(quoteEntry, "    ƒå√≠slo: " + utils.safeGet(order, orderFields.number));
                utils.addDebug(quoteEntry, "    N√°zov: " + utils.safeGet(order, orderFields.name));
                utils.addDebug(quoteEntry, "    Re≈æim: UPDATE (aktualiz√°cia pol√≠ + vytvorenie ch√Ωbaj√∫cich dielov)");
            } else {
                utils.addDebug(quoteEntry, "  ‚ÑπÔ∏è Z√°kazka neexistuje");
                utils.addDebug(quoteEntry, "    Re≈æim: CREATE (vytvorenie novej z√°kazky + v≈°etk√Ωch dielov)");
            }
            utils.addDebug(quoteEntry, "");

            // ==============================================
            // KROK 2: PR√çPRAVA D√ÅT PRE SYNCHRONIZ√ÅCIU
            // ==============================================

            utils.addDebug(quoteEntry, "üìã KROK 2: Pr√≠prava d√°t pre synchroniz√°ciu");
            utils.addDebug(quoteEntry, "");

            var syncData = {};

            // === Z√ÅKLADN√â IDENTIFIKAƒåN√â POLIA ===
            syncData[orderFields.number] = utils.safeGet(quoteEntry, fields.number);
            syncData[orderFields.name] = utils.safeGet(quoteEntry, fields.name);
            syncData[orderFields.description] = utils.safeGet(quoteEntry, fields.description);
            syncData[orderFields.date] = new Date();
            syncData[orderFields.orderCalculationType] = utils.safeGet(quoteEntry, fields.type);
            syncData[orderFields.place] = utils.safeGetLinks(quoteEntry, fields.place);

            // === KLIENT Z MIESTA ===
            var placeEntries = utils.safeGetLinks(quoteEntry, fields.place);
            if (placeEntries && placeEntries.length > 0) {
                var placeEntry = placeEntries[0];
                var clientEntries = utils.safeGetLinks(placeEntry, centralConfig.fields.place.customer);
                if (clientEntries && clientEntries.length > 0) {
                    syncData[orderFields.client] = clientEntries;
                }
            }

            // === √öƒåTOVANIE DOPRAVY ===
            syncData[orderFields.rideCalculation] = utils.safeGet(quoteEntry, fields.rideCalculation);
            syncData[orderFields.transportPercentage] = utils.safeGet(quoteEntry, fields.ridePercentage);
            syncData[orderFields.transportFlatRate] = utils.safeGetLinks(quoteEntry, fields.rideFlatRate);
            syncData[orderFields.transportPricePerKm] = utils.safeGet(quoteEntry, fields.ridePricePerKm);
            syncData[orderFields.expectedKm] = utils.safeGet(quoteEntry, fields.expectedKm);
            syncData[orderFields.expectedRidesCount] = utils.safeGet(quoteEntry, fields.expectedRidesCount);

            // === √öƒåTOVANIE PRESUNU HM√îT ===
            syncData[orderFields.massTransferCalculation] = utils.safeGet(quoteEntry, fields.massTransferCalculation);
            syncData[orderFields.massTransferPercentage] = utils.safeGet(quoteEntry, fields.massTransferPercentage);
            syncData[orderFields.massTransferPricePerTon] = utils.safeGet(quoteEntry, fields.massTransferPricePerTon);
            syncData[orderFields.massTransferFlatRate] = utils.safeGetLinks(quoteEntry, fields.massTransferFlatRate);
            syncData[orderFields.massTransferFixedPrice] = utils.safeGet(quoteEntry, fields.massTransferFixedPrice);

            // === √öƒåTOVANIE SUBDOD√ÅVOK ===
            syncData[orderFields.subcontractCalculation] = utils.safeGet(quoteEntry, fields.subcontractsCalculation);
            syncData[orderFields.subcontractorMarkup] = utils.safeGet(quoteEntry, fields.subcontractsPercentage);

            // === CENOV√â POLIA ===
            syncData[orderFields.total] = utils.safeGet(quoteEntry, fields.total);
            syncData[orderFields.transportPrice] = utils.safeGet(quoteEntry, fields.transportPrice);
            syncData[orderFields.massTransferPrice] = utils.safeGet(quoteEntry, fields.massTransferPrice);
            syncData[orderFields.vatRate] = utils.safeGet(quoteEntry, fields.vatRate);
            syncData[orderFields.vat] = utils.safeGet(quoteEntry, fields.vat);
            syncData[orderFields.totalWithVat] = utils.safeGet(quoteEntry, fields.totalWithVat);
            syncData[orderFields.materialWeight] = utils.safeGet(quoteEntry, fields.materialWeight);

            // === LINKTOENTRY DO CENOVEJ PONUKY ===
            syncData[orderFields.quote] = [quoteEntry];

            utils.addDebug(quoteEntry, "  ‚úÖ D√°ta pripraven√© pre synchroniz√°ciu");
            utils.addDebug(quoteEntry, "");

            // ==============================================
            // KROK 3: VYTVORENIE/AKTUALIZ√ÅCIA Z√ÅKAZKY
            // ==============================================

            utils.addDebug(quoteEntry, "üìã KROK 3: " + (orderExists ? "Aktualiz√°cia" : "Vytvorenie") + " z√°kazky");
            utils.addDebug(quoteEntry, "");

            if (!orderExists) {
                // === CREATE MODE ===
                order = ordersLib.create({});

                if (!order) {
                    throw new Error("Nepodarilo sa vytvori≈• z√°znam v kni≈ænici Z√°kazky");
                }

                utils.addDebug(quoteEntry, "  ‚úÖ Nov√° z√°kazka vytvoren√°");

                // Automatick√© generovanie ƒç√≠sla z√°kazky
                var orderNumber = "";
                try {
                    if (typeof MementoAutoNumber !== 'undefined' && MementoAutoNumber.isLoaded && MementoAutoNumber.isLoaded()) {
                        var numberResult = MementoAutoNumber.generateNumber(
                            "Z√°kazky",
                            "ƒå√≠slo",
                            "Z Placeholder"
                        );

                        if (numberResult.success) {
                            orderNumber = numberResult.number;
                            utils.addDebug(quoteEntry, "    ‚úÖ Vygenerovan√© ƒç√≠slo: " + orderNumber);
                        } else {
                            utils.addDebug(quoteEntry, "    ‚ö†Ô∏è Chyba pri generovan√≠ ƒç√≠sla: " + numberResult.error);
                            utils.addDebug(quoteEntry, "    ‚ÑπÔ∏è Pou≈æije sa ƒç√≠slo z cenovej ponuky");
                            orderNumber = quoteNumber;
                        }
                    } else {
                        utils.addDebug(quoteEntry, "    ‚ÑπÔ∏è MementoAutoNumber nie je dostupn√Ω");
                        utils.addDebug(quoteEntry, "    ‚ÑπÔ∏è Pou≈æije sa ƒç√≠slo z cenovej ponuky");
                        orderNumber = quoteNumber;
                    }
                } catch (e) {
                    utils.addDebug(quoteEntry, "    ‚ö†Ô∏è Chyba pri volan√≠ MementoAutoNumber: " + e.toString());
                    utils.addDebug(quoteEntry, "    ‚ÑπÔ∏è Pou≈æije sa ƒç√≠slo z cenovej ponuky");
                    orderNumber = quoteNumber;
                }

                syncData[orderFields.number] = orderNumber;

                // Nastav v≈°etky polia
                for (var fieldName in syncData) {
                    if (syncData.hasOwnProperty(fieldName)) {
                        var value = syncData[fieldName];
                        if (value !== null && value !== undefined) {
                            try {
                                order.set(fieldName, value);
                            } catch (e) {
                                utils.addDebug(quoteEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ poƒæa '" + fieldName + "': " + e.toString());
                            }
                        }
                    }
                }

                // Vytvor linkToEntry: Z√°kazka ‚Üí Cenov√° ponuka
                order.set(orderFields.quote, [quoteEntry]);

                utils.addDebug(quoteEntry, "  ‚úÖ Z√°kazka vytvoren√°");
                utils.addDebug(quoteEntry, "    ƒå√≠slo: " + utils.safeGet(order, orderFields.number));
                utils.addDebug(quoteEntry, "    N√°zov: " + utils.safeGet(order, orderFields.name));
                utils.addDebug(quoteEntry, "");

            } else {
                // === UPDATE MODE ===
                // Aktualizuj v≈°etky polia OKREM ƒç√≠sla z√°kazky
                for (var fieldName in syncData) {
                    if (syncData.hasOwnProperty(fieldName)) {
                        // Preskoƒçi≈• ƒç√≠slo z√°kazky - to sa nemen√≠ pri aktualiz√°cii
                        if (fieldName === orderFields.number) {
                            continue;
                        }

                        var value = syncData[fieldName];
                        if (value !== null && value !== undefined) {
                            try {
                                order.set(fieldName, value);
                            } catch (e) {
                                utils.addDebug(quoteEntry, "  ‚ö†Ô∏è Chyba pri aktualiz√°cii poƒæa '" + fieldName + "': " + e.toString());
                            }
                        }
                    }
                }

                utils.addDebug(quoteEntry, "  ‚úÖ Z√°kazka aktualizovan√°");
                utils.addDebug(quoteEntry, "    ƒå√≠slo: " + utils.safeGet(order, orderFields.number));
                utils.addDebug(quoteEntry, "    N√°zov: " + utils.safeGet(order, orderFields.name));
                utils.addDebug(quoteEntry, "");
            }

            // ==============================================
            // KROK 4: VYTVORENIE/AKTUALIZ√ÅCIA DIELOV
            // ==============================================

            utils.addDebug(quoteEntry, "üìã KROK 4: " + (orderExists ? "Kontrola a vytvorenie ch√Ωbaj√∫cich dielov" : "Vytvorenie dielov z√°kazky"));
            utils.addDebug(quoteEntry, "");

            // Zbieranie dielov zo v≈°etk√Ωch troch pol√≠: Diely, Diely HZS, Subdod√°vky
            var quoteParts = [];

            // Pole 1: Diely
            var parts1 = utils.safeGetLinks(quoteEntry, fields.parts) || [];
            utils.addDebug(quoteEntry, "  Diely: " + parts1.length + " polo≈æiek");
            for (var p1 = 0; p1 < parts1.length; p1++) {
                quoteParts.push(parts1[p1]);
            }

            // Pole 2: Diely HZS
            var parts2 = utils.safeGetLinks(quoteEntry, fields.partsHzs) || [];
            utils.addDebug(quoteEntry, "  Diely HZS: " + parts2.length + " polo≈æiek");
            for (var p2 = 0; p2 < parts2.length; p2++) {
                quoteParts.push(parts2[p2]);
            }

            // Pole 3: Subdod√°vky
            var parts3 = utils.safeGetLinks(quoteEntry, fields.subcontracts) || [];
            utils.addDebug(quoteEntry, "  Subdod√°vky: " + parts3.length + " polo≈æiek");
            for (var p3 = 0; p3 < parts3.length; p3++) {
                quoteParts.push(parts3[p3]);
            }

            utils.addDebug(quoteEntry, "  üìä CELKOM dielov v cenovej ponuke: " + quoteParts.length);

            // Pri UPDATE: Z√≠skaj existuj√∫ce diely z√°kazky
            var existingOrderParts = [];
            var existingPartNumbers = [];
            if (orderExists) {
                existingOrderParts = utils.safeGetLinks(order, orderFields.parts) || [];
                utils.addDebug(quoteEntry, "  Poƒçet existuj√∫cich dielov v z√°kazke: " + existingOrderParts.length);

                // Vytvor mapu existuj√∫cich ƒç√≠sel dielov
                for (var ep = 0; ep < existingOrderParts.length; ep++) {
                    var existingPartNumber = utils.safeGet(existingOrderParts[ep], orderPartFields.number);
                    if (existingPartNumber) {
                        existingPartNumbers.push(existingPartNumber);
                    }
                }
                utils.addDebug(quoteEntry, "  Existuj√∫ce ƒç√≠sla dielov: " + existingPartNumbers.join(", "));
            }
            utils.addDebug(quoteEntry, "");

            var createdPartsCount = 0;
            var skippedPartsCount = 0;

            if (quoteParts.length === 0) {
                utils.addDebug(quoteEntry, "  ‚ÑπÔ∏è Cenov√° ponuka nem√° ≈æiadne diely");
            } else {
                var generatedOrderNumber = utils.safeGet(order, orderFields.number) || quoteNumber;
                var creationDate = new Date();

                for (var i = 0; i < quoteParts.length; i++) {
                    var quotePart = quoteParts[i];

                    try {
                        var partNumber = utils.safeGet(quotePart, quotePartFields.number);
                        var partType = utils.safeGet(quotePart, quotePartFields.partType) || ("Diel #" + (i + 1));

                        // Pri UPDATE: Skontroluj ƒçi diel u≈æ existuje
                        if (orderExists && partNumber && existingPartNumbers.indexOf(partNumber) !== -1) {
                            utils.addDebug(quoteEntry, "  ‚è≠Ô∏è Diel " + (i + 1) + "/" + quoteParts.length + " (ƒç√≠slo " + partNumber + ") u≈æ existuje - preskakujem");
                            skippedPartsCount++;
                            continue;
                        }

                        utils.addDebug(quoteEntry, "  üîß Vytv√°ram diel " + (i + 1) + "/" + quoteParts.length + ":");
                        utils.addDebug(quoteEntry, "    Typ dielu: " + partType);
                        utils.addDebug(quoteEntry, "    ƒå√≠slo: " + partNumber);

                        // Vytvor nov√Ω diel
                        var orderPart = orderPartsLib.create({});

                        // === Z√ÅKLADN√â POLIA ===
                        orderPart.set(orderPartFields.number, utils.safeGet(quotePart, quotePartFields.number));
                        orderPart.set(orderPartFields.date, creationDate);
                        orderPart.set(orderPartFields.orderNumber, generatedOrderNumber);
                        orderPart.set(orderPartFields.name, utils.safeGet(quotePart, quotePartFields.name) || "");
                        orderPart.set(orderPartFields.partType, partType);
                        orderPart.set(orderPartFields.note, utils.safeGet(quotePart, quotePartFields.note));

                        // === CENOV√â POLIA ===
                        orderPart.set(orderPartFields.materialSum, utils.safeGet(quotePart, quotePartFields.materialSum));
                        orderPart.set(orderPartFields.workSum, utils.safeGet(quotePart, quotePartFields.workSum));
                        orderPart.set(orderPartFields.totalSum, utils.safeGet(quotePart, quotePartFields.totalSum));

                        // === POLO≈ΩKY S ATRIB√öTMI ===
                        var materials = utils.safeGetLinks(quotePart, quotePartFields.materials);
                        var works = utils.safeGetLinks(quotePart, quotePartFields.works);

                        // Zbieranie √∫dajov o atrib√∫toch
                        var materialsData = [];
                        var worksData = [];

                        if (materials && materials.length > 0) {
                            for (var m = 0; m < materials.length; m++) {
                                var mat = materials[m];
                                var matName = "";
                                try {
                                    matName = mat.field("N√°zov") || "Materi√°l #" + (m + 1);
                                } catch (e) {
                                    matName = "Materi√°l #" + (m + 1);
                                }

                                materialsData.push({
                                    entry: mat,
                                    name: matName,
                                    qty: mat.attr("mno≈æstvo") || 0,
                                    price: mat.attr("cena") || 0,
                                    total: mat.attr("cena celkom") || 0
                                });
                            }
                        }

                        if (works && works.length > 0) {
                            for (var w = 0; w < works.length; w++) {
                                var wrk = works[w];
                                var wrkName = "";
                                try {
                                    wrkName = wrk.field("N√°zov") || "Pr√°ca #" + (w + 1);
                                } catch (e) {
                                    wrkName = "Pr√°ca #" + (w + 1);
                                }

                                worksData.push({
                                    entry: wrk,
                                    name: wrkName,
                                    qty: wrk.attr("mno≈æstvo") || 0,
                                    price: wrk.attr("cena") || 0,
                                    total: wrk.attr("cena celkom") || 0
                                });
                            }
                        }

                        // Linkni materi√°ly a nastav atrib√∫ty (IHNEƒé po linknut√≠)
                        if (materialsData.length > 0) {
                            utils.addDebug(quoteEntry, "    üîß Linkujem materi√°ly a nastavujem atrib√∫ty...");
                            var orderMatAttrs = centralConfig.attributes.orderPartMaterials;
                            for (var m = 0; m < materialsData.length; m++) {
                                var matData = materialsData[m];
                                orderPart.link(orderPartFields.materials, matData.entry);

                                var currentMaterials = orderPart.field(orderPartFields.materials);
                                var justLinkedMat = currentMaterials[currentMaterials.length - 1];

                                if (justLinkedMat) {
                                    justLinkedMat.setAttr(orderMatAttrs.quantity, matData.qty);
                                    justLinkedMat.setAttr(orderMatAttrs.price, matData.price);
                                    justLinkedMat.setAttr(orderMatAttrs.totalPrice, matData.total);
                                }
                            }
                        }

                        // Linkni pr√°ce a nastav atrib√∫ty (IHNEƒé po linknut√≠)
                        if (worksData.length > 0) {
                            utils.addDebug(quoteEntry, "    üîß Linkujem pr√°ce a nastavujem atrib√∫ty...");
                            var orderWrkAttrs = centralConfig.attributes.orderPartWorks;
                            for (var w = 0; w < worksData.length; w++) {
                                var wrkData = worksData[w];
                                orderPart.link(orderPartFields.works, wrkData.entry);

                                var currentWorks = orderPart.field(orderPartFields.works);
                                var justLinkedWrk = currentWorks[currentWorks.length - 1];

                                if (justLinkedWrk) {
                                    justLinkedWrk.setAttr(orderWrkAttrs.quantity, wrkData.qty);
                                    justLinkedWrk.setAttr(orderWrkAttrs.price, wrkData.price);
                                    justLinkedWrk.setAttr(orderWrkAttrs.totalPrice, wrkData.total);
                                }
                            }
                        }

                        // Pripoj diel k z√°kazke
                        var existingParts = utils.safeGetLinks(order, orderFields.parts) || [];
                        existingParts.push(orderPart);
                        order.set(orderFields.parts, existingParts);

                        createdPartsCount++;
                        utils.addDebug(quoteEntry, "    ‚úÖ Diel vytvoren√Ω a pripojen√Ω");

                    } catch (e) {
                        var errorMsg = "Chyba pri vytv√°ran√≠ dielu " + (i + 1) + ": " + e.toString();
                        if (e.lineNumber) errorMsg += ", Line: " + e.lineNumber;
                        utils.addError(quoteEntry, errorMsg, "createOrderPart", e);
                        utils.addDebug(quoteEntry, "    ‚ùå " + errorMsg);
                    }

                    utils.addDebug(quoteEntry, "");
                }

                utils.addDebug(quoteEntry, "  üìä Vytvoren√© diely: " + createdPartsCount + " / " + quoteParts.length);
                if (orderExists && skippedPartsCount > 0) {
                    utils.addDebug(quoteEntry, "  üìä Preskoƒçen√© existuj√∫ce diely: " + skippedPartsCount);
                }
            }

            // ==============================================
            // V√ùSLEDOK
            // ==============================================

            result.success = true;
            result.order = order;
            result.partsCreated = createdPartsCount;

            if (!orderExists) {
                result.message = "‚úÖ Z√°kazka vytvoren√°\n" +
                                "ƒå√≠slo: " + utils.safeGet(order, orderFields.number) + "\n" +
                                "Poƒçet dielov: " + quoteParts.length;

                utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                utils.addDebug(quoteEntry, "         ‚úÖ Z√ÅKAZKA √öSPE≈†NE VYTVOREN√Å                  ");
                utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                utils.addDebug(quoteEntry, "");
                utils.addDebug(quoteEntry, "Z√°kazka: " + utils.safeGet(order, orderFields.number) + " - " + utils.safeGet(order, orderFields.name));
                utils.addDebug(quoteEntry, "Poƒçet dielov: " + quoteParts.length);
            } else {
                result.message = "‚úÖ Z√°kazka aktualizovan√°\n" +
                                "ƒå√≠slo: " + utils.safeGet(order, orderFields.number) + "\n" +
                                "Nov√© diely: " + createdPartsCount + " / " + quoteParts.length;

                utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                utils.addDebug(quoteEntry, "         ‚úÖ Z√ÅKAZKA √öSPE≈†NE AKTUALIZOVAN√Å              ");
                utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                utils.addDebug(quoteEntry, "");
                utils.addDebug(quoteEntry, "Z√°kazka: " + utils.safeGet(order, orderFields.number) + " - " + utils.safeGet(order, orderFields.name));
                utils.addDebug(quoteEntry, "Aktualizovan√© polia: V≈°etky");
                if (quoteParts.length > 0) {
                    utils.addDebug(quoteEntry, "Vytvoren√© nov√© diely: " + createdPartsCount + " / " + quoteParts.length);
                    if (skippedPartsCount > 0) {
                        utils.addDebug(quoteEntry, "Preskoƒçen√© existuj√∫ce: " + skippedPartsCount);
                    }
                }
            }

            return result;

        } catch (error) {
            var errorMsg = "‚ùå KRITICK√Å CHYBA: " + error.toString();
            if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
            if (error.stack) errorMsg += "\nStack: " + error.stack;

            utils.addError(quoteEntry, errorMsg, "CPCreateOrder.createOrder", error);

            utils.addDebug(quoteEntry, "");
            utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            utils.addDebug(quoteEntry, "         ‚ùå CHYBA PRI VYTV√ÅRAN√ç/AKTUALIZ√ÅCII           ");
            utils.addDebug(quoteEntry, "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            utils.addDebug(quoteEntry, "");
            utils.addDebug(quoteEntry, errorMsg);

            result.success = false;
            result.message = "‚ùå Chyba: " + error.toString();
            return result;
        }
    }

    return {
        createOrder: createOrder,
        version: "2.1.0"
    };
})();

// ==============================================
// BACKWARD COMPATIBILITY
// ==============================================
// Ak je dostupn√© entry(), automaticky spusti vytvorenie z√°kazky
if (typeof entry === 'function') {
    try {
        var result = CPCreateOrder.createOrder(entry());
        if (result.success) {
            message(result.message);
        } else {
            message(result.message);
        }
    } catch (e) {
        // Silent fail - pravdepodobne volan√Ω ako modul z in√©ho scriptu
    }
}
