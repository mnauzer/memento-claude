// ==============================================
// MEMENTO BUSINESS - Business logika
// Verzia: 7.0 | D√°tum: August 2025 | Autor: ASISTANTO
// ==============================================
// üìã √öƒåEL:
//    - Business funkcie pre doch√°dzku a mzdy
//    - V√Ωpoƒçty pracovn√©ho ƒçasu
//    - Pr√°ca so zamestnancami
//    - Sviatky a v√≠kendy
// ==============================================
// üîß CHANGELOG v7.0:
//    - Zjednodu≈°en√° ≈°trukt√∫ra
//    - Vyu≈æitie centr√°lneho CONFIGu
//    - Slovensk√© koment√°re
//    - Optimalizovan√© v√Ωpoƒçty
// ==============================================

var MementoBusiness = (function() {
    'use strict';

    var version = "7.3.0";  // Pridan√° univerz√°lna funkcia findValidPrice pre hƒæadanie cien
    
    // Lazy loading pre z√°vislosti
    var _config = null;
    var _core = null;
    
    function getConfig() {
        if (!_config && typeof MementoConfig !== 'undefined') {
            _config = MementoConfig.getConfig();
        }
        return _config;
    }
    
    function getCore() {
        if (!_core && typeof MementoCore !== 'undefined') {
            _core = MementoCore;
        }
        return _core;
    }
    
    // ƒåASOV√â V√ùPOƒåTY
    
    function calculateWorkHours(startTime, endTime) {
        var core = getCore();
        var config = getConfig();
        try {
            var start = moment(startTime);
            var end = moment(endTime);

            if (!start.isValid() || !end.isValid()) {
                return {
                    hours: 0,
                    minutes: 0,
                    crossesMidnight: false,
                    error: "Invalid time format"
                };
            }

            var diffMinutes = end.diff(start, 'minutes');
            var crossesMidnight = false;

            // Ak je rozdiel z√°porn√Ω, pr√°ca cez polnoc
            if (diffMinutes < 0) {
                diffMinutes += 24 * 60;
                crossesMidnight = true;
            }

            var hours = Math.floor(diffMinutes / 60);
            var minutes = diffMinutes % 60;


            // V√Ωpoƒçet nadƒçasov
            var regularHours = Math.min(hours + (minutes / 60), config.defaults.WorkHoursPerDay);
            var overtimeHours = Math.max(0, (hours + (minutes / 60)) - config.defaults.WorkHoursPerDay);

            return {
                hours: hours + (minutes / 60),
                hoursOnly: hours,
                minutes: minutes,
                totalMinutes: diffMinutes,
                regularHours: regularHours,
                overtimeHours: overtimeHours,
                crossesMidnight: crossesMidnight,
                formatted: core.formatTime(hours * 60 + minutes)
            };

        } catch (error) {
                core.addError(entry(), error.toString(), "calculateWorkHours", error);
                return {
                    hours: 0,
                    minutes: 0,
                    error: error.toString()
                };
        }
    }

    /**
     * Univerz√°lny v√Ωpoƒçet pracovn√©ho ƒçasu s parsing a zaokr√∫hƒæovan√≠m
     * @param {Date|String} startTime - Zaƒçiatok (pr√≠chod/zaƒçatie)
     * @param {Date|String} endTime - Koniec (odchod/ukonƒçenie)
     * @param {Object} options - Voliteƒæn√© nastavenia
     * @param {Object} options.entry - Aktu√°lny entry (default: currentEntry)
     * @param {Object} options.config - Konfigur√°cia (default: CONFIG)
     * @param {Boolean} options.roundToQuarter - Zaokr√∫hli≈• na ≈°tvr≈•hodiny (default: false)
     * @param {String} options.startFieldName - N√°zov poƒæa pre zaƒçiatok (pre ulo≈æenie)
     * @param {String} options.endFieldName - N√°zov poƒæa pre koniec (pre ulo≈æenie)
     * @param {String} options.workTimeFieldName - N√°zov poƒæa pre pracovn√∫ dobu (pre ulo≈æenie)
     * @param {String} options.debugLabel - Label pre debug spr√°vy (default: "Pracovn√Ω ƒças")
     * @returns {Object} {success, startTimeRounded, endTimeRounded, startTimeOriginal, endTimeOriginal, pracovnaDobaHodiny, workHours}
     */
    function calculateWorkTime(startTime, endTime, options) {
        var core = getCore();
        options = options || {};

        var entry = options.entry || currentEntry;
        var config = options.config || getConfig();
        var roundToQuarter = options.roundToQuarter !== undefined ? options.roundToQuarter : false;
        var debugLabel = options.debugLabel || "Pracovn√Ω ƒças";

        try {
            core.addDebug(entry, "  V√Ωpoƒçet " + debugLabel.toLowerCase(), "calculation");

            // Spracuj ƒçasy cez core funkcie
            var startTimeParsed = core.parseTimeInput(startTime);
            var endTimeParsed = core.parseTimeInput(endTime);

            if (!startTimeParsed || !endTimeParsed) {
                return { success: false, error: "Nepodarilo sa spracova≈• ƒçasy" };
            }

            // Zaokr√∫hli ƒçasy ak je to povolen√©
            var startTimeFinal = startTimeParsed;
            var endTimeFinal = endTimeParsed;

            if (roundToQuarter) {
                startTimeFinal = core.roundTimeToQuarter(startTimeParsed);
                endTimeFinal = core.roundTimeToQuarter(endTimeParsed);

                core.addDebug(entry, "  Zaokr√∫hlenie aktivovan√©:", "round");
                core.addDebug(entry, "  ‚Ä¢ Od: " + core.formatTime(startTimeParsed) + " ‚Üí " + core.formatTime(startTimeFinal));
                core.addDebug(entry, "  ‚Ä¢ Do: " + core.formatTime(endTimeParsed) + " ‚Üí " + core.formatTime(endTimeFinal));

                // Ulo≈æ zaokr√∫hlen√© ƒçasy ak s√∫ zadan√© n√°zvy pol√≠
                if (options.startFieldName) {
                    core.safeSet(entry, options.startFieldName, startTimeFinal.toDate());
                }
                if (options.endFieldName) {
                    core.safeSet(entry, options.endFieldName, endTimeFinal.toDate());
                }
            }

            // V√Ωpoƒçet hod√≠n s nov√Ωmi ƒçasmi
            var workHours = calculateWorkHours(startTimeFinal, endTimeFinal);

            if (!workHours || workHours.error) {
                return { success: false, error: workHours ? workHours.error : "Nepodarilo sa vypoƒç√≠ta≈• hodiny" };
            }

            var pracovnaDobaHodiny = workHours.totalMinutes / 60;
            pracovnaDobaHodiny = Math.round(pracovnaDobaHodiny * 100) / 100;

            // Ulo≈æ do poƒæa ak je zadan√Ω n√°zov
            if (options.workTimeFieldName) {
                core.safeSet(entry, options.workTimeFieldName, pracovnaDobaHodiny);
            }

            core.addDebug(entry, "  ‚Ä¢ " + debugLabel + ": " + pracovnaDobaHodiny + " hod√≠n");

            return {
                success: true,
                startTimeRounded: startTimeFinal,
                endTimeRounded: endTimeFinal,
                startTimeOriginal: startTimeParsed,
                endTimeOriginal: endTimeParsed,
                pracovnaDobaHodiny: pracovnaDobaHodiny,
                workHours: workHours
            };

        } catch (error) {
            core.addError(entry, error.toString(), "calculateWorkTime", error);
            return { success: false, error: error.toString() };
        }
    }
 
    function formatEmployeeName(employeeEntry) {
        var core = getCore();
        var config = getConfig();
        
        if (!employeeEntry) return "Nezn√°my";
        
        try {
            // Pou≈æ√≠vaj konzistentn√© n√°zvy pol√≠
            var nick = core.safeGet(employeeEntry, config.fields.employee.nick, "").trim();
            var meno = core.safeGet(employeeEntry, config.fields.employee.firstName, "").trim();
            var priezvisko = core.safeGet(employeeEntry, config.fields.employee.lastName, "").trim();
            
            if (nick) {
                return priezvisko ? nick + " (" + priezvisko + ")" : nick;
            }
            
            if (meno || priezvisko) {
                return (meno + " " + priezvisko).trim();
            }
            
            return "Zamestnanec #" + core.safeGet(employeeEntry, "ID", "?");
            
        } catch (error) {
            return "Nezn√°my";
        }
    }
    
    function getEmployeeDetails(employee, date) {
        try {
            var config = getConfig();
            var core = getCore();
            var currentEntry = entry();
            
            // Ak je to string (nick), n√°jdi zamestnanca
            if (typeof employee === 'string') {
                employee = findEmployeeByNick(employee);
                if (!employee) {
                    return null;
                }
            }
            
            var details = {
                id: core.safeGet(employee, config.fields.common.id),
                nick: core.safeGet(employee, config.fields.employee.nick),
                firstName: core.safeGet(employee, config.fields.employee.firstName),
                lastName: core.safeGet(employee, config.fields.employee.lastName),
                fullName: formatEmployeeName(employee),
                status: core.safeGet(employee, config.fields.employee.status),
                position: core.safeGet(employee, config.fields.employee.position),
                department: core.safeGet(employee, config.fields.employee.department),
                phone: core.safeGet(employee, config.fields.employee.phone),
                email: core.safeGet(employee, config.fields.employee.email),
                telegramId: core.safeGet(employee, config.fields.employee.telegramId)
            };
            
            // Z√≠skaj mzdov√© √∫daje ak je zadan√Ω d√°tum
            if (date) {
                var wageData = findValidSalary(currentEntry, employee, date);

                if (wageData) {
                    details.hourlyRate = wageData.hourlyRate;
                    details.rateType = wageData.rateType;
                    details.validFrom = wageData.validFrom;
                    details.validTo = wageData.validTo;
                }
            }
            
            return details;
            
        } catch (error) {
            return null;
        }
    }
    
    function findEmployeeByNick(nick) {
        try {
            if (!nick) return null;
            
            var config = getConfig();
            var lib = libByName(config.libraries.employees);
            if (!lib) return null;
            
            var employees = lib.find(config.fields.employee.nick, nick);
            return employees && employees.length > 0 ? employees[0] : null;
            
        } catch (error) {
            return null;
        }
    }
    
    function getActiveEmployees() {
        try {
            var config = getConfig();
            var lib = libByName(config.libraries.employees);
            if (!lib) return [];
            
            var allEmployees = lib.entries();
            var activeEmployees = [];
            
            for (var i = 0; i < allEmployees.length; i++) {
                var employee = allEmployees[i];
                var status = employee.field(config.fields.employee.status);
                
                if (status === config.constants.status.active) {
                    activeEmployees.push(employee);
                }
            }
            
            return activeEmployees;
            
        } catch (error) {
            return [];
        }
    }
    
    // MZDY A SADZBY
    
    function getEmployeeWageForDate(employee, date) {
        try {
            if (!employee || !date) return null;
            
            var config = getConfig();
            var core = getCore();
            
            // N√°jdi sadzby cez linksFrom
            var wageRecords = employee.linksFrom(
                config.libraries.wages,
                config.fields.wages.employee
            );
            
            if (!wageRecords || wageRecords.length === 0) {
                return null;
            }
            
            // N√°jdi platn√∫ sadzbu pre dan√Ω d√°tum
            var validWage = null;
            var latestValidFrom = null;
            
            for (var i = 0; i < wageRecords.length; i++) {
                var wage = wageRecords[i];
                var validFrom = wage.field(config.fields.wages.validFrom);
                var validTo = wage.field(config.fields.wages.validTo);
                
                // Kontrola platnosti
                if (validFrom && moment(date).isSameOrAfter(validFrom)) {
                    if (!validTo || moment(date).isSameOrBefore(validTo)) {
                        // T√°to sadzba je platn√°, vyber najnov≈°iu
                        if (!latestValidFrom || moment(validFrom).isAfter(latestValidFrom)) {
                            validWage = wage;
                            latestValidFrom = validFrom;
                        }
                    }
                }
            }
            
            if (!validWage) {
                return null;
            }
            
            return {
                hourlyRate: core.safeGet(validWage, config.fields.wages.hourlyRate, 0),
                rateType: core.safeGet(validWage, config.fields.wages.rateType, ""),
                validFrom: latestValidFrom,
                validTo: core.safeGet(validWage, config.fields.wages.validTo, null)
            };
            
        } catch (error) {
            return null;
        }
    }
    
    function calculateDailyWage(employee, hoursWorked, date) {
        try {
            if (!employee || !hoursWorked) {
                return { wage: 0, hourlyRate: 0, overtime: 0 };
            }
            
            // Z√≠skaj hodinov√∫ sadzbu
            var wageData = getEmployeeWageForDate(employee, date);
            if (!wageData) {
                return { wage: 0, hourlyRate: 0, overtime: 0 };
            }
            
            var hourlyRate = wageData.hourlyRate;
            var standardHours = 8; // ≈†tandardn√Ω pracovn√Ω de≈à
            var overtimeRate = 1.25; // 25% pr√≠platok za nadƒças
            
            var regularHours = Math.min(hoursWorked, standardHours);
            var overtimeHours = Math.max(0, hoursWorked - standardHours);
            
            var regularWage = regularHours * hourlyRate;
            var overtimeWage = overtimeHours * hourlyRate * overtimeRate;
            var totalWage = regularWage + overtimeWage;
            
            return {
                wage: Math.round(totalWage * 100) / 100, // Zaokr√∫hli na 2 desatinn√©
                hourlyRate: hourlyRate,
                overtime: overtimeHours,
                regularHours: regularHours,
                overtimeHours: overtimeHours,
                regularWage: regularWage,
                overtimeWage: overtimeWage
            };
            
        } catch (error) {
            return { wage: 0, hourlyRate: 0, overtime: 0 };
        }
    }
   
    function findValidSalary(entry, employee, date) {
        var core = getCore();
        var config = getConfig();
        
        try {
            var employeeName = formatEmployeeName(employee);
            core.addDebug(entry, "  üîç Hƒæad√°m platn√∫ sadzbu");
            
            var hodinovka = findValidHourlyRate(employee, date);
            
            if (!hodinovka || hodinovka <= 0) {
                core.addError(entry, "Zamestnanec " + employeeName + " nem√° platn√∫ sadzbu", "business/findValidSalary");
                return null;
            }
            
            core.addDebug(entry, "  ‚Ä¢ Platn√° hodinovka: " + hodinovka + " ‚Ç¨/h");
            return hodinovka;
    
            
        } catch (error) {
            core.addError(entry, error.toString(), "business/findValidSalary", error);
            return null;
        }
    }

    function findValidHourlyRate(employee, date) {
        var core = getCore();
        var config = getConfig();
        
        try {
            if (!employee || !date) return null;
            
            var fields = config.fields.wages;
            var libraryName = config.libraries.wages;
            
            // Z√≠skaj sadzby cez linksFrom
            var rates = core.safeGetLinksFrom(employee, libraryName, fields.employee);
            
            if (!rates || rates.length === 0) {
                return null;
            }
            
            var validRate = null;
            var latestValidFrom = null;
            
            // N√°jdi najnov≈°iu platn√∫ sadzbu
            for (var i = 0; i < rates.length; i++) {
                var rate = rates[i];
                var validFrom = core.safeGet(rate, fields.validFrom);
                var hourlyRate = core.safeGet(rate, fields.hourlyRate);
                
                if (validFrom && hourlyRate && moment(validFrom).isSameOrBefore(date)) {
                    if (!latestValidFrom || moment(validFrom).isAfter(latestValidFrom)) {
                        latestValidFrom = validFrom;
                        validRate = hourlyRate;
                    }
                }
            }
            
            return validRate;
            
        } catch (error) {
            if (core) {
                core.addError(employee, "Chyba pri hƒæadan√≠ sadzby: " + error.toString() + ", Line: " + error.lineNumber, "findValidHourlyRate", error);
            }
            return null;
        }
    }
    // ==============================================
    // ≈†TATISTIKY
    // ==============================================
    
    function calculateMonthlyStats(employee, month, year) {
        try {
            var config = getConfig();
            var startDate = moment([year, month - 1, 1]);
            var endDate = moment(startDate).endOf('month');
            
            var stats = {
                totalDays: 0,
                workDays: 0,
                weekends: 0,
                holidays: 0,
                totalHours: 0,
                totalWage: 0,
                overtimeHours: 0,
                averageHours: 0
            };
            
            // Z√≠skaj doch√°dzku pre mesiac
            var attendanceLib = libByName(config.libraries.attendance);
            if (!attendanceLib) return stats;
            
            var allAttendance = attendanceLib.entries();
            
            for (var i = 0; i < allAttendance.length; i++) {
                var record = allAttendance[i];
                var recordDate = record.field(config.fields.attendance.date);
                
                if (!recordDate) continue;
                
                var recordMoment = moment(recordDate);
                if (!recordMoment.isBetween(startDate, endDate, 'day', '[]')) continue;
                
                // Skontroluj ƒçi obsahuje tohto zamestnanca
                var employees = record.field(config.fields.attendance.employees);
                if (!employees || !Array.isArray(employees)) continue;
                
                var hasEmployee = false;
                for (var j = 0; j < employees.length; j++) {
                    if (employees[j].id === employee.id) {
                        hasEmployee = true;
                        break;
                    }
                }
                
                if (!hasEmployee) continue;
                
                // Zapoƒç√≠taj ≈°tatistiky
                stats.totalDays++;
                
                if (isWeekend(recordDate)) {
                    stats.weekends++;
                } else if (isHoliday(recordDate)) {
                    stats.holidays++;
                } else {
                    stats.workDays++;
                }
                
                // Z√≠skaj odpracovan√© hodiny z atrib√∫tu
                var workedHours = 0;
                for (var k = 0; k < employees.length; k++) {
                    if (employees[k].id === employee.id && employees[k].attr) {
                        workedHours = employees[k].attr(config.attributes.employees.workedHours) || 0;
                        break;
                    }
                }
                
                stats.totalHours += workedHours;
                
                // Vypoƒç√≠taj mzdu
                var wageCalc = calculateDailyWage(employee, workedHours, recordDate);
                stats.totalWage += wageCalc.wage;
                stats.overtimeHours += wageCalc.overtimeHours;
            }
            
            // Vypoƒç√≠taj priemery
            if (stats.workDays > 0) {
                stats.averageHours = Math.round((stats.totalHours / stats.workDays) * 100) / 100;
            }
            
            return stats;
            
        } catch (error) {
            return {
                totalDays: 0,
                workDays: 0,
                weekends: 0,
                holidays: 0,
                totalHours: 0,
                totalWage: 0,
                overtimeHours: 0,
                averageHours: 0
            };
        }
    }
    
    // ==============================================
    // WAGE & RATE FUNCTIONS
    // ==============================================

    // ==============================================
    // UNIVERZ√ÅLNA FUNKCIA PRE HƒΩADANIE PLATN√ùCH CIEN
    // ==============================================

    /**
     * Univerz√°lna funkcia pre hƒæadanie platnej ceny k d√°tumu
     * @param {Object} itemEntry - Z√°znam polo≈æky (materi√°l, pr√°ca, stroj, vozidlo, atƒè.)
     * @param {Date} date - D√°tum pre ktor√Ω hƒæad√°me cenu
     * @param {Object} options - Konfiguraƒçn√© nastavenia
     * @param {String} options.priceLibrary - N√°zov kni≈ænice s hist√≥riou cien (napr. "materialPrices", "workPrices")
     * @param {String} options.linkField - N√°zov linkToEntry poƒæa v hist√≥rii cien (napr. "material", "work")
     * @param {String} options.dateField - N√°zov poƒæa s d√°tumom platnosti (default: "validFrom")
     * @param {String|Array} options.priceField - N√°zov poƒæa/pol√≠ s cenou (napr. "sellPrice", "price" alebo ["priceMth", "flatRate"])
     * @param {String} options.fallbackPriceField - N√°zov poƒæa v samotnej polo≈æke pre aktu√°lnu cenu (napr. "price")
     * @param {Object} options.currentEntry - Entry pre debug v√Ωpisy (optional)
     * @returns {Number|Object|null} - Platn√° cena alebo null
     *
     * @example
     * // Hƒæadanie ceny materi√°lu
     * var materialPrice = business.findValidPrice(materialEntry, currentDate, {
     *     priceLibrary: "materialPrices",
     *     linkField: "material",
     *     priceField: "sellPrice",
     *     fallbackPriceField: "price",
     *     currentEntry: currentEntry
     * });
     *
     * @example
     * // Hƒæadanie ceny pr√°ce
     * var workPrice = business.findValidPrice(workEntry, currentDate, {
     *     priceLibrary: "workPrices",
     *     linkField: "work",
     *     priceField: "price"
     * });
     *
     * @example
     * // Hƒæadanie ceny stroja (vracia objekt s priceMth a flatRate)
     * var machinePrice = business.findValidPrice(machineEntry, currentDate, {
     *     priceLibrary: "machinePrices",
     *     linkField: "machine",
     *     priceField: ["priceMth", "flatRate"] // Multiple fields
     * });
     */
    function findValidPrice(itemEntry, date, options) {
        var core = getCore();
        var config = getConfig();

        try {
            // Valid√°cia vstupov
            if (!itemEntry || !date) {
                return null;
            }

            if (!options || !options.priceLibrary || !options.linkField || !options.priceField) {
                if (core && options && options.currentEntry) {
                    core.addError(options.currentEntry,
                        "‚ùå findValidPrice: Ch√Ωbaj√∫ce povinn√© parametre (priceLibrary, linkField, priceField)",
                        "findValidPrice");
                }
                return null;
            }

            var currentEntry = options.currentEntry || null;

            // Z√≠skaj konfigur√°ciu pre kni≈ænicu cien
            var priceLibraryName = config.libraries[options.priceLibrary];
            var priceFieldsConfig = config.fields[options.priceLibrary];

            if (!priceLibraryName || !priceFieldsConfig) {
                if (currentEntry && core) {
                    core.addDebug(currentEntry, "‚ö†Ô∏è Kni≈ænica alebo fields pre " + options.priceLibrary + " nen√°jden√© v konfigur√°cii");
                }
                return null;
            }

            // Z√≠skaj n√°zvy pol√≠
            var linkFieldName = priceFieldsConfig[options.linkField];
            var dateFieldName = priceFieldsConfig[options.dateField || "validFrom"];

            if (!linkFieldName) {
                if (currentEntry && core) {
                    core.addDebug(currentEntry, "‚ö†Ô∏è Link field '" + options.linkField + "' nen√°jden√Ω v konfigur√°cii pre " + options.priceLibrary);
                }
                return null;
            }

            // Z√≠skaj z√°znamy z hist√≥rie cien
            var priceRecords = core.safeGetLinksFrom(itemEntry, priceLibraryName, linkFieldName);

            if (!priceRecords || priceRecords.length === 0) {
                // Pok√∫s sa pou≈æi≈• fallback cenu z polo≈æky samotnej
                if (options.fallbackPriceField) {
                    var fallbackFieldConfig = config.fields.items || config.fields.priceList || {};
                    var fallbackFieldName = fallbackFieldConfig[options.fallbackPriceField];

                    if (fallbackFieldName) {
                        var fallbackPrice = core.safeGet(itemEntry, fallbackFieldName);
                        if (fallbackPrice !== null && fallbackPrice !== undefined) {
                            if (currentEntry) {
                                core.addDebug(currentEntry, "  üìå Pou≈æijem aktu√°lnu cenu z polo≈æky: " + fallbackPrice);
                            }
                            return fallbackPrice;
                        }
                    }
                }

                if (currentEntry && core) {
                    core.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne cenov√© z√°znamy v hist√≥rii");
                }
                return null;
            }

            // Priprav v√Ωsledn√Ω objekt alebo hodnotu
            var isMultipleFields = Array.isArray(options.priceField);
            var validPrice = isMultipleFields ? {} : null;
            var latestValidFrom = null;

            // N√°jdi najnov≈°iu platn√∫ cenu
            for (var i = 0; i < priceRecords.length; i++) {
                var priceRecord = priceRecords[i];
                var validFrom = core.safeGet(priceRecord, dateFieldName);

                // Skontroluj ƒçi je d√°tum platn√Ω a nie je v bud√∫cnosti
                if (validFrom && moment(validFrom).isSameOrBefore(date)) {
                    // Kontrola ƒçi je to najnov≈°√≠ d√°tum
                    if (!latestValidFrom || moment(validFrom).isAfter(latestValidFrom)) {
                        latestValidFrom = validFrom;

                        // Z√≠skaj cenu/ceny
                        if (isMultipleFields) {
                            // Multiple price fields (napr. pre stroje: priceMth, flatRate)
                            for (var j = 0; j < options.priceField.length; j++) {
                                var fieldKey = options.priceField[j];
                                var fieldName = priceFieldsConfig[fieldKey];
                                if (fieldName) {
                                    validPrice[fieldKey] = core.safeGet(priceRecord, fieldName, 0);
                                }
                            }
                        } else {
                            // Single price field
                            var priceFieldName = priceFieldsConfig[options.priceField];
                            if (priceFieldName) {
                                var price = core.safeGet(priceRecord, priceFieldName);
                                if (price !== null && price !== undefined) {
                                    validPrice = price;
                                }
                            }
                        }
                    }
                }
            }

            // Debug v√Ωstup
            if (currentEntry && core && latestValidFrom) {
                var priceDisplay = isMultipleFields ? JSON.stringify(validPrice) : validPrice;
                core.addDebug(currentEntry, "  ‚úÖ N√°jden√° platn√° cena k " + moment(latestValidFrom).format("DD.MM.YYYY") + ": " + priceDisplay);
            }

            // Ak sme nena≈°li cenu v hist√≥rii, sk√∫s fallback
            if ((isMultipleFields && Object.keys(validPrice).length === 0) ||
                (!isMultipleFields && validPrice === null)) {

                if (options.fallbackPriceField) {
                    var fallbackFieldConfig2 = config.fields.items || config.fields.priceList || {};
                    var fallbackFieldName2 = fallbackFieldConfig2[options.fallbackPriceField];

                    if (fallbackFieldName2) {
                        var fallbackPrice2 = core.safeGet(itemEntry, fallbackFieldName2);
                        if (fallbackPrice2 !== null && fallbackPrice2 !== undefined) {
                            if (currentEntry && core) {
                                core.addDebug(currentEntry, "  üìå Pou≈æijem aktu√°lnu cenu z polo≈æky (fallback): " + fallbackPrice2);
                            }
                            return fallbackPrice2;
                        }
                    }
                }
            }

            return validPrice;

        } catch (error) {
            if (core && options && options.currentEntry) {
                core.addError(options.currentEntry,
                    "‚ùå Chyba v findValidPrice: " + error.toString() + ", Line: " + error.lineNumber,
                    "findValidPrice", error);
            }
            return null;
        }
    }

    // Deprecated - pou≈æi≈• findValidPrice s options
    function findValidItemPrice(itemEntry, date) {
        return findValidPrice(itemEntry, date, {
            priceLibrary: "materialPrices",
            linkField: "material",
            priceField: "sellPrice",
            fallbackPriceField: "price"
        });
    }

    function findValidMachinePrice(machineEntry, date) {
        try {
            if (!machineEntry || !date) return null;
            var core = getCore();
            var config = getConfig();
            var currentEntry = entry();
            core.addDebug(currentEntry, "  üîç Hƒæad√°m platn√∫ cenu mechaniz√°cie");
            var validPrice = {
                priceMth: 0,
                flatRate: 0,
            };
            var fields = config.fields.machinePrice;
            var libraryName = config.libraries.machinePrices;
            var prices = core.safeGetLinksFrom(machineEntry, libraryName, fields.machine);
            core.addDebug(currentEntry, "  ‚Ä¢ N√°jden√Ωch cien: " + (prices ? prices.length : 0)); 
            if (!prices || prices.length === 0) {
                core.addDebug(currentEntry, "  üîç Nepodarilo sa n√°js≈• ≈æiadne ceny");
                return null;
            }
          
            var latestValidFrom = null;
            
            // N√°jdi najnov≈°iu platn√∫ cenu
            for (var i = 0; i < prices.length; i++) {
                var price = prices[i];
                var validFrom = core.safeGet(price, fields.validFrom);
                
                if (validFrom && price && moment(validFrom).isSameOrBefore(date)) {
                    if (!latestValidFrom || moment(validFrom).isAfter(latestValidFrom)) {
                        latestValidFrom = validFrom;
                        validPrice.priceMth = core.safeGet(price, fields.priceMth, 0);
                        validPrice.flatRate = core.safeGet(price, fields.flatRate, 0);
                    }
                }
            }
            
            return validPrice;
            
        } catch (error) {
            if (core) {
                core.addError(item, "Chyba pri hƒæadan√≠ ceny: " + error.toString() + ", Line: " + error.lineNumber, "findValidMachinePrice", error);

            }
            return null;
        }
    }

    function findValidWorkPrice(workEntry, date) {
        var core = getCore();
        var config = getConfig();
        
        try {
            if (!workEntry || !date) return null;
            
            var fields = config.fields.workPrices;
            var libraryName = config.libraries.workPrices;
            var prices = core.safeGetLinksFrom(workEntry, libraryName, fields.work);
            
            if (!prices || prices.length === 0) {
                return null;
            }
            
            var validPrice = null;
            var latestValidFrom = null;
            
            // N√°jdi najnov≈°iu platn√∫ cwnu
            for (var i = 0; i < prices.length; i++) {
                var rate = prices[i];
                var validFrom = rate.field(fields.validFrom);
                var price = rate.field(fields.price);
                
                if (validFrom && price && moment(validFrom).isSameOrBefore(date)) {
                    if (!latestValidFrom || moment(validFrom).isAfter(latestValidFrom)) {
                        latestValidFrom = validFrom;
                        validPrice = price;
                    }
                }
            }
            
            return validPrice;
            
        } catch (error) {
            if (core) {
                core.addError(item, "Chyba pri hƒæadan√≠ ceny: " + error.toString() + ", Line: " + error.lineNumber, "findValidWorkPrice", error);
            }
            return null;
        }
    }

    /**
     * Univerz√°lne spracovanie jedn√©ho zamestnanca
     * @param {Object} zamestnanec - Z√°znam zamestnanca
     * @param {Number} pracovnaDobaHodiny - Poƒçet hod√≠n
     * @param {Date} datum - D√°tum z√°znamu
     * @param {Number} index - Index v poli zamestnancov
     * @param {Object} options - Voliteƒæn√© nastavenia
     * @param {Object} options.entry - Aktu√°lny entry (default: currentEntry)
     * @param {Object} options.config - Konfigur√°cia (default: CONFIG)
     * @param {String} options.employeeFieldName - N√°zov poƒæa so zamestnancami
     * @param {Object} options.attributes - Defin√≠cie atrib√∫tov pol√≠
     * @param {Boolean} options.includeExtras - Zahrn√∫≈• pr√≠platky/pr√©mie/pokuty (default: false)
     * @param {Boolean} options.processObligations - Spracova≈• z√°v√§zky (default: false)
     * @param {Array} options.existingObligations - Existuj√∫ce z√°v√§zky pre update
     * @returns {Object} {success, hodinovka, dennaMzda, priplatok, premia, pokuta, zamestnanec, ...}
     */
    function processEmployee(zamestnanec, pracovnaDobaHodiny, datum, index, options) {
        var core = getCore();
        options = options || {};

        var entry = options.entry || currentEntry;
        var config = options.config || CONFIG;
        var includeExtras = options.includeExtras || false;
        var processObligations = options.processObligations || false;

        try {
            // N√°jdi platn√∫ hodinovku
            var hodinovka = findValidSalary(entry, zamestnanec, datum);

            if (!hodinovka || hodinovka <= 0) {
                core.addDebug(entry, "  ‚ùå Preskakujem - nem√° platn√∫ sadzbu");
                return { success: false };
            }

            // Z√≠skaj pole zamestnancov
            var employeeFieldName = options.employeeFieldName || config.fields.attendance.employees || config.fields.workRecord.employees;
            var zamArray = entry.field(employeeFieldName);

            if (!zamArray || zamArray.length <= index || !zamArray[index]) {
                core.addError(entry, "Nepodarilo sa z√≠ska≈• zamestnanca na indexe " + index, "processEmployee");
                return { success: false };
            }

            var attributes = options.attributes || config.attributes || {};

            // Debug: Kontrola atrib√∫tov
            core.addDebug(entry, "  üìã Nastavujem atrib√∫ty:");
            core.addDebug(entry, "    ‚Ä¢ Index: " + index);
            core.addDebug(entry, "    ‚Ä¢ zamArray.length: " + zamArray.length);
            core.addDebug(entry, "    ‚Ä¢ attributes: " + JSON.stringify(attributes));

            // Nastav z√°kladn√© atrib√∫ty
            if (attributes.workedHours || attributes.workRecordEmployees) {
                var workedHoursAttr = attributes.workedHours || (attributes.workRecordEmployees && attributes.workRecordEmployees.workedHours);
                if (workedHoursAttr) {
                    core.addDebug(entry, "    ‚úÖ Nastavujem '" + workedHoursAttr + "' = " + pracovnaDobaHodiny);
                    zamArray[index].setAttr(workedHoursAttr, pracovnaDobaHodiny);
                }
            }

            if (attributes.hourlyRate || attributes.workRecordEmployees) {
                var hourlyRateAttr = attributes.hourlyRate || (attributes.workRecordEmployees && attributes.workRecordEmployees.hourlyRate);
                if (hourlyRateAttr) {
                    core.addDebug(entry, "    ‚úÖ Nastavujem '" + hourlyRateAttr + "' = " + hodinovka);
                    zamArray[index].setAttr(hourlyRateAttr, hodinovka);
                }
            }

            // Spracuj pr√≠platky, pr√©mie, pokuty ak je po≈æadovan√©
            var priplatok = 0;
            var premia = 0;
            var pokuta = 0;

            if (includeExtras && attributes.bonus) {
                priplatok = zamArray[index].attr(attributes.bonus) || 0;
            }
            if (includeExtras && attributes.premium) {
                premia = zamArray[index].attr(attributes.premium) || 0;
            }
            if (includeExtras && attributes.penalty) {
                pokuta = zamArray[index].attr(attributes.penalty) || 0;
            }

            // Vypoƒç√≠taj denn√∫ mzdu
            var dennaMzda;
            if (includeExtras) {
                dennaMzda = (pracovnaDobaHodiny * (hodinovka + priplatok)) + premia - pokuta;
            } else {
                dennaMzda = pracovnaDobaHodiny * hodinovka;
            }
            dennaMzda = Math.round(dennaMzda * 100) / 100;

            // Nastav mzdov√© n√°klady (denn√∫ mzdu)
            if (attributes.wageCosts || attributes.workRecordEmployees) {
                var wageCostsAttr = attributes.wageCosts || (attributes.workRecordEmployees && attributes.workRecordEmployees.wageCosts);
                if (wageCostsAttr) {
                    core.addDebug(entry, "    ‚úÖ Nastavujem '" + wageCostsAttr + "' = " + dennaMzda);
                    zamArray[index].setAttr(wageCostsAttr, dennaMzda);
                }
            }

            var result = {
                success: true,
                hodinovka: hodinovka,
                dennaMzda: dennaMzda,
                priplatok: priplatok,
                premia: premia,
                pokuta: pokuta,
                zamestnanec: zamestnanec
            };

            // Spracuj z√°v√§zky ak je po≈æadovan√©
            if (processObligations && options.processObligation) {
                var obligationResult = options.processObligation(datum, {
                    entry: zamestnanec,
                    dailyWage: dennaMzda,
                    name: formatEmployeeName(zamestnanec)
                }, options.existingObligations);

                result.created = obligationResult.created;
                result.updated = obligationResult.updated;
                result.totalAmount = obligationResult.totalAmount;
                result.errors = obligationResult.errors;
                result.total = obligationResult.total;
                result.obligationResult = obligationResult;
            }

            if (includeExtras) {
                core.addDebug(entry, "  ‚Ä¢ Denn√° mzda: " + dennaMzda + " ‚Ç¨");
            } else {
                core.addDebug(entry, "  ‚Ä¢ Mzdov√© n√°klady: " + dennaMzda + " ‚Ç¨");
            }
            core.addDebug(entry, "Spracovan√© √∫spe≈°ne", "success");

            return result;

        } catch (error) {
            core.addError(entry, error.toString(), "processEmployee", error);
            return { success: false };
        }
    }

    function processEmployees(zamestnanci, pracovnaDobaHodiny, datum, options) {
        var core = getCore();
        options = options || {};

        var entry = options.entry || currentEntry;
        var config = options.config || CONFIG;

        try {
            var result = {
                success: false,
                pocetPracovnikov: zamestnanci.length,
                odpracovaneTotal: 0,
                pracovnaDoba: pracovnaDobaHodiny,
                celkoveMzdy: 0,
                detaily: [],
                created: 0,
                updated: 0,
                totalAmount: 0
            };

            // Ulo≈æ poƒçet pracovn√≠kov - urƒçuj pole pred pou≈æit√≠m
            var employeeCountField = config.fields.pocetPracovnikov ||
                                   (config.fields.attendance ? config.fields.attendance.employeeCount : null) ||
                                   (config.fields.workRecord ? config.fields.workRecord.employeeCount : null);

            if (employeeCountField) {
                core.safeSet(entry, employeeCountField, result.pocetPracovnikov);
            }

            // Z√≠skaj existuj√∫ce z√°v√§zky ak je po≈æadovan√©
            if (options.processObligations && options.findLinkedObligations) {
                options.existingObligations = options.findLinkedObligations(options.libraryType || 'attendance');
                core.addDebug(entry, core.getIcon("document") + "  N√°jden√© existuj√∫ce z√°v√§zky: " + options.existingObligations.length);
            }

            // Spracuj ka≈æd√©ho zamestnanca
            for (var i = 0; i < zamestnanci.length; i++) {
                var zamestnanec = zamestnanci[i];

                if (!zamestnanec) {
                    core.addDebug(entry, "Zamestnanec[" + i + "] je null - preskakujem", "warning");
                    continue;
                }

                var employeeName = formatEmployeeName(zamestnanec);
                core.addDebug(entry, " [" + (i+1) + "/" + result.pocetPracovnikov + "] " + employeeName, "person");

                // Spracuj zamestnanca s options
                var empResult = processEmployee(zamestnanec, pracovnaDobaHodiny, datum, i, options);

                if (empResult.success) {
                    result.odpracovaneTotal += pracovnaDobaHodiny;
                    result.celkoveMzdy += empResult.dennaMzda;
                    result.detaily.push(empResult);
                    result.success = true;

                    // Agreguj v√Ωsledky z√°v√§zkov ak existuj√∫
                    if (empResult.created !== undefined) {
                        result.created += empResult.created;
                        result.updated += empResult.updated;
                        result.totalAmount += empResult.totalAmount;
                    }
                } else {
                    result.success = false;
                }
            }

            // Loguj s√∫hrn z√°v√§zkov ak boli spracovan√©
            if (options.processObligations) {
                core.addDebug(entry, core.getIcon("note") + "  Z√°v√§zky z tohto z√°znamu:");
                core.addDebug(entry, core.getIcon("checkmark") + "    Vytvoren√©: " + result.created);
                core.addDebug(entry, core.getIcon("update") + "    Aktualizovan√©: " + result.updated);
                core.addDebug(entry, core.getIcon("money") + "    Celkov√° suma: " + core.formatMoney(result.totalAmount));
            }

            return result;

        } catch (error) {
            core.addError(entry, error.toString(), "processEmployees", error);
            return { success: false };
        }
    }
    // ==============================================
    // SUMMARY & REPORTING FUNCTIONS
    // ==============================================

    function showProcessingSummary(entry, summaryData, config) {
        var core = getCore();
        
        try {
            var msg = summaryData.success ? "‚úÖ √öSPE≈†NE SPRACOVAN√â\n\n" : "‚ö†Ô∏è SPRACOVAN√â S CHYBAMI\n\n";
            
            if (summaryData.date) {
                msg += "üìÖ D√°tum: " + core.formatDate(summaryData.date) + "\n";
            }
            
            if (summaryData.employeeCount !== undefined) {
                msg += "üë• Pracovn√≠kov: " + summaryData.employeeCount + " " + 
                    getPersonCountForm(summaryData.employeeCount) + "\n";
            }
            
            if (summaryData.totalHours !== undefined) {
                msg += "‚è±Ô∏è Odpracovan√©: " + summaryData.totalHours + " hod√≠n\n";
            }
            
            if (summaryData.totalCosts !== undefined) {
                msg += "üí∞ N√°klady: " + core.formatMoney(summaryData.totalCosts) + "\n";
            }
            
            if (summaryData.errors && summaryData.errors.length > 0) {
                msg += "\n‚ö†Ô∏è Chyby (" + summaryData.errors.length + "):\n";
                for (var i = 0; i < Math.min(3, summaryData.errors.length); i++) {
                    msg += "‚Ä¢ " + summaryData.errors[i] + "\n";
                }
                if (summaryData.errors.length > 3) {
                    msg += "‚Ä¢ ... a " + (summaryData.errors.length - 3) + " ƒèal≈°√≠ch\n";
                }
            }
            
            msg += "\n‚ÑπÔ∏è Detaily v poli 'info'";
            
            if (typeof message === 'function') {
                message(msg);
            }
            
        } catch (error) {
            if (typeof message === 'function') {
                message(summaryData.success ? "‚úÖ Spracovan√©" : "‚ö†Ô∏è Spracovan√© s chybami");
            }
        }
    }

    // ==============================================
    // POMOCN√â FUNKCIE PRE Z√ÅV√ÑZKY
    // ==============================================

    function findExistingObligations(creditor) {
        var core = getCore();
        var config = getConfig();
        try {
            var creditorField = config.fields.obligations[creditor];
            return core.safeGetLinksFrom(currentEntry, config.libraries.obligations, creditorField )
        } catch (error) {
            core.addError(currentEntry, "Chyba pri hƒæadan√≠ z√°v√§zkov: " + error.toString(), "findExistingObligations");
            return [];
        }
    }
    function findLinkedObligations(creditor) {
        var core = getCore();
        var config = getConfig();
        try {
            var creditorField = config.fields.obligations[creditor];
            return core.safeGetLinksFrom(currentEntry, config.libraries.obligations, creditorField )
        } catch (error) {
            core.addError(currentEntry, "Chyba pri hƒæadan√≠ z√°v√§zkov: " + error.toString(), "findExistingObligations");
            return [];
        }
    }

    // ==============================================
    // OPRAVEN√Å FUNKCIA createObligation v MementoBusiness7.js
    // Verzia: 7.1 | Oprava: Vytv√°ran√≠ z√°v√§zkov
    // ==============================================

    function createObligation(date, data, creditor) {
        var core = getCore();
        var config = getConfig();
        
        try {
            core.addDebug(currentEntry, "   ‚ûï Vytv√°ranie nov√©ho z√°v√§zku...");
            
            var lib = libByName(config.libraries.obligations);
            if (!lib) {
                core.addError(currentEntry, "Kni≈ænica " + config.libraries.obligations + " nen√°jden√°", "createObligation");
                return false;
            }
            
            // ‚úÖ OPRAVEN√â: Pracuj priamo s newObligation objektom
            var newObligation = lib.create({});
            
            if (!newObligation) {
                core.addError(currentEntry, "Nepodarilo sa vytvori≈• nov√Ω z√°znam z√°v√§zku", "createObligation");
                return false;
            }
            
            // ‚úÖ OPRAVEN√â: Nastav √∫daje priamo na newObligation
            try {
                // Z√°kladn√© polia z√°v√§zku
                newObligation.set(config.fields.obligations.state, config.constants.obligationStates.unpaid);
                newObligation.set(config.fields.obligations.date, date);
                newObligation.set(config.fields.obligations.type, config.constants.obligationTypes.wages);
                
                // Prepojenia
                newObligation.set(config.fields.obligations.employee, [data.entry]);
                newObligation.set(config.fields.obligations.creditor, "Zamestnanec");
                newObligation.set(config.fields.obligations.attendance, [currentEntry]);
                
                // Finanƒçn√© √∫daje
                newObligation.set(config.fields.obligations.amount, data.dailyWage);
                newObligation.set(config.fields.obligations.paid, 0);
                newObligation.set(config.fields.obligations.balance, data.dailyWage);
                
                // Popis
                var description = "Mzda zamestnanca " + data.name + " za de≈à " + core.formatDate(date);
                newObligation.set(config.fields.obligations.description, description);
                
                // Info z√°znam
                var infoText = "üìã AUTOMATICKY VYTVOREN√ù Z√ÅV√ÑZOK\n";
                infoText += "=====================================\n\n";
                infoText += "üìÖ D√°tum: " + core.formatDate(date) + "\n";
                infoText += "üë§ Zamestnanec: " + data.name + "\n";
                infoText += "üí∞ Suma: " + core.formatMoney(data.dailyWage) + "\n\n";
                infoText += "‚è∞ Vytvoren√©: " + core.formatDate(moment()) + "\n";
                infoText += "üîß Script: Doch√°dzka Sync Z√°v√§zkov v7.1\n";
                infoText += "üìÇ Zdroj: Kni≈ænica Doch√°dzka\n";
                infoText += "üìù Zdrojov√Ω z√°znam ID: " + currentEntry.field("ID");
                
                newObligation.set(config.fields.common.info || "info", infoText);
                
                core.addDebug(currentEntry, "  ‚úÖ Z√°v√§zok √∫spe≈°ne vytvoren√Ω a vyplnen√Ω");
                core.addDebug(currentEntry, "    ID: " + newObligation.field("ID"));
                core.addDebug(currentEntry, "    Suma: " + core.formatMoney(data.dailyWage));
                core.addDebug(currentEntry, "    Popis: " + description);
                
                return true;
                
            } catch (setError) {
                core.addError(currentEntry, "Chyba pri nastavovan√≠ √∫dajov z√°v√§zku: " + setError.toString(), "createObligation");
                return false;
            }
            
        } catch (error) {
            core.addError(currentEntry, "Chyba pri vytv√°ran√≠ z√°v√§zku: " + error.toString(), "createObligation", error);
            return false;
        }
    }

    function updateObligation(date, obligation, amount) {
        var core = getCore();
        var config = getConfig();
        try {
            utils.addDebug(currentEntry, "  üîÑ Aktualiz√°cia existuj√∫ceho z√°v√§zku...");
            
            var paidAmount = utils.safeGet(obligation, config.fields.obligations.paid || 0);
            var newBalance = amount - paidAmount;
            var newStatus = newBalance <= 0 ? config.constants.obligationStates.paid : 
                        paidAmount > 0 ? config.constants.obligationStates.partiallyPaid : 
                        config.constants.obligationStates.unpaid;
            obligation.set(config.fields.obligations.date, date);
            obligation.set(config.fields.obligations.amount, amount);
            obligation.set(config.fields.obligations.balance, newBalance);
            obligation.set(config.fields.obligations.state, newStatus);
            
            utils.addDebug(currentEntry, "  ‚òëÔ∏è Z√°v√§zok aktualizovan√Ω");
            utils.addDebug(currentEntry, "    Suma: " + utils.formatMoney(amount) + 
                                        " | Zostatok: " + utils.formatMoney(newBalance));
            
            return true;
            
        } catch (error) {
            utils.addError(currentEntry, "Chyba pri aktualiz√°cii: " + error.toString(), "updateObligation", error);
            return false;
        }
    }

    // ==============================================
    // V√ùPOƒåET MAR≈ΩE A RENTABILITY
    // ==============================================

    function calculateProfitability(costs, revenue) {
        var core = getCore();
        var config = getConfig();

        var profit = {
            grossProfit: 0,      // Hrub√Ω zisk
            grossMargin: 0,      // Hrub√° mar≈æa v %
            netProfit: 0,        // ƒåist√Ω zisk (po DPH)
            profitability: 0,    // Rentabilita v %
            isProfitable: false  // Je z√°kazka ziskov√°?
        };
        
        try {
            core.addDebug(currentEntry, "  üìä Poƒç√≠tam ziskovos≈•...");
            
            // Hrub√Ω zisk
            profit.grossProfit = revenue.total - costs.total;
            
            // Hrub√° mar≈æa
            if (revenue.total > 0) {
                profit.grossMargin = (profit.grossProfit / revenue.total) * 100;
            }
            
            // ƒåist√Ω zisk (po odvode DPH)
           // profit.netProfit = profit.grossProfit - costs.vatAmount; //TODO poƒç√≠tame profit bez dph - dorie≈°i≈•
            
            // Rentabilita
            if (costs.total > 0) {
                profit.profitability = (profit.grossProfit / costs.total) * 100;
            }
            
            // Je ziskov√°?
            profit.isProfitable = profit.grossProfit > 0;
            
            core.addDebug(currentEntry, "    ‚Ä¢ Hrub√Ω zisk: " + core.formatMoney(profit.grossProfit));
            core.addDebug(currentEntry, "    ‚Ä¢ Hrub√° mar≈æa: " + profit.grossMargin.toFixed(2) + "%");
            //core.addDebug(currentEntry, "    ‚Ä¢ ƒåist√Ω zisk: " + core.formatMoney(profit.netProfit));
            core.addDebug(currentEntry, "    ‚Ä¢ Rentabilita: " + profit.profitability.toFixed(2) + "%");
            core.addDebug(currentEntry, "    ‚Ä¢ Stav: " + (profit.isProfitable ? "‚úÖ ZISKOV√Å" : "‚ùå STRATOV√Å"));
            
            return profit;
            
        } catch (error) {
            core.addError(currentEntry, error.toString(), "calculateProfitability", error);
            return profit;
        }
    }

    // ==============================================
    // DPH FUNKCIE
    // ==============================================

    function getValidVatRate(date, vatType) {
        var core = getCore();
        var config = getConfig();

        try {
            if (!date) {
                core.addError(item, "D√°tum nie je zadan√Ω pre zistenie DPH", "getValidVatRate");
                return 0;
            }

            var vatRatesLibName = config.libraries.vatRatesLib || "sadzby DPH";
            var vatRatesLib = libByName(vatRatesLibName);

            if (!vatRatesLib) {
                core.addError(item, "Kni≈ænica sadzby DPH neexistuje", "getValidVatRate");
                return 0;
            }

            var targetDate = moment(date);
            if (!targetDate.isValid()) {
                core.addError(item, "Neplatn√Ω d√°tum: " + date, "getValidVatRate");
                return 0;
            }

            // Z√≠skaj v≈°etky sadzby DPH
            var vatRateEntries = vatRatesLib.entries();
            var validEntries = [];

            for (var i = 0; i < vatRateEntries.length; i++) {
                var vatEntry = vatRateEntries[i];
                var validFromField = config.fields.vatRates.validFrom;
                var validFromDate = moment(core.safeGet(vatEntry, validFromField, null));

                if (validFromDate.isValid() && validFromDate.isSameOrBefore(targetDate)) {
                    validEntries.push({
                        entry: vatEntry,
                        validFrom: validFromDate
                    });
                }
            }

            if (validEntries.length === 0) {
                core.addError(item, "Nena≈°la sa platn√° sadzba DPH k d√°tumu " + targetDate.format("DD.MM.YYYY"), "getValidVatRate");
                return 0;
            }

            // Zoraƒè podƒæa d√°tumu platnosti (najnov≈°ie najprv)
            validEntries.sort(function(a, b) {
                return b.validFrom.valueOf() - a.validFrom.valueOf();
            });

            var latestEntry = validEntries[0].entry;

            // Zisti typ DPH (z√°kladn√°, zn√≠≈æen√°)
            var vatTypeField = vatType === "zn√≠≈æen√°" ?
                config.fields.vatRates.reduced :
                config.fields.vatRates.standard;

            var vatRate = core.safeGet(latestEntry, vatTypeField, 0);

            if (vatRate === 0) {
                core.addDebug(item, "DPH sadzba nie je nastaven√° pre typ: " + vatType + ", k d√°tumu: " + targetDate.format("DD.MM.YYYY"), "warning");
            }

            return parseFloat(vatRate) || 0;

        } catch (error) {
            if (core) {
                core.addError(item, "Chyba pri hƒæadan√≠ DPH sadzby: " + error.toString(), "getValidVatRate", error);
            }
            return 0;
        }
    }

    /**
     * Vytvor√≠ alebo aktualizuje z√°znam v kni≈ænici "ceny materi√°lu"
     * @param {Object} materialItem - Z√°znam materi√°lu
     * @param {Date} priceDate - D√°tum platnosti ceny
     * @param {number} newPrice - Nov√° cena materi√°lu
     * @returns {Object} V√Ωsledok oper√°cie
     */
    function createOrUpdateMaterialPriceRecord(materialItem, priceDate, sellPrice, purchasePrice) {
        try {
            var core = getCore();
            var config = getConfig();

            var materialName = core.safeGet(materialItem, config.fields.items.name, "Nezn√°my materi√°l");
      
            // Z√≠skanie kni≈ænice ceny materi√°lu
            var materialPricesLibraryName = config.libraries.materialPrices;

            var pricesLibrary = libByName(materialPricesLibraryName);
            if (!pricesLibrary) {
                core.addError(item, "‚ùå Kni≈ænica " + materialPricesLibraryName + " neexistuje", "createOrUpdateMaterialPriceRecord");
                return {
                    success: false,
                    message: "Kni≈ænica ceny materi√°lu neexistuje"
                };
            }

            var dateFormatted = core.formatDate(priceDate, "DD.MM.YYYY");
            core.addDebug(item, "üí∞ " + materialName + " - Spracov√°vam cenov√Ω z√°znam k " + dateFormatted);

            // Hƒæadanie existuj√∫ceho z√°znamu pre tento materi√°l a d√°tum
            var existingPriceEntry = null;
            var priceEntries = materialItem.linksFrom(pricesLibrary);

            core.addDebug(item, "üîç DEBUG: Hƒæad√°m existuj√∫ce cenov√© z√°znamy, n√°jden√Ωch: " + (priceEntries ? priceEntries.length : 0));

            if (priceEntries && priceEntries.length > 0) {
                // Konverzia cieƒæov√©ho d√°tumu na zaƒçiatok d≈àa (00:00:00) v millisekond√°ch
                var targetDate = new Date(priceDate);
                var targetDateDay = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate());
                var targetDateMs = targetDateDay.getTime();

                var targetDateStr = moment(priceDate).format("YYYY-MM-DD");
                core.addDebug(item, "üîç DEBUG: Hƒæad√°m z√°znamy s d√°tumom: " + targetDateStr + " (ms: " + targetDateMs + ")");

                for (var i = 0; i < priceEntries.length; i++) {
                    var priceEntry = priceEntries[i];
                    var entryDate = core.safeGet(priceEntry, config.fields.materialPrices.date);

                    if (entryDate) {
                        var entryDateMs;
                        var entryDateStr;

                        // Konvertuj d√°tum z√°znamu na millisekudy zaƒçiatku d≈àa
                        if (typeof entryDate === 'number') {
                            // Ak je d√°tum u≈æ v milliseknd√°ch
                            var entryDateObj = new Date(entryDate);
                            var entryDateDay = new Date(entryDateObj.getFullYear(), entryDateObj.getMonth(), entryDateObj.getDate());
                            entryDateMs = entryDateDay.getTime();
                            entryDateStr = moment(entryDate).format("YYYY-MM-DD");
                        } else if (entryDate instanceof Date) {
                            // Ak je d√°tum Date objekt
                            var entryDateDay = new Date(entryDate.getFullYear(), entryDate.getMonth(), entryDate.getDate());
                            entryDateMs = entryDateDay.getTime();
                            entryDateStr = moment(entryDate).format("YYYY-MM-DD");
                        } else {
                            // Ak je string alebo in√Ω form√°t, parsuj cez moment
                            var parsedDate = moment(entryDate);
                            if (parsedDate.isValid()) {
                                var entryDateDay = new Date(parsedDate.year(), parsedDate.month(), parsedDate.date());
                                entryDateMs = entryDateDay.getTime();
                                entryDateStr = parsedDate.format("YYYY-MM-DD");
                            } else {
                                core.addDebug(item, "‚ö†Ô∏è DEBUG: Neplatn√Ω d√°tum v z√°zname: " + entryDate);
                                continue;
                            }
                        }

                        core.addDebug(item, "üîç DEBUG: Porovn√°vam " + targetDateStr + " (" + targetDateMs + ") vs " + entryDateStr + " (" + entryDateMs + ")");

                        // Porovnanie d√°tumov pomocou millisek√∫nd (len d√°tum, nie ƒças)
                        if (entryDateMs === targetDateMs) {
                            existingPriceEntry = priceEntry;
                            core.addDebug(item, "‚úÖ DEBUG: N√°jden√Ω existuj√∫ci z√°znam pre d√°tum " + targetDateStr);
                            break;
                        }
                    } else {
                        core.addDebug(item, "‚ö†Ô∏è DEBUG: Z√°znam nem√° d√°tum: index " + i);
                    }
                }

                if (!existingPriceEntry) {
                    core.addDebug(item, "‚ùå DEBUG: ≈Ωiadny existuj√∫ci z√°znam pre d√°tum " + targetDateStr + " nebol n√°jden√Ω");
                }
            }

            if (existingPriceEntry) {
                // Z√≠skanie pol√≠ pre aktualiz√°ciu
                var sellPriceField = config.fields.materialPrices.sellPrice;
                var purchasePriceField = config.fields.materialPrices.purchasePrice;
                var vatRateField = config.fields.materialPrices.vatRate;

                // Z√≠skanie aktu√°lnej sadzby DPH z materi√°lu
                var materialVatRate = core.safeGet(materialItem, config.fields.items.vatRate, "Z√°kladn√°");
                var vatRatePercentage = getValidVatRate(materialVatRate, priceDate);

                var oldSellPrice = parseFloat(core.safeGet(existingPriceEntry, sellPriceField, 0));
                var oldPurchasePrice = parseFloat(core.safeGet(existingPriceEntry, purchasePriceField, 0));

                // Aktualiz√°cia pol√≠
                core.safeSet(existingPriceEntry, sellPriceField, sellPrice);
                core.safeSet(existingPriceEntry, purchasePriceField, purchasePrice);
                core.safeSet(existingPriceEntry, vatRateField, vatRatePercentage + "%");

                core.addDebug(item, "üîÑ " + materialName + " - Aktualizovan√Ω cenov√Ω z√°znam k " + dateFormatted);
                core.addDebug(item, "  ‚Ä¢ Predajn√°: " + core.formatMoney(oldSellPrice) + " -> " + core.formatMoney(sellPrice));
                core.addDebug(item, "  ‚Ä¢ N√°kupn√°: " + core.formatMoney(oldPurchasePrice) + " -> " + core.formatMoney(purchasePrice));

                return {
                    success: true,
                    updated: true,
                    message: "Cenov√Ω z√°znam aktualizovan√Ω",
                    oldSellPrice: oldSellPrice,
                    oldPurchasePrice: oldPurchasePrice,
                    oldPrice: oldSellPrice, // Pre Info z√°znam
                    newPrice: sellPrice,    // Pre Info z√°znam
                    sellPrice: sellPrice,
                    purchasePrice: purchasePrice,
                    date: priceDate
                };

            } else {
                // Vytvorenie nov√©ho z√°znamu
                core.addDebug(item, "‚ûï Existuj√∫ci z√°znam nen√°jden√Ω, vytv√°ram nov√Ω");
                var newPriceEntry = pricesLibrary.create({});

                var materialField = config.fields.materialPrices.material;
                var dateField = config.fields.materialPrices.date;
                var purchasePriceField = config.fields.materialPrices.purchasePrice;
                var sellPriceField = config.fields.materialPrices.sellPrice;
                var vatRateField = config.fields.materialPrices.vatRate;

                // Z√≠skanie aktu√°lnej sadzby DPH z materi√°lu
                var materialVatRate = core.safeGet(materialItem, config.fields.items.vatRate, "Z√°kladn√°");
                var vatRatePercentage = getValidVatRate(materialVatRate, priceDate);

                core.safeSet(newPriceEntry, materialField, [materialItem]);
                core.safeSet(newPriceEntry, dateField, priceDate);
                core.safeSet(newPriceEntry, purchasePriceField, purchasePrice);
                core.safeSet(newPriceEntry, sellPriceField, sellPrice);
                core.safeSet(newPriceEntry, vatRateField, vatRatePercentage + "%");


                core.addDebug(item, "‚ûï " + materialName + " - Vytvoren√Ω nov√Ω cenov√Ω z√°znam k " + dateFormatted + ": " + core.formatMoney(sellPrice));

                return {
                    success: true,
                    created: true,
                    message: "Nov√Ω cenov√Ω z√°znam vytvoren√Ω",
                    purchasePrice: purchasePrice,
                    sellPrice: sellPrice,
                    newPrice: sellPrice,    // Pre Info z√°znam
                    date: priceDate,
                    entryId: core.safeGet(newPriceEntry, "ID", "N/A")
                };
            }

        } catch (error) {
            var core = getCore();
            if (core) {
                core.addError(item, "Chyba pri spracovan√≠ cenov√©ho z√°znamu: " + error.toString(), "createOrUpdateMaterialPriceRecord", error);
            }
            return {
                success: false,
                message: "Chyba pri spracovan√≠ cenov√©ho z√°znamu: " + error.toString()
            };
        }
    }

    // ==============================================
    // MATERIAL PRICE CALCULATIONS - NOV√â FUNKCIE
    // ==============================================

    /**
     * Detekuje v≈°etky typy zmien cien a rozhodne o potrebe prepoƒçtu
     * @param {Object} item - Materi√°l entry
     * @param {number} purchasePrice - Nov√° n√°kupn√° cena
     * @param {boolean} isManualAction - ƒåi ide o manu√°lnu akciu
     * @param {Object} options - Dodatoƒçn√© mo≈ænosti (forceRecalculation)
     * @returns {Object} Rozhodnutie o prepoƒçte
     */
    function detectAllPriceChanges(item, purchasePrice, isManualAction, options) {
        try {
            var core = getCore();
            var config = getConfig();
            options = options || {};

            var materialName = core.safeGet(item, config.fields.items.name, "Nezn√°my materi√°l");

            // Pre manu√°lne akcie s vyn√∫ten√Ωm prepoƒçtom - v≈ædy prepoƒç√≠taj
            if (isManualAction && options.forceRecalculation) {
                core.addDebug(item, "üöÄ " + materialName + " - Vyn√∫ten√Ω prepoƒçet (manu√°lna akcia)");
                return {
                    shouldRecalculate: true,
                    reason: "Manu√°lna akcia - vyn√∫ten√Ω prepoƒçet",
                    iconsToAdd: ["üîÑ"]
                };
            }

            // S√∫ƒçasn√© hodnoty pre porovnanie
            var currentPurchasePrice = parseFloat(core.safeGet(item, config.fields.items.purchasePrice, 0));
            var changePercentageThreshold = parseFloat(core.safeGet(item, config.fields.items.changePercentage, 0));
            var purchasePriceChangeAction = core.safeGet(item, config.fields.items.purchasePriceChange, "").trim();

            // Pre manu√°lne akcie bez force - st√°le umo≈æni prepoƒçet aj s mal√Ωmi zmenami
            if (isManualAction) {
                core.addDebug(item, "‚öôÔ∏è " + materialName + " - Manu√°lna akcia, povolen√Ω prepoƒçet");
                return {
                    shouldRecalculate: true,
                    reason: "Manu√°lna akcia - povolen√Ω prepoƒçet",
                    iconsToAdd: ["‚öôÔ∏è"]
                };
            }

            // ≈†tandardn√° kontrola zmeny n√°kupnej ceny pre automatick√© triggery
            var iconsToAdd = [];
            if (currentPurchasePrice > 0 && changePercentageThreshold > 0) {
                var percentageChange = Math.abs((purchasePrice - currentPurchasePrice) / currentPurchasePrice) * 100;
                var isPriceIncrease = purchasePrice > currentPurchasePrice;

                core.addDebug(item, "‚ÑπÔ∏è " + materialName + " - Kontrola zmeny ceny: " + core.formatMoney(currentPurchasePrice) + " -> " + core.formatMoney(purchasePrice) + " (" + percentageChange.toFixed(2) + "%)");

                if (percentageChange >= changePercentageThreshold) {
                    // Pridanie ikony ≈°√≠pky podƒæa zmeny ceny
                    var directionIcon = isPriceIncrease ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è";
                    iconsToAdd.push(directionIcon);

                    core.addDebug(item, "‚ö†Ô∏è " + materialName + " - Zmena ceny " + percentageChange.toFixed(2) + "% prekroƒçila prah " + changePercentageThreshold + "%");

                    switch (purchasePriceChangeAction) {
                        case "Upozorni≈•":
                            iconsToAdd.push("‚ö†Ô∏è");
                            return {
                                shouldRecalculate: false,
                                reason: "Iba upozornenie, prepoƒçet sa preskoƒç√≠",
                                iconsToAdd: iconsToAdd
                            };

                        case "Prepoƒç√≠ta≈•":
                            iconsToAdd.push("üîÑ");
                            return {
                                shouldRecalculate: true,
                                reason: "Prepoƒçet ceny bude vykonan√Ω",
                                iconsToAdd: iconsToAdd
                            };

                        case "Upozorni≈• a prepoƒç√≠ta≈•":
                            iconsToAdd.push("‚ö†Ô∏è", "üîÑ");
                            return {
                                shouldRecalculate: true,
                                reason: "Upozornenie a prepoƒçet ceny",
                                iconsToAdd: iconsToAdd
                            };

                        case "Ignorova≈•":
                            return {
                                shouldRecalculate: false,
                                reason: "Zmena ignorovan√°, len ikona zmeny",
                                iconsToAdd: iconsToAdd
                            };

                        default:
                            return {
                                shouldRecalculate: true,
                                reason: "Nezn√°me nastavenie, pou≈æije sa prepoƒçet",
                                iconsToAdd: iconsToAdd
                            };
                    }
                }
            }

            return {
                shouldRecalculate: false,
                reason: "≈Ωiadne v√Ωznamn√© zmeny",
                iconsToAdd: []
            };

        } catch (error) {
            core.addError(item, "Chyba pri detekcii zmien cien: " + error.toString(), "detectAllPriceChanges", error);
            return {
                shouldRecalculate: false,
                reason: "Chyba pri detekcii zmien",
                iconsToAdd: []
            };
        }
    }

    /**
     * Vypoƒç√≠tava a aktualizuje ceny materi√°lu na z√°klade nastaven√≠
     * @param {Object} item - Z√°znam materi√°lu
     * @param {number} purchasePrice - N√°kupn√° cena z pr√≠jemky/manu√°lneho vstupu
     * @param {Date} documentDate - D√°tum dokumentu
     * @param {boolean} isManualAction - ƒåi ide o manu√°lny prepoƒçet (true) alebo pr√≠jemku (false)
     * @param {Object} options - Dodatoƒçn√© mo≈ænosti (forceRecalculation)
     * @returns {Object} V√Ωsledok aktualiz√°cie
     */
    function calculateAndUpdateMaterialPrices(item, purchasePrice, documentDate, isManualAction, options) {
        try {
            var core = getCore();
            var config = getConfig();

            var materialName = core.safeGet(item, config.fields.items.name, "Nezn√°my materi√°l");
            core.addDebug(item, "üßæ " + materialName + " - Sp√∫≈°≈•am v√Ωpoƒçet cien...");
            var updated = false;
            options = options || {};
            core.addDebug(item, "üîß Mo≈ænosti: " + JSON.stringify(options));
            // 1. Pou≈æitie novej funkcie pre detekciu zmien
            var changeDetection = detectAllPriceChanges(item, purchasePrice, isManualAction, options);
            var shouldProcessPriceCalculation = changeDetection.shouldRecalculate;
            var iconsToAdd = changeDetection.iconsToAdd || [];

            core.addDebug(item, "üîç " + materialName + " - " + changeDetection.reason);

            // Z√≠skanie hodn√¥t pre info z√°znam (potrebn√© nesk√¥r)
            var currentPurchasePrice = parseFloat(core.safeGet(item, config.fields.items.purchasePrice, 0));
            var purchasePriceChangeAction = core.safeGet(item, config.fields.items.purchasePriceChange, "").trim();
            var priceCalculation = core.safeGet(item, config.fields.items.priceCalculation, "").trim();

            // 2. N√°kupn√© ceny - pou≈æij cenu z atrib√∫tu "cena" (nezaokr√∫hƒæuj√∫ sa)
            var finalPurchasePrice = purchasePrice; // Cena z atrib√∫tu "cena"

            // 3. Zisti≈• sadzbu DPH z z√°znamu materi√°lu
            var vatRateType = core.safeGet(item, config.fields.items.vatRate, "Z√°kladn√°");
            var vatRate = 0;
            try {
                vatRate = getValidVatRate(documentDate, vatRateType);
                core.addDebug(item, "‚úÖ " + materialName + " - Sadzba DPH (" + vatRateType + "): " + vatRate + "%");
            } catch (error) {
                core.addDebug(item, "‚ö†Ô∏è " + materialName + " - Chyba pri z√≠skavan√≠ DPH, pou≈æije sa 0%");
                vatRate = 0;
            }

            // 3. V√Ωpoƒçet n√°kupnej ceny s DPH (nezaokr√∫hƒæuje sa)
            var finalPurchasePriceWithVat = finalPurchasePrice * (1 + vatRate / 100);

            // 4. Inicializ√°cia cien pre pr√≠pad preskoƒçenia prepoƒçtu
            var finalPrice = finalPurchasePrice; // Default = n√°kupn√° cena
            var roundedPriceWithVat = finalPurchasePriceWithVat;

            // 5. Prepoƒçet predajn√Ωch cien (ak je povolen√Ω)
            if (shouldProcessPriceCalculation) {
                core.addDebug(item, "‚ÑπÔ∏è " + materialName + " - Prepoƒçet ceny: " + priceCalculation);

                var sellingPrice = finalPurchasePrice; // Z√°kladne = n√°kupn√° cena

                // Ak je "Podƒæa prir√°≈æky", vypoƒç√≠ta≈• predajn√∫ cenu s prir√°≈ækou
                if (priceCalculation === "Podƒæa prir√°≈æky") {
                    var markupPercentage = parseFloat(core.safeGet(item, config.fields.items.markupPercentage, 0));
                    if (markupPercentage > 0) {
                        sellingPrice = finalPurchasePrice * (1 + markupPercentage / 100);
                        core.addDebug(item, "üßÆ " + materialName + " - Prir√°≈æka " + markupPercentage + "%: " + core.formatMoney(finalPurchasePrice) + " -> " + core.formatMoney(sellingPrice));
                    }
                }

                // V√Ωpoƒçet predajnej ceny s DPH
                var priceWithVat = sellingPrice * (1 + vatRate / 100);

                // Zaokr√∫hƒæovanie predajn√Ωch cien s DPH podƒæa nastaven√≠ materi√°lu
                roundedPriceWithVat = applyPriceRounding(item, priceWithVat, materialName + " - predajn√° (s DPH)");

                // Prepoƒç√≠tanie predajnej ceny bez DPH z zaokr√∫hlenej ceny s DPH
                finalPrice = roundedPriceWithVat / (1 + vatRate / 100);
            } else {
                core.addDebug(item, "üö´ " + materialName + " - Prepoƒçet ceny preskoƒçen√Ω podƒæa nastavenia");
            }

            // 9. Aktualizova≈• ikony ak s√∫ k dispoz√≠cii (nahradenie star√Ωch ikon)
            if (iconsToAdd.length > 0) {
                var newIcons = iconsToAdd.join(" ");
                var currentIcons = core.safeGet(item, config.fields.items.icons, "");

                // Nahraƒè star√© ikony nov√Ωmi (nezachov√°vaj predch√°dzaj√∫ce)
                core.safeSet(item, config.fields.items.icons, newIcons);

                if (currentIcons && currentIcons.trim() !== "") {
                    core.addDebug(item, "üîÑ " + materialName + " - Ikony nahraden√©: '" + currentIcons + "' -> '" + newIcons + "'");
                } else {
                    core.addDebug(item, "üéØ " + materialName + " - Pridan√© ikony: " + newIcons);
                }
                updated = true;
            }

            // 10. Aktualizova≈• ceny v materi√°li ak sa zmenili
            var currentPrice = parseFloat(core.safeGet(item, config.fields.items.price, 0));
            var currentPriceWithVat = parseFloat(core.safeGet(item, config.fields.items.priceWithVat, 0));
            var currentPurchasePrice = parseFloat(core.safeGet(item, config.fields.items.purchasePrice, 0));
            var currentPurchasePriceWithVat = parseFloat(core.safeGet(item, config.fields.items.purchasePriceWithVat, 0));

            // Detekcia zmien v cen√°ch
            var pricesChanged = Math.abs(currentPrice - finalPrice) > 0.01 ||
                                Math.abs(currentPriceWithVat - roundedPriceWithVat) > 0.01 ||
                                Math.abs(currentPurchasePrice - finalPurchasePrice) > 0.01 ||
                                Math.abs(currentPurchasePriceWithVat - finalPurchasePriceWithVat) > 0.01;

            // Aktualiz√°cia pol√≠ materi√°lu len ak sa ceny zmenili
            if (pricesChanged) {
                // Aktualizova≈• ceny v z√°zname materi√°lu
                core.safeSet(item, config.fields.items.price, finalPrice);
                core.safeSet(item, config.fields.items.priceWithVat, roundedPriceWithVat);
                core.safeSet(item, config.fields.items.purchasePrice, finalPurchasePrice);
                core.safeSet(item, config.fields.items.purchasePriceWithVat, finalPurchasePriceWithVat);
                core.addDebug(item, "üí∞ " + materialName + " - Ceny aktualizovan√© v materi√°li");
            }

            // Pre manu√°lne akcie alebo zmeny cien - v≈ædy aktualizuj ostatn√© polia a cenov√Ω z√°znam
            if (isManualAction || pricesChanged) {
                // Aktualizova≈• pole Sadzba s percentu√°lnou hodnotou DPH
                core.safeSet(item, config.fields.items.vatRatePercentage, vatRate);
                core.addDebug(item, "üìä Sadzba DPH aktualizovan√° na: " + vatRate + "%");

                // Vypoƒç√≠ta≈• a nastavi≈• skutoƒçn√∫ prir√°≈æku (Vypoƒç√≠tan√° mar≈æa)
                if (finalPurchasePrice > 0) {
                    var actualMargin = ((finalPrice - finalPurchasePrice) / finalPurchasePrice) * 100;
                    var roundedMargin = Math.round(actualMargin * 100) / 100; // Zaokr√∫hlenie na 2 desatinn√© miesta
                    core.safeSet(item, config.fields.items.calculatedMargin, roundedMargin);
                    core.addDebug(item, "üíØ Skutoƒçn√° prir√°≈æka nastaven√° na: " + roundedMargin.toFixed(2) + "%");
                }

                // Vytvorenie info z√°znamu pre materi√°l
                createMaterialInfoRecord(item, {
                    originalPurchasePrice: finalPurchasePrice,
                    originalSellingPrice: shouldProcessPriceCalculation ? sellingPrice : finalPurchasePrice,
                    originalPriceWithVat: shouldProcessPriceCalculation ? priceWithVat : finalPurchasePriceWithVat,
                    originalPurchasePriceWithVat: finalPurchasePriceWithVat,
                    finalPrice: finalPrice,
                    finalPriceWithVat: roundedPriceWithVat,
                    finalPurchasePrice: finalPurchasePrice,
                    finalPurchasePriceWithVat: finalPurchasePriceWithVat,
                    vatRate: vatRate,
                    vatRateType: vatRateType,
                    priceCalculation: shouldProcessPriceCalculation ? priceCalculation : "Preskoƒçen√©",
                    markupPercentage: parseFloat(core.safeGet(item, config.fields.items.markupPercentage, 0)),
                    priceRounding: core.safeGet(item, config.fields.items.priceRounding, "").trim(),
                    roundingValue: core.safeGet(item, config.fields.items.roundingValue, "").trim(),
                    documentDate: documentDate,
                    // Inform√°cie o kontrole zmeny ceny
                    purchasePriceChangeAction: purchasePriceChangeAction,
                    previousPurchasePrice: currentPurchasePrice,
                    changePercentage: currentPurchasePrice > 0 ? Math.abs((purchasePrice - currentPurchasePrice) / currentPurchasePrice) * 100 : 0,
                    changeDirection: purchasePrice > currentPurchasePrice ? "rast" : "pokles",
                    iconsAdded: iconsToAdd.join(" "),
                    // Inform√°cie o cenov√© hist√≥rii (bude pridan√© nesk√¥r)
                    priceHistoryResult: null,
                    isManualAction: isManualAction || false
                });

                updated = true;

                // V≈ΩDY vytvor/aktualizuj cenov√Ω z√°znam pri manu√°lnej akcii alebo zmene cien
                core.addDebug(item, "üîç DEBUG: Vol√°m createOrUpdateMaterialPriceRecord - manu√°lna akcia: " + isManualAction + ", zmeny cien: " + pricesChanged);
                var priceHistoryResult = createOrUpdateMaterialPriceRecord(item, documentDate, finalPrice, finalPurchasePrice);
                if (priceHistoryResult.success) {
                    if (priceHistoryResult.created) {
                        core.addDebug(item, "‚ûï " + materialName + " - Vytvoren√Ω cenov√Ω z√°znam v hist√≥rii");
                    } else if (priceHistoryResult.updated) {
                        core.addDebug(item, "üîÑ " + materialName + " - Aktualizovan√Ω cenov√Ω z√°znam v hist√≥rii");
                    }
                } else {
                    core.addDebug(item, "‚ö†Ô∏è " + materialName + " - Chyba pri vytv√°ran√≠ cenov√©ho z√°znamu: " + priceHistoryResult.message);
                    core.addDebug(item, "üîç DEBUG: priceHistoryResult: " + JSON.stringify(priceHistoryResult));
                }

                // Aktualiz√°cia info z√°znamu s komplet√Ωmi inform√°ciami vr√°tane cenovej hist√≥rie
                createMaterialInfoRecord(item, {
                    originalPurchasePrice: finalPurchasePrice,
                    originalSellingPrice: finalPrice,
                    originalPriceWithVat: roundedPriceWithVat,
                    originalPurchasePriceWithVat: finalPurchasePriceWithVat,
                    finalPrice: finalPrice,
                    finalPriceWithVat: roundedPriceWithVat,
                    finalPurchasePrice: finalPurchasePrice,
                    finalPurchasePriceWithVat: finalPurchasePriceWithVat,
                    vatRate: vatRate,
                    vatRateType: vatRateType,
                    priceCalculation: shouldProcessPriceCalculation ? priceCalculation : "Preskoƒçen√©",
                    markupPercentage: parseFloat(core.safeGet(item, config.fields.items.markupPercentage, 0)),
                    priceRounding: core.safeGet(item, config.fields.items.priceRounding, "").trim(),
                    roundingValue: core.safeGet(item, config.fields.items.roundingValue, "").trim(),
                    documentDate: documentDate,
                    // Inform√°cie o kontrole zmeny ceny
                    purchasePriceChangeAction: purchasePriceChangeAction,
                    previousPurchasePrice: currentPurchasePrice,
                    changePercentage: currentPurchasePrice > 0 ? Math.abs((purchasePrice - currentPurchasePrice) / currentPurchasePrice) * 100 : 0,
                    changeDirection: purchasePrice > currentPurchasePrice ? "rast" : "pokles",
                    iconsAdded: iconsToAdd.join(" "),
                    // Inform√°cie o cenov√© hist√≥rii (teraz u≈æ dostupn√©)
                    priceHistoryResult: priceHistoryResult,
                    isManualAction: isManualAction || false
                });

                core.addDebug(item, "üîÑ " + materialName + " - Spracovanie dokonƒçen√©:");
                core.addDebug(item, "  N√°kupn√°: " + core.formatMoney(finalPurchasePrice) + " / s DPH: " + core.formatMoney(finalPurchasePriceWithVat));
                core.addDebug(item, "  Predajn√°: " + core.formatMoney(finalPrice) + " / s DPH: " + core.formatMoney(roundedPriceWithVat));
            }

            return {
                updated: updated,
                sellingPrice: finalPrice,
                priceWithVat: roundedPriceWithVat
            };

        } catch (error) {
            var core = getCore();
            if (core) {
                core.addError(item, "Chyba pri prepoƒçte cien materi√°lu: " + error.toString(), "calculateAndUpdateMaterialPrices", error);
            }
            return {
                updated: false,
                sellingPrice: purchasePrice,
                priceWithVat: purchasePrice
            };
        }
    }

    /**
     * Aplikuje zaokr√∫hƒæovanie ceny podƒæa nastaven√≠ materi√°lu
     * @param {Object} item - Z√°znam materi√°lu
     * @param {number} price - Cena na zaokr√∫hlenie
     * @param {string} materialName - N√°zov materi√°lu (pre debug)
     * @returns {number} Zaokr√∫hlen√° cena
     */
    function applyPriceRounding(item, price, materialName) {
        try {
            var core = getCore();
            var config = getConfig();

            var priceRounding = core.safeGet(item, config.fields.items.priceRounding, "").trim();
            var roundingValue = core.safeGet(item, config.fields.items.roundingValue, "").trim();

            if (!priceRounding || priceRounding === "Nezaokr√∫hƒæova≈•") {
                return price;
            }

            var roundingFactor = 1; // Desatiny
            switch (roundingValue) {
                case "Jednotky":
                    roundingFactor = 1;
                    break;
                case "Desiatky":
                    roundingFactor = 10;
                    break;
                case "Stovky":
                    roundingFactor = 100;
                    break;
                case "Desatiny":
                default:
                    roundingFactor = 0.1;
                    break;
            }

            var roundedPrice = price;
            switch (priceRounding) {
                case "Nahor":
                    roundedPrice = Math.ceil(price / roundingFactor) * roundingFactor;
                    break;
                case "Nadol":
                    roundedPrice = Math.floor(price / roundingFactor) * roundingFactor;
                    break;
                case "Najbli≈æ≈°ie":
                    roundedPrice = Math.round(price / roundingFactor) * roundingFactor;
                    break;
            }

            if (Math.abs(price - roundedPrice) > 0.001) {
                core.addDebug(item, "üßÆ " + materialName + " - Zaokr√∫hlenie (" + priceRounding + ", " + roundingValue + "): " + core.formatMoney(price) + " -> " + core.formatMoney(roundedPrice));
            }

            return roundedPrice;

        } catch (error) {
            var core = getCore();
            if (core) {
                core.addDebug(item, "‚ö†Ô∏è Chyba pri zaokr√∫hƒæovan√≠ ceny, pou≈æije sa p√¥vodn√°: " + error.toString());
            }
            return price;
        }
    }

    /**
     * Z√≠ska popis zaokr√∫hƒæovania na z√°klade hodnoty
     */
    function getRoundingDescription(roundingValue) {
        if (!roundingValue || roundingValue.trim() === "") {
            return "nie je nastaven√©";
        }

        var value = roundingValue.trim().toLowerCase();
        switch (value) {
            case "0.01": return "desatiny";
            case "0.1": return "desatiny";
            case "desatiny": return "desatiny";
            case "1": return "jednotky";
            case "jednotky": return "jednotky";
            case "5": return "na 5";
            case "10": return "na 10";
            case "desiatky": return "na 10";
            case "50": return "na 50";
            case "100": return "na 100";
            case "stovky": return "na 100";
            default: return value;
        }
    }

    /**
     * Vytvor√≠ info z√°znam pre materi√°l s detailmi prepoƒçtu cien
     * @param {Object} item - Z√°znam materi√°lu
     * @param {Object} priceData - D√°ta o cen√°ch
     * @returns {boolean} √öspe≈°nos≈• vytvorenia
     */
    function createMaterialInfoRecord(item, priceData) {
        try {
            var core = getCore();
            var config = getConfig();

            var materialName = core.safeGet(item, config.fields.items.name, "Nezn√°my materi√°l");
            var dateFormatted = core.formatDate(priceData.documentDate, "DD.MM.YYYY HH:mm:ss");

            var infoMessage = "üí∞ AUTOMATICK√Å AKTUALIZ√ÅCIA CIEN MATERI√ÅLU\n";
            infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

            infoMessage += "üì¶ Materi√°l: " + materialName + "\n";
            var sourceText = priceData.isManualAction ? "manu√°lny prepoƒçet" : "pr√≠jemka";
            var scriptName = priceData.isManualAction ? "Materi√°l Prepoƒçet ceny Action v1.2.0" : "Pr√≠jemky materi√°lu Prepoƒçet v1.0.0";

            infoMessage += "üìÖ D√°tum: " + dateFormatted + "\n";
            infoMessage += "üîß Script: " + scriptName + "\n\n";

            infoMessage += "‚öôÔ∏è NASTAVENIA PREPOƒåTU:\n";
            infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            infoMessage += "‚Ä¢ Prepoƒçet ceny: " + priceData.priceCalculation + "\n";
            if (priceData.markupPercentage > 0) {
                infoMessage += "‚Ä¢ Obchodn√° prir√°≈æka: " + priceData.markupPercentage + "%\n";
            }
            infoMessage += "‚Ä¢ Sadzba DPH: " + priceData.vatRateType + " (" + priceData.vatRate + "%)\n";
            if (priceData.priceRounding && priceData.priceRounding !== "Nezaokr√∫hƒæova≈•") {
                var roundingText = getRoundingDescription(priceData.roundingValue);
                infoMessage += "‚Ä¢ Zaokr√∫hƒæovanie: " + priceData.priceRounding + " (" + roundingText + ")\n";
            }

            // Inform√°cie o kontrole zmeny n√°kupnej ceny
            if (priceData.previousPurchasePrice > 0 && priceData.changePercentage > 0) {
                infoMessage += "\nüîç KONTROLA ZMENY N√ÅKUPNEJ CENY:\n";
                infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
                infoMessage += "‚Ä¢ Predch√°dzaj√∫ca cena: " + core.formatMoney(priceData.previousPurchasePrice) + "\n";
                infoMessage += "‚Ä¢ Nov√° cena: " + core.formatMoney(priceData.originalPurchasePrice) + "\n";
                infoMessage += "‚Ä¢ Zmena: " + priceData.changePercentage.toFixed(2) + "% (" + priceData.changeDirection + ")\n";
                infoMessage += "‚Ä¢ Akcia: " + priceData.purchasePriceChangeAction + "\n";
                if (priceData.iconsAdded) {
                    infoMessage += "‚Ä¢ Pridan√© ikony: " + priceData.iconsAdded + "\n";
                }
            }
            infoMessage += "\n";

            infoMessage += "üí∏ N√ÅKUPN√â CENY (nezaokr√∫hƒæuj√∫ sa):\n";
            infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            infoMessage += "‚Ä¢ N√°kupn√° cena (" + sourceText + "): " + core.formatMoney(priceData.originalPurchasePrice) + "\n";
            infoMessage += "‚Ä¢ N√°kupn√° cena s DPH: " + core.formatMoney(priceData.originalPurchasePriceWithVat) + "\n";
            infoMessage += "\n";

            infoMessage += "üí∞ PREDAJN√â CENY (zaokr√∫hƒæuj√∫ sa s DPH):\n";
            infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            if (priceData.priceCalculation === "Podƒæa prir√°≈æky" && priceData.markupPercentage > 0) {
                infoMessage += "‚Ä¢ Z√°kladn√° n√°kupn√°: " + core.formatMoney(priceData.originalPurchasePrice) + "\n";
                infoMessage += "‚Ä¢ S prir√°≈ækou " + priceData.markupPercentage + "%: " + core.formatMoney(priceData.originalSellingPrice) + "\n";
            } else {
                infoMessage += "‚Ä¢ Predajn√° cena (= n√°kupn√°): " + core.formatMoney(priceData.originalSellingPrice) + "\n";
            }
            infoMessage += "‚Ä¢ Predajn√° s DPH (pred zaokr.): " + core.formatMoney(priceData.originalPriceWithVat) + "\n";
            if (priceData.priceRounding && priceData.priceRounding !== "Nezaokr√∫hƒæova≈•") {
                infoMessage += "‚Ä¢ Zaokr√∫hlen√° s DPH: " + core.formatMoney(priceData.finalPriceWithVat) + "\n";
                infoMessage += "‚Ä¢ Fin√°lna predajn√° bez DPH: " + core.formatMoney(priceData.finalPrice) + "\n";
            } else {
                infoMessage += "‚Ä¢ Bez zaokr√∫hƒæovania: " + core.formatMoney(priceData.finalPriceWithVat) + "\n";
            }
            infoMessage += "\n";

            infoMessage += "üìä FIN√ÅLNE HODNOTY V MATERI√ÅLI:\n";
            infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
            infoMessage += "‚Ä¢ N√°kupn√° cena: " + core.formatMoney(priceData.finalPurchasePrice) + "\n";
            infoMessage += "‚Ä¢ N√°kupn√° cena s DPH: " + core.formatMoney(priceData.finalPurchasePriceWithVat) + "\n";
            infoMessage += "‚Ä¢ Predajn√° cena: " + core.formatMoney(priceData.finalPrice) + "\n";
            infoMessage += "‚Ä¢ Predajn√° cena s DPH: " + core.formatMoney(priceData.finalPriceWithVat) + "\n";

            if (priceData.markupPercentage > 0) {
                var actualMargin = ((priceData.finalPrice - priceData.finalPurchasePrice) / priceData.finalPurchasePrice) * 100;
                infoMessage += "‚Ä¢ Skutoƒçn√° prir√°≈æka: " + actualMargin.toFixed(2) + "%\n";
            }

            // Inform√°cie o cenov√© hist√≥rii
            if (priceData.priceHistoryResult) {
                infoMessage += "\nüìà CENOV√Å HIST√ìRIA:\n";
                infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
                if (priceData.priceHistoryResult.success) {
                    if (priceData.priceHistoryResult.created) {
                        infoMessage += "‚Ä¢ Vytvoren√Ω nov√Ω z√°znam v kni≈ænici 'ceny materi√°lu'\n";
                        infoMessage += "‚Ä¢ D√°tum platnosti: " + core.formatDate(priceData.priceHistoryResult.date) + "\n";
                        infoMessage += "‚Ä¢ Cena: " + core.formatMoney(priceData.priceHistoryResult.newPrice) + "\n";
                    } else if (priceData.priceHistoryResult.updated) {
                        infoMessage += "‚Ä¢ Aktualizovan√Ω existuj√∫ci z√°znam v kni≈ænici 'ceny materi√°lu'\n";
                        infoMessage += "‚Ä¢ D√°tum platnosti: " + core.formatDate(priceData.priceHistoryResult.date) + "\n";
                        infoMessage += "‚Ä¢ Star√° cena: " + core.formatMoney(priceData.priceHistoryResult.oldPrice) + "\n";
                        infoMessage += "‚Ä¢ Nov√° cena: " + core.formatMoney(priceData.priceHistoryResult.newPrice) + "\n";
                    }
                } else {
                    infoMessage += "‚Ä¢ ‚ùå Chyba pri vytv√°ran√≠ z√°znamu: " + priceData.priceHistoryResult.message + "\n";
                }
            }

            infoMessage += "\n‚úÖ CENY AKTUALIZOVAN√â √öSPE≈†NE";

            // Nastavenie info z√°znamu do materi√°lu
            var materialInfoField = config.fields.common.info;
            core.safeSet(item, materialInfoField, infoMessage);

            core.addDebug(item, "‚úÖ Info z√°znam vytvoren√Ω pre materi√°l: " + materialName);

            return true;

        } catch (error) {
            var core = getCore();
            if (core) {
                core.addError(item, "Chyba pri vytv√°ran√≠ info z√°znamu pre materi√°l: " + error.toString(), "createMaterialInfoRecord", error);
            }
            return false;
        }
    }

    // ==============================================
    // DENN√ù REPORT MANAGEMENT
    // ==============================================

    /**
     * Univerz√°lna funkcia pre vytvorenie alebo aktualiz√°ciu z√°znamu v kni≈ænici Denn√Ω report
     * Funguje ako centr√°lny hub pre v≈°etky denn√© z√°znamy (Doch√°dzka, Z√°znam pr√°c, Kniha j√°zd, Poklad≈àa)
     *
     * @param {Entry} sourceEntry - Zdrojov√Ω z√°znam (Doch√°dzka, Z√°znam pr√°c, atƒè.)
     * @param {String} libraryType - Typ kni≈ænice ('attendance', 'workRecord', 'rideLog', 'cashBook')
     * @param {Object} options - Dodatoƒçn√© nastavenia
     * @returns {Object} V√Ωsledok oper√°cie s inform√°ciou o vytvoren√≠/aktualiz√°cii
     */
    function createOrUpdateDailyReport(sourceEntry, libraryType, options) {
        var core = getCore();
        var config = getConfig();

        try {
            if (!sourceEntry || !libraryType) {
                return {
                    success: false,
                    error: "Ch√Ωba sourceEntry alebo libraryType",
                    created: false,
                    updated: false
                };
            }

            // Z√≠skaj d√°tum zo zdrojov√©ho z√°znamu
            var sourceDate = null;
            switch (libraryType) {
                case 'attendance':
                    sourceDate = core.safeGet(sourceEntry, config.fields.attendance.date);
                    break;
                case 'workRecord':
                    sourceDate = core.safeGet(sourceEntry, config.fields.workRecord.date);
                    break;
                case 'rideLog':
                    sourceDate = core.safeGet(sourceEntry, config.fields.rideLog.date);
                    break;
                case 'cashBook':
                    sourceDate = core.safeGet(sourceEntry, config.fields.cashBook.date);
                    break;
                default:
                    return {
                        success: false,
                        error: "Nepoznan√Ω typ kni≈ænice: " + libraryType,
                        created: false,
                        updated: false
                    };
            }

            if (!sourceDate) {
                return {
                    success: false,
                    error: "Nena≈°iel sa d√°tum v zdrojovom z√°zname",
                    created: false,
                    updated: false
                };
            }

            var dateFormatted = moment(sourceDate).format('DD.MM.YYYY');

            // Pridaj debug inform√°cie ak s√∫ dostupn√©
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "üìÖ Spracov√°vam Denn√Ω report pre " + dateFormatted + " (" + libraryType + ")");
            }

            // N√°jdi existuj√∫ci z√°znam v Denn√Ω report pre dan√Ω d√°tum
            var dailyReportLibrary = config.libraries.dailyReport;

            // Kontrola ƒçi kni≈ænica existuje
            var dailyReportLib = libByName(dailyReportLibrary);
            if (!dailyReportLib) {
                var errorMsg = "Kni≈ænica '" + dailyReportLibrary + "' neexistuje alebo nie je dostupn√°";

                // Pridaj debug info o dostupn√Ωch kni≈æniciach
                if (options && options.debugEntry && core.addDebug) {
                    try {
                        var availableLibs = [];
                        for (var libName in lib()) {
                            availableLibs.push(libName);
                        }
                        core.addDebug(options.debugEntry, "üìö Dostupn√© kni≈ænice: " + availableLibs.slice(0, 10).join(", ") + (availableLibs.length > 10 ? "..." : ""));
                    } catch (e) {
                        core.addDebug(options.debugEntry, "‚ö†Ô∏è Nemo≈æno naƒç√≠ta≈• zoznam kni≈æn√≠c: " + e.toString());
                    }
                }

                if (options && options.debugEntry && core.addError) {
                    core.addError(options.debugEntry, errorMsg, "createOrUpdateDailyReport");
                }
                return {
                    success: false,
                    error: errorMsg,
                    created: false,
                    updated: false
                };
            }

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "‚úÖ Kni≈ænica '" + dailyReportLibrary + "' n√°jden√°");
            }

            var dailyReportEntries = dailyReportLib.entries();
            var existingDailyReport = null;

            for (var i = 0; i < dailyReportEntries.length; i++) {
                var entry = dailyReportEntries[i];
                var entryDate = core.safeGet(entry, config.fields.dailyReport.date);

                if (entryDate && moment(entryDate).format('DD.MM.YYYY') === dateFormatted) {
                    existingDailyReport = entry;
                    break;
                }
            }

            var result = {
                success: false,
                created: false,
                updated: false,
                dailyReportEntry: null,
                backLinkCreated: false
            };

            // Ak existuje, aktualizuj link
            if (existingDailyReport) {
                // Aktualizuj pr√≠slu≈°n√© pole podƒæa typu kni≈ænice
                var fieldToUpdate = null;
                switch (libraryType) {
                    case 'attendance':
                        fieldToUpdate = config.fields.dailyReport.attendance;
                        break;
                    case 'workRecord':
                        fieldToUpdate = config.fields.dailyReport.workRecord;
                        break;
                    case 'rideLog':
                        fieldToUpdate = config.fields.dailyReport.rideLog;
                        break;
                    case 'cashBook':
                        fieldToUpdate = config.fields.dailyReport.cashBook;
                        break;
                }

                if (fieldToUpdate) {
                    // Z√≠skaj existuj√∫ce linky
                    var existingLinks = core.safeGetLinks(existingDailyReport, fieldToUpdate) || [];

                    // Skontroluj ƒçi u≈æ link existuje
                    var linkExists = false;
                    for (var j = 0; j < existingLinks.length; j++) {
                        if (existingLinks[j].field("ID") === sourceEntry.field("ID")) {
                            linkExists = true;
                            break;
                        }
                    }

                    // Pridaj link ak neexistuje
                    if (!linkExists) {
                        existingLinks.push(sourceEntry);
                        core.safeSet(existingDailyReport, fieldToUpdate, existingLinks);

                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "üîó Aktualizovan√Ω link v existuj√∫com Denn√Ω report");
                        }
                    }

                    result.updated = true;
                    result.dailyReportEntry = existingDailyReport;
                }
            } else {
                // Vytvor nov√Ω z√°znam v Denn√Ω report
                var newDailyReport = dailyReportLib.create({});

                // Nastav d√°tum
                core.safeSet(newDailyReport, config.fields.dailyReport.date, sourceDate);

                // Nastav pr√≠slu≈°n√Ω link podƒæa typu kni≈ænice
                switch (libraryType) {
                    case 'attendance':
                        core.safeSet(newDailyReport, config.fields.dailyReport.attendance, [sourceEntry]);
                        break;
                    case 'workRecord':
                        core.safeSet(newDailyReport, config.fields.dailyReport.workRecord, [sourceEntry]);
                        break;
                    case 'rideLog':
                        core.safeSet(newDailyReport, config.fields.dailyReport.rideLog, [sourceEntry]);
                        break;
                    case 'cashBook':
                        core.safeSet(newDailyReport, config.fields.dailyReport.cashBook, [sourceEntry]);
                        break;
                }

                // Pridaj z√°kladn√Ω popis
                var description = "Denn√Ω report pre " + dateFormatted;
                core.safeSet(newDailyReport, config.fields.dailyReport.description, description);

                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "üìù Vytvoren√Ω nov√Ω Denn√Ω report");
                }

                result.created = true;
                result.dailyReportEntry = newDailyReport;
            }

            // Vytvor sp√§tn√Ω link v zdrojovom z√°zname na Denn√Ω report (ak je po≈æadovan√Ω)
            if (options && options.createBackLink && result.dailyReportEntry) {
                var backLinkField = null;

                // Urƒçi pole pre sp√§tn√Ω link podƒæa typu kni≈ænice
                // Pozn√°mka: T√Ωto polia musia existova≈• v konfiguraƒçn√Ωch sch√©mach kni≈æn√≠c
                switch (libraryType) {
                    case 'attendance':
                        // V Doch√°dzka m√¥≈æe by≈• pole "Denn√Ω report"
                        backLinkField = options.backLinkField || "Denn√Ω report";
                        break;
                    case 'workRecord':
                        backLinkField = options.backLinkField || "Denn√Ω report";
                        break;
                    case 'rideLog':
                        backLinkField = options.backLinkField || "Denn√Ω report";
                        break;
                    case 'cashBook':
                        backLinkField = options.backLinkField || "Denn√Ω report";
                        break;
                }

                if (backLinkField) {
                    try {
                        core.safeSet(sourceEntry, backLinkField, [result.dailyReportEntry]);
                        result.backLinkCreated = true;

                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "üîô Vytvoren√Ω sp√§tn√Ω link na Denn√Ω report");
                        }
                    } catch (backLinkError) {
                        // Sp√§tn√Ω link nie je kritick√Ω, pokraƒçuj bez neho
                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "‚ö†Ô∏è Nemo≈æno vytvori≈• sp√§tn√Ω link: " + backLinkError.toString());
                        }
                    }
                }
            }

            result.success = result.created || result.updated;

            if (options && options.debugEntry && core.addDebug) {
                var action = result.created ? "vytvoren√Ω" : "aktualizovan√Ω";
                core.addDebug(options.debugEntry, "‚úÖ Denn√Ω report " + action + " √∫spe≈°ne");
            }

            return result;

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri spracovan√≠ Denn√Ω report: " + error.toString(), "createOrUpdateDailyReport", error);
            }

            return {
                success: false,
                error: error.toString(),
                created: false,
                updated: false,
                backLinkCreated: false
            };
        }
    }

    // ==============================================
    // UNIVERZ√ÅLNA ARCHITEKT√öRA PRE V√ùKAZY
    // ==============================================

    /**
     * Univerz√°lna funkcia pre vytvorenie/aktualiz√°ciu v√Ωkazov
     * @param {Entry} sourceEntry - Zdrojov√Ω z√°znam (Kniha j√°zd, Z√°znam pr√°c, atƒè.)
     * @param {string} reportType - Typ v√Ωkazu ('work', 'ride', 'machines', 'materials')
     * @param {Object} calculatedData - Prepoƒç√≠tan√© d√°ta pre v√Ωkaz
     * @param {Object} options - Dodatoƒçn√© nastavenia
     * @returns {Object} V√Ωsledok oper√°cie
     */
    function createOrUpdateReport(sourceEntry, reportType, calculatedData, options) {
        var core = getCore();
        var config = getConfig();

        try {
            if (!sourceEntry || !reportType) {
                return {
                    success: false,
                    error: "Ch√Ωba sourceEntry alebo reportType",
                    created: false,
                    updated: false
                };
            }

            // Z√≠skaj konfigur√°ciu pre typ v√Ωkazu
            var reportConfig = config.reportConfigs ? config.reportConfigs[reportType] : null;
            if (!reportConfig) {
                return {
                    success: false,
                    error: "Nezn√°my typ v√Ωkazu: " + reportType,
                    created: false,
                    updated: false
                };
            }

            // Valid√°cia povinn√Ωch d√°t
            var validationResult = validateReportData(sourceEntry, reportConfig, calculatedData, options);
            if (!validationResult.success) {
                return validationResult;
            }

            var customer = validationResult.customer;
            var date = validationResult.date;

            // Vyhƒæadaj existuj√∫ci v√Ωkaz
            var existingReport = findExistingReport(customer, reportConfig, date, options);

            var report = null;
            var action = "none";

            if (existingReport) {
                report = existingReport;
                action = "update";
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  ‚úÖ Existuj√∫ci " + reportType + " v√Ωkaz n√°jden√Ω");
                }
            } else {
                // Vytvor nov√Ω v√Ωkaz
                report = createGenericReport(reportConfig, customer, date, validationResult.customerName, options);
                if (report) {
                    action = "create";
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "  ‚ú® Nov√Ω " + reportType + " v√Ωkaz vytvoren√Ω");
                    }
                } else {
                    return {
                        success: false,
                        error: "Nepodarilo sa vytvori≈• " + reportType + " v√Ωkaz",
                        created: false,
                        updated: false
                    };
                }
            }

            if (report) {
                // Prepoj zdrojov√Ω z√°znam s v√Ωkazom
                linkSourceToReport(report, sourceEntry, reportConfig, calculatedData, options);

                // ≈†peci√°lne linkovanie pre v√Ωkaz strojov
                if (reportType === 'machines' && options && options.machines) {
                    linkMachinesToReport(report, sourceEntry, options.machines, options);
                }

                // Aktualizuj s√∫ƒçty a atrib√∫ty a poƒçty
                updateReportSummary(report, reportConfig, calculatedData, options);
                updateReportCounts(report, reportConfig, reportType, options);

                // Aktualizuj info z√°znam
                updateReportInfo(report, reportType, reportConfig, calculatedData, options);

                return {
                    success: true,
                    report: report,
                    action: action,
                    created: action === "create",
                    updated: action === "update"
                };
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri spracovan√≠ " + reportType + " v√Ωkazu: " + error.toString(), "createOrUpdateReport", error);
            }
            return {
                success: false,
                error: error.toString(),
                created: false,
                updated: false
            };
        }
    }

    /**
     * Validuje vstupn√© d√°ta pre v√Ωkaz
     */
    function validateReportData(sourceEntry, reportConfig, calculatedData, options) {
        var core = getCore();

        try {
            var config = getConfig();

            // Z√≠skaj z√°kazku - pou≈æ√≠vaj spr√°vne n√°zvy pol√≠ z konfigur√°cie
            var customerField = null;
            var customerFieldNames = [
                config.fields.workRecord ? config.fields.workRecord.order : null,
                config.fields.rideLog ? config.fields.rideLog.orders : null,
                "Z√°kazka"  // fallback
            ].filter(function(name) { return name; }); // odstr√°≈à null hodnoty

            for (var i = 0; i < customerFieldNames.length; i++) {
                var fieldName = customerFieldNames[i];
                var testField = core.safeGetLinks(sourceEntry, fieldName);
                if (testField && testField.length > 0) {
                    customerField = testField;
                    break;
                }
            }

            if (!customerField || customerField.length === 0) {
                return {
                    success: false,
                    error: "Zdrojov√Ω z√°znam nem√° z√°kazku",
                    hasCustomer: false
                };
            }

            var customer = customerField[0];
            var customerName = core.safeGet(customer, "N√°zov", "N/A");

            // Z√≠skaj d√°tum - pou≈æ√≠vaj spr√°vne n√°zvy pol√≠ z konfigur√°cie
            var dateFieldNames = [
                config.fields.workRecord ? config.fields.workRecord.date : null,
                config.fields.rideLog ? config.fields.rideLog.date : null,
                config.fields.attendance ? config.fields.attendance.date : null,
                "D√°tum"  // fallback
            ].filter(function(name) { return name; }); // odstr√°≈à null hodnoty

            var date = null;

            for (var j = 0; j < dateFieldNames.length; j++) {
                var fieldName = dateFieldNames[j];
                var testDate = core.safeGet(sourceEntry, fieldName);
                if (testDate) {
                    date = testDate;
                    break;
                }
            }

            if (!date) {
                return {
                    success: false,
                    error: "Zdrojov√Ω z√°znam nem√° d√°tum",
                    hasCustomer: true,
                    customer: customer
                };
            }

            return {
                success: true,
                hasCustomer: true,
                customer: customer,
                customerName: customerName,
                date: date
            };

        } catch (error) {
            return {
                success: false,
                error: "Chyba pri valid√°cii: " + error.toString(),
                hasCustomer: false
            };
        }
    }

    /**
     * Vyhƒæad√° existuj√∫ci v√Ωkaz pre z√°kazku
     */
    function findExistingReport(customer, reportConfig, date, options) {
        var core = getCore();
        var config = getConfig();

        try {
            var reportLibraryName = config.libraries[reportConfig.library];
            if (!reportLibraryName) {
                if (options && options.debugEntry && core.addError) {
                    core.addError(options.debugEntry, "Kni≈ænica " + reportConfig.library + " nen√°jden√° v konfigur√°cii", "findExistingReport");
                }
                return null;
            }

            var orderFieldName = config.fields[reportConfig.library] ? config.fields[reportConfig.library].order : "Z√°kazka";
            var existingReports = customer.linksFrom(reportLibraryName, orderFieldName);

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "  üîç Hƒæadanie v√Ωkazu: " + reportLibraryName + " cez pole " + orderFieldName);
                core.addDebug(options.debugEntry, "  üì¶ N√°jden√© v√Ωkazy: " + (existingReports ? existingReports.length : 0));
            }

            if (existingReports && existingReports.length > 0) {
                return existingReports[0];
            }

            return null;

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri hƒæadan√≠ v√Ωkazu: " + error.toString(), "findExistingReport", error);
            }
            return null;
        }
    }

    /**
     * Vytvor√≠ nov√Ω v√Ωkaz s z√°kladn√Ωmi poƒæami
     */
    function createGenericReport(reportConfig, customer, date, customerName, options) {
        var core = getCore();
        var config = getConfig();

        try {
            var reportLibraryName = config.libraries[reportConfig.library];
            var reportLib = libByName(reportLibraryName);

            if (!reportLib) {
                if (options && options.debugEntry && core.addError) {
                    core.addError(options.debugEntry, "Kni≈ænica '" + reportLibraryName + "' nen√°jden√°", "createGenericReport");
                }
                return null;
            }

            var report = reportLib.create({});
            var reportFields = config.fields[reportConfig.library];

            if (!reportFields) {
                if (options && options.debugEntry && core.addError) {
                    core.addError(options.debugEntry, "Polia pre " + reportConfig.library + " nen√°jden√© v konfigur√°cii", "createGenericReport");
                }
                return null;
            }

            // Nastav z√°kladn√© polia
            var reportNumber = reportConfig.prefix + "-" + moment(date).format("YYYYMMDD");

            if (reportFields.date) core.safeSet(report, reportFields.date, date);
            if (reportFields.number) core.safeSet(report, reportFields.number, reportNumber);
            if (reportFields.description) core.safeSet(report, reportFields.description, "V√Ωkaz " + reportConfig.library + " - " + customerName);
            if (reportFields.order) core.safeSet(report, reportFields.order, [customer]);
            if (reportFields.state) core.safeSet(report, reportFields.state, "ƒåakaj√∫ce");

            return report;

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri vytv√°ran√≠ v√Ωkazu: " + error.toString(), "createGenericReport", error);
            }
            return null;
        }
    }

    /**
     * Prepoj√≠ zdrojov√Ω z√°znam s v√Ωkazom
     */
    function linkSourceToReport(report, sourceEntry, reportConfig, calculatedData, options) {
        var core = getCore();
        var config = getConfig();

        try {
            var reportFields = config.fields[reportConfig.library];
            var sourceFieldName = reportFields[reportConfig.sourceField];

            if (!sourceFieldName) {
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  ‚ö†Ô∏è Pole " + reportConfig.sourceField + " nen√°jden√©, preskakujem prepojenie");
                }
                return;
            }

            // D√îLE≈ΩIT√â: Toto funkcia prep√°ja iba zdrojov√Ω z√°znam (napr. Z√°znam pr√°c)
            // do spr√°vneho sp√§tn√©ho poƒæa vo v√Ωkaze (napr. "workRecord" v machines report)
            // Linkovanie strojov sa rie≈°i samostatne v linkMachinesToReport()

            var sourceRecords = core.safeGetLinks(report, sourceFieldName) || [];

            // Skontroluj ƒçi u≈æ nie je prepojen√Ω
            var isLinked = false;
            for (var i = 0; i < sourceRecords.length; i++) {
                if (sourceRecords[i] && core.safeGet(sourceRecords[i], "ID") === core.safeGet(sourceEntry, "ID")) {
                    isLinked = true;
                    break;
                }
            }

            if (!isLinked) {
                sourceRecords.push(sourceEntry);
                core.safeSet(report, sourceFieldName, sourceRecords);

                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  üîó Z√°znam prepojen√Ω s v√Ωkazom cez pole: " + sourceFieldName);
                }
            } else {
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  ‚ÑπÔ∏è Z√°znam u≈æ je prepojen√Ω s v√Ωkazom");
                }
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri prep√°jan√≠: " + error.toString(), "linkSourceToReport", error);
            }
        }
    }

    /**
     * Aktualizuje s√∫ƒçty na v√Ωkaze
     */
    function updateReportSummary(report, reportConfig, calculatedData, options) {
        var core = getCore();
        var config = getConfig();

        try {
            var reportFields = config.fields[reportConfig.library];

            if (!reportFields || !reportConfig.summaryFields) {
                return;
            }

            // Aktualizuj s√∫ƒçtov√© polia z calculatedData
            for (var i = 0; i < reportConfig.summaryFields.length; i++) {
                var summaryField = reportConfig.summaryFields[i];
                var fieldName = reportFields[summaryField];

                if (fieldName && calculatedData[summaryField] !== undefined) {
                    core.safeSet(report, fieldName, calculatedData[summaryField]);

                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "  üìä " + fieldName + " = " + calculatedData[summaryField]);
                    }
                }
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri aktualiz√°cii s√∫ƒçtov: " + error.toString(), "updateReportSummary", error);
            }
        }
    }

    /**
     * Vytvor√≠ alebo aktualizuje info z√°znam v√Ωkazu
     */
    function updateReportInfo(report, reportType, reportConfig, calculatedData, options) {
        var core = getCore();
        var config = getConfig();

        try {
            var reportFields = config.fields[reportConfig.library];
            var infoFieldName = reportFields ? reportFields.info : null;

            if (!infoFieldName) {
                return;
            }

            var reportNumber = core.safeGet(report, reportFields.number, "N/A");
            var customerName = "N/A";

            // Z√≠skaj n√°zov z√°kazky
            var customerField = core.safeGetLinks(report, reportFields.order);
            if (customerField && customerField.length > 0) {
                customerName = core.safeGet(customerField[0], "N√°zov", "N/A");
            }

            var info = createReportInfo(reportType, reportNumber, customerName, calculatedData, options);
            core.safeSet(report, infoFieldName, info);

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "  üìù Info z√°znam aktualizovan√Ω");
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri aktualiz√°cii info z√°znamu: " + error.toString(), "updateReportInfo", error);
            }
        }
    }

    /**
     * Vytvor√≠ ≈°tandardn√Ω Markdown info z√°znam pre v√Ωkaz
     */
    function createReportInfo(reportType, reportNumber, customerName, calculatedData, options) {
        try {
            var info = "# üìä V√ùKAZ " + reportType.toUpperCase() + " - AUTOMATICK√ù PREPOƒåET\n\n";
            info += "## üìÖ Z√°kladn√© √∫daje\n";
            info += "- **ƒå√≠slo v√Ωkazu:** " + reportNumber + "\n";
            info += "- **Z√°kazka:** " + customerName + "\n";
            info += "- **D√°tum:** " + moment().format("DD.MM.YYYY") + "\n\n";

            info += "## üìä S√öHRN\n";

            // Pridaj s√∫ƒçty z calculatedData
            if (calculatedData) {
                for (var key in calculatedData) {
                    if (calculatedData[key] !== null && calculatedData[key] !== undefined) {
                        var value = calculatedData[key];
                        var displayValue = typeof value === 'number' ?
                                         (key.toLowerCase().includes('sum') || key.toLowerCase().includes('total') || key.toLowerCase().includes('costs') ?
                                          value.toFixed(2) + " ‚Ç¨" : value.toString()) :
                                         value.toString();
                        info += "- **" + key + ":** " + displayValue + "\n";
                    }
                }
            }

            info += "\n## üîß TECHNICK√â INFORM√ÅCIE\n";
            info += "- **ƒåas spracovania:** " + moment().format("HH:mm:ss") + "\n";
            info += "- **MementoBusiness:** v" + version + "\n";
            info += "\n---\n**‚úÖ V√ùKAZ AKTUALIZOVAN√ù √öSPE≈†NE**";

            return info;

        } catch (error) {
            return "# üìä V√ùKAZ " + reportType.toUpperCase() + "\n\n‚ùå Chyba pri generovan√≠ info z√°znamu: " + error.toString();
        }
    }

    // ==============================================
    // PUBLIC API
    // ==============================================

    return {
        version: version,
        
        // ƒåasov√© v√Ωpoƒçty
        calculateWorkHours: calculateWorkHours,
        calculateWorkTime: calculateWorkTime,
        
        // Zamestnanci
        formatEmployeeName: formatEmployeeName,
        getEmployeeDetails: getEmployeeDetails,
        findEmployeeByNick: findEmployeeByNick,
        getActiveEmployees: getActiveEmployees,
        
        // Mzdy
        getEmployeeWageForDate: getEmployeeWageForDate,
        calculateDailyWage: calculateDailyWage,
        findValidHourlyRate: findValidHourlyRate,
        findValidSalary: findValidSalary,
        processEmployee: processEmployee,
        processEmployees: processEmployees,

        // hƒæadanie cien
        findValidPrice: findValidPrice,  // NOV√Å univerz√°lna funkcia
        findValidWorkPrice: findValidWorkPrice,  // Deprecated - pou≈æi≈• findValidPrice
        findValidMachinePrice: findValidMachinePrice,  // Deprecated - pou≈æi≈• findValidPrice
        findValidItemPrice: findValidItemPrice,  // Deprecated - pou≈æi≈• findValidPrice
        
        // ≈†tatistiky
        calculateMonthlyStats: calculateMonthlyStats,
          
        // Slovak locale helpers - NOV√â FUNKCIE
     
        
        // Reporting - NOV√Å FUNKCIA
        showProcessingSummary: showProcessingSummary,

        // Obligations
        createObligation: createObligation,
        updateObligation: updateObligation,
        findExistingObligations: findExistingObligations,
        findLinkedObligations: findLinkedObligations,

        // V√Ωpoƒçet mar≈æe a rentability
        calculateProfitability: calculateProfitability,

        // DPH funkcie
        getValidVatRate: getValidVatRate,

        // Materi√°l funkcie - NOV√â
        calculateAndUpdateMaterialPrices: calculateAndUpdateMaterialPrices,
        detectAllPriceChanges: detectAllPriceChanges,
        applyPriceRounding: applyPriceRounding,
        createMaterialInfoRecord: createMaterialInfoRecord,
        createOrUpdateMaterialPriceRecord: createOrUpdateMaterialPriceRecord,

        // Denn√Ω report - NOV√â
        createOrUpdateDailyReport: createOrUpdateDailyReport,

        // === UNIVERZ√ÅLNA ARCHITEKT√öRA PRE V√ùKAZY - NOV√â ===
        createOrUpdateReport: createOrUpdateReport,
        validateReportData: validateReportData,
        findExistingReport: findExistingReport,
        createGenericReport: createGenericReport,
        linkSourceToReport: linkSourceToReport,
        updateReportSummary: updateReportSummary,
        updateReportInfo: updateReportInfo,
        createReportInfo: createReportInfo,
        linkMachinesToReport: linkMachinesToReport,
        updateReportCounts: updateReportCounts
    };

    /**
     * Linkuje stroje do v√Ωkazu strojov s komplexnou logiku atrib√∫tov
     */
    function linkMachinesToReport(machinesReport, sourceEntry, machinesResult, options) {
        var core = getCore();
        var config = getConfig();
        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "üîó Linkujem stroje do v√Ωkazu strojov - NOV√Å LOGIKA");
            }

            // 1. Vytvor sp√§tn√Ω link na sourceEntry (pole Z√°znam pr√°ce)
            createWorkRecordBacklink(machinesReport, sourceEntry, options);

            // 2. Z√≠skaj stroje z currentEntry s atrib√∫tmi
            var currentMachines = getMachinesFromCurrentEntry(sourceEntry, options);

            // 3. Linkuj stroje s komplexnou logikou atrib√∫tov
            linkMachinesWithComplexLogic(machinesReport, currentMachines, options);

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, error.toString(), "linkMachinesToReport", error);
            }
        }
    }

    /**
     * Vytvor√≠ sp√§tn√Ω link na z√°znam pr√°ce
     */
    function createWorkRecordBacklink(machinesReport, sourceEntry, options) {
        var core = getCore();
        var config = getConfig();
        try {
            var workRecordField = core.safeGetLinks(machinesReport, config.fields.machinesReport.workRecord) || [];
            var sourceEntryId = core.safeGet(sourceEntry, "ID");

            // Skontroluj ƒçi link u≈æ existuje
            var linkExists = false;
            for (var i = 0; i < workRecordField.length; i++) {
                if (workRecordField[i] && core.safeGet(workRecordField[i], "ID") === sourceEntryId) {
                    linkExists = true;
                    break;
                }
            }

            if (!linkExists) {
                workRecordField.push(sourceEntry);
                core.safeSet(machinesReport, config.fields.machinesReport.workRecord, workRecordField);
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  ‚úÖ Sp√§tn√Ω link na z√°znam pr√°ce pridan√Ω");
                }
            } else {
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  ‚ÑπÔ∏è Sp√§tn√Ω link u≈æ existuje");
                }
            }
        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri vytv√°ran√≠ sp√§tn√©ho linku: " + error.toString());
            }
        }
    }

    /**
     * Z√≠ska stroje z currentEntry s ich atrib√∫tmi
     */
    function getMachinesFromCurrentEntry(sourceEntry, options) {
        var core = getCore();
        var config = getConfig();
        var machines = [];

        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "üìã Z√≠skavam stroje z z√°znamu pr√°ce");
            }

            // Z√≠skaj pole strojov z currentEntry
            var machineryField = core.safeGetLinks(sourceEntry, config.fields.workRecord.machinery);

            if (!machineryField || machineryField.length === 0) {
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  ‚ÑπÔ∏è ≈Ωiadne stroje v z√°zname pr√°ce");
                }
                return machines;
            }

            // Z√≠skaj pole ako array pre ƒç√≠tanie atrib√∫tov
            var machineryArray = core.safeGet(sourceEntry, config.fields.workRecord.machinery);

            for (var i = 0; i < machineryField.length; i++) {
                var machineEntry = machineryField[i];
                var machineId = core.safeGet(machineEntry, "ID");
                var machineName = core.safeGet(machineEntry, "N√°zov", "Nezn√°my stroj");

                // ƒå√≠taj atrib√∫ty z arrayov√©ho pr√≠stupu
                var machineAttrs = {
                    mth: 0,
                    pausalPocet: 0,
                    cenaMth: 0,
                    cenaPausal: 0,
                    totalPrice: 0,
                    calculationType: null
                };

                if (machineryArray && machineryArray.length > i && machineryArray[i]) {
                    try {
                        // Pou≈æij spr√°vne n√°zvy atrib√∫tov z currentEntry (workRecordMachines)
                        var workRecordAttrs = config.attributes.workRecordMachines;

                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "  üîç DEBUG getMachinesFromCurrentEntry - n√°zvy atrib√∫tov:");
                            core.addDebug(options.debugEntry, "    - calculationType: '" + workRecordAttrs.calculationType + "'");
                            core.addDebug(options.debugEntry, "    - usedMth: '" + workRecordAttrs.usedMth + "'");
                            core.addDebug(options.debugEntry, "    - priceMth: '" + workRecordAttrs.priceMth + "'");
                            core.addDebug(options.debugEntry, "    - flatRate: '" + workRecordAttrs.flatRate + "'");
                            core.addDebug(options.debugEntry, "    - totalPrice: '" + workRecordAttrs.totalPrice + "'");
                        }

                        var rawCalculationType = machineryArray[i].attr(workRecordAttrs.calculationType);
                        var rawMth = machineryArray[i].attr(workRecordAttrs.usedMth);
                        var rawPriceMth = machineryArray[i].attr(workRecordAttrs.priceMth);
                        var rawFlatRate = machineryArray[i].attr(workRecordAttrs.flatRate);
                        var rawTotalPrice = machineryArray[i].attr(workRecordAttrs.totalPrice);

                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "  üìä Preƒç√≠tan√© hodnoty atrib√∫tov:");
                            core.addDebug(options.debugEntry, "    - rawCalculationType: " + rawCalculationType);
                            core.addDebug(options.debugEntry, "    - rawMth: " + rawMth);
                            core.addDebug(options.debugEntry, "    - rawPriceMth: " + rawPriceMth);
                            core.addDebug(options.debugEntry, "    - rawFlatRate: " + rawFlatRate);
                            core.addDebug(options.debugEntry, "    - rawTotalPrice: " + rawTotalPrice);
                        }

                        machineAttrs.calculationType = rawCalculationType || "mth";

                        var totalPrice = parseFloat(rawTotalPrice) || 0;
                        var priceMth = parseFloat(rawPriceMth) || 0;
                        var flatRate = parseFloat(rawFlatRate) || 0;

                        // Pre MTH: vypoƒç√≠taj motohodiny z √∫ƒçtovanej sumy a sadzby
                        if (machineAttrs.calculationType === "mth") {
                            if (priceMth > 0 && totalPrice > 0) {
                                machineAttrs.mth = totalPrice / priceMth; // napr. 100 / 20 = 5 mth
                            } else {
                                machineAttrs.mth = parseFloat(rawMth) || 1; // fallback
                            }
                            machineAttrs.cenaMth = priceMth;
                            machineAttrs.cenaPausal = 0;
                            machineAttrs.pausalPocet = 0;
                        }
                        // Pre PAU≈†√ÅL: vypoƒç√≠taj poƒçet pau≈°√°lov z √∫ƒçtovanej sumy a ceny pau≈°√°lu
                        else if (machineAttrs.calculationType === "pau≈°√°l") {
                            if (flatRate > 0 && totalPrice > 0) {
                                machineAttrs.pausalPocet = Math.round(totalPrice / flatRate); // napr. 80 / 16 = 5
                            } else {
                                machineAttrs.pausalPocet = 1; // fallback
                            }
                            machineAttrs.cenaPausal = flatRate;
                            machineAttrs.mth = 0;
                            machineAttrs.cenaMth = 0;
                        }

                        machineAttrs.totalPrice = totalPrice;

                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "  üîß " + machineName + " - typ: " + machineAttrs.calculationType +
                                        ", mth: " + machineAttrs.mth + ", cenaMth: " + machineAttrs.cenaMth +
                                        ", cenaPausal: " + machineAttrs.cenaPausal + ", totalPrice: " + machineAttrs.totalPrice);
                        }

                    } catch (attrError) {
                        if (options && options.debugEntry && core.addError) {
                            core.addError(options.debugEntry, "Chyba pri ƒç√≠tan√≠ atrib√∫tov stroja " + machineName + ": " + attrError.toString());
                        }
                    }
                }

                machines.push({
                    machineEntry: machineEntry,
                    machineId: machineId,
                    machineName: machineName,
                    attributes: machineAttrs
                });
            }

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "  üìä Z√≠skan√Ωch strojov: " + machines.length);
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri z√≠skavan√≠ strojov: " + error.toString());
            }
        }

        return machines;
    }

    /**
     * Linkuje stroje s komplexnou logikou atrib√∫tov
     */
    function linkMachinesWithComplexLogic(machinesReport, currentMachines, options) {
        var core = getCore();
        var config = getConfig();

        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "‚öôÔ∏è Linkujem stroje s komplexnou logikou");
            }

            // Z√≠skaj existuj√∫ce linky na stroje vo v√Ωkaze
            // Pou≈æ√≠vame safeGetLinks pre z√≠skanie Entry objektov (na porovnanie ID)
            var existingMachinesEntries = core.safeGetLinks(machinesReport, config.fields.machinesReport.machines) || [];
            // Ale aj field() pre LinkEntry objekty s atrib√∫tmi
            var existingMachinesWithAttrs = machinesReport.field(config.fields.machinesReport.machines) || [];

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "  üì¶ Existuj√∫cich linkov: " + existingMachinesEntries.length);

                // Debug: V√Ωpis existuj√∫cich strojov
                for (var debugIdx = 0; debugIdx < existingMachinesEntries.length; debugIdx++) {
                    var debugEntry = existingMachinesEntries[debugIdx];
                    var debugWithAttrs = existingMachinesWithAttrs[debugIdx];
                    var debugId = core.safeGet(debugEntry, "ID");
                    var debugName = core.safeGet(debugEntry, "name") || "???";
                    var debugCalcType = "";
                    try {
                        if (debugWithAttrs && typeof debugWithAttrs.attr === 'function') {
                            debugCalcType = debugWithAttrs.attr(config.attributes.machinesReportMachines.calculationType) || "null";
                        }
                    } catch (e) {
                        debugCalcType = "error";
                    }
                    core.addDebug(options.debugEntry, "    üîπ [" + debugIdx + "] " + debugName + " (ID:" + debugId + ", typ:" + debugCalcType + ")");
                }
            }

            // Pre ka≈æd√Ω stroj z currentEntry
            for (var i = 0; i < currentMachines.length; i++) {
                var currentMachine = currentMachines[i];
                var machineId = currentMachine.machineId;
                var machineName = currentMachine.machineName;
                var newAttrs = currentMachine.attributes;

                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  üöú Sprac√∫vam stroj: " + machineName + " (ID: " + machineId + ")");
                }

                // N√°jdi existuj√∫ci link na tento stroj
                var existingLink = findExistingMachineLink(existingMachinesEntries, existingMachinesWithAttrs, machineId, newAttrs.calculationType, options);

                if (existingLink.found && existingLink.canAggregate) {
                    // Aktualizuj existuj√∫ci link (rovnak√Ω stroj + rovnak√Ω typ √∫ƒçtovania)
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "    ‚ôªÔ∏è  Aktualizujem existuj√∫ci link");
                    }
                    updateExistingMachineLink(existingLink.linkObject, newAttrs, machineName, options);
                } else if (existingLink.found && !existingLink.canAggregate) {
                    // N√°jden√Ω stroj s IN√ùM typom √∫ƒçtovania - SKIP (alebo warning)
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "    ‚ö†Ô∏è  Stroj existuje ale s in√Ωm typom √∫ƒçtovania (" + existingLink.existingType + " vs " + newAttrs.calculationType + ") - preskakujem");
                    }
                } else {
                    // Vytvor nov√Ω link
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "    ‚ûï Vytv√°ram nov√Ω link");
                    }
                    createNewMachineLink(machinesReport, currentMachine.machineEntry, newAttrs, machineName, options);
                }
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri linkovan√≠ strojov: " + error.toString());
            }
        }
    }

    /**
     * N√°jde existuj√∫ci link na stroj s kompatibiln√Ωm typom √∫ƒçtovania
     */
    function findExistingMachineLink(existingMachinesEntries, existingMachinesWithAttrs, machineId, calculationType, options) {
        var core = getCore();
        var config = getConfig();

        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "üîç Hƒæad√°m existuj√∫ci link pre stroj ID: " + machineId + ", typ: " + calculationType);
            }

            // Prejdi existuj√∫ce linky na stroje vo v√Ωkaze
            for (var i = 0; i < existingMachinesEntries.length; i++) {
                var existingMachineEntry = existingMachinesEntries[i]; // Entry objekt (na porovnanie ID)
                var existingMachineWithAttrs = existingMachinesWithAttrs[i]; // LinkEntry objekt (na ƒç√≠tanie atrib√∫tov)
                var existingMachineId = core.safeGet(existingMachineEntry, "ID");

                // Debug: porovnanie ID
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "      üîç Porovn√°vam ID: " + existingMachineId + " vs " + machineId);
                }

                if (existingMachineId === machineId) {
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "  ‚úÖ N√°jden√Ω existuj√∫ci link pre stroj ID: " + machineId);
                    }

                    // Skontroluj typ √∫ƒçtovania priamym pr√≠stupom k atrib√∫tu
                    var existingCalculationType = null;
                    try {
                        if (existingMachineWithAttrs && typeof existingMachineWithAttrs.attr === 'function') {
                            existingCalculationType = existingMachineWithAttrs.attr(config.attributes.machinesReportMachines.calculationType);
                            if (options && options.debugEntry && core.addDebug) {
                                core.addDebug(options.debugEntry, "    üìä Existuj√∫ci calculationType: " + existingCalculationType);
                            }
                        }
                    } catch (e) {
                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "    ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ calculationType: " + e.toString());
                        }
                    }

                    // Ak je typ kompatibiln√Ω (rovnak√Ω alebo nevyplnen√Ω), m√¥≈æeme agregova
                    var canAggregate = !existingCalculationType || existingCalculationType === calculationType;

                    return {
                        found: true,
                        canAggregate: canAggregate,
                        linkObject: existingMachineWithAttrs, // Vr√°≈• LinkEntry objekt s atrib√∫tmi!
                        existingType: existingCalculationType,
                        index: i
                    };
                }
            }

            // Ak nebol n√°jden√Ω ≈æiadny existuj√∫ci link
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "  ‚ùå ≈Ωiadny existuj√∫ci link pre stroj ID: " + machineId);
            }

            return {
                found: false,
                canAggregate: false,
                linkObject: null,
                existingType: null
            };

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, error.toString(), "findExistingMachineLink", error);
            }
            return {};
        }
    }

    /**
     * Linkuje agregovan√© stroje do v√Ωkazu
     */
    function linkAggregatedMachines(machinesReport, aggregatedMachines, options) {
        var core = getCore();
        var config = getConfig();
        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "üöú Vytv√°ram LinkToEntry pre stroje vo v√Ωkaze");
            }

            // Z√≠skaj s√∫ƒçasn√© linky na stroje vo v√Ωkaze
            var existingMachines = core.safeGetLinks(machinesReport, config.fields.machinesReport.machines) || [];
            var updatedMachines = [];

            // Skop√≠ruj existuj√∫ce linky
            for (var i = 0; i < existingMachines.length; i++) {
                updatedMachines.push(existingMachines[i]);
            }

            // Spracuj agregovan√© stroje
            for (var machineId in aggregatedMachines) {
                var aggData = aggregatedMachines[machineId];
                var machineEntry = aggData.machineEntry;

                // DEBUG: Overenie typov a obsahu
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  üîç DEBUG machineEntry ID: " + machineId);
                    core.addDebug(options.debugEntry, "  üîç DEBUG machineEntry type: " + (typeof machineEntry));
                    if (machineEntry && typeof machineEntry === 'object') {
                        core.addDebug(options.debugEntry, "  üîç DEBUG machineEntry ID field: " + core.safeGet(machineEntry, "ID"));
                        core.addDebug(options.debugEntry, "  üîç DEBUG machineEntry name: " + core.safeGet(machineEntry, "N√°zov"));
                    }
                }

                // Skontroluj ƒçi u≈æ existuje link na tento stroj
                var existingIndex = -1;
                for (var j = 0; j < updatedMachines.length; j++) {
                    if (updatedMachines[j] && core.safeGet(updatedMachines[j], "ID") === machineId) {
                        existingIndex = j;
                        break;
                    }
                }

                if (existingIndex === -1) {
                    // Pridaj nov√Ω link - ale iba ak je machineEntry validn√Ω
                    if (machineEntry && typeof machineEntry === 'object') {
                        updatedMachines.push(machineEntry);
                        existingIndex = updatedMachines.length - 1;
                        if (options && options.debugEntry && core.addDebug) {
                            core.addDebug(options.debugEntry, "  ‚ûï Pridan√Ω nov√Ω link na stroj: " + aggData.machineData.name);
                        }
                    } else {
                        if (options && options.debugEntry && core.addError) {
                            core.addError(options.debugEntry, "‚ùå Nevalidn√Ω machineEntry pre ID: " + machineId);
                        }
                    }
                } else {
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "  üîÑ Aktualizujem existuj√∫ci link na stroj: " + aggData.machineData.name);
                    }
                }
            }

            // Nastav aktualizovan√© pole strojov
            core.safeSet(machinesReport, config.fields.machinesReport.machines, updatedMachines);
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "‚úÖ Pole Stroje nastaven√© s " + updatedMachines.length + " linkmi");
            }

            // Teraz nastav atrib√∫ty pre ka≈æd√Ω stroj
            setMachineAttributes(machinesReport, aggregatedMachines, options);

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, error.toString(), "linkAggregatedMachines", error);
            }
        }
    }

    /**
     * Nastavuje atrib√∫ty pre stroje vo v√Ωkaze
     */
    function setMachineAttributes(machinesReport, aggregatedMachines, options) {
        var core = getCore();
        var config = getConfig();
        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "üîß Nastavujem atrib√∫ty strojov");
            }

            // D√îLE≈ΩIT√â: Pre nastavenie atrib√∫tov MUS√çME pou≈æi≈• field() aby sme z√≠skali LinkEntry objekty
            var machinesArray = machinesReport.field(config.fields.machinesReport.machines);

            if (!machinesArray || machinesArray.length === 0) {
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "‚ö†Ô∏è Pole strojov je pr√°zdne");
                }
                return;
            }

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "‚úÖ Pole strojov naƒç√≠tan√© cez field(): " + machinesArray.length + " polo≈æiek");
            }

            // Pre ka≈æd√Ω stroj nastav atrib√∫ty
            for (var i = 0; i < machinesArray.length; i++) {
                var machineInArray = machinesArray[i];

                if (!machineInArray) {
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "‚ö†Ô∏è Pr√°zdny stroj na poz√≠cii " + i);
                    }
                    continue;
                }

                var machineId = core.safeGet(machineInArray, "ID");
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  üîç Sprac√∫vam stroj ID: " + machineId);
                }

                // N√°jdi agregovan√© d√°ta pre tento stroj
                var aggData = aggregatedMachines[machineId];

                if (aggData) {
                    var attributes = config.attributes.machinesReportMachines;

                    // Nastav atrib√∫ty podƒæa typu √∫ƒçtovania
                    // Pou≈æij skutoƒçn√∫ celkov√∫ cenu z agregovan√Ωch d√°t
                    var totalCelkom = aggData.totalPrice || 0;

                    try {
                        if (aggData.totalMth > 0) {
                            // √öƒçtovanie podƒæa motohod√≠n
                            machineInArray.setAttr(attributes.mth, aggData.totalMth);
                            machineInArray.setAttr(attributes.cenaMth, aggData.priceMth);
                            if (options && options.debugEntry && core.addDebug) {
                                core.addDebug(options.debugEntry, "    üìä MTH: " + aggData.totalMth + " √ó " + aggData.priceMth + "‚Ç¨");
                            }
                        }

                        if (aggData.flatRateCount > 0) {
                            // √öƒçtovanie pau≈°√°lom
                            machineInArray.setAttr(attributes.pausalPocet, aggData.flatRateCount);
                            machineInArray.setAttr(attributes.cenaPausal, aggData.flatRatePrice);
                            if (options && options.debugEntry && core.addDebug) {
                                core.addDebug(options.debugEntry, "    üìä Pau≈°√°l: " + aggData.flatRateCount + " √ó " + aggData.flatRatePrice + "‚Ç¨");
                            }
                        }

                        // Nastav celkov√∫ cenu z agregovan√Ωch d√°t
                        machineInArray.setAttr(attributes.cenaCelkom, totalCelkom);

                    } catch (attrError) {
                        if (options && options.debugEntry && core.addError) {
                            core.addError(options.debugEntry, "Chyba pri nastavovan√≠ atrib√∫tov pre stroj " + machineId + ": " + attrError.toString());
                        }
                    }

                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "    ‚úÖ " + aggData.machineData.name + " - celkom: " + totalCelkom + "‚Ç¨");
                    }
                } else {
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "  ‚ö†Ô∏è Nena≈°li sa agregovan√© d√°ta pre stroj ID: " + machineId);
                    }
                }
            }

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "üîó Nastavenie atrib√∫tov dokonƒçen√© pre " + machinesArray.length + " strojov");
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, error.toString(), "setMachineAttributes", error);
            }
        }
    }

    /**
     * Aktualizuje poƒç√≠tacie polia vo v√Ωkazoch
     */
    function updateReportCounts(report, reportConfig, reportType, options) {
        var core = getCore();
        var config = getConfig();
        try {
            var reportFields = config.fields[reportConfig.library];
            if (!reportFields) {
                return;
            }

            // Poƒçet z√°znamov (LinkToEntry z Z√°znam pr√°c)
            if (reportFields.pocetZaznamov && reportFields.workRecord) {
                var workRecords = core.safeGetLinks(report, reportFields.workRecord) || [];
                core.safeSet(report, reportFields.pocetZaznamov, workRecords.length);
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  üìä Poƒçet z√°znamov: " + workRecords.length);
                }
            }

            // Poƒçet strojov (LinkToEntry z Mechaniz√°cia) - iba pre v√Ωkaz strojov
            if (reportType === 'machines' && reportFields.pocetStrojov && reportFields.machines) {
                var machines = core.safeGetLinks(report, reportFields.machines) || [];
                core.safeSet(report, reportFields.pocetStrojov, machines.length);
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  üìä Poƒçet strojov: " + machines.length);
                }
            }

            // Poƒçet z√°znamov pre v√Ωkaz pr√°c (LinkToEntry z workRecords)
            if (reportType === 'work' && reportFields.hzsCount && reportFields.workRecords) {
                var workRecordsCount = core.safeGetLinks(report, reportFields.workRecords) || [];
                core.safeSet(report, reportFields.hzsCount, workRecordsCount.length);
                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "  üìä HZS Count: " + workRecordsCount.length);
                }
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri aktualiz√°cii poƒçtov: " + error.toString(), "updateReportCounts", error);
            }
        }
    }

    /**
     * N√°jde existuj√∫ci link na stroj s kompatibiln√Ωm typom √∫ƒçtovania
     */
    function findExistingMachineLink(existingMachinesArray, machineId, calculationType, options) {
        var core = getCore();
        var config = getConfig();

        try {
            for (var i = 0; i < existingMachinesArray.length; i++) {
                var existingMachine = existingMachinesArray[i];
                var existingMachineId = core.safeGet(existingMachine, "ID");

                if (existingMachineId === machineId) {
                    // Skontroluj typ √∫ƒçtovania v existuj√∫com linku
                    var attrs = config.attributes.machinesReportMachines;
                    var existingMth = existingMachine.getAttr(attrs.mth) || 0;
                    var existingPausal = existingMachine.getAttr(attrs.pausalPocet) || 0;

                    var existingType = (existingMth > 0) ? "mth" : "pau≈°√°l";

                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "    üîç Existuj√∫ci link - typ: " + existingType +
                                    ", nov√Ω typ: " + calculationType);
                    }

                    // Ak je typ kompatibiln√Ω, vr√°≈• tento link
                    if (existingType === calculationType) {
                        return {
                            found: true,
                            linkObject: existingMachine,
                            index: i
                        };
                    }
                }
            }

            return { found: false };

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri hƒæadan√≠ existuj√∫ceho linku: " + error.toString());
            }
            return { found: false };
        }
    }

    /**
     * Aktualizuje existuj√∫ci link na stroj
     */
    function updateExistingMachineLink(linkObject, newAttrs, machineName, options) {
        var core = getCore();
        var config = getConfig();

        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "    üîÑ Aktualizujem existuj√∫ci link pre: " + machineName);
            }

            var attrs = config.attributes.machinesReportMachines;

            // Z√≠skaj existuj√∫ce hodnoty
            var existingMth = parseFloat(linkObject.attr(attrs.mth)) || 0;
            var existingPausal = parseFloat(linkObject.attr(attrs.pausalPocet)) || 0;
            var existingCenaMth = parseFloat(linkObject.attr(attrs.cenaMth)) || 0;
            var existingCenaPausal = parseFloat(linkObject.attr(attrs.cenaPausal)) || 0;

            // Aktualizuj hodnoty podƒæa typu √∫ƒçtovania
            if (newAttrs.calculationType === "mth") {
                // Sƒç√≠taj motohodiny (agreg√°cia)
                var newMth = existingMth + newAttrs.mth;
                linkObject.setAttr(attrs.mth, newMth);

                // Porovnaj a aktualizuj cenu (pou≈æij nov≈°iu cenu ak sa zmenila)
                var finalCenaMth = newAttrs.cenaMth;
                if (existingCenaMth > 0 && existingCenaMth !== newAttrs.cenaMth) {
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "      ‚ö†Ô∏è Cena MTH sa zmenila: " + existingCenaMth + "‚Ç¨ ‚Üí " + newAttrs.cenaMth + "‚Ç¨");
                    }
                }
                linkObject.setAttr(attrs.cenaMth, finalCenaMth);
                linkObject.setAttr(attrs.calculationType, newAttrs.calculationType);

                // Prepoƒç√≠taj celkov√∫ cenu z agregovan√Ωch hodn√¥t
                var newTotal = newMth * finalCenaMth;
                linkObject.setAttr(attrs.cenaCelkom, newTotal);

                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "      üìä MTH agreg√°cia: " + existingMth + "+" + newAttrs.mth + "=" + newMth +
                                " mth √ó " + finalCenaMth + "‚Ç¨ = " + newTotal + "‚Ç¨");
                }

            } else if (newAttrs.calculationType === "pau≈°√°l") {
                // Sƒç√≠taj poƒçet pau≈°√°lov (agreg√°cia)
                var newPausal = existingPausal + newAttrs.pausalPocet;
                linkObject.setAttr(attrs.pausalPocet, newPausal);

                // Porovnaj a aktualizuj cenu (pou≈æij nov≈°iu cenu ak sa zmenila)
                var finalCenaPausal = newAttrs.cenaPausal;
                if (existingCenaPausal > 0 && existingCenaPausal !== newAttrs.cenaPausal) {
                    if (options && options.debugEntry && core.addDebug) {
                        core.addDebug(options.debugEntry, "      ‚ö†Ô∏è Cena pau≈°√°l sa zmenila: " + existingCenaPausal + "‚Ç¨ ‚Üí " + newAttrs.cenaPausal + "‚Ç¨");
                    }
                }
                linkObject.setAttr(attrs.cenaPausal, finalCenaPausal);
                linkObject.setAttr(attrs.calculationType, newAttrs.calculationType);

                // Prepoƒç√≠taj celkov√∫ cenu z agregovan√Ωch hodn√¥t
                var newTotal = newPausal * finalCenaPausal;
                linkObject.setAttr(attrs.cenaCelkom, newTotal);

                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "      üìä Pau≈°√°l agreg√°cia: " + existingPausal + "+" + newAttrs.pausalPocet + "=" + newPausal +
                                " ks √ó " + finalCenaPausal + "‚Ç¨ = " + newTotal + "‚Ç¨");
                }
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri aktualiz√°cii existuj√∫ceho linku: " + error.toString());
            }
        }
    }

    /**
     * Vytvor√≠ nov√Ω link na stroj vo v√Ωkaze
     */
    function createNewMachineLink(machinesReport, machineEntry, newAttrs, machineName, options) {
        var core = getCore();
        var config = getConfig();

        try {
            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "    ‚ûï Vytv√°ram nov√Ω link pre: " + machineName);
            }

            // Z√≠skaj existuj√∫ce pole strojov (Entry objekty pre pridanie)
            var existingMachines = core.safeGetLinks(machinesReport, config.fields.machinesReport.machines) || [];

            // Pridaj nov√Ω stroj
            existingMachines.push(machineEntry);
            core.safeSet(machinesReport, config.fields.machinesReport.machines, existingMachines);

            // D√îLE≈ΩIT√â: Teraz mus√≠me z√≠ska≈• LinkEntry objekt cez field() pre nastavenie atrib√∫tov
            var machinesFieldWithAttrs = machinesReport.field(config.fields.machinesReport.machines);
            var newlyAddedMachine = machinesFieldWithAttrs[machinesFieldWithAttrs.length - 1];
            var attrs = config.attributes.machinesReportMachines;

            if (options && options.debugEntry && core.addDebug) {
                core.addDebug(options.debugEntry, "  üîç DEBUG createNewMachineLink - n√°zvy atrib√∫tov v√Ωkazu:");
                core.addDebug(options.debugEntry, "    - mth: '" + attrs.mth + "'");
                core.addDebug(options.debugEntry, "    - cenaMth: '" + attrs.cenaMth + "'");
                core.addDebug(options.debugEntry, "    - pausalPocet: '" + attrs.pausalPocet + "'");
                core.addDebug(options.debugEntry, "    - cenaPausal: '" + attrs.cenaPausal + "'");
                core.addDebug(options.debugEntry, "    - cenaCelkom: '" + attrs.cenaCelkom + "'");
                core.addDebug(options.debugEntry, "    - calculationType: '" + attrs.calculationType + "'");
                core.addDebug(options.debugEntry, "  üì• Hodnoty na z√°pis:");
                core.addDebug(options.debugEntry, "    - newAttrs.calculationType: " + newAttrs.calculationType);
                core.addDebug(options.debugEntry, "    - newAttrs.mth: " + newAttrs.mth);
                core.addDebug(options.debugEntry, "    - newAttrs.cenaMth: " + newAttrs.cenaMth);
            }

            if (newAttrs.calculationType === "mth") {
                newlyAddedMachine.setAttr(attrs.mth, newAttrs.mth);
                newlyAddedMachine.setAttr(attrs.cenaMth, newAttrs.cenaMth);
                newlyAddedMachine.setAttr(attrs.pausalPocet, 0);
                newlyAddedMachine.setAttr(attrs.cenaPausal, 0);
                newlyAddedMachine.setAttr(attrs.calculationType, newAttrs.calculationType);

                // Prepoƒç√≠taj celkov√∫ cenu
                var totalPrice = newAttrs.mth * newAttrs.cenaMth;
                newlyAddedMachine.setAttr(attrs.cenaCelkom, totalPrice);

                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "      üìä Nov√Ω MTH link: " + newAttrs.mth + " mth √ó " + newAttrs.cenaMth + "‚Ç¨ = " + totalPrice + "‚Ç¨");
                }

            } else if (newAttrs.calculationType === "pau≈°√°l") {
                newlyAddedMachine.setAttr(attrs.pausalPocet, newAttrs.pausalPocet);
                newlyAddedMachine.setAttr(attrs.cenaPausal, newAttrs.cenaPausal);
                newlyAddedMachine.setAttr(attrs.mth, 0);
                newlyAddedMachine.setAttr(attrs.cenaMth, 0);
                newlyAddedMachine.setAttr(attrs.calculationType, newAttrs.calculationType);

                // Prepoƒç√≠taj celkov√∫ cenu
                var totalPrice = newAttrs.pausalPocet * newAttrs.cenaPausal;
                newlyAddedMachine.setAttr(attrs.cenaCelkom, totalPrice);

                if (options && options.debugEntry && core.addDebug) {
                    core.addDebug(options.debugEntry, "      üìä Nov√Ω pau≈°√°l link: " + newAttrs.pausalPocet + " ks √ó " + newAttrs.cenaPausal + "‚Ç¨ = " + totalPrice + "‚Ç¨");
                }
            }

        } catch (error) {
            if (options && options.debugEntry && core.addError) {
                core.addError(options.debugEntry, "Chyba pri vytv√°ran√≠ nov√©ho linku: " + error.toString());
            }
        }
    }

})();

// // Potom v Doch√°dzka Prepoƒçet 7 m√¥≈æe≈° pou≈æ√≠va≈•:

// // Cez MementoUtils (ak MementoBusiness je naƒç√≠tan√©):
// var dayName = utils.getDayNameSK(moment(date).day());
// var hodinovka = utils.findValidHourlyRate(zamestnanec, datum);

// // Alebo priamo cez MementoBusiness:
// if (typeof MementoBusiness !== 'undefined') {
//     var dayName = MementoBusiness.getDayNameSK(moment(date).day());
//     var hodinovka = MementoBusiness.findValidHourlyRate(zamestnanec, datum);
// }