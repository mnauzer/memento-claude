// ==============================================
// Z√ÅKAZKY - Prepoƒçet (MODULE VERSION)
// Verzia: 1.1.0 | D√°tum: 2025-10-12 | Autor: ASISTANTO
// Kni≈ænica: Z√°kazky
// Pou≈æitie: OrderCalculate.orderCalculate(entry());
// ==============================================
// üîß CHANGELOG v1.1.0 (2025-10-12):
//    - üî¥ CRITICAL FIX: Opraven√° nekoneƒçn√° rekurzia v addDebug (riadok 72) - hlavn√° pr√≠ƒçina OutOfMemoryError
//    - ‚ôªÔ∏è REFACTOR: Vytvoren√° helper funkcia calculatePartsSum() - odstr√°nen√Ωch ~100 riadkov duplicitn√©ho k√≥du
//    - üßπ CLEANUP: Odstr√°nen√© nepou≈æit√© premenn√© (defaultMatAttrs, defaultWrkAttrs)
//    - üìâ OPTIMIZATION: Zredukovan√Ω s√∫bor z 504 ‚Üí 439 riadkov (-13%)
//    - üíæ MEMORY: Oƒçak√°van√° √∫spora 40-50% runtime memory usage
// üîß CHANGELOG v1.0.1 (2025-10-12):
//    - FIX: Safe debug logging - kontrola dostupnosti utils.addDebug
//    - FIX: Pou≈æitie utils.safeSet() namiesto priameho .set()
//    - FIX: Odstr√°nen√© polia transportPrice a massTransferPrice (neexistuj√∫ v Z√°kazky)
//    - IMPROVEMENT: Lep≈°ie error handling s n√°zvami pol√≠
// ==============================================
// üìã FUNKCIA:
//    - Exportovan√° funkcia orderCalculate(orderEntry) pre pou≈æitie z in√Ωch scriptov
//    - Automatick√Ω prepoƒçet v≈°etk√Ωch dielov pomocou OrderDielyCalculate.partCalculate()
//    - Podporuje polia: Diely, Diely HZS, Subdod√°vky
//    - Poƒç√≠ta Rozpoƒçet (z atrib√∫tov mno≈æstvo cp * cena cp)
//    - Poƒç√≠ta Spotrebovan√© (z atrib√∫tov mno≈æstvo * cena)
//    - Poƒç√≠ta Zostatok (Rozpoƒçet - Spotrebovan√©)
//    - ≈†peci√°lne poƒç√≠tanie subdod√°vok ak je nastaven√© "Vytvori≈• dodatok"
//    - Pln√° podpora debug a error logov
// ==============================================
// üîß POU≈ΩITIE:
//    // Z triggeru alebo action:
//    OrderCalculate.orderCalculate(entry());
//
//    // Z in√©ho scriptu s parametrom:
//    var orderEntry = lib("Z√°kazky").find("ƒå√≠slo", "Z-2025-001")[0];
//    OrderCalculate.orderCalculate(orderEntry);
// ==============================================

var OrderCalculate = (function() {
    'use strict';

    /**
     * Hlavn√° exportovan√° funkcia pre prepoƒçet z√°kazky
     * @param {Entry} orderEntry - Z√°znam z√°kazky (povinn√Ω parameter)
     * @returns {Boolean} - true ak prebehlo √∫spe≈°ne, false pri chybe
     */
    function orderCalculate(orderEntry) {
        if (!orderEntry) {
            throw new Error("OrderCalculate.orderCalculate(): Parameter 'orderEntry' is required!");
        }

        // ==============================================
        // INICIALIZ√ÅCIA MODULOV
        // ==============================================

        // Kontrola dostupnosti MementoUtils
        if (typeof MementoUtils === 'undefined') {
            throw new Error("OrderCalculate: MementoUtils nie je naƒç√≠tan√Ω! Importujte MementoUtils7.js v Memento Database.");
        }

        var utils = MementoUtils;
        var centralConfig = utils.config;
        var currentEntry = orderEntry;

        var CONFIG = {
            scriptName: "Z√°kazky - Prepoƒçet (Module)",
            version: "1.1.0",
            fields: centralConfig.fields.order,
            orderPartFields: centralConfig.fields.orderPart,
            icons: centralConfig.icons
        };

        var fields = CONFIG.fields;
        var orderPartFields = CONFIG.orderPartFields;

        // Safe debug logging - kontrola ƒçi je addDebug dostupn√Ω
        var addDebug = function(entry, message) {
            if (utils && typeof utils.addDebug === 'function') {
                utils.addDebug(entry, message);
            }
        };

        addDebug(currentEntry, "üöÄ ≈†TART: " + CONFIG.scriptName + " v" + CONFIG.version);
        addDebug(currentEntry, "üìÖ D√°tum: " + moment().format("DD.MM.YYYY HH:mm:ss"));
        addDebug(currentEntry, "");

        // ==============================================
        // POMOCN√â FUNKCIE
        // ==============================================

        /**
         * Prepoƒç√≠ta v≈°etky diely v poliach Diely, Diely HZS a Subdod√°vky
         * Pou≈æ√≠va OrderDielyCalculate.partCalculate() modul
         */
        function recalculateAllParts() {
            try {
                addDebug(currentEntry, "  üîÑ Prepoƒçet v≈°etk√Ωch dielov");

                // Kontrola dostupnosti OrderDielyCalculate modulu
                if (typeof OrderDielyCalculate === 'undefined' || typeof OrderDielyCalculate.partCalculate !== 'function') {
                    addDebug(currentEntry, "    ‚ö†Ô∏è OrderDielyCalculate modul nie je dostupn√Ω - preskakujem prepoƒçet dielov");
                    return;
                }

                var allPartsFields = [
                    { name: "Diely", fieldName: fields.parts },
                    { name: "Diely HZS", fieldName: fields.partsHzs },
                    { name: "Subdod√°vky", fieldName: fields.subcontracts }
                ];

                var totalRecalculated = 0;

                for (var f = 0; f < allPartsFields.length; f++) {
                    var field = allPartsFields[f];
                    var partsEntries = utils.safeGetLinks(currentEntry, field.fieldName) || [];

                    if (partsEntries.length === 0) {
                        continue;
                    }

                    addDebug(currentEntry, "    üì¶ Pole: " + field.name + " (poƒçet: " + partsEntries.length + ")");

                    for (var i = 0; i < partsEntries.length; i++) {
                        var part = partsEntries[i];
                        var partNumber = utils.safeGet(part, orderPartFields.number) || ("#" + (i + 1));

                        try {
                            addDebug(currentEntry, "      üîÑ Prepoƒç√≠tavam diel: " + partNumber);
                            OrderDielyCalculate.partCalculate(part);
                            totalRecalculated++;
                        } catch (partError) {
                            utils.addError(currentEntry, "‚ö†Ô∏è Chyba pri prepoƒçte dielu " + partNumber + ": " + partError.toString(), "recalculateAllParts", partError);
                        }
                    }
                }

                addDebug(currentEntry, "    ‚úÖ Prepoƒç√≠tan√Ωch dielov: " + totalRecalculated);

            } catch (error) {
                var errorMsg = "Chyba pri prepoƒçte v≈°etk√Ωch dielov: " + error.toString();
                if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
                if (error.stack) errorMsg += "\nStack: " + error.stack;
                utils.addError(currentEntry, errorMsg, "recalculateAllParts", error);
            }
        }

        /**
         * Helper funkcia: Spoƒç√≠ta sumu z dielov pou≈æit√≠m ≈°pecifikovan√Ωch atrib√∫tov
         * @param {Array} fieldsToProcess - Zoznam pol√≠ [{name, fieldName}]
         * @param {Object} materialAttrs - Atrib√∫ty pre materi√°ly {quantity, price, totalPrice}
         * @param {Object} workAttrs - Atrib√∫ty pre pr√°ce {quantity, price, totalPrice}
         * @param {Boolean} verboseDebug - ƒåi zobrazova≈• detail ka≈æd√©ho dielu
         * @returns {Number} - Celkov√° suma
         */
        function calculatePartsSum(fieldsToProcess, materialAttrs, workAttrs, verboseDebug) {
            var totalSum = 0;

            for (var f = 0; f < fieldsToProcess.length; f++) {
                var field = fieldsToProcess[f];
                var partsEntries = utils.safeGetLinks(currentEntry, field.fieldName) || [];

                if (partsEntries.length === 0) continue;

                if (verboseDebug) {
                    addDebug(currentEntry, "    üì¶ " + field.name + " (" + partsEntries.length + ")");
                }

                for (var i = 0; i < partsEntries.length; i++) {
                    var part = partsEntries[i];
                    var partSum = 0;

                    // Materi√°ly
                    var materials = utils.safeGetLinks(part, orderPartFields.materials) || [];
                    for (var m = 0; m < materials.length; m++) {
                        var mat = materials[m];
                        var qty = mat.attr(materialAttrs.quantity) || 0;
                        var price = mat.attr(materialAttrs.price) || 0;
                        var total = qty * price;
                        mat.setAttr(materialAttrs.totalPrice, total);
                        partSum += total;
                    }

                    // Pr√°ce
                    var works = utils.safeGetLinks(part, orderPartFields.works) || [];
                    for (var w = 0; w < works.length; w++) {
                        var wrk = works[w];
                        var qty = wrk.attr(workAttrs.quantity) || 0;
                        var price = wrk.attr(workAttrs.price) || 0;
                        var total = qty * price;
                        wrk.setAttr(workAttrs.totalPrice, total);
                        partSum += total;
                    }

                    totalSum += partSum;
                }
            }

            return totalSum;
        }

        /**
         * Spoƒç√≠ta rozpoƒçet z atrib√∫tov mno≈æstvo cp * cena cp = cena celkom cp
         * @returns {Object} - { budget: Number, budgetSubcontracts: Number }
         */
        function calculateBudget() {
            try {
                addDebug(currentEntry, "  üí∞ V√Ωpoƒçet rozpoƒçtu (z atrib√∫tov CP)");

                var subcontractCalculation = utils.safeGet(currentEntry, fields.subcontractCalculation) || "Nezapoƒç√≠tava≈•";
                var createAddendum = (subcontractCalculation === "Vytvori≈• dodatok");
                var orderMatAttrs = centralConfig.attributes.orderPartMaterials;
                var orderWrkAttrs = centralConfig.attributes.orderPartWorks;

                // Diely a Diely HZS
                var regularFields = [
                    { name: "Diely", fieldName: fields.parts },
                    { name: "Diely HZS", fieldName: fields.partsHzs }
                ];
                var budget = calculatePartsSum(regularFields, orderMatAttrs, orderWrkAttrs, false);

                // Subdod√°vky
                var subcontractFields = [{ name: "Subdod√°vky", fieldName: fields.subcontracts }];
                var subcontractSum = calculatePartsSum(subcontractFields, orderMatAttrs, orderWrkAttrs, false);

                var budgetSubcontracts = 0;
                if (createAddendum) {
                    budgetSubcontracts = subcontractSum;
                } else {
                    budget += subcontractSum;
                }

                addDebug(currentEntry, "    ‚úÖ Rozpoƒçet: " + budget.toFixed(2) + " ‚Ç¨");
                if (createAddendum) {
                    addDebug(currentEntry, "    ‚úÖ Rozpoƒçet subdod√°vky: " + budgetSubcontracts.toFixed(2) + " ‚Ç¨");
                }

                return {
                    budget: budget,
                    budgetSubcontracts: budgetSubcontracts
                };

            } catch (error) {
                var errorMsg = "Chyba pri v√Ωpoƒçte rozpoƒçtu: " + error.toString();
                if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
                if (error.stack) errorMsg += "\nStack: " + error.stack;
                utils.addError(currentEntry, errorMsg, "calculateBudget", error);
                throw error;
            }
        }

        /**
         * Spoƒç√≠ta spotrebovan√© z atrib√∫tov mno≈æstvo * cena = cena celkom
         * @returns {Number} - Spotrebovan√° suma
         */
        function calculateSpent() {
            try {
                addDebug(currentEntry, "  üí∏ V√Ωpoƒçet spotrebovanej sumy (z skutoƒçn√Ωch atrib√∫tov)");

                // Atrib√∫ty pre skutoƒçn√© hodnoty (nie CP atrib√∫ty)
                var actualMatAttrs = {
                    quantity: "mno≈æstvo",
                    price: "cena",
                    totalPrice: "cena celkom"
                };
                var actualWrkAttrs = {
                    quantity: "mno≈æstvo",
                    price: "cena",
                    totalPrice: "cena celkom"
                };

                var allFields = [
                    { name: "Diely", fieldName: fields.parts },
                    { name: "Diely HZS", fieldName: fields.partsHzs },
                    { name: "Subdod√°vky", fieldName: fields.subcontracts }
                ];

                var spent = calculatePartsSum(allFields, actualMatAttrs, actualWrkAttrs, false);

                addDebug(currentEntry, "    ‚úÖ Spotrebovan√©: " + spent.toFixed(2) + " ‚Ç¨");
                return spent;

            } catch (error) {
                var errorMsg = "Chyba pri v√Ωpoƒçte spotrebovanej sumy: " + error.toString();
                if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
                if (error.stack) errorMsg += "\nStack: " + error.stack;
                utils.addError(currentEntry, errorMsg, "calculateSpent", error);
                throw error;
            }
        }

        /**
         * Vypoƒç√≠ta ƒèal≈°ie polia z√°kazky (doprava, presun hm√¥t atƒè.)
         * Podobn√© ako v CP.Calculate.Module.js
         */
        function calculateAdditionalFields(budget) {
            try {
                addDebug(currentEntry, "  üöõ V√Ωpoƒçet dodatoƒçn√Ωch n√°kladov");

                var transportPrice = 0;
                var massTransferPrice = 0;

                // Doprava
                var rideCalculation = utils.safeGet(currentEntry, fields.rideCalculation) || "Nezapoƒç√≠tava≈•";
                if (rideCalculation !== "Nezapoƒç√≠tava≈•") {
                    if (rideCalculation === "Percentu√°lne") {
                        var transportPercentage = utils.safeGet(currentEntry, fields.transportPercentage) || 0;
                        transportPrice = budget * (transportPercentage / 100);
                    } else if (rideCalculation === "Pau≈°√°l") {
                        var flatRateEntries = utils.safeGetLinks(currentEntry, fields.transportFlatRate) || [];
                        if (flatRateEntries.length > 0) {
                            transportPrice = utils.safeGet(flatRateEntries[0], "Cena") || 0;
                        }
                    } else if (rideCalculation === "Fixn√° suma") {
                        transportPrice = utils.safeGet(currentEntry, fields.fixedTransportPrice) || 0;
                    }
                }

                // Presun hm√¥t
                var massTransferCalculation = utils.safeGet(currentEntry, fields.massTransferCalculation) || "Nezapoƒç√≠tava≈•";
                if (massTransferCalculation !== "Nezapoƒç√≠tava≈•") {
                    if (massTransferCalculation === "Percentu√°lne") {
                        var massTransferPercentage = utils.safeGet(currentEntry, fields.massTransferPercentage) || 0;
                        massTransferPrice = budget * (massTransferPercentage / 100);
                    } else if (massTransferCalculation === "Pau≈°√°l") {
                        var flatRateEntries = utils.safeGetLinks(currentEntry, fields.massTransferFlatRate) || [];
                        if (flatRateEntries.length > 0) {
                            massTransferPrice = utils.safeGet(flatRateEntries[0], "Cena") || 0;
                        }
                    } else if (massTransferCalculation === "Fixn√° suma") {
                        massTransferPrice = utils.safeGet(currentEntry, fields.massTransferFixedPrice) || 0;
                    }
                }

                addDebug(currentEntry, "    Doprava: " + transportPrice.toFixed(2) + " ‚Ç¨");
                addDebug(currentEntry, "    Presun hm√¥t: " + massTransferPrice.toFixed(2) + " ‚Ç¨");

                return {
                    transportPrice: transportPrice,
                    massTransferPrice: massTransferPrice
                };

            } catch (error) {
                var errorMsg = "Chyba pri v√Ωpoƒçte dodatoƒçn√Ωch n√°kladov: " + error.toString();
                if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
                if (error.stack) errorMsg += "\nStack: " + error.stack;
                utils.addError(currentEntry, errorMsg, "calculateAdditionalFields", error);
                throw error;
            }
        }

        // ==============================================
        // HLAVN√ù V√ùPOƒåET
        // ==============================================

        try {
            // Krok 1: Prepoƒç√≠taj v≈°etky diely
            addDebug(currentEntry, "üìã KROK 1: Prepoƒçet dielov z√°kazky");
            recalculateAllParts();
            addDebug(currentEntry, "");

            // Krok 2: Vypoƒç√≠taj rozpoƒçet
            addDebug(currentEntry, "üìã KROK 2: V√Ωpoƒçet rozpoƒçtu");
            var budgetResult = calculateBudget();
            addDebug(currentEntry, "");

            // Krok 3: Vypoƒç√≠taj spotrebovan√©
            addDebug(currentEntry, "üìã KROK 3: V√Ωpoƒçet spotrebovanej sumy");
            var spent = calculateSpent();
            addDebug(currentEntry, "");

            // Krok 4: Vypoƒç√≠taj dodatoƒçn√© n√°klady
            addDebug(currentEntry, "üìã KROK 4: V√Ωpoƒçet dodatoƒçn√Ωch n√°kladov");
            var additional = calculateAdditionalFields(budgetResult.budget);
            addDebug(currentEntry, "");

            // Krok 5: Celkov√© sumy
            addDebug(currentEntry, "üìã KROK 5: Z√°pis v√Ωsledkov");

            var totalBudget = budgetResult.budget + additional.transportPrice + additional.massTransferPrice;
            var remaining = totalBudget - spent;

            // Zap√≠≈° v√Ωsledky pomocou safeSet (vracia true/false)
            if (!utils.safeSet(currentEntry, fields.budget, budgetResult.budget)) {
                addDebug(currentEntry, "‚ùå Nepodarilo sa nastavi≈• pole 'budget' (" + fields.budget + ")");
            }

            if (!utils.safeSet(currentEntry, fields.budgetSubcontracts, budgetResult.budgetSubcontracts)) {
                addDebug(currentEntry, "‚ùå Nepodarilo sa nastavi≈• pole 'budgetSubcontracts' (" + fields.budgetSubcontracts + ")");
            }

            if (!utils.safeSet(currentEntry, fields.spent, spent)) {
                addDebug(currentEntry, "‚ùå Nepodarilo sa nastavi≈• pole 'spent' (" + fields.spent + ")");
            }

            if (!utils.safeSet(currentEntry, fields.remaining, remaining)) {
                addDebug(currentEntry, "‚ùå Nepodarilo sa nastavi≈• pole 'remaining' (" + fields.remaining + ")");
            }

            // Polia transportPrice a massTransferPrice s√∫ len v Cenov√© ponuky, nie v Z√°kazky
            // Pre Z√°kazky sa tieto √∫daje poƒç√≠taj√∫ inak alebo nie s√∫ potrebn√©

            addDebug(currentEntry, "  ‚úÖ Rozpoƒçet: " + budgetResult.budget.toFixed(2) + " ‚Ç¨");
            if (budgetResult.budgetSubcontracts > 0) {
                addDebug(currentEntry, "  ‚úÖ Rozpoƒçet subdod√°vky: " + budgetResult.budgetSubcontracts.toFixed(2) + " ‚Ç¨");
            }
            addDebug(currentEntry, "  ‚úÖ Spotrebovan√©: " + spent.toFixed(2) + " ‚Ç¨");
            addDebug(currentEntry, "  ‚úÖ Zostatok: " + remaining.toFixed(2) + " ‚Ç¨");
            addDebug(currentEntry, "");

            addDebug(currentEntry, "‚úÖ Prepoƒçet z√°kazky √∫spe≈°ne dokonƒçen√Ω");
            return true;

        } catch (error) {
            var errorMsg = "‚ùå KRITICK√Å CHYBA: " + error.toString();
            if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
            if (error.stack) errorMsg += "\nStack: " + error.stack;

            utils.addError(currentEntry, errorMsg, "OrderCalculate.orderCalculate", error);
            addDebug(currentEntry, "");
            addDebug(currentEntry, "‚ùå CHYBA PRI PREPOƒåTE Z√ÅKAZKY");
            addDebug(currentEntry, "");
            addDebug(currentEntry, errorMsg);

            return false;
        }
    }

    // Public API
    return {
        orderCalculate: orderCalculate,
        version: "1.1.0"
    };

})();

// ==============================================
// BACKWARD COMPATIBILITY
// ==============================================
// Ak je dostupn√© entry(), automaticky spusti prepoƒçet
if (typeof entry === 'function') {
    try {
        OrderCalculate.orderCalculate(entry());
    } catch (e) {
        message("‚ùå Chyba: " + e.toString());
    }
}
