// ==============================================
// DOCH√ÅDZKA PREPOƒåET - MODUL
// Verzia: 9.0.0 | D√°tum: October 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Typ: Module
// ==============================================
// üìã FUNKCIA:
//    - Automatick√Ω v√Ωpoƒçet odpracovan√Ωch hod√≠n
//    - V√Ωpoƒçet prest√°vok podƒæa pracovnej doby
//    - V√Ωpoƒçet mzdov√Ωch n√°kladov pre v≈°etk√Ωch zamestnancov
//    - Kontrola v√≠kendov a sviatkov
//    - Nastavenie atrib√∫tov na zamestnancoch
//    - V√Ωpoƒçet a ulo≈æenie d≈àa v t√Ω≈ædni
// ==============================================
// üîß POU≈ΩITIE:
//    var DochadzkaCalc = require('Doch.Calc.Module');
//    var result = DochadzkaCalc.calculate(entry());
// ==============================================

var DochadzkaCalcModule = (function() {
    'use strict';

    // ==============================================
    // INICIALIZ√ÅCIA MODULOV
    // ==============================================

    var utils = MementoUtils;
    var centralConfig = utils.config;

    var CONFIG = {
        // Script ≈°pecifick√© nastavenia
        scriptName: "Doch√°dzka Prepoƒçet (Modul)",
        version: "9.0.4",  // Opraven√© scope probl√©my

        // Referencie na centr√°lny config
        fields: {
            place: centralConfig.fields.place,
            vehicle: centralConfig.fields.vehicle,
            bookOfRides: centralConfig.fields.bookOfRides,
            account: centralConfig.fields.account,
            notifications: centralConfig.fields.notifications,
            rideLog: centralConfig.fields.rideLog,
            cashBook: centralConfig.fields.cashBook,
            workRecord: centralConfig.fields.workRecord,
            attendance: centralConfig.fields.attendance,
            obligations: centralConfig.fields.obligations,
            common: centralConfig.fields.common,
            // Pridan√© mapovanie pre arrival/departure polia
            date: centralConfig.fields.attendance.date,
            employees: centralConfig.fields.attendance.employees,
            arrival: centralConfig.fields.attendance.arrival,
            departure: centralConfig.fields.attendance.departure,
            pracovnaDoba: centralConfig.fields.attendance.workTime,
            odpracovane: centralConfig.fields.attendance.workedHours,
            pocetPracovnikov: centralConfig.fields.attendance.employeeCount,
            info: centralConfig.fields.common.info,
            // NOV√â: Pole pre de≈à v t√Ω≈ædni
            dayOfWeek: centralConfig.fields.attendance.dayOfWeek
        },
        attributes: centralConfig.fields.attendance.employeeAttributes,
        libraries: centralConfig.libraries,
        icons: centralConfig.icons,

        // Lok√°lne nastavenia pre tento script
        settings: {
            roundToQuarterHour: true,
            roundDirection: "nearest",
            includeBreaks: true,
            breakThreshold: 6,
            breakDuration: 30
        },

        // Kon≈°tanty pre z√°v√§zky
        obligationTypes: {
            wages: centralConfig.constants.obligationTypes.wages,
        },
        obligationStates: {
            paid: (centralConfig.constants && centralConfig.constants.obligationStates)
                  ? centralConfig.constants.obligationStates.paid
                  : "Zaplaten√©",
            unpaid: (centralConfig.constants && centralConfig.constants.obligationStates)
                    ? centralConfig.constants.obligationStates.unpaid
                    : "Nezaplaten√©",
            partiallyPaid: (centralConfig.constants && centralConfig.constants.obligationStates)
                           ? centralConfig.constants.obligationStates.partiallyPaid
                           : "ƒåiastoƒçne zaplaten√©"
        },

        sadzbyFields: centralConfig.fields.wages
    };

    // ==============================================
    // POMOCN√â FUNKCIE
    // ==============================================

    /**
     * V√Ωpoƒçet a nastavenie d≈àa v t√Ω≈ædni
     */
    function calculateAndSetDayOfWeek(currentEntry, date) {
        try {
            var dayIndex = moment(date).day();
            var dayName = utils.getDayNameSK(dayIndex);

            utils.safeSet(currentEntry, CONFIG.fields.dayOfWeek, dayName);
            utils.addDebug(currentEntry, "  ‚Ä¢ De≈à v t√Ω≈ædni: " + dayName);

            return {
                success: true,
                dayName: dayName,
                dayIndex: dayIndex
            };
        } catch (error) {
            utils.addError(currentEntry, error.toString(), "calculateAndSetDayOfWeek", error);
            return {
                success: false,
                error: error.toString()
            };
        }
    }

    /**
     * Valid√°cia vstupn√Ωch d√°t
     */
    function validateInputData(currentEntry) {
        try {
            var options = {
                config: CONFIG,
                customMessages: {
                    date: "D√°tum nie je vyplnen√Ω",
                    arrival: "Pr√≠chod nie je vyplnen√Ω",
                    departure: "Odchod nie je vyplnen√Ω",
                    employees: "≈Ωiadni zamestnanci v z√°zname"
                }
            };

            var result = utils.validateInputData(currentEntry, "attendance", options);

            if (!result.success) {
                return result;
            }

            utils.addDebug(currentEntry, "  ‚Ä¢ D√°tum: " + moment(result.data.date).format("DD.MM.YYYY") + " (" + utils.getDayNameSK(moment(result.data.date).day()).toUpperCase() + ")");
            utils.addDebug(currentEntry, "  ‚Ä¢ ƒåas: " + moment(result.data.arrival).format("HH:mm") + " - " + moment(result.data.departure).format("HH:mm"));
            utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet zamestnancov: " + result.data.employees.length);

            return result;

        } catch (error) {
            utils.addError(currentEntry, error.toString(), "validateInputData", error);
            return { success: false, error: error.toString() };
        }
    }

    /**
     * V√Ωpoƒçet pracovnej doby
     */
    function calculateWorkTime(currentEntry, arrival, departure) {
        try {
            var options = {
                entry: currentEntry,
                config: CONFIG,
                roundToQuarter: CONFIG.settings.roundToQuarterHour,
                startFieldName: CONFIG.fields.attendance.arrival,
                endFieldName: CONFIG.fields.attendance.departure,
                workTimeFieldName: CONFIG.fields.attendance.workTime,
                debugLabel: "Pracovn√° doba"
            };

            var result = utils.calculateWorkTime(arrival, departure, options);

            if (result.success) {
                result.arrivalRounded = result.startTimeRounded;
                result.departureRounded = result.endTimeRounded;
                result.arrivalOriginal = result.startTimeOriginal;
                result.departureOriginal = result.endTimeOriginal;
            }

            return result;
        } catch (error) {
            utils.addError(currentEntry, error.toString(), "calculateWorkTime", error);
            return { success: false, error: error.toString() };
        }
    }

    /**
     * Vytvorenie info z√°znamu
     */
    function createInfoRecord(currentEntry, workTimeResult, employeeResult) {
        try {
            var date = currentEntry.field(CONFIG.fields.attendance.date);
            var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
            var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();

            var infoMessage = "# üìã DOCH√ÅDZKA - AUTOMATICK√ù PREPOƒåET\n\n";

            infoMessage += "## üìÖ Z√°kladn√© √∫daje \n";
            infoMessage += "- **D√°tum:** " + dateFormatted + " (" + dayName + ")\n";
            infoMessage += "- **Pracovn√Ω ƒças:** " + moment(workTimeResult.arrivalRounded).format("HH:mm") +
                           " - " + moment(workTimeResult.departureRounded).format("HH:mm") + "\n";
            infoMessage += "- **Pracovn√° doba:** " + workTimeResult.pracovnaDobaHodiny + " hod√≠n\n\n";

            infoMessage += "## üë• ZAMESTNANCI (" + employeeResult.pocetPracovnikov + " " + utils.selectOsobaForm(employeeResult.pocetPracovnikov) + ")\n\n";

            // OPRAVA: Kontrola ƒçi existuje detaily
            if (employeeResult.detaily && employeeResult.detaily.length > 0) {
                for (var i = 0; i < employeeResult.detaily.length; i++) {
                    var detail = employeeResult.detaily[i];
                    infoMessage += "### üë§ " + utils.formatEmployeeName(detail.zamestnanec) + "\n";
                    infoMessage += "- **Hodinovka:** " + detail.hodinovka + " ‚Ç¨/h\n";
                    if (detail.priplatok > 0) infoMessage += "- **Pr√≠platok:** +" + detail.priplatok + " ‚Ç¨/h\n";
                    if (detail.premia > 0) infoMessage += "- **Pr√©mia:** +" + detail.premia + " ‚Ç¨\n";
                    if (detail.pokuta > 0) infoMessage += "- **Pokuta:** -" + detail.pokuta + " ‚Ç¨\n";
                    infoMessage += "- **Denn√° mzda:** " + detail.dennaMzda + " ‚Ç¨\n\n";
                }
            }

            infoMessage += "## üí∞ S√öHRN\n";
            infoMessage += "- **Odpracovan√© celkom:** " + employeeResult.odpracovaneTotal + " hod√≠n\n";
            infoMessage += "- **Mzdov√© n√°klady:** " + utils.formatMoney(employeeResult.celkoveMzdy) + "\n\n";

            infoMessage += "## üîß TECHNICK√â INFORM√ÅCIE\n";
            infoMessage += "- **Script:** " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
            infoMessage += "- **ƒåas spracovania:** " + moment().format("HH:mm:ss") + "\n";
            infoMessage += "- **MementoUtils:** v" + (utils.version || "N/A") + "\n";

            if (typeof MementoConfig !== 'undefined') {
                infoMessage += "- **MementoConfig:** v" + MementoConfig.version + "\n";
            }

            infoMessage += "\n---\n**‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE**";

            currentEntry.set(CONFIG.fields.info, infoMessage);
            utils.addDebug(currentEntry, "‚úÖ Info z√°znam vytvoren√Ω s Markdown form√°tovan√≠m");

            return true;

        } catch (error) {
            utils.addError(currentEntry, error.toString(), "createInfoRecord", error);
            return false;
        }
    }

    /**
     * Nastavenie pol√≠ v z√°zname
     */
    function setEntryFields(currentEntry, employeeResult, entryIcons, entryStatus) {
        try {
            utils.safeSet(currentEntry, CONFIG.fields.attendance.workedHours, employeeResult.odpracovaneTotal);
            utils.safeSet(currentEntry, CONFIG.fields.attendance.wageCosts, employeeResult.celkoveMzdy);
            utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, entryIcons);
            utils.safeSet(currentEntry, CONFIG.fields.attendance.entryStatus, entryStatus);

            utils.addDebug(currentEntry, "  ‚Ä¢ Pracovn√° doba: " + employeeResult.pracovnaDoba + " hod√≠n");
            utils.addDebug(currentEntry, "  ‚Ä¢ Odpracovan√© spolu: " + employeeResult.odpracovaneTotal + " hod√≠n");
            utils.addDebug(currentEntry, "  ‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy));
            utils.addDebug(currentEntry, " Celkov√© v√Ωpoƒçty √∫spe≈°n√©", "success");

            return { success: true };

        } catch (error) {
            utils.addError(currentEntry, error.toString(), "setEntryFields", error);
            return { success: false };
        }
    }

    /**
     * Fin√°lny s√∫hrn
     */
    function logFinalSummary(currentEntry, steps) {
        try {
            utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");

            var allSuccess = true;
            for (var step in steps) {
                var status = steps[step].success ? "‚úÖ" : "‚ùå";
                utils.addDebug(currentEntry, status + " " + steps[step].name);
                if (!steps[step].success) {
                    allSuccess = false;
                }
            }

            if (allSuccess) {
                utils.addDebug(currentEntry, "\n‚úÖ V≈°etky kroky dokonƒçen√© √∫spe≈°ne!");

                var date = utils.safeGet(currentEntry, CONFIG.fields.attendance.date);
                var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
                var dayName = utils.safeGet(currentEntry, CONFIG.fields.dayOfWeek, "");
                var employeeCount = utils.safeGet(currentEntry, CONFIG.fields.attendance.employeeCount, 0);
                var totalHours = utils.safeGet(currentEntry, CONFIG.fields.attendance.workedHours, 0);
                var totalCosts = utils.safeGet(currentEntry, CONFIG.fields.attendance.wageCosts, 0);

                var summaryMsg = "‚úÖ PREPOƒåET DOKONƒåEN√ù\n\n";
                summaryMsg += "üìÖ " + dateFormatted + " (" + dayName + ")\n";
                summaryMsg += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
                summaryMsg += "üë• Poƒçet zamestnancov: " + employeeCount + "\n";
                summaryMsg += "‚è±Ô∏è Odpracovan√©: " + totalHours.toFixed(2) + " h\n";
                summaryMsg += "üí∞ Mzdov√© n√°klady: " + utils.formatMoney(totalCosts) + "\n";
                summaryMsg += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
                summaryMsg += "‚ÑπÔ∏è Detaily v poli 'info'";

                message(summaryMsg);
            } else {
                utils.addDebug(currentEntry, "\n‚ö†Ô∏è Niektor√© kroky zlyhali!");
                message("‚ö†Ô∏è Prepoƒçet dokonƒçen√Ω s chybami.\nSkontrolujte Debug Log.");
            }

            utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
            utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");

        } catch (error) {
            utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
        }
    }

    // ==============================================
    // HLAVN√Å FUNKCIA MODULU
    // ==============================================

    /**
     * Hlavn√° funkcia pre v√Ωpoƒçet doch√°dzky
     */
    function calculate(currentEntry, options) {
        options = options || {};

        try {
            // Kontrola z√°vislost√≠
            var depCheck = utils.checkDependencies(['config', 'core', 'business']);
            if (!depCheck.success) {
                utils.addError(currentEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "calculate");
                return {
                    success: false,
                    error: "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", ")
                };
            }

            // VN√öTORN√Å FUNKCIA: Spracovanie z√°v√§zku
            // OPRAVA: currentEntry je teraz v closure scope
            function processObligation(date, empData, obligations) {
                var employee = empData.entry;
                var result = {
                    created: 0,
                    updated: 0,
                    errors: 0,
                    total: 0,
                    totalAmount: 0,
                    success: false
                };

                try {
                    utils.addDebug(currentEntry, utils.getIcon("search") +
                        " Hƒæad√°m z√°v√§zok " + utils.formatEmployeeName(employee));

                    var existingObligation = null;
                    for (var j = 0; j < obligations.length; j++) {
                        var obligation = obligations[j];
                        var linkedEmployee = utils.safeGetLinks(obligation, CONFIG.fields.obligations.employee);

                        if (linkedEmployee && linkedEmployee.length > 0 &&
                            linkedEmployee[0].field("ID") === employee.field("ID")) {
                            utils.addDebug(currentEntry, utils.getIcon("exclamation") + "n√°jden√Ω z√°v√§zok");
                            existingObligation = obligation;
                            break;
                        }
                    }

                    if (existingObligation) {
                        if (utils.updateObligation(date, existingObligation, empData.dailyWage)) {
                            result.updated++;
                            result.totalAmount += empData.dailyWage;
                        } else {
                            result.errors++;
                        }
                    } else {
                        if (utils.createObligation(date, empData, "attendance")) {
                            result.created++;
                            result.totalAmount += empData.dailyWage;
                        } else {
                            result.errors++;
                        }
                    }

                    result.total++;
                    result.success = result.errors === 0 && result.total > 0;

                    return result;

                } catch (error) {
                    utils.addError(currentEntry, "Kritick√° chyba pri spracovan√≠: " + error.toString(), "processObligations", error);
                    return result;
                }
            }

            // VN√öTORN√Å FUNKCIA: Spracovanie zamestnancov
            // OPRAVA: currentEntry je v closure scope
            function processEmployees(zamestnanci, pracovnaDobaHodiny, datum) {
                var opts = {
                    entry: currentEntry,
                    config: CONFIG,
                    employeeFieldName: CONFIG.fields.attendance.employees,
                    attributes: CONFIG.attributes,
                    includeExtras: true,
                    processObligations: true,
                    processObligation: processObligation,
                    findLinkedObligations: utils.findLinkedObligations,
                    libraryType: 'attendance'
                };

                return utils.processEmployees(zamestnanci, pracovnaDobaHodiny, datum, opts);
            }

            // Inicializ√°cia
            utils.clearLogs(currentEntry, true);
            utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, "");
            utils.addDebug(currentEntry, "=== " + CONFIG.scriptName + " ===");
            utils.addDebug(currentEntry, "MementoUtils verzia: " + utils.version);

            // KONTROLA ƒåI M√Å SCRIPT BE≈ΩA≈§
            var entryStatus = utils.safeGet(currentEntry, CONFIG.fields.attendance.entryStatus, []);
            var entryIcons = utils.safeGet(currentEntry, CONFIG.fields.attendance.entryIcons, null);

            if (entryStatus.indexOf("Voƒæno") !== -1) {
                var dayOffReason = utils.safeGet(currentEntry, CONFIG.fields.attendance.dayOffReason, null);
                if (dayOffReason === "Da≈æƒè") {
                    utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.weather_delay);
                } else if (dayOffReason === "Voƒæn√Ω de≈à") {
                    utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.vacation);
                } else if (dayOffReason === "Dovolenka") {
                    utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.vacation);
                } else if (dayOffReason === "Voƒæno - mokr√Ω ter√©n") {
                    utils.safeSet(currentEntry, CONFIG.fields.attendance.entryIcons, CONFIG.icons.soil_wet);
                }
                utils.setColor(currentEntry, "bg", "light gray");

                return {
                    success: true,
                    skipped: true,
                    reason: dayOffReason
                };
            }

            utils.addDebug(currentEntry, "=== ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===", "start");
            utils.addDebug(currentEntry, "ƒåas spustenia: " + utils.formatDate(moment()), "calendar");

            // Kroky prepoƒçtu
            var steps = {
                step1: { success: false, name: "Naƒç√≠tanie a valid√°cia d√°t" },
                step1b: { success: false, name: "V√Ωpoƒçet d≈àa v t√Ω≈ædni" },
                step2: { success: false, name: "V√Ωpoƒçet pracovnej doby" },
                step3: { success: false, name: "Spracovanie zamestnancov" },
                step4: { success: false, name: "Celkov√© v√Ωpoƒçty" },
                step5: { success: false, name: "Vytvorenie info z√°znamu" },
                step6: { success: false, name: "Spracovanie Denn√Ω report" }
            };

            // KROK 1: Naƒç√≠tanie a valid√°cia d√°t
            utils.addDebug(currentEntry, " KROK 1: Naƒç√≠tanie a valid√°cia d√°t", "validation");
            var validationResult = validateInputData(currentEntry);
            if (!validationResult.success) {
                utils.addError(currentEntry, "Valid√°cia zlyhala: " + validationResult.error, CONFIG.scriptName);
                return {
                    success: false,
                    error: validationResult.error
                };
            }
            steps.step1.success = true;

            // KROK 1b: V√Ωpoƒçet d≈àa v t√Ω≈ædni
            utils.addDebug(currentEntry, " KROK 1b: V√Ωpoƒçet d≈àa v t√Ω≈ædni", "calendar");
            var dayResult = calculateAndSetDayOfWeek(currentEntry, validationResult.data.date);
            steps.step1b.success = dayResult.success;

            // KROK 2: V√Ωpoƒçet pracovn√©ho ƒçasu
            utils.addDebug(currentEntry, " KROK 2: V√Ωpoƒçet pracovnej doby", "update");
            var workTimeResult = calculateWorkTime(currentEntry, validationResult.data.arrival, validationResult.data.departure);
            if (!workTimeResult.success) {
                utils.addError(currentEntry, "V√Ωpoƒçet ƒçasu zlyhal: " + workTimeResult.error, CONFIG.scriptName);
                return {
                    success: false,
                    error: workTimeResult.error
                };
            }
            steps.step2.success = workTimeResult.success;

            // KROK 3: Spracovanie zamestnancov
            utils.addDebug(currentEntry, " KROK 3: Spracovanie zamestnancov", "group");
            var employeeResult = processEmployees(validationResult.data.employees, workTimeResult.pracovnaDobaHodiny, validationResult.data.date);
            if (employeeResult.success) {
                if (entryStatus.indexOf("Z√°v√§zky") === -1) {
                    entryStatus.push("Z√°v√§zky");
                }
                if (employeeResult.created || employeeResult.updated > 0) {
                    entryIcons += CONFIG.icons.obligations;
                }
            }
            steps.step3.success = employeeResult.success;

            // KROK 4: Celkov√© v√Ωpoƒçty
            utils.addDebug(currentEntry, " KROK 4: Celkov√© v√Ωpoƒçty", "calculation");
            var totals = setEntryFields(currentEntry, employeeResult, entryIcons, entryStatus);
            steps.step4.success = totals.success;

            // KROK 5: Vytvorenie info z√°znamu
            utils.addDebug(currentEntry, " KROK 5: Vytvorenie info z√°znamu", "note");
            steps.step5.success = createInfoRecord(currentEntry, workTimeResult, employeeResult);

            // KROK 6: Vytvorenie/aktualiz√°cia Denn√Ω report
            utils.addDebug(currentEntry, " KROK 6: Spracovanie Denn√Ω report", "note");
            var dailyReportResult = utils.createOrUpdateDailyReport(currentEntry, 'attendance', {
                debugEntry: currentEntry,
                createBackLink: false
            });
            steps.step6.success = dailyReportResult.success;

            if (dailyReportResult.success) {
                var action = dailyReportResult.created ? "vytvoren√Ω" : "aktualizovan√Ω";
                utils.addDebug(currentEntry, "‚úÖ Denn√Ω report " + action + " √∫spe≈°ne");
            } else {
                utils.addDebug(currentEntry, "‚ö†Ô∏è Chyba pri spracovan√≠ Denn√Ω report: " + (dailyReportResult.error || "Nezn√°ma chyba"));
            }

            // Nastavenie farby podƒæa typu d≈àa
            var isHoliday = utils.isHoliday(validationResult.data.date);
            var isWeekend = utils.isWeekend(validationResult.data.date);
            if (isHoliday) {
                utils.setColor(currentEntry, "bg", "pastel blue");
            } else if (isWeekend) {
                utils.setColor(currentEntry, "bg", "pastel orange");
            }

            // Kontrola √∫spe≈°nosti v≈°etk√Ωch krokov
            var allSuccess = true;
            for (var step in steps) {
                if (!steps[step].success) {
                    allSuccess = false;
                    break;
                }
            }

            // Z√°vereƒçn√Ω s√∫hrn
            logFinalSummary(currentEntry, steps);
            utils.addDebug(currentEntry, "\n‚úÖ === PREPOƒåET DOKONƒåEN√ù ===");

            return {
                success: allSuccess,
                steps: steps,
                data: {
                    date: validationResult.data.date,
                    dayOfWeek: dayResult.dayName,
                    workTime: workTimeResult.pracovnaDobaHodiny,
                    workedHours: employeeResult.odpracovaneTotal,
                    wageCosts: employeeResult.celkoveMzdy,
                    employeeCount: employeeResult.pocetPracovnikov
                }
            };

        } catch (error) {
            utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "calculate", error);
            return {
                success: false,
                error: "Kritick√° chyba! Line: " + error.lineNumber + ": " + error.toString()
            };
        }
    }

    // ==============================================
    // EXPORT MODULU
    // ==============================================

    return {
        calculate: calculate,
        validateInputData: validateInputData,
        calculateWorkTime: calculateWorkTime,
        calculateAndSetDayOfWeek: calculateAndSetDayOfWeek,
        CONFIG: CONFIG,
        version: CONFIG.version
    };

})();

// Export modulu
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DochadzkaCalcModule;
}
