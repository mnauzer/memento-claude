// ==============================================
// MEMENTO DATABASE - V√ùDAJKY MATERI√ÅLU PREPOƒåET
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: V√Ωdajky materi√°lu | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Prepoƒçet polo≈æiek materi√°lu (mno≈æstvo * cena = cena celkom)
//    - S√∫ƒçet cien polo≈æiek do poƒæa Suma
//    - V√Ωpoƒçet DPH a Sumy s DPH podƒæa platnej sadzby
//    - Dopƒ∫≈àanie cien z kni≈ænice Materi√°l
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoBusiness (business logika a DPH funkcie)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "V√Ωdajky materi√°lu Prepoƒçet",
    version: "1.0.0",

    // Kni≈ænice
    libraries: {
        materialExpenses: (centralConfig.libraries && centralConfig.libraries.materialExpenses) || "V√Ωdajky materi√°lu",
        material: (centralConfig.libraries && centralConfig.libraries.inventory) || "Materi√°l",
        vatRates: (centralConfig.libraries && centralConfig.libraries.vatRatesLib) || "sadzby DPH"
    },

    // Polia V√Ωdajky materi√°lu
    fields: {
        date: (centralConfig.fields && centralConfig.fields.materialExpenses && centralConfig.fields.materialExpenses.date) || "D√°tum",
        items: (centralConfig.fields && centralConfig.fields.materialExpenses && centralConfig.fields.materialExpenses.items) || "Polo≈æky",
        sum: (centralConfig.fields && centralConfig.fields.materialExpenses && centralConfig.fields.materialExpenses.sum) || "Suma",
        vat: (centralConfig.fields && centralConfig.fields.materialExpenses && centralConfig.fields.materialExpenses.vat) || "DPH",
        sumWithVat: (centralConfig.fields && centralConfig.fields.materialExpenses && centralConfig.fields.materialExpenses.sumWithVat) || "Suma s DPH",
        transportPrice: (centralConfig.fields && centralConfig.fields.materialExpenses && centralConfig.fields.materialExpenses.transportPrice) || "Cena za prepravu",

        // Spoloƒçn√© polia
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },

    // Polia Materi√°l
    materialFields: {
        name: (centralConfig.fields && centralConfig.fields.material && centralConfig.fields.material.name) || "N√°zov",
        price: (centralConfig.fields && centralConfig.fields.material && centralConfig.fields.material.price) || "Cena"
    },

    // Atrib√∫ty polo≈æiek
    itemAttributes: {
        quantity: (centralConfig.attributes && centralConfig.attributes.materialExpensesItems && centralConfig.attributes.materialExpensesItems.quantity) || "mno≈æstvo",
        price: (centralConfig.attributes && centralConfig.attributes.materialExpensesItems && centralConfig.attributes.materialExpensesItems.price) || "cena",
        totalPrice: (centralConfig.attributes && centralConfig.attributes.materialExpensesItems && centralConfig.attributes.materialExpensesItems.totalPrice) || "cena celkom"
    },

    // Ikony
    icons: (centralConfig.icons) || {
        start: "üöÄ",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è",
        money: "üí∞",
        calculation: "üßÆ",
        material: "üì¶"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");

        // Z√≠skanie d√°tumu pre urƒçenie platnej sadzby DPH
        var datum = utils.safeGet(currentEntry, CONFIG.fields.date, moment().toDate());
        utils.addDebug(currentEntry, CONFIG.icons.info + " D√°tum pre sadzbu: " + utils.formatDate(datum));

        // Z√≠skanie polo≈æiek materi√°lu
        var items = utils.safeGet(currentEntry, CONFIG.fields.items, []);
        if (!items || items.length === 0) {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " ≈Ωiadne polo≈æky materi√°lu na prepoƒçet");
            clearCalculatedFields();
            return true;
        }

        utils.addDebug(currentEntry, CONFIG.icons.info + " Poƒçet polo≈æiek: " + items.length);

        // Prepoƒçet polo≈æiek materi√°lu
        var calculationResult = calculateMaterialItems(items);
        if (!calculationResult.success) {
            utils.addError(currentEntry, calculationResult.error, "main");
            message(CONFIG.icons.error + " " + calculationResult.error);
            return false;
        }

        var totalSum = calculationResult.totalSum;
        utils.addDebug(currentEntry, CONFIG.icons.success + " Celkov√° suma materi√°lu: " + utils.formatMoney(totalSum));

        // Pridanie ceny za prepravu
        var transportPrice = utils.safeGet(currentEntry, CONFIG.fields.transportPrice, 0) || 0;
        if (transportPrice > 0) {
            totalSum += transportPrice;
            utils.addDebug(currentEntry, CONFIG.icons.info + " Pripoƒç√≠tan√° preprava: " + utils.formatMoney(transportPrice));
        }

        // Nastavenie celkovej sumy bez DPH
        utils.safeSet(currentEntry, CONFIG.fields.sum, totalSum);
        utils.addDebug(currentEntry, CONFIG.icons.money + " Celkov√° suma bez DPH: " + utils.formatMoney(totalSum));

        // Z√≠skanie platnej sadzby DPH (pou≈æijeme z√°kladn√∫ sadzbu)
        var vatRate = 0;
        try {
            vatRate = utils.getValidVatRate(datum, "z√°kladn√°");
            utils.addDebug(currentEntry, CONFIG.icons.success + " Platn√° sadzba DPH: " + vatRate + "%");
        } catch (error) {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " Chyba pri z√≠skavan√≠ DPH sadzby, pou≈æije sa 0%: " + error.toString());
            vatRate = 0;
        }

        // V√Ωpoƒçet DPH a sumy s DPH
        var vatAmount = totalSum * (vatRate / 100);
        var sumWithVat = totalSum + vatAmount;

        // Nastavenie hodn√¥t
        utils.safeSet(currentEntry, CONFIG.fields.vat, vatAmount);
        utils.safeSet(currentEntry, CONFIG.fields.sumWithVat, sumWithVat);

        // Vytvorenie info z√°znamu
        createInfoRecord(totalSum, vatAmount, sumWithVat, vatRate, calculationResult.processedItems);

        utils.addDebug(currentEntry, CONFIG.icons.success + " === PREPOƒåET MATERI√ÅLU DOKONƒåEN√ù ===");

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message(CONFIG.icons.error + " Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// V√ùPOƒåTOV√â FUNKCIE
// ==============================================

function calculateMaterialItems(items) {
    try {
        var totalSum = 0;
        var processedItems = 0;

        utils.addDebug(currentEntry, CONFIG.icons.calculation + " Sp√∫≈°≈•am prepoƒçet materi√°lnych polo≈æiek...");

        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (!item) {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Polo≈æka[" + i + "] je pr√°zdna - preskakujem");
                continue;
            }

            // Z√≠skanie mno≈æstva
            var quantity = parseFloat(item.attr(CONFIG.itemAttributes.quantity) || 0);
            if (quantity <= 0) {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Polo≈æka[" + i + "] nem√° platn√© mno≈æstvo - preskakujem");
                continue;
            }

            // Z√≠skanie ceny
            var price = parseFloat(item.attr(CONFIG.itemAttributes.price) || 0);

            // Ak nie je cena zadan√°, pok√∫s sa ju z√≠ska≈• z kni≈ænice Materi√°l
            if (price <= 0) {
                price = getMaterialPrice(item);
                if (price > 0) {
                    // Nastav cenu sp√§≈• do atrib√∫tu
                    item.setAttr(CONFIG.itemAttributes.price, price);
                    utils.addDebug(currentEntry, CONFIG.icons.info + " Doplnen√° cena z kni≈ænice: " + utils.formatMoney(price));
                }
            }

            if (price <= 0) {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Polo≈æka[" + i + "] nem√° platn√∫ cenu - preskakujem");
                continue;
            }

            // V√Ωpoƒçet celkovej ceny polo≈æky
            var itemTotal = quantity * price;

            // Nastavenie celkovej ceny sp√§≈• do atrib√∫tu
            item.setAttr(CONFIG.itemAttributes.totalPrice, itemTotal);

            totalSum += itemTotal;
            processedItems++;

            // Z√≠skaj n√°zov materi√°lu pre debug
            var materialName = utils.safeGet(item, CONFIG.materialFields.name, "Nezn√°my materi√°l");

            utils.addDebug(currentEntry, CONFIG.icons.material + " " + materialName + ": " + quantity + " x " + utils.formatMoney(price) + " = " + utils.formatMoney(itemTotal));
        }

        utils.addDebug(currentEntry, CONFIG.icons.success + " Spracovan√Ωch polo≈æiek: " + processedItems + "/" + items.length);

        return {
            success: true,
            totalSum: totalSum,
            processedItems: processedItems
        };

    } catch (error) {
        return {
            success: false,
            error: "Chyba pri prepoƒçte polo≈æiek: " + error.toString()
        };
    }
}

function getMaterialPrice(item) {
    try {
        // Z√≠skaj kni≈ænicu Materi√°l
        var materialLib = lib(CONFIG.libraries.material);
        if (!materialLib) {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " Kni≈ænica " + CONFIG.libraries.material + " neexistuje");
            return 0;
        }

        // N√°jdi cenu v prepojenom z√°zname - item je u≈æ prepojen√Ω z√°znam z kni≈ænice Materi√°l
        var materialPrice = utils.safeGet(item, CONFIG.materialFields.price, 0);

        if (materialPrice > 0) {
            utils.addDebug(currentEntry, CONFIG.icons.success + " N√°jden√° cena materi√°lu: " + utils.formatMoney(materialPrice));
            return parseFloat(materialPrice);
        }

        utils.addDebug(currentEntry, CONFIG.icons.warning + " Cena materi√°lu nie je nastaven√°");
        return 0;

    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.error + " Chyba pri z√≠skavan√≠ ceny materi√°lu: " + error.toString());
        return 0;
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function clearCalculatedFields() {
    try {
        utils.safeSet(currentEntry, CONFIG.fields.sum, 0);
        utils.safeSet(currentEntry, CONFIG.fields.vat, 0);
        utils.safeSet(currentEntry, CONFIG.fields.sumWithVat, 0);
        utils.addDebug(currentEntry, CONFIG.icons.info + " Vypoƒç√≠tan√© polia vyƒçisten√©");
    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.error + " Chyba pri ƒçisten√≠ pol√≠: " + error.toString());
    }
}

function createInfoRecord(totalSum, vatAmount, sumWithVat, vatRate, processedItems) {
    try {
        var date = utils.safeGet(currentEntry, CONFIG.fields.date, moment().toDate());
        var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
        var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();

        var infoMessage = "üì¶ V√ùDAJKY MATERI√ÅLU - AUTOMATICK√ù PREPOƒåET\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

        infoMessage += "üìÖ D√°tum: " + dateFormatted + " (" + dayName + ")\n\n";

        infoMessage += "üìä POLO≈ΩKY MATERI√ÅLU:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Spracovan√© polo≈æky: " + processedItems + "\n";

        // Z√≠skaj polo≈æky pre detail
        var items = utils.safeGet(currentEntry, CONFIG.fields.items, []);
        for (var i = 0; i < Math.min(items.length, 5); i++) { // Zobraz max 5 polo≈æiek
            var item = items[i];
            if (item) {
                var materialName = utils.safeGet(item, CONFIG.materialFields.name, "Nezn√°my materi√°l");
                var quantity = parseFloat(item.attr(CONFIG.itemAttributes.quantity) || 0);
                var price = parseFloat(item.attr(CONFIG.itemAttributes.price) || 0);
                var itemTotal = parseFloat(item.attr(CONFIG.itemAttributes.totalPrice) || 0);

                if (quantity > 0 && price > 0) {
                    infoMessage += "üì¶ " + (i+1) + ": " + materialName + "\n";
                    infoMessage += "   " + quantity + " x " + utils.formatMoney(price) + " = " + utils.formatMoney(itemTotal) + "\n";
                }
            }
        }

        if (items.length > 5) {
            infoMessage += "   ... a " + (items.length - 5) + " ƒèal≈°√≠ch polo≈æiek\n";
        }

        infoMessage += "\nüí∞ S√öHRN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Suma bez DPH: " + utils.formatMoney(totalSum) + "\n";
        infoMessage += "‚Ä¢ DPH (" + vatRate + "%): " + utils.formatMoney(vatAmount) + "\n";
        infoMessage += "‚Ä¢ Suma s DPH: " + utils.formatMoney(sumWithVat) + "\n\n";

        var transportPrice = utils.safeGet(currentEntry, CONFIG.fields.transportPrice, 0);
        if (transportPrice > 0) {
            infoMessage += "üöö Preprava: " + utils.formatMoney(transportPrice) + "\n\n";
        }

        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ ƒåas spracovania: " + moment().format("HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + (utils.version || "N/A") + "\n";

        if (typeof MementoConfig !== 'undefined') {
            infoMessage += "‚Ä¢ MementoConfig: v" + MementoConfig.version + "\n";
        }

        infoMessage += "\n‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE";

        currentEntry.set(CONFIG.fields.info, infoMessage);

        utils.addDebug(currentEntry, CONFIG.icons.success + " Info z√°znam vytvoren√Ω");

        return true;

    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.error + " Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString());
        return false;
    }
}

// ==============================================
// SPUSTENIE
// ==============================================

main();