// ==============================================
// MEMENTO DATABASE - EXTRACT LIBRARY IDS
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Typ: Debugging/Utility Script | Spustenie: Manual Action
// ==============================================
// üìã FUNKCIA:
//    - Extrahovanie ID v≈°etk√Ωch kni≈æn√≠c v datab√°ze
//    - Vytvorenie form√°tovan√©ho zoznamu pre .env s√∫bor
//    - Identifik√°cia kƒæ√∫ƒçov√Ωch kni≈æn√≠c pou≈æ√≠van√Ωch v syst√©me
//    - Export v√Ωsledkov pre externe API pripojenie
// ==============================================
// üîß POU≈Ω√çVA:
//    - Memento Database SQL API
//    - JavaScript SQL queries
//    - Library metadata access
// üìù V√ùSTUP:
//    - Info pole s form√°tovan√Ωm zoznamom library IDs
//    - .env format pre Python API pr√≠stup
// ==============================================

// ==============================================
// KONFIGUR√ÅCIA
// ==============================================

var CONFIG = {
    scriptName: "Extract Library IDs",
    version: "1.0.0",

    // Kƒæ√∫ƒçov√© kni≈ænice ktor√© hƒæad√°me (based on MementoConfig7.js)
    expectedLibraries: {
        "Materi√°l": "LIBRARY_ID_MATERIAL",
        "Doch√°dzka": "LIBRARY_ID_ATTENDANCE",
        "Z√°znam pr√°c": "LIBRARY_ID_WORK_RECORDS",
        "Kniha j√°zd": "LIBRARY_ID_VEHICLE_LOGBOOK",
        "Poklad≈àa": "LIBRARY_ID_CASH_REGISTER",
        "Notifik√°cie": "LIBRARY_ID_NOTIFICATIONS",
        "ASISTANTO Defaults": "LIBRARY_ID_DEFAULTS",
        "sadzby DPH": "LIBRARY_ID_VAT_RATES",
        "zamestnanci": "LIBRARY_ID_EMPLOYEES",
        "z√°kazn√≠ci": "LIBRARY_ID_CUSTOMERS",
        "projekty": "LIBRARY_ID_PROJECTS",
        "ceny materi√°lu": "LIBRARY_ID_PRICE_HISTORY",
        "z√°v√§zky": "LIBRARY_ID_OBLIGATIONS",
        "vozidl√°": "LIBRARY_ID_VEHICLES",
        "ASISTANTO API": "LIBRARY_ID_API_KEYS"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        var output = [];
        output.push("üîó === MEMENTO DATABASE LIBRARY IDS ===");
        output.push("üìÖ Extrahovan√©: " + new Date().toLocaleString());
        output.push("üõ†Ô∏è Script: " + CONFIG.scriptName + " v" + CONFIG.version);
        output.push("");

        // Z√≠skanie zoznamu v≈°etk√Ωch kni≈æn√≠c
        var libraries = extractAllLibraries();

        if (!libraries || libraries.length === 0) {
            output.push("‚ùå CHYBA: ≈Ωiadne kni≈ænice neboli n√°jden√©!");
            return createResult(output.join("\\n"));
        }

        output.push("üìä POƒåET KNI≈ΩN√çC: " + libraries.length);
        output.push("");
        output.push("===============================================");
        output.push("üìã V≈†ETKY KNI≈ΩNICE V DATAB√ÅZE:");
        output.push("===============================================");

        // Zoradenie kni≈æn√≠c podƒæa n√°zvu
        libraries.sort(function(a, b) {
            return a.name.localeCompare(b.name);
        });

        // V√Ωpis v≈°etk√Ωch kni≈æn√≠c
        for (var i = 0; i < libraries.length; i++) {
            var lib = libraries[i];
            output.push("‚Ä¢ " + lib.name + " (ID: " + lib.id + ")");
        }

        output.push("");
        output.push("===============================================");
        output.push("üîß .ENV FORM√ÅT PRE PYTHON API:");
        output.push("===============================================");

        // Generovanie .env form√°tu
        var envLines = generateEnvFormat(libraries);
        output.push("");
        output.push(envLines.join("\\n"));

        output.push("");
        output.push("===============================================");
        output.push("‚ö†Ô∏è KƒΩ√öƒåOV√â KNI≈ΩNICE (KONTROLA):");
        output.push("===============================================");

        // Kontrola kƒæ√∫ƒçov√Ωch kni≈æn√≠c
        var missingLibraries = checkExpectedLibraries(libraries);
        if (missingLibraries.length > 0) {
            output.push("");
            output.push("‚ùå CH√ùBAJ√öCE KƒΩ√öƒåOV√â KNI≈ΩNICE:");
            for (var j = 0; j < missingLibraries.length; j++) {
                output.push("‚Ä¢ " + missingLibraries[j]);
            }
        } else {
            output.push("‚úÖ V≈°etky kƒæ√∫ƒçov√© kni≈ænice n√°jden√©!");
        }

        output.push("");
        output.push("===============================================");
        output.push("üìù IN≈†TRUKCIE:");
        output.push("===============================================");
        output.push("1. Skop√≠rujte .env form√°t vy≈°≈°ie");
        output.push("2. Nahraƒète pr√≠slu≈°n√© hodnoty v .env s√∫bore");
        output.push("3. Pridajte v√°≈° Memento API key");
        output.push("4. Otestujte Python API pr√≠stup");
        output.push("");
        output.push("‚úÖ EXTRAKCIA DOKONƒåEN√Å");

        return createResult(output.join("\\n"));

    } catch (error) {
        return createResult("‚ùå KRITICK√Å CHYBA: " + error.toString());
    }
}

// ==============================================
// EXTRAKCIA KNI≈ΩN√çC
// ==============================================

/**
 * Extrahovanie v≈°etk√Ωch kni≈æn√≠c z datab√°zy pomocou SQL
 */
function extractAllLibraries() {
    try {
        // Pokus o z√≠skanie kni≈æn√≠c cez SQL - r√¥zne mo≈æn√© n√°zvy tabuliek
        var possibleQueries = [
            "SELECT id, name FROM libraries ORDER BY name",
            "SELECT id, title as name FROM libraries ORDER BY title",
            "SELECT library_id as id, library_name as name FROM libraries ORDER BY library_name",
            "SELECT lib_id as id, lib_name as name FROM libs ORDER BY lib_name"
        ];

        for (var i = 0; i < possibleQueries.length; i++) {
            try {
                var result = sql(possibleQueries[i]);
                var libraries = result.asObjects();
                if (libraries && libraries.length > 0) {
                    return libraries;
                }
            } catch (sqlError) {
                // Pokraƒçuj na ƒèal≈°√≠ query
                continue;
            }
        }

        // Ak SQL nefunguje, pok√∫s sa pou≈æi≈• alternat√≠vny pr√≠stup
        return extractLibrariesAlternative();

    } catch (error) {
        throw new Error("Chyba pri extrakcii kni≈æn√≠c: " + error.toString());
    }
}

/**
 * Alternat√≠vny sp√¥sob extrakcie kni≈æn√≠c
 */
function extractLibrariesAlternative() {
    try {
        // Pokus o z√≠skanie inform√°ci√≠ cez syst√©mov√© funkcie
        // Toto je experiment√°lne - mo≈æno nebude fungova≈•

        var libraries = [];

        // Pok√∫s sa z√≠ska≈• library z kontextu alebo glob√°lnych objektov
        // Toto bude z√°visie≈• od konkr√©tnej implement√°cie Memento

        // Ak m√°me pr√≠stup k library() funkcii
        if (typeof library === 'function') {
            try {
                var currentLib = library();
                if (currentLib && currentLib.id && currentLib.name) {
                    libraries.push({
                        id: currentLib.id,
                        name: currentLib.name
                    });
                }
            } catch (e) {
                // Ignoruj chybu
            }
        }

        // Fallback: vytvor dummy zoznam pre testovanie
        if (libraries.length === 0) {
            libraries = [
                { id: "dummy_1", name: "TEST - Spustite tento script v Memento Database" },
                { id: "dummy_2", name: "TEST - Potrebn√Ω SQL pr√≠stup k syst√©mov√Ωm tabuƒæk√°m" }
            ];
        }

        return libraries;

    } catch (error) {
        throw new Error("Alternat√≠vna extrakcia zlyhala: " + error.toString());
    }
}

// ==============================================
// GENEROVANIE V√ùSTUPU
// ==============================================

/**
 * Generuje .env form√°t pre Python API
 */
function generateEnvFormat(libraries) {
    var envLines = [];

    // Pre ka≈æd√∫ n√°jden√∫ kni≈ænicu
    for (var i = 0; i < libraries.length; i++) {
        var lib = libraries[i];
        var envKey = getEnvKeyForLibrary(lib.name);

        if (envKey) {
            envLines.push(envKey + "=" + lib.id);
        } else {
            // Pre neoƒçak√°van√© kni≈ænice vytvor generick√Ω kƒæ√∫ƒç
            var genericKey = "LIBRARY_ID_" + lib.name.toUpperCase()
                .replace(/[^A-Z0-9]/g, "_")
                .replace(/_+/g, "_")
                .replace(/^_|_$/g, "");
            envLines.push("# " + genericKey + "=" + lib.id + " # " + lib.name);
        }
    }

    return envLines;
}

/**
 * Z√≠ska ENV kƒæ√∫ƒç pre kni≈ænicu
 */
function getEnvKeyForLibrary(libraryName) {
    return CONFIG.expectedLibraries[libraryName] || null;
}

/**
 * Kontrola kƒæ√∫ƒçov√Ωch kni≈æn√≠c
 */
function checkExpectedLibraries(libraries) {
    var foundLibraries = {};

    // Vytvor mapu n√°jden√Ωch kni≈æn√≠c
    for (var i = 0; i < libraries.length; i++) {
        foundLibraries[libraries[i].name] = true;
    }

    // Kontrola ch√Ωbaj√∫cich
    var missing = [];
    for (var expectedName in CONFIG.expectedLibraries) {
        if (!foundLibraries[expectedName]) {
            missing.push(expectedName);
        }
    }

    return missing;
}

/**
 * Vytvorenie v√Ωsledku
 */
function createResult(message) {
    // Pok√∫s sa nastavi≈• do info poƒæa ak existuje
    try {
        if (typeof entry === 'function') {
            var currentEntry = entry();
            if (currentEntry) {
                // Pok√∫s sa n√°js≈• info pole
                var infoFields = ["info", "Info", "INFO", "result", "Result", "output"];

                for (var i = 0; i < infoFields.length; i++) {
                    try {
                        currentEntry.set(infoFields[i], message);
                        break;
                    } catch (e) {
                        continue;
                    }
                }
            }
        }
    } catch (error) {
        // Ignoruj chyby nastavenia
    }

    // Zobraz aj ako dialog
    if (typeof dialog === 'function') {
        dialog("üìã LIBRARY IDS EXTRACTED\\n\\nV√Ωsledok bol ulo≈æen√Ω do info poƒæa z√°znamu.\\n\\nSkop√≠rujte .env form√°t a pou≈æite ho v Python scripte.");
    }

    return message;
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();