// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA SYNC Z√ÅV√ÑZKOV
// Verzia: 7.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// üìã FUNKCIA:
//    - Vytvorenie z√°v√§zkov pre zamestnancov z doch√°dzky
//    - Aktualiz√°cia existuj√∫cich z√°v√§zkov
//    - Automatick√© oznaƒçenie checkboxu
//    - Info z√°znamy pre audit trail
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoBusiness (business logika)
// ==============================================
// ‚úÖ ZJEDNODU≈†EN√â v7.0:
//    - Vyu≈æitie utils.processEmployees z MementoBusiness
//    - Odstr√°nen√© duplicitn√© funkcie
//    - Jednoduch≈°ia valid√°cia
//    - ƒåist√° ≈°trukt√∫ra ako v referenƒçn√Ωch scriptoch
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Doch√°dzka Sync Z√°v√§zkov",
    version: "7.0.1",
    
    // Referencie na centr√°lny config
    fields: {
        attendance: centralConfig.fields.attendance,
        obligations: centralConfig.fields.obligations,
        common: centralConfig.fields.common,
        
        // ≈†pecifick√© mapovanie
        date: centralConfig.fields.attendance.date,
        employees: centralConfig.fields.attendance.employees,
        obligations: centralConfig.fields.attendance.obligations,
        info: centralConfig.fields.common.info
    },
    attributes: centralConfig.fields.attendance.employeeAttributes, 
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
        
    // Kon≈°tanty pre z√°v√§zky
    constants: {
        stavy: {
            neuhradene: "Neuhraden√©",
            ciastocneUhradene: "ƒåiastoƒçne uhraden√©",
            uhradene: "Uhraden√©"
        },
        typy: {
            mzda: "Mzda"
        }
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "‚è∞ ƒåas spustenia: " + utils.formatDate(moment()));
        
        // Kroky synchrnoniz√°cie
        var steps = {
            step1: { success: false, name: "Valid√°cia vstupn√Ωch d√°t" },
            step2: { success: false, name: "Kontrola kni≈ænice z√°v√§zkov" },
            step3: { success: false, name: "Spracovanie z√°v√§zkov" },
            step4: { success: false, name: "Finaliz√°cia z√°znamu" }
        };
        
        // KROK 1: Valid√°cia vstupn√Ωch d√°t
        utils.addDebug(currentEntry, "üìã KROK 1: Valid√°cia vstupn√Ωch d√°t");
        var validationResult = validateInputData();
        if (!validationResult.success) {
            utils.addError(currentEntry, validationResult.error, CONFIG.scriptName);
            message("‚ùå " + validationResult.error);
            return false;
        }
        steps.step1.success = true;
        
        // KROK 2: Kontrola kni≈ænice z√°v√§zkov
        utils.addDebug(currentEntry, "üìö KROK 2: Kontrola kni≈ænice z√°v√§zkov");
        var zavazkyLib = libByName(CONFIG.libraries.obligations);
        if (!zavazkyLib) {
            utils.addError(currentEntry, "Kni≈ænica Z√°v√§zky nen√°jden√°!", CONFIG.scriptName);
            message("‚ùå Kni≈ænica Z√°v√§zky nie je dostupn√°!");
            return false;
        }
        steps.step2.success = true;
        
        // KROK 3: Spracovanie z√°v√§zkov
        utils.addDebug(currentEntry, "üí∞ KROK 3: Spracovanie z√°v√§zkov");
        var processingResult = processObligations(validationResult);
        steps.step3.success = processingResult.success;
        
        // KROK 4: Finaliz√°cia
        utils.addDebug(currentEntry, "‚úÖ KROK 4: Finaliz√°cia z√°znamu");
        if (processingResult.total > 0) {
            markCheckbox();
            createInfoRecord(processingResult, validationResult.date);
            steps.step4.success = true;
        }
        
        // Fin√°lne zhrnutie
        logFinalSummary(steps);
        
        // Zobraz v√Ωsledky
        showUserMessage(processingResult);
        
        return processingResult.success;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba: " + error.toString(), CONFIG.scriptName, error);
        message("üí• Kritick√° chyba!\n" + error.toString());
        return false;
    }
}

// ==============================================
// KROK 1: VALID√ÅCIA
// ==============================================

function validateInputData() {
    try {

          // Definuj povinn√© polia
        var requiredFields = [
            CONFIG.fields.attendance.date,
            CONFIG.fields.attendance.employees
        ];
        
        if (!utils.validateRequiredFields(currentEntry, requiredFields)) {
            return { success: false, error: "Ch√Ωbaj√∫ povinn√© polia!" };
        }

        var date = utils.safeGet(currentEntry, CONFIG.fields.attendance.date);
        var employees = utils.safeGetLinks(currentEntry, CONFIG.fields.attendance.employees);
        
        // Dodatoƒçn√© kontroly
        if (!date) {
            return { success: false, error: "D√°tum nie je vyplnen√Ω" };
        }
              
        if (!employees || employees.length === 0) {
            return { success: false, error: "≈Ωiadni zamstnanci v z√°zname" };
        }

        var zamArray = currentEntry.field(CONFIG.fields.attendance.employees);

        // Kontrola atrib√∫tov - z√≠skaj len zamestnancov s dennou mzdou
        var validEmployees = [];
        for (var i = 0; i < employees.length; i++) {
            var employee = employees[i];
            var dailyWage = 0;
            try {
                dailyWage = employee.attr(CONFIG.attributes.dailyWage) || 0;
            } catch (e) {
                utils.addDebug(currentEntry, "‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ atrib√∫tu: " + e.toString());
            }
            
            if (dailyWage > 0) {
                validEmployees.push({
                    date: date,
                    entry: employee,
                    index: i,
                    dailyWage: dailyWage,
                    name: utils.formatEmployeeName(employee)
                });
                
                utils.addDebug(currentEntry, "  ‚Ä¢ " + validEmployees[validEmployees.length-1].name + 
                               " - denn√° mzda: " + utils.formatMoney(dailyWage));
            }
        }
        
        if (validEmployees.length === 0) {
            return { 
                success: false, 
                error: "≈Ωiadni zamestnanci nemaj√∫ nastaven√∫ denn√∫ mzdu!" 
            };
        }
        
        utils.addDebug(currentEntry, "‚úÖ Valid√°cia √∫spe≈°n√° - " + validEmployees.length + " zamestnancov");
        
        return {
            success: true,
            date: date,
            employees: validEmployees
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri valid√°cii: " + error.toString(), "validateInputData", error);
        return { success: false, error: "Chyba pri valid√°cii d√°t" };
    }
}

// ==============================================
// KROK 3: SPRACOVANIE Z√ÅV√ÑZKOV
// ==============================================

function processObligations(data) {
    var date = data.date;
    var employees = data.employees;

    var result = {
        created: 0,
        updated: 0,
        errors: 0,
        total: 0,
        totalAmount: 0,
        success: false
    };
    
    try {
        utils.addDebug(currentEntry, "üìã Spracov√°vam " + employees.length + " zamestnancov...");
        
        // N√°jdi existuj√∫ce z√°v√§zky pre t√∫to doch√°dzku
        var existingObligations = utils.findExistingObligations();
        utils.addDebug(currentEntry, "üìä N√°jden√© existuj√∫ce z√°v√§zky: " + existingObligations.length);
        
        // Spracuj ka≈æd√©ho zamestnanca
        for (var i = 0; i < employees.length; i++) {
            var empData = employees[i];
            
            utils.addDebug(currentEntry, "  ‚Ä¢ " + empData.name);
            
            try {
                // N√°jdi existuj√∫ci z√°v√§zok pre tohto zamestnanca
                var existingObligation = null;
                for (var j = 0; j < existingObligations.length; j++) {
                    var obligation = existingObligations[j];
                    var linkedEmployee = utils.safeGetLinks(obligation, CONFIG.fields.obligations.employee);
                    
                    if (linkedEmployee && linkedEmployee.length > 0 && 
                        linkedEmployee[0].field("ID") === empData.entry.field("ID")) {
                        existingObligation = obligation;
                        break;
                    }
                }
                
                if (existingObligation) {
                    // Aktualizuj existuj√∫ci
                    if (utils.updateObligation(existingObligation, empData.dailyWage)) {
                        result.updated++;
                        result.totalAmount += empData.dailyWage;
                    } else {
                        result.errors++;
                    }
                } else {
                    // Vytvor nov√Ω
                    if (utils.createObligation(empData, "attendance")) {
                        result.created++;
                        result.totalAmount += empData.dailyWage;
                    } else {
                        result.errors++;
                    }
                }
                
                result.total++;
                
            } catch (error) {
                utils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnanca: " + error.toString(), "processObligations");
                result.errors++;
            }
        }
        
        result.success = result.errors === 0 && result.total > 0;
        
        utils.addDebug(currentEntry, "\nüìä V√Ωsledky:");
        utils.addDebug(currentEntry, "  ‚úÖ Vytvoren√©: " + result.created);
        utils.addDebug(currentEntry, "  üîÑ Aktualizovan√©: " + result.updated);
        utils.addDebug(currentEntry, "  üí∞ Celkov√° suma: " + utils.formatMoney(result.totalAmount));
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri spracovan√≠: " + error.toString(), "processObligations", error);
        return result;
    }
}

// ==============================================
// KROK 4: FINALIZ√ÅCIA
// ==============================================

function markCheckbox() {
    try {
        currentEntry.set(CONFIG.fields.obligations.obligations, true);
        utils.addDebug(currentEntry, "‚òëÔ∏è Checkbox Z√°v√§zky oznaƒçen√Ω");
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri oznaƒçovan√≠ checkboxu: " + error.toString(), "markCheckbox");
    }
}

function createInfoRecord(processingResult, datum) {
    try {
        var infoMessage = "üìã SYNCHRONIZ√ÅCIA Z√ÅV√ÑZKOV\n";
        infoMessage += "=====================================\n\n";
        infoMessage += "üìÖ D√°tum: " + utils.formatDate(datum) + "\n";
        infoMessage += "‚è∞ ƒåas sync: " + utils.formatDate(moment()) + "\n\n";
        
        infoMessage += "üìä V√ùSLEDKY:\n";
        infoMessage += "‚Ä¢ ‚ûï Nov√© z√°v√§zky: " + processingResult.created + "\n";
        infoMessage += "‚Ä¢ üîÑ Aktualizovan√©: " + processingResult.updated + "\n";
        infoMessage += "‚Ä¢ üí∞ Celkov√° suma: " + utils.formatMoney(processingResult.totalAmount) + "\n";
        
        if (processingResult.errors > 0) {
            infoMessage += "‚Ä¢ ‚ö†Ô∏è Chyby: " + processingResult.errors + "\n";
        }
        
        infoMessage += "\nüîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + utils.version + "\n";
        infoMessage += "‚Ä¢ Trigger: After Save\n";
        
        if (processingResult.total === processingResult.created + processingResult.updated) {
            infoMessage += "\n‚úÖ V≈†ETKY Z√ÅV√ÑZKY √öSPE≈†NE SYNCHRONIZOVAN√â";
        } else {
            infoMessage += "\n‚ö†Ô∏è ƒåIASTOƒåN√Å SYNCHRONIZ√ÅCIA";
        }
        
        currentEntry.set(CONFIG.fields.info, infoMessage);
        utils.addDebug(currentEntry, "üìù Info z√°znam vytvoren√Ω");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ info: " + error.toString(), "createInfoRecord");
    }
}

// ==============================================
// FIN√ÅLNE FUNKCIE
// ==============================================

function logFinalSummary(steps) {
    try {
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

function showUserMessage(processingResult) {
    try {
        if (processingResult.total > 0) {
            var msg = "‚úÖ Z√°v√§zky √∫spe≈°ne synchronizovan√©!\n\n";
            msg += "üìä V√Ωsledky:\n";
            msg += "‚Ä¢ Nov√©: " + processingResult.created + "\n";
            msg += "‚Ä¢ Aktualizovan√©: " + processingResult.updated + "\n";
            msg += "‚Ä¢ Celkov√° suma: " + utils.formatMoney(processingResult.totalAmount);
            
            if (processingResult.errors > 0) {
                msg += "\n\n‚ö†Ô∏è Chyby: " + processingResult.errors;
            }
            
            message(msg);
        } else {
            message("‚ùå Synchroniz√°cia zlyhala!\nPozri Error_Log pre detaily.");
        }
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri zobrazen√≠ spr√°vy: " + error.toString(), "showUserMessage");
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola z√°vislost√≠
var depCheck = utils.checkDependencies(['config', 'core']);
if (!depCheck.success) {
    message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "));
    cancel();
}

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
}