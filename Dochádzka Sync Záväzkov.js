// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA SYNC Z√ÅV√ÑZKOV
// Verzia: 5.0 | D√°tum: August 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// ‚úÖ KOMPLETN√ù REFAKTORING v5.0:
//    - Pln√© vyu≈æitie MementoUtils Framework
//    - MementoConfig pre v≈°etky nastavenia
//    - ≈Ωiadne fallbacky ani duplicity
//    - ƒåist√Ω modul√°rny k√≥d
//    - Vylep≈°en√° business logika
// ==============================================
// üîó VY≈ΩADOVAN√â KNI≈ΩNICE:
//    - MementoUtils (agreg√°tor)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoConfig (konfigur√°cia)
//    - MementoBusiness (business funkcie)
// ==============================================
// üìã FUNKCIE:
//    - Vytvorenie nov√Ωch z√°v√§zkov pre zamestnancov
//    - Aktualiz√°cia existuj√∫cich z√°v√§zkov
//    - Nastavenie finanƒçn√Ωch pol√≠ (Suma, Zostatok)
//    - Oznaƒçenie checkboxu Z√°v√§zky
//    - Info z√°znamy pre audit trail
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================

var currentEntry = entry();
var utils = null;
var config = null;
var CONFIG = null;

/**
 * Inicializuje v≈°etky potrebn√© moduly a konfigur√°ciu
 */
function initializeModules() {
    var initLog = "=== INICIALIZ√ÅCIA SYNC Z√ÅV√ÑZKOV ===\n";
    
    // 1. MementoUtils - KRITICK√â
    try {
        if (typeof MementoUtils !== 'undefined') {
            utils = MementoUtils;
            initLog += "‚úÖ MementoUtils v" + utils.version + " naƒç√≠tan√©\n";
            
            // Kontrola modulov
            var deps = utils.checkDependencies();
            if (!deps.allLoaded) {
                initLog += "‚ö†Ô∏è Niektor√© moduly ch√Ωbaj√∫\n";
            }
        } else {
            throw new Error("MementoUtils nie je definovan√©!");
        }
    } catch(e) {
        currentEntry.set("Error_Log", "‚ùå KRITICK√Å CHYBA: " + e.toString());
        message("‚ùå MementoUtils kni≈ænica nie je dostupn√°!\nScript nem√¥≈æe pokraƒçova≈•.");
        cancel();
    }
    
    // 2. MementoConfig
    try {
        if (typeof MementoConfig !== 'undefined') {
            config = MementoConfig;
            config.init();
            initLog += "‚úÖ MementoConfig v" + config.version + " inicializovan√©\n";
            
            // Z√≠skaj konfigur√°ciu
            var baseConfig = config.getConfig('attendance');
            var obligationsConfig = config.getFieldMappings('obligations');
            
            CONFIG = {
                version: "5.0",
                scriptName: "Doch√°dzka Sync z√°v√§zkov",
                
                // Field mappings z MementoConfig
                fields: baseConfig.fieldMappings.attendance,
                zavazkyFields: obligationsConfig || baseConfig.fieldMappings.obligations,
                attributes: baseConfig.fieldMappings.attendanceAttributes,
                zamestnanciFields: baseConfig.fieldMappings.employees,
                
                // Libraries
                libraries: baseConfig.libraries,
                
                // Business rules
                stavy: {
                    neuhradene: "Neuhraden√©",
                    ciastocneUhradene: "ƒåiastoƒçne uhraden√©", 
                    uhradene: "Uhraden√©"
                }
            };
            
            initLog += "‚úÖ Konfigur√°cia naƒç√≠tan√° z MementoConfig\n";
        } else {
            utils.addError(currentEntry, "MementoConfig nie je dostupn√Ω - pou≈æ√≠vam lok√°lnu konfigur√°ciu", "init");
            CONFIG = getLocalConfig();
        }
    } catch(e) {
        utils.addError(currentEntry, "Chyba pri naƒç√≠tan√≠ MementoConfig: " + e.toString(), "init");
        CONFIG = getLocalConfig();
    }
    
    // 3. Kontrola Business funkci√≠
    if (!utils.formatEmployeeName) {
        utils.addError(currentEntry, "MementoBusiness modul nie je naƒç√≠tan√Ω - formatEmployeeName ch√Ωba", "init");
    }
    
    if (!utils.calculateDailyWage) {
        utils.addError(currentEntry, "MementoBusiness modul nie je naƒç√≠tan√Ω - calculateDailyWage ch√Ωba", "init");
    }
    
    utils.addDebug(currentEntry, initLog);
    return true;
}

/**
 * Lok√°lna konfigur√°cia (len ak MementoConfig nie je dostupn√Ω)
 */
function getLocalConfig() {
    return {
        version: "5.0",
        scriptName: "Doch√°dzka Sync z√°v√§zkov",
        
        libraries: {
            business: {
                obligations: "Z√°v√§zky",
                employees: "Zamestnanci",
                attendance: "Doch√°dzka"
            }
        },
        
        fields: {
            zamestnanci: "Zamestnanci",
            datum: "D√°tum",
            zavazky: "Z√°v√§zky",
            info: "info"
        },
        
        zavazkyFields: {
            stav: "Stav",
            datum: "D√°tum",
            typ: "Typ",
            zamestnanec: "Zamestnanec",
            veritiel: "Veriteƒæ",
            dochadzka: "Doch√°dzka",
            popis: "Popis",
            suma: "Suma",
            zaplatene: "Zaplaten√©",
            zostatok: "Zostatok",
            info: "info"
        },
        
        zamestnanciFields: {
            id: "ID",
            nick: "Nick",
            priezvisko: "Priezvisko"
        },
        
        attributes: {
            dennaMzda: "denn√° mzda"
        },
        
        stavy: {
            neuhradene: "Neuhraden√©",
            ciastocneUhradene: "ƒåiastoƒçne uhraden√©",
            uhradene: "Uhraden√©"
        }
    };
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Inicializ√°cia
        if (!initializeModules()) {
            return false;
        }
        
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "üìÖ D√°tum: " + utils.formatDate(moment()));
        
        // 1. Valid√°cia vstupn√Ωch d√°t
        var validationResult = validateInputData();
        if (!validationResult.success) {
            utils.addError(currentEntry, validationResult.error, CONFIG.scriptName);
            message("‚ùå " + validationResult.error);
            return false;
        }
        
        // 2. Z√≠skanie kni≈ænice Z√°v√§zky
        var zavazkyLib = getObligationsLibrary();
        if (!zavazkyLib) {
            message("‚ùå Kni≈ænica Z√°v√§zky nie je dostupn√°!");
            return false;
        }
        
        // 3. N√°jdenie existuj√∫cich z√°v√§zkov
        var existingObligations = findExistingObligations();
        utils.addDebug(currentEntry, "üìä Na≈°iel som " + existingObligations.length + " existuj√∫cich z√°v√§zkov");
        
        // 4. Spracovanie zamestnancov
        var processingResult = processEmployees(
            validationResult.zamestnanci,
            validationResult.datum,
            zavazkyLib,
            existingObligations
        );
        
        // 5. Oznaƒçenie checkboxu a vytvorenie info z√°znamu
        if (processingResult.total > 0) {
            markObligationsCheckbox();
            createInfoRecord(processingResult, validationResult.datum);
        }
        
        // 6. Fin√°lne zhrnutie
        logFinalSummary(processingResult);
        
        // 7. Informuj pou≈æ√≠vateƒæa
        if (processingResult.total > 0) {
            var summaryMsg = "‚úÖ Z√°v√§zky √∫spe≈°ne synchronizovan√©!\n\n";
            summaryMsg += "üìä V√Ωsledky:\n";
            summaryMsg += "‚Ä¢ Nov√©: " + processingResult.created + "\n";
            summaryMsg += "‚Ä¢ Aktualizovan√©: " + processingResult.updated + "\n";
            summaryMsg += "‚Ä¢ Celkov√° suma: " + utils.formatMoney(processingResult.totalAmount) + "\n";
            
            if (processingResult.errors > 0) {
                summaryMsg += "‚Ä¢ ‚ö†Ô∏è Chyby: " + processingResult.errors;
            }
            
            message(summaryMsg);
            return true;
        } else {
            message("‚ùå Synchroniz√°cia z√°v√§zkov zlyhala!\nPozri Error_Log pre detaily.");
            return false;
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba: " + error.toString(), CONFIG.scriptName, error);
        message("üí• Kritick√° chyba!\n" + error.toString());
        return false;
    }
}

// ==============================================
// VALID√ÅCIA A PR√çPRAVA D√ÅT
// ==============================================

/**
 * Validuje vstupn√© d√°ta z doch√°dzky
 */
function validateInputData() {
    try {
        utils.addDebug(currentEntry, "üìã Valid√°cia vstupn√Ωch d√°t...");
        
        var datum = currentEntry.field(CONFIG.fields.datum);
        var zamestnanci = utils.safeGetLinks(currentEntry, CONFIG.fields.zamestnanci);
        
        // Kontrola d√°tumu
        if (!datum) {
            return { success: false, error: "D√°tum doch√°dzky nie je vyplnen√Ω!" };
        }
        
        // Kontrola zamestnancov
        if (!zamestnanci || zamestnanci.length === 0) {
            return { success: false, error: "≈Ωiadni zamestnanci v doch√°dzke!" };
        }
        
        utils.addDebug(currentEntry, "‚úÖ Valid√°cia √∫spe≈°n√°");
        utils.addDebug(currentEntry, "  ‚Ä¢ D√°tum: " + utils.formatDate(datum));
        utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet zamestnancov: " + zamestnanci.length);
        
        return {
            success: true,
            datum: datum,
            zamestnanci: zamestnanci
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba valid√°cie: " + error.toString(), "validateInputData");
        return { success: false, error: error.toString() };
    }
}

/**
 * Z√≠ska kni≈ænicu Z√°v√§zky
 */
function getObligationsLibrary() {
    try {
        utils.addDebug(currentEntry, "üìö Naƒç√≠tavam kni≈ænicu Z√°v√§zky...");
        
        var libraryName = CONFIG.libraries.business.obligations || "Z√°v√§zky";
        var zavazkyLib = libByName(libraryName);
        
        if (!zavazkyLib) {
            utils.addError(currentEntry, "Kni≈ænica '" + libraryName + "' neexistuje!", "getObligationsLibrary");
            return null;
        }
        
        utils.addDebug(currentEntry, "‚úÖ Kni≈ænica '" + libraryName + "' naƒç√≠tan√°");
        return zavazkyLib;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri naƒç√≠tan√≠ kni≈ænice: " + error.toString(), "getObligationsLibrary");
        return null;
    }
}

// ==============================================
// PR√ÅCA SO Z√ÅV√ÑZKAMI
// ==============================================

/**
 * N√°jde existuj√∫ce z√°v√§zky pre t√∫to doch√°dzku
 */
function findExistingObligations() {
    try {
        utils.addDebug(currentEntry, "üîç Hƒæad√°m existuj√∫ce z√°v√§zky...");
        
        var libraryName = CONFIG.libraries.business?.obligations || "Z√°v√§zky";
        var zavazkyLib = libByName(libraryName);
        
        if (!zavazkyLib) {
            return [];
        }
        
        var allObligations = zavazkyLib.entries();
        var linkedObligations = [];
        var currentEntryId = currentEntry.field("ID");
        
        for (var i = 0; i < allObligations.length; i++) {
            var obligation = allObligations[i];
            var dochadzkaField = utils.safeGetLinks(obligation, CONFIG.zavazkyFields.dochadzka);
            
            // Skontroluj ƒçi obsahuje na≈°u doch√°dzku
            for (var j = 0; j < dochadzkaField.length; j++) {
                if (dochadzkaField[j] && dochadzkaField[j].field("ID") === currentEntryId) {
                    linkedObligations.push(obligation);
                    break;
                }
            }
        }
        
        return linkedObligations;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri hƒæadan√≠ z√°v√§zkov: " + error.toString(), "findExistingObligations");
        return [];
    }
}

/**
 * N√°jde z√°v√§zok pre konkr√©tneho zamestnanca
 */
function findObligationForEmployee(existingObligations, employee) {
    try {
        if (!existingObligations || !employee) return null;
        
        var employeeId = employee.field("ID");
        
        for (var i = 0; i < existingObligations.length; i++) {
            var obligation = existingObligations[i];
            var zamestnanecField = utils.safeGetLinks(obligation, CONFIG.zavazkyFields.zamestnanec);
            
            for (var j = 0; j < zamestnanecField.length; j++) {
                if (zamestnanecField[j] && zamestnanecField[j].field("ID") === employeeId) {
                    return obligation;
                }
            }
        }
        
        return null;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri hƒæadan√≠ z√°v√§zku pre zamestnanca: " + error.toString(), "findObligationForEmployee");
        return null;
    }
}

/**
 * Vypoƒç√≠ta stav z√°v√§zku podƒæa zostatku
 */
function calculateObligationStatus(zostatok) {
    if (zostatok === null || zostatok === undefined) {
        return CONFIG.stavy.neuhradene;
    } else if (zostatok <= 0) {
        return CONFIG.stavy.uhradene;
    } else {
        return CONFIG.stavy.ciastocneUhradene;
    }
}

// ==============================================
// VYTVORENIE A AKTUALIZ√ÅCIA Z√ÅV√ÑZKOV
// ==============================================

/**
 * Vytvor√≠ nov√Ω z√°v√§zok
 */
function createNewObligation(zavazkyLib, employee, datum, amount) {
    try {
        utils.addDebug(currentEntry, "  ‚ûï Vytv√°ranie nov√©ho z√°v√§zku...");
        
        // Pou≈æi MementoBusiness funkciu ak je dostupn√°
        var employeeName = utils.formatEmployeeName ? 
            utils.formatEmployeeName(employee) : 
            utils.safeGet(employee, CONFIG.zamestnanciFields.nick, "Zamestnanec");
        
        // Popis z√°v√§zku
        var description = "Mzda zamestnanca " + employeeName + " za de≈à " + utils.formatDate(datum);
        
        // Info text
        var infoText = "üìã AUTOMATICKY VYTVOREN√ù Z√ÅV√ÑZOK\n";
        infoText += "=====================================\n\n";
        infoText += "üìÖ D√°tum: " + utils.formatDate(datum) + "\n";
        infoText += "üë§ Zamestnanec: " + employeeName + "\n";
        infoText += "üí∞ Suma: " + utils.formatMoney(amount) + "\n\n";
        infoText += "‚è∞ Vytvoren√©: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n";
        infoText += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoText += "üìÇ Zdroj: Kni≈ænica Doch√°dzka\n\n";
        infoText += "‚úÖ Z√ÅV√ÑZOK VYTVOREN√ù √öSPE≈†NE";
        
        // D√°ta pre nov√Ω z√°znam
        var obligationData = {};
        obligationData[CONFIG.zavazkyFields.stav] = CONFIG.stavy.neuhradene;
        obligationData[CONFIG.zavazkyFields.datum] = datum;
        obligationData[CONFIG.zavazkyFields.typ] = "Mzda";
        obligationData[CONFIG.zavazkyFields.zamestnanec] = [employee];
        obligationData[CONFIG.zavazkyFields.veritiel] = "Zamestnanec";
        obligationData[CONFIG.zavazkyFields.dochadzka] = [currentEntry];
        obligationData[CONFIG.zavazkyFields.popis] = description;
        obligationData[CONFIG.zavazkyFields.suma] = amount;
        obligationData[CONFIG.zavazkyFields.zaplatene] = 0;
        obligationData[CONFIG.zavazkyFields.zostatok] = amount;
        obligationData[CONFIG.zavazkyFields.info] = infoText;
        
        // Vytvor z√°znam
        var newObligation = zavazkyLib.create(obligationData);
        
        if (newObligation) {
            utils.addDebug(currentEntry, "  ‚úÖ Z√°v√§zok vytvoren√Ω (ID: " + newObligation.field("ID") + ")");
            return true;
        } else {
            utils.addError(currentEntry, "Vytvorenie z√°v√§zku zlyhalo", "createNewObligation");
            return false;
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ z√°v√§zku: " + error.toString(), "createNewObligation");
        return false;
    }
}

/**
 * Aktualizuje existuj√∫ci z√°v√§zok
 */
function updateExistingObligation(obligation, amount, employeeName, datum) {
    try {
        utils.addDebug(currentEntry, "  üîÑ Aktualiz√°cia existuj√∫ceho z√°v√§zku...");
        
        var paidAmount = utils.safeGet(obligation, CONFIG.zavazkyFields.zaplatene, 0);
        var newBalance = amount - paidAmount;
        var newStatus = calculateObligationStatus(newBalance);
        
        // Aktualizuj polia
        obligation.set(CONFIG.zavazkyFields.suma, amount);
        obligation.set(CONFIG.zavazkyFields.zostatok, newBalance);
        obligation.set(CONFIG.zavazkyFields.stav, newStatus);
        
        // Aktualizuj info
        var existingInfo = utils.safeGet(obligation, CONFIG.zavazkyFields.info, "");
        var updateInfo = "\n\nüîÑ AKTUALIZOVAN√â: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n";
        updateInfo += "‚Ä¢ Nov√° suma: " + utils.formatMoney(amount) + "\n";
        updateInfo += "‚Ä¢ Zaplaten√©: " + utils.formatMoney(paidAmount) + " (zachovan√©)\n";
        updateInfo += "‚Ä¢ Zostatok: " + utils.formatMoney(newBalance) + "\n";
        updateInfo += "‚Ä¢ Stav: " + newStatus + "\n";
        updateInfo += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version;
        
        obligation.set(CONFIG.zavazkyFields.info, existingInfo + updateInfo);
        
        utils.addDebug(currentEntry, "  ‚úÖ Z√°v√§zok aktualizovan√Ω");
        utils.addDebug(currentEntry, "    üí∞ Suma: " + utils.formatMoney(amount));
        utils.addDebug(currentEntry, "    üíµ Zostatok: " + utils.formatMoney(newBalance));
        utils.addDebug(currentEntry, "    üìä Stav: " + newStatus);
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri aktualiz√°cii z√°v√§zku: " + error.toString(), "updateExistingObligation");
        return false;
    }
}

// ==============================================
// SPRACOVANIE ZAMESTNANCOV
// ==============================================

/**
 * Spracuje v≈°etk√Ωch zamestnancov a vytvor√≠/aktualizuje z√°v√§zky
 */
function processEmployees(employees, datum, zavazkyLib, existingObligations) {
    var result = {
        created: 0,
        updated: 0,
        errors: 0,
        total: 0,
        totalAmount: 0
    };
    
    try {
        utils.addDebug(currentEntry, "\nüìã Spracov√°vam zamestnancov...");
        
        for (var i = 0; i < employees.length; i++) {
            var employee = employees[i];
            
            utils.addDebug(currentEntry, "\n--- Zamestnanec " + (i + 1) + "/" + employees.length + " ---");
            
            if (!employee) {
                utils.addError(currentEntry, "Zamestnanec na poz√≠cii " + i + " je null", "processEmployees");
                result.errors++;
                continue;
            }
            
            try {
                // Z√≠skaj meno a denn√∫ mzdu
                var employeeName = utils.formatEmployeeName ? 
                    utils.formatEmployeeName(employee) : 
                    utils.safeGet(employee, CONFIG.zamestnanciFields.nick, "Zamestnanec " + (i+1));
                
                var dailyWage = getEmployeeDailyWage(employee, i);
                
                utils.addDebug(currentEntry, "  üë§ " + employeeName);
                utils.addDebug(currentEntry, "  üí∞ Denn√° mzda: " + utils.formatMoney(dailyWage));
                
                if (!dailyWage || dailyWage <= 0) {
                    utils.addDebug(currentEntry, "  ‚ö†Ô∏è Denn√° mzda je 0 alebo z√°porn√° - preskakujem");
                    continue;
                }
                
                result.totalAmount += dailyWage;
                
                // Skontroluj existuj√∫ci z√°v√§zok
                var existingObligation = findObligationForEmployee(existingObligations, employee);
                
                if (existingObligation) {
                    // Aktualizuj existuj√∫ci
                    if (updateExistingObligation(existingObligation, dailyWage, employeeName, datum)) {
                        result.updated++;
                        result.total++;
                    } else {
                        result.errors++;
                    }
                } else {
                    // Vytvor nov√Ω
                    if (createNewObligation(zavazkyLib, employee, datum, dailyWage)) {
                        result.created++;
                        result.total++;
                    } else {
                        result.errors++;
                    }
                }
                
            } catch (error) {
                utils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnanca: " + error.toString(), "processEmployee_" + i);
                result.errors++;
            }
        }
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnancov: " + error.toString(), "processEmployees");
        return result;
    }
}

/**
 * Z√≠ska denn√∫ mzdu zamestnanca z atrib√∫tu
 */
function getEmployeeDailyWage(employee, index) {
    try {
        // Z√≠skaj pole zamestnancov
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        if (!zamArray || zamArray.length <= index) {
            utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• pole zamestnancov", "getEmployeeDailyWage");
            return 0;
        }
        
        // Z√≠skaj atrib√∫t denn√° mzda
        var dailyWage = zamArray[index].attr(CONFIG.attributes.dennaMzda);
        
        // Ak m√°me MementoBusiness, m√¥≈æeme pou≈æi≈• calculateDailyWage
        if (!dailyWage && utils.calculateDailyWage) {
            var hours = zamArray[index].attr(CONFIG.attributes.odpracovane);
            dailyWage = utils.calculateDailyWage(employee, hours, currentEntry.field(CONFIG.fields.datum));
            
            if (dailyWage && dailyWage.success) {
                return dailyWage.amount;
            }
        }
        
        return dailyWage || 0;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ dennej mzdy: " + error.toString(), "getEmployeeDailyWage");
        return 0;
    }
}

// ==============================================
// FINALIZ√ÅCIA
// ==============================================

/**
 * Oznaƒç√≠ checkbox Z√°v√§zky v doch√°dzke
 */
function markObligationsCheckbox() {
    try {
        // Sk√∫s n√°js≈• spr√°vny n√°zov poƒæa
        var checkboxField = CONFIG.fields.zavazky || "Z√°v√§zky";
        
        currentEntry.set(checkboxField, true);
        utils.addDebug(currentEntry, "‚òëÔ∏è Checkbox '" + checkboxField + "' oznaƒçen√Ω");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri oznaƒçovan√≠ checkboxu: " + error.toString(), "markObligationsCheckbox");
    }
}

/**
 * Vytvor√≠ info z√°znam so s√∫hrnom
 */
function createInfoRecord(processingResult, datum) {
    try {
        var infoMessage = "üìã SYNCHRONIZ√ÅCIA Z√ÅV√ÑZKOV\n";
        infoMessage += "=====================================\n\n";
        infoMessage += "üìÖ D√°tum: " + utils.formatDate(datum) + "\n";
        infoMessage += "‚è∞ ƒåas sync: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n\n";
        
        infoMessage += "üìä V√ùSLEDKY:\n";
        infoMessage += "‚Ä¢ ‚ûï Nov√© z√°v√§zky: " + processingResult.created + "\n";
        infoMessage += "‚Ä¢ üîÑ Aktualizovan√©: " + processingResult.updated + "\n";
        infoMessage += "‚Ä¢ üí∞ Celkov√° suma: " + utils.formatMoney(processingResult.totalAmount) + "\n";
        
        if (processingResult.errors > 0) {
            infoMessage += "‚Ä¢ ‚ö†Ô∏è Chyby: " + processingResult.errors + "\n";
        }
        
        infoMessage += "\nüîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + utils.version + "\n";
        
        if (config) {
            infoMessage += "‚Ä¢ MementoConfig: v" + config.version + "\n";
        }
        
        infoMessage += "‚Ä¢ Trigger: After Save\n";
        infoMessage += "‚Ä¢ Kni≈ænica: Doch√°dzka\n\n";
        
        if (processingResult.total === processingResult.created + processingResult.updated) {
            infoMessage += "‚úÖ V≈†ETKY Z√ÅV√ÑZKY √öSPE≈†NE SYNCHRONIZOVAN√â";
        } else {
            infoMessage += "‚ö†Ô∏è ƒåIASTOƒåN√Å SYNCHRONIZ√ÅCIA\n";
            infoMessage += "Pre detaily pozri Debug_Log";
        }
        
        currentEntry.set(CONFIG.fields.info, infoMessage);
        utils.addDebug(currentEntry, "üìù Info z√°znam vytvoren√Ω");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString(), "createInfoRecord");
    }
}

/**
 * Zaloguje fin√°lne ≈°tatistiky
 */
function logFinalSummary(processingResult) {
    utils.addDebug(currentEntry, "\nüìä === V√ùSLEDKY SYNCHRONIZ√ÅCIE ===");
    utils.addDebug(currentEntry, "‚úÖ Nov√© z√°v√§zky: " + processingResult.created);
    utils.addDebug(currentEntry, "üîÑ Aktualizovan√©: " + processingResult.updated);
    utils.addDebug(currentEntry, "üí∞ Celkov√° suma: " + utils.formatMoney(processingResult.totalAmount));
    
    if (processingResult.errors > 0) {
        utils.addDebug(currentEntry, "‚ùå Chyby: " + processingResult.errors);
    }
    
    if (processingResult.total > 0 && processingResult.errors === 0) {
        utils.addDebug(currentEntry, "\nüéâ === SYNC DOKONƒåEN√ù √öSPE≈†NE! ===");
    } else if (processingResult.total > 0) {
        utils.addDebug(currentEntry, "\n‚ö†Ô∏è === ƒåIASTOƒåN√ù √öSPECH ===");
    } else {
        utils.addDebug(currentEntry, "\n‚ùå === SYNC ZLYHAL ===");
    }
    
    utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    // Kontrola existencie entry
    if (!currentEntry) {
        message("üí• KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
        cancel();
    }
    
    // Spusti hlavn√∫ funkciu
    var result = main();
    
    // Log ukonƒçenia
    if (utils) {
        utils.addDebug(currentEntry, "üìã === KONIEC " + (CONFIG ? CONFIG.scriptName : "Sync z√°v√§zkov") + " ===");
    }
    
} catch (kritickachyba) {
    // Posledn√° z√°chrana
    try {
        if (utils) {
            utils.addError(currentEntry, "KRITICK√Å CHYBA: " + kritickachyba.toString(), "critical", kritickachyba);
        } else {
            currentEntry.set("Error_Log", "üí• KRITICK√Å CHYBA: " + kritickachyba.toString());
        }
        message("üí• KRITICK√Å CHYBA!\n\n" + kritickachyba.toString());
    } catch (finalError) {
        message("üí• FAT√ÅLNA CHYBA!\n\nScript √∫plne zlyhal.");
    }
}