// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA SYNC Z√ÅV√ÑZKOV
// Verzia: 6.1 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// ‚úÖ KOMPLETN√ù REFAKTORING v6.1:
//    - ≈†trukt√∫ra ako v Z√°znam pr√°c 8.0 a Doch√°dzka 7.3
//    - Pln√© vyu≈æitie MementoUtils v7.0
//    - Prepoƒçet z√°v√§zkov a pohƒæad√°vok zamestnancov
//    - Aktualiz√°cia finanƒçn√Ωch pol√≠ v zamestnancoch
//    - ƒåist√° organiz√°cia k√≥du
// ==============================================
// üîó VY≈ΩADOVAN√â KNI≈ΩNICE:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoConfig (konfigur√°cia)
//    - MementoBusiness (business funkcie)
// ==============================================
// üìã FUNKCIE:
//    - Vytvorenie/aktualiz√°cia z√°v√§zkov z doch√°dzky
//    - Prepoƒçet finanƒçn√Ωch pol√≠ zamestnancov
//    - V√Ωpoƒçet celkov√Ωch z√°v√§zkov a pohƒæad√°vok
//    - Automatick√© oznaƒçenie checkboxov
//    - Komplexn√© info z√°znamy
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Doch√°dzka Sync Z√°v√§zkov",
    version: "6.1.2",
    
    // Referencie na centr√°lny config
    fields: {
        attendance: centralConfig.fields.attendance || {},
        obligations: centralConfig.fields.obligations || {},
        employees: centralConfig.fields.employees || {},
        common: centralConfig.fields.common || {},
        
        // ≈†pecifick√© mapovanie pre tento script
        datum: centralConfig.fields.attendance.date || "D√°tum",
        zamestnanci: centralConfig.fields.attendance.employees || "Zamestnanci",
        zavazky: centralConfig.fields.attendance.obligations || "Z√°v√§zky",
        info: centralConfig.fields.common.info || "info",
        infoTelegram: centralConfig.fields.common.infoTelegram || "info_telegram"
    },
    
    attributes: {
        attendance: centralConfig.attributes.attendanceEmployees || {
            dennaMzda: "denn√° mzda",
            odpracovane: "odpracovan√©",
            hodinovka: "hodinovka"
        }
    },
    
    libraries: centralConfig.libraries || {
        business: {
            obligations: "Z√°v√§zky",
            employees: "Zamestnanci",
            attendance: "Doch√°dzka"
        }
    },
    
    icons: centralConfig.icons || {},
    
    // ≈†pecifick√© kon≈°tanty pre z√°v√§zky
    constants: {
        stavy: {
            neuhradene: "Neuhraden√©",
            ciastocneUhradene: "ƒåiastoƒçne uhraden√©",
            uhradene: "Uhraden√©"
        },
        typy: {
            mzda: "Mzda",
            odmena: "Odmena",
            ine: "In√©"
        }
    }
};

// ==============================================
// SLEDOVANIE KROKOV
// ==============================================

var steps = {
    step1: { name: "Valid√°cia vstupn√Ωch d√°t", success: false },
    step2: { name: "Kontrola kni≈æn√≠c", success: false },
    step3: { name: "N√°jdenie existuj√∫cich z√°v√§zkov", success: false },
    step4: { name: "Spracovanie z√°v√§zkov", success: false },
    step5: { name: "Prepoƒçet financi√≠ zamestnancov", success: false },
    step6: { name: "Finaliz√°cia z√°znamu", success: false }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "‚è∞ ƒåas spustenia: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss"));
        
        // KROK 1: Valid√°cia vstupn√Ωch d√°t
        utils.addDebug(currentEntry, utils.getIcon("check") + " KROK 1: Valid√°cia vstupn√Ωch d√°t");
        var validationResult = validateInputData();
        if (!validationResult.success) {
            utils.addError(currentEntry, validationResult.error, "main");
            message("‚ùå " + validationResult.error);
            return false;
        }
        steps.step1.success = true;
        
        // KROK 2: Kontrola kni≈æn√≠c
        utils.addDebug(currentEntry, utils.getIcon("library") + " KROK 2: Kontrola potrebn√Ωch kni≈æn√≠c");
        var libraries = getRequiredLibraries();
        if (!libraries) {
            message("‚ùå Nepodarilo sa naƒç√≠ta≈• potrebn√© kni≈ænice!");
            return false;
        }
        steps.step2.success = true;
        
        // KROK 3: N√°jdenie existuj√∫cich z√°v√§zkov
        utils.addDebug(currentEntry, utils.getIcon("search") + " KROK 3: Hƒæadanie existuj√∫cich z√°v√§zkov");
        var existingObligations = findExistingObligations(libraries.zavazky);
        utils.addDebug(currentEntry, "üìä N√°jden√© existuj√∫ce z√°v√§zky: " + existingObligations.length);
        steps.step3.success = true;
        
        // KROK 4: Spracovanie z√°v√§zkov
        utils.addDebug(currentEntry, utils.getIcon("update") + " KROK 4: Vytvorenie/aktualiz√°cia z√°v√§zkov");
        var processingResult = processEmployees(
            validationResult.employees,
            validationResult.date,
            libraries,
            existingObligations
        );
        steps.step4.success = processingResult.success;
        
        // KROK 5: Prepoƒçet financi√≠ zamestnancov
        utils.addDebug(currentEntry, utils.getIcon("money") + " KROK 5: Prepoƒçet financi√≠ zamestnancov");
        var financialResult = updateEmployeeFinancials(validationResult.employees, libraries);
        steps.step5.success = financialResult.success;
        
        // KROK 6: Finaliz√°cia
        utils.addDebug(currentEntry, utils.getIcon("checkmark") + " KROK 6: Finaliz√°cia z√°znamu");
        if (processingResult.total > 0) {
            markCheckboxes();
            createInfoRecord(processingResult, validationResult.date, financialResult);
            steps.step6.success = true;
        }
        
        // Fin√°lne zhrnutie
        logFinalSummary(steps, processingResult);
        
        // Informuj pou≈æ√≠vateƒæa
        showUserMessage(processingResult, financialResult);
        
        return processingResult.success;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v main: " + error.toString(), "main", error);
        message("üí• Kritick√° chyba!\n" + error.toString());
        return false;
    }
}

// ==============================================
// KROK 1: VALID√ÅCIA
// ==============================================

/**
 * Validuje vstupn√© d√°ta z doch√°dzky
 */
function validateInputData() {
    try {
        utils.addDebug(currentEntry, "üìã Valid√°cia vstupn√Ωch d√°t...");
        
        // Naƒç√≠taj d√°ta
        var datum = utils.safeGet(currentEntry, CONFIG.fields.datum);
        var zamestnanci = utils.safeGetLinks(currentEntry, CONFIG.fields.zamestnanci);
        
        // Valid√°cia d√°tumu
        if (!datum) {
            return { 
                success: false, 
                error: "D√°tum doch√°dzky nie je vyplnen√Ω!" 
            };
        }
        
        // Valid√°cia zamestnancov
        if (!zamestnanci || zamestnanci.length === 0) {
            return { 
                success: false, 
                error: "≈Ωiadni zamestnanci v doch√°dzke!" 
            };
        }
        
        // Kontrola atrib√∫tov zamestnancov
        var validEmployees = [];
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        for (var i = 0; i < zamestnanci.length; i++) {
            var employee = zamestnanci[i];
            if (!employee) continue;
            
            // Z√≠skaj atrib√∫t denn√° mzda
            var dennaMzda = 0;
            try {
                dennaMzda = zamArray[i].attr(CONFIG.attributes.attendance.dennaMzda) || 0;
            } catch (e) {
                utils.addDebug(currentEntry, "‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ atrib√∫tu: " + e.toString());
            }
            
            if (dennaMzda && dennaMzda > 0) {
                validEmployees.push({
                    entry: employee,
                    index: i,
                    dailyWage: dennaMzda,
                    name: utils.formatEmployeeName ? utils.formatEmployeeName(employee) : 
                          employee.field("Nick") || employee.field("Priezvisko") || "Zamestnanec"
                });
                
                utils.addDebug(currentEntry, "‚úÖ " + validEmployees[validEmployees.length-1].name + 
                               " - denn√° mzda: " + utils.formatMoney(dennaMzda));
            } else {
                var empName = employee.field("Nick") || employee.field("Priezvisko") || "Zamestnanec";
                utils.addDebug(currentEntry, "‚ö†Ô∏è " + empName + " - nem√° nastaven√∫ denn√∫ mzdu");
            }
        }
        
        if (validEmployees.length === 0) {
            return { 
                success: false, 
                error: "≈Ωiadni zamestnanci nemaj√∫ nastaven√∫ denn√∫ mzdu!" 
            };
        }
        
        utils.addDebug(currentEntry, "‚úÖ Valid√°cia √∫spe≈°n√°");
        utils.addDebug(currentEntry, "  üìÖ D√°tum: " + utils.formatDate(datum));
        utils.addDebug(currentEntry, "  üë• Platn√≠ zamestnanci: " + validEmployees.length + "/" + zamestnanci.length);
        
        return {
            success: true,
            date: datum,
            employees: validEmployees,
            allEmployees: zamestnanci
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri valid√°cii: " + error.toString(), "validateInputData", error);
        return { 
            success: false, 
            error: "Chyba pri valid√°cii d√°t" 
        };
    }
}

// ==============================================
// KROK 2: KONTROLA KNI≈ΩN√çC
// ==============================================

/**
 * Z√≠ska potrebn√© kni≈ænice
 */
function getRequiredLibraries() {
    try {
        utils.addDebug(currentEntry, "üìö Z√≠skavam potrebn√© kni≈ænice...");
        
        var libraries = {};
        
        // Kni≈ænica Z√°v√§zky
        var zavazkyName = CONFIG.libraries.business.obligations || "Z√°v√§zky";
        libraries.zavazky = libByName(zavazkyName);
        if (!libraries.zavazky) {
            utils.addError(currentEntry, "Kni≈ænica '" + zavazkyName + "' nen√°jden√°!", "getRequiredLibraries");
            return null;
        }
        utils.addDebug(currentEntry, "‚úÖ Kni≈ænica Z√°v√§zky naƒç√≠tan√°");
        
        // Kni≈ænica Zamestnanci
        var zamestnanciName = CONFIG.libraries.business.employees || "Zamestnanci";
        libraries.zamestnanci = libByName(zamestnanciName);
        if (!libraries.zamestnanci) {
            utils.addError(currentEntry, "Kni≈ænica '" + zamestnanciName + "' nen√°jden√°!", "getRequiredLibraries");
            return null;
        }
        utils.addDebug(currentEntry, "‚úÖ Kni≈ænica Zamestnanci naƒç√≠tan√°");
        
        return libraries;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ kni≈æn√≠c: " + error.toString(), "getRequiredLibraries", error);
        return null;
    }
}

// ==============================================
// KROK 3: HƒΩADANIE EXISTUJ√öCICH Z√ÅV√ÑZKOV
// ==============================================

/**
 * N√°jde existuj√∫ce z√°v√§zky pre t√∫to doch√°dzku
 */
function findExistingObligations(zavazkyLib) {
    try {
        utils.addDebug(currentEntry, "üîç Hƒæad√°m existuj√∫ce z√°v√§zky...");
        
        var currentEntryId = currentEntry.field("ID");
        if (!currentEntryId) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Current entry nem√° ID");
            return [];
        }
        
        // Hƒæadaj z√°v√§zky ktor√© maj√∫ link na t√∫to doch√°dzku
        var dochadzkaField = CONFIG.fields.obligations.attendance || "Doch√°dzka";
        var query = dochadzkaField + " = '" + currentEntryId + "'";
        
        var existingObligations = zavazkyLib.find(query);
        
        utils.addDebug(currentEntry, "üìä N√°jden√Ωch z√°v√§zkov cez query: " + existingObligations.length);
        
        return existingObligations || [];
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri hƒæadan√≠ z√°v√§zkov: " + error.toString(), "findExistingObligations", error);
        return [];
    }
}

/**
 * N√°jde z√°v√§zok pre konkr√©tneho zamestnanca
 */
function findObligationForEmployee(existingObligations, employee) {
    try {
        if (!existingObligations || !employee) return null;
        
        var employeeId = employee.field("ID");
        var zamestnanecField = CONFIG.fields.obligations.employee || "Zamestnanec";
        
        for (var i = 0; i < existingObligations.length; i++) {
            var obligation = existingObligations[i];
            var linkedEmployees = utils.safeGetLinks(obligation, zamestnanecField);
            
            for (var j = 0; j < linkedEmployees.length; j++) {
                if (linkedEmployees[j] && linkedEmployees[j].field("ID") === employeeId) {
                    return obligation;
                }
            }
        }
        
        return null;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri hƒæadan√≠ z√°v√§zku: " + error.toString(), "findObligationForEmployee");
        return null;
    }
}

// ==============================================
// KROK 4: SPRACOVANIE Z√ÅV√ÑZKOV
// ==============================================

/**
 * Spracuje v≈°etk√Ωch zamestnancov a vytvor√≠/aktualizuje z√°v√§zky
 */
function processEmployees(employees, datum, libraries, existingObligations) {
    var result = {
        created: 0,
        updated: 0,
        errors: 0,
        total: 0,
        totalAmount: 0,
        success: false
    };
    
    try {
        utils.addDebug(currentEntry, "\nüìã Spracov√°vam zamestnancov...");
        
        for (var i = 0; i < employees.length; i++) {
            var empData = employees[i];
            
            utils.addDebug(currentEntry, "\n--- Zamestnanec " + (i + 1) + "/" + employees.length + ": " + empData.name + " ---");
            
            try {
                // N√°jdi existuj√∫ci z√°v√§zok pre tohto zamestnanca
                var existingObligation = findObligationForEmployee(existingObligations, empData.entry);
                
                if (existingObligation) {
                    // Aktualizuj existuj√∫ci
                    if (updateExistingObligation(existingObligation, empData.dailyWage, empData.name, datum)) {
                        result.updated++;
                        result.totalAmount += empData.dailyWage;
                    } else {
                        result.errors++;
                    }
                } else {
                    // Vytvor nov√Ω
                    if (createNewObligation(libraries.zavazky, empData.entry, datum, empData.dailyWage, empData.name)) {
                        result.created++;
                        result.totalAmount += empData.dailyWage;
                    } else {
                        result.errors++;
                    }
                }
                
                result.total++;
                
            } catch (error) {
                utils.addError(currentEntry, "Chyba pri spracovan√≠ zamestnanca: " + error.toString(), "processEmployees");
                result.errors++;
            }
        }
        
        result.success = result.errors === 0 && result.total > 0;
        
        utils.addDebug(currentEntry, "\nüìä V√Ωsledky spracovania:");
        utils.addDebug(currentEntry, "  ‚úÖ Vytvoren√©: " + result.created);
        utils.addDebug(currentEntry, "  üîÑ Aktualizovan√©: " + result.updated);
        utils.addDebug(currentEntry, "  ‚ùå Chyby: " + result.errors);
        utils.addDebug(currentEntry, "  üí∞ Celkov√° suma: " + utils.formatMoney(result.totalAmount));
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri spracovan√≠: " + error.toString(), "processEmployees", error);
        result.success = false;
        return result;
    }
}

/**
 * Vytvor√≠ nov√Ω z√°v√§zok
 */
function createNewObligation(zavazkyLib, employee, datum, amount, employeeName) {
    try {
        utils.addDebug(currentEntry, "  ‚ûï Vytv√°ranie nov√©ho z√°v√§zku...");
        
        // Pr√≠prava d√°t
        var description = "Mzda zamestnanca " + employeeName + " za de≈à " + utils.formatDate(datum);
        
        // Info text
        var infoText = "üìã AUTOMATICKY VYTVOREN√ù Z√ÅV√ÑZOK\n";
        infoText += "=====================================\n\n";
        infoText += "üìÖ D√°tum: " + utils.formatDate(datum) + "\n";
        infoText += "üë§ Zamestnanec: " + employeeName + "\n";
        infoText += "üí∞ Suma: " + utils.formatMoney(amount) + "\n\n";
        infoText += "‚è∞ Vytvoren√©: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n";
        infoText += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoText += "üìÇ Zdroj: Kni≈ænica Doch√°dzka\n\n";
        infoText += "‚úÖ Z√ÅV√ÑZOK VYTVOREN√ù √öSPE≈†NE";
        
        // D√°ta pre nov√Ω z√°znam
        var obligationData = {};
        obligationData[CONFIG.fields.obligations.state || "Stav"] = CONFIG.constants.stavy.neuhradene;
        obligationData[CONFIG.fields.obligations.date || "D√°tum"] = datum;
        obligationData[CONFIG.fields.obligations.type || "Typ"] = CONFIG.constants.typy.mzda;
        obligationData[CONFIG.fields.obligations.employee || "Zamestnanec"] = [employee];
        obligationData[CONFIG.fields.obligations.creditor || "Veriteƒæ"] = "Zamestnanec";
        obligationData[CONFIG.fields.obligations.attendance || "Doch√°dzka"] = [currentEntry];
        obligationData[CONFIG.fields.obligations.description || "Popis"] = description;
        obligationData[CONFIG.fields.obligations.amount || "Suma"] = amount;
        obligationData[CONFIG.fields.obligations.paid || "Zaplaten√©"] = 0;
        obligationData[CONFIG.fields.obligations.balance || "Zostatok"] = amount;
        obligationData[CONFIG.fields.common.info || "info"] = infoText;
        
        // Vytvor z√°znam
        var newObligation = zavazkyLib.create(obligationData);
        
        if (newObligation) {
            utils.addDebug(currentEntry, "  ‚úÖ Z√°v√§zok vytvoren√Ω (ID: " + newObligation.field("ID") + ")");
            return true;
        } else {
            utils.addError(currentEntry, "Vytvorenie z√°v√§zku zlyhalo", "createNewObligation");
            return false;
        }
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ z√°v√§zku: " + error.toString(), "createNewObligation", error);
        return false;
    }
}

/**
 * Aktualizuje existuj√∫ci z√°v√§zok
 */
function updateExistingObligation(obligation, amount, employeeName, datum) {
    try {
        utils.addDebug(currentEntry, "  üîÑ Aktualiz√°cia existuj√∫ceho z√°v√§zku...");
        
        var paidAmount = utils.safeGet(obligation, CONFIG.fields.obligations.paid || "Zaplaten√©", 0);
        var newBalance = amount - paidAmount;
        var newStatus = calculateObligationStatus(newBalance);
        
        // Aktualizuj polia
        obligation.set(CONFIG.fields.obligations.amount || "Suma", amount);
        obligation.set(CONFIG.fields.obligations.balance || "Zostatok", newBalance);
        obligation.set(CONFIG.fields.obligations.state || "Stav", newStatus);
        
        // Aktualizuj info
        var existingInfo = utils.safeGet(obligation, CONFIG.fields.common.info || "info", "");
        var updateInfo = "\n\nüîÑ AKTUALIZOVAN√â: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n";
        updateInfo += "‚Ä¢ Nov√° suma: " + utils.formatMoney(amount) + "\n";
        updateInfo += "‚Ä¢ Zaplaten√©: " + utils.formatMoney(paidAmount) + " (zachovan√©)\n";
        updateInfo += "‚Ä¢ Zostatok: " + utils.formatMoney(newBalance) + "\n";
        updateInfo += "‚Ä¢ Stav: " + newStatus + "\n";
        updateInfo += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version;
        
        obligation.set(CONFIG.fields.common.info || "info", existingInfo + updateInfo);
        
        utils.addDebug(currentEntry, "  ‚úÖ Z√°v√§zok aktualizovan√Ω");
        utils.addDebug(currentEntry, "    üí∞ Suma: " + utils.formatMoney(amount));
        utils.addDebug(currentEntry, "    üíµ Zostatok: " + utils.formatMoney(newBalance));
        utils.addDebug(currentEntry, "    üìä Stav: " + newStatus);
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri aktualiz√°cii z√°v√§zku: " + error.toString(), "updateExistingObligation", error);
        return false;
    }
}

/**
 * Vypoƒç√≠ta stav z√°v√§zku podƒæa zostatku
 */
function calculateObligationStatus(zostatok) {
    if (zostatok === null || zostatok === undefined) {
        return CONFIG.constants.stavy.neuhradene;
    } else if (zostatok <= 0) {
        return CONFIG.constants.stavy.uhradene;
    } else if (zostatok > 0) {
        return CONFIG.constants.stavy.ciastocneUhradene;
    } else {
        return CONFIG.constants.stavy.neuhradene;
    }
}

// ==============================================
// KROK 5: PREPOƒåET FINANCI√ç ZAMESTNANCOV
// ==============================================

/**
 * Aktualizuje finanƒçn√© polia v≈°etk√Ωch zamestnancov
 * Prepoƒç√≠ta z√°v√§zky, pohƒæad√°vky a saldo
 */
function updateEmployeeFinancials(employees, libraries) {
    var result = {
        success: false,
        processed: 0,
        errors: 0,
        totals: {
            zavazky: 0,
            pohladavky: 0,
            saldo: 0
        }
    };
    
    try {
        utils.addDebug(currentEntry, "\nüí∞ Prepoƒç√≠tavam financie zamestnancov...");
        
        // Spracuj ka≈æd√©ho zamestnanca
        for (var i = 0; i < employees.length; i++) {
            var empData = employees[i];
            
            try {
                var employeeEntry = empData.entry;
                utils.addDebug(currentEntry, "\nüìä Prepoƒçet pre: " + empData.name);
                
                // Z√≠skaj v≈°etky z√°v√§zky zamestnanca
                var obligations = getEmployeeObligations(employeeEntry, libraries.zavazky);
                
                // Vypoƒç√≠taj s√∫hrny
                var financials = calculateEmployeeFinancials(obligations);
                
                // Aktualizuj polia v zamestnancovi
                updateEmployeeFields(employeeEntry, financials);
                
                // Pridaj do celkov√Ωch s√∫m
                result.totals.zavazky += financials.totalObligations;
                result.totals.pohladavky += financials.totalReceivables;
                result.totals.saldo += financials.saldo;
                
                result.processed++;
                
                utils.addDebug(currentEntry, "  üí∏ Z√°v√§zky: " + utils.formatMoney(financials.totalObligations));
                utils.addDebug(currentEntry, "  üí∞ Pohƒæad√°vky: " + utils.formatMoney(financials.totalReceivables));
                utils.addDebug(currentEntry, "  üìä Saldo: " + utils.formatMoney(financials.saldo));
                
            } catch (error) {
                utils.addError(currentEntry, "Chyba pri prepoƒçte zamestnanca: " + error.toString(), "updateEmployeeFinancials");
                result.errors++;
            }
        }
        
        result.success = result.errors === 0 && result.processed > 0;
        
        utils.addDebug(currentEntry, "\nüìà CELKOV√â S√öHRNY:");
        utils.addDebug(currentEntry, "  üí∏ Celkov√© z√°v√§zky: " + utils.formatMoney(result.totals.zavazky));
        utils.addDebug(currentEntry, "  üí∞ Celkov√© pohƒæad√°vky: " + utils.formatMoney(result.totals.pohladavky));
        utils.addDebug(currentEntry, "  üìä Celkov√© saldo: " + utils.formatMoney(result.totals.saldo));
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri prepoƒçte financi√≠: " + error.toString(), "updateEmployeeFinancials", error);
        result.success = false;
        return result;
    }
}

/**
 * Z√≠ska v≈°etky z√°v√§zky zamestnanca
 */
function getEmployeeObligations(employee, zavazkyLib) {
    try {
        var employeeId = employee.field("ID");
        var zamestnanecField = CONFIG.fields.obligations.employee || "Zamestnanec";
        
        // Hƒæadaj z√°v√§zky kde je tento zamestnanec
        var obligations = zavazkyLib.find(zamestnanecField + " = '" + employeeId + "'");
        
        return obligations || [];
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ z√°v√§zkov: " + error.toString(), "getEmployeeObligations");
        return [];
    }
}

/**
 * Vypoƒç√≠ta finanƒçn√© s√∫hrny zamestnanca
 */
function calculateEmployeeFinancials(obligations) {
    var result = {
        totalObligations: 0,    // Celkov√© z√°v√§zky (ƒço firma dl≈æ√≠ zamestnancovi)
        totalReceivables: 0,    // Celkov√© pohƒæad√°vky (ƒço zamestnanec dl≈æ√≠ firme)
        paidObligations: 0,     // Zaplaten√© z√°v√§zky
        paidReceivables: 0,     // Zaplaten√© pohƒæad√°vky
        unpaidObligations: 0,   // Nezaplaten√© z√°v√§zky
        unpaidReceivables: 0,   // Nezaplaten√© pohƒæad√°vky
        saldo: 0               // Saldo (pohƒæad√°vky - z√°v√§zky)
    };
    
    try {
        for (var i = 0; i < obligations.length; i++) {
            var obligation = obligations[i];
            var suma = utils.safeGet(obligation, CONFIG.fields.obligations.amount || "Suma", 0);
            var zaplatene = utils.safeGet(obligation, CONFIG.fields.obligations.paid || "Zaplaten√©", 0);
            var zostatok = utils.safeGet(obligation, CONFIG.fields.obligations.balance || "Zostatok", 0);
            var typ = utils.safeGet(obligation, CONFIG.fields.obligations.type || "Typ", "");
            
            // Rozl√≠≈° z√°v√§zky a pohƒæad√°vky podƒæa typu
            if (typ === "Mzda" || typ === "Odmena") {
                // Z√°v√§zky - firma dl≈æ√≠ zamestnancovi
                result.totalObligations += suma;
                result.paidObligations += zaplatene;
                result.unpaidObligations += zostatok;
            } else if (typ === "P√¥≈æiƒçka" || typ === "≈†koda" || typ === "Zr√°≈æka") {
                // Pohƒæad√°vky - zamestnanec dl≈æ√≠ firme
                result.totalReceivables += suma;
                result.paidReceivables += zaplatene;
                result.unpaidReceivables += zostatok;
            }
        }
        
        // Vypoƒç√≠taj saldo (+ znamen√° ≈æe firma dl≈æ√≠, - znamen√° ≈æe zamestnanec dl≈æ√≠)
        result.saldo = result.unpaidObligations - result.unpaidReceivables;
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri v√Ωpoƒçte financi√≠: " + error.toString(), "calculateEmployeeFinancials");
        return result;
    }
}

/**
 * Aktualizuje finanƒçn√© polia v zamestnancovi
 */
function updateEmployeeFields(employee, financials) {
    try {
        // Aktualizuj polia
        employee.set(CONFIG.fields.employees.obligations || "Z√°v√§zky", financials.unpaidObligations);
        employee.set(CONFIG.fields.employees.receivables || "Pohƒæad√°vky", financials.unpaidReceivables);
        employee.set(CONFIG.fields.employees.balance || "Saldo", financials.saldo);
        
        // Voliteƒæn√© - aktualizuj aj platen√© sumy
        var paidObligField = CONFIG.fields.employees.paidObligations || "Vyplaten√©";
        if (employee.field(paidObligField) !== undefined) {
            employee.set(paidObligField, financials.paidObligations);
        }
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri aktualiz√°cii pol√≠ zamestnanca: " + error.toString(), "updateEmployeeFields");
        return false;
    }
}

// ==============================================
// KROK 6: FINALIZ√ÅCIA
// ==============================================

/**
 * Oznaƒç√≠ checkbox Z√°v√§zky v doch√°dzke
 */
function markCheckboxes() {
    try {
        // Checkbox pre z√°v√§zky
        var checkboxField = CONFIG.fields.zavazky;
        currentEntry.set(checkboxField, true);
        utils.addDebug(currentEntry, "‚òëÔ∏è Checkbox '" + checkboxField + "' oznaƒçen√Ω");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri oznaƒçovan√≠ checkboxu: " + error.toString(), "markCheckboxes", error);
    }
}

/**
 * Vytvor√≠ info z√°znam so s√∫hrnom
 */
function createInfoRecord(processingResult, datum, financialResult) {
    try {
        var infoMessage = "üìã SYNCHRONIZ√ÅCIA Z√ÅV√ÑZKOV\n";
        infoMessage += "=====================================\n\n";
        infoMessage += "üìÖ D√°tum: " + utils.formatDate(datum) + "\n";
        infoMessage += "‚è∞ ƒåas sync: " + utils.formatDate(moment(), "DD.MM.YYYY HH:mm:ss") + "\n\n";
        
        infoMessage += "üìä V√ùSLEDKY Z√ÅV√ÑZKOV:\n";
        infoMessage += "‚Ä¢ ‚ûï Nov√© z√°v√§zky: " + processingResult.created + "\n";
        infoMessage += "‚Ä¢ üîÑ Aktualizovan√©: " + processingResult.updated + "\n";
        infoMessage += "‚Ä¢ üí∞ Celkov√° suma: " + utils.formatMoney(processingResult.totalAmount) + "\n";
        
        if (processingResult.errors > 0) {
            infoMessage += "‚Ä¢ ‚ö†Ô∏è Chyby: " + processingResult.errors + "\n";
        }
        
        if (financialResult) {
            infoMessage += "\nüí∞ FINANƒåN√â S√öHRNY:\n";
            infoMessage += "‚Ä¢ üí∏ Celkov√© z√°v√§zky: " + utils.formatMoney(financialResult.totals.zavazky) + "\n";
            infoMessage += "‚Ä¢ üí∞ Celkov√© pohƒæad√°vky: " + utils.formatMoney(financialResult.totals.pohladavky) + "\n";
            infoMessage += "‚Ä¢ üìä Celkov√© saldo: " + utils.formatMoney(financialResult.totals.saldo) + "\n";
            infoMessage += "‚Ä¢ üë• Spracovan√≠ zamestnanci: " + financialResult.processed + "\n";
        }
        
        infoMessage += "\nüîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + utils.version + "\n";
        infoMessage += "‚Ä¢ Trigger: After Save\n";
        infoMessage += "‚Ä¢ Kni≈ænica: Doch√°dzka\n\n";
        
        if (processingResult.total === processingResult.created + processingResult.updated) {
            infoMessage += "‚úÖ V≈†ETKY Z√ÅV√ÑZKY √öSPE≈†NE SYNCHRONIZOVAN√â";
        } else {
            infoMessage += "‚ö†Ô∏è ƒåIASTOƒåN√Å SYNCHRONIZ√ÅCIA\n";
            infoMessage += "Pre detaily pozri Debug_Log";
        }
        
        currentEntry.set(CONFIG.fields.info, infoMessage);
        
        // Vytvor aj Telegram info ak je pole dostupn√©
        if (CONFIG.fields.infoTelegram) {
            var telegramInfo = createTelegramInfo(processingResult, datum, financialResult);
            currentEntry.set(CONFIG.fields.infoTelegram, telegramInfo);
        }
        
        utils.addDebug(currentEntry, "üìù Info z√°znamy vytvoren√©");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString(), "createInfoRecord", error);
    }
}

/**
 * Vytvor√≠ Telegram info spr√°vu
 */
function createTelegramInfo(processingResult, datum, financialResult) {
    try {
        var msg = "*üìã SYNC Z√ÅV√ÑZKOV*\\n";
        msg += "```" + utils.formatDate(datum, "DD.MM.YYYY") + "```\\n\\n";
        
        msg += "*Z√°v√§zky:*\\n";
        msg += "‚Ä¢ Nov√©: " + processingResult.created + "\\n";
        msg += "‚Ä¢ Aktualizovan√©: " + processingResult.updated + "\\n";
        msg += "‚Ä¢ Suma: " + escapeMarkdown(utils.formatMoney(processingResult.totalAmount)) + "\\n";
        
        if (financialResult) {
            msg += "\\n*Financie celkom:*\\n";
            msg += "‚Ä¢ Z√°v√§zky: " + escapeMarkdown(utils.formatMoney(financialResult.totals.zavazky)) + "\\n";
            msg += "‚Ä¢ Pohƒæad√°vky: " + escapeMarkdown(utils.formatMoney(financialResult.totals.pohladavky)) + "\\n";
            msg += "‚Ä¢ Saldo: " + escapeMarkdown(utils.formatMoney(financialResult.totals.saldo)) + "\\n";
        }
        
        return msg;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ Telegram info: " + error.toString(), "createTelegramInfo");
        return "";
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Escape markdown pre Telegram
 */
function escapeMarkdown(text) {
    if (!text) return "";
    return text.toString()
        .replace(/\\/g, "\\\\")
        .replace(/\*/g, "\\*")
        .replace(/_/g, "\\_")
        .replace(/\[/g, "\\[")
        .replace(/\]/g, "\\]")
        .replace(/\(/g, "\\(")
        .replace(/\)/g, "\\)")
        .replace(/~/g, "\\~")
        .replace(/`/g, "\\`")
        .replace(/>/g, "\\>")
        .replace(/#/g, "\\#")
        .replace(/\+/g, "\\+")
        .replace(/-/g, "\\-")
        .replace(/=/g, "\\=")
        .replace(/\|/g, "\\|")
        .replace(/\{/g, "\\{")
        .replace(/\}/g, "\\}")
        .replace(/\./g, "\\.")
        .replace(/!/g, "\\!");
}

/**
 * Zaloguje fin√°lne ≈°tatistiky
 */
function logFinalSummary(steps, processingResult) {
    try {
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

/**
 * Zobraz√≠ spr√°vu pou≈æ√≠vateƒæovi
 */
function showUserMessage(processingResult, financialResult) {
    try {
        if (processingResult.total > 0) {
            var summaryMsg = "‚úÖ Z√°v√§zky √∫spe≈°ne synchronizovan√©!\n\n";
            summaryMsg += "üìä V√Ωsledky:\n";
            summaryMsg += "‚Ä¢ Nov√©: " + processingResult.created + "\n";
            summaryMsg += "‚Ä¢ Aktualizovan√©: " + processingResult.updated + "\n";
            summaryMsg += "‚Ä¢ Celkov√° suma: " + utils.formatMoney(processingResult.totalAmount) + "\n";
            
            if (financialResult && financialResult.success) {
                summaryMsg += "\nüí∞ Financie zamestnancov:\n";
                summaryMsg += "‚Ä¢ Celkov√© z√°v√§zky: " + utils.formatMoney(financialResult.totals.zavazky) + "\n";
                summaryMsg += "‚Ä¢ Celkov√© pohƒæad√°vky: " + utils.formatMoney(financialResult.totals.pohladavky) + "\n";
                summaryMsg += "‚Ä¢ Celkov√© saldo: " + utils.formatMoney(financialResult.totals.saldo);
            }
            
            if (processingResult.errors > 0) {
                summaryMsg += "\n\n‚ö†Ô∏è Chyby: " + processingResult.errors;
            }
            
            message(summaryMsg);
        } else {
            message("‚ùå Synchroniz√°cia z√°v√§zkov zlyhala!\nPozri Error_Log pre detaily.");
        }
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri zobrazen√≠ spr√°vy: " + error.toString(), "showUserMessage");
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola z√°vislost√≠
var depCheck = utils.checkDependencies(['config', 'core', 'business']);
if (!depCheck.success) {
    message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "));
    cancel();
}

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
}