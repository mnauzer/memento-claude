// ==============================================
// MEMENTO DATABASE - POKLAD≈áA √öHRADA Z√ÅV√ÑZKOV
// Verzia: 8.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Poklad≈àa | Trigger: After Save + Action Script
// ==============================================
// üìã FUNKCIA:
//    - Automatick√° √∫hrada z√°v√§zkov zo zadanej sumy
//    - Mo≈ænos≈• zapoƒç√≠tania pohƒæad√°vok
//    - Vytvorenie preplatkov (z√°loha/pr√©mia/pohƒæad√°vka)
//    - Synchroniz√°cia s kni≈ænicami Z√°v√§zky a Pohƒæad√°vky
//    - Info z√°znamy pre audit trail
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoBusiness (business logika)
// ==============================================
// ‚úÖ OPTIMALIZOVAN√â v8.0:
//    - Vyu≈æitie centr√°lneho CONFIG z MementoConfig
//    - ≈†tandardn√© logging funkcie z MementoCore
//    - Business logika pomocou MementoBusiness
//    - ƒåist√° ≈°trukt√∫ra bez duplic√≠t
//    - Kompatibilita s MementoUtils ekosyst√©mom
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Poklad≈àa √öhrada Z√°v√§zkov",
    version: "8.0.2",
    
    // Referencie na centr√°lny config
    fields: {
        // Poklad≈àa polia
        cashBook: centralConfig.fields.cashBook,
        
        // Z√°v√§zky polia - pou≈æ√≠vame priame n√°zvy pol√≠
        obligations: {
            date: "D√°tum",
            type: "Typ",
            state: "Stav",
            creditor: "Veriteƒæ",
            employee: "Zamestnanec",
            supplier: "Dod√°vateƒæ",
            partner: "Partner",
            client: "Klient",
            amount: "Suma",
            paid: "Zaplaten√©",
            balance: "Zostatok",
            description: "Popis",
            info: "info"
        },
        
        // Pohƒæad√°vky polia
        receivables: {
            date: "D√°tum",
            type: "Typ",
            state: "Stav",
            creditor: "Veriteƒæ",
            employee: "Zamestnanec",
            supplier: "Dod√°vateƒæ",
            partner: "Partner",
            client: "Klient",
            amount: "Suma",
            paid: "Zaplaten√©",
            balance: "Zostatok",
            description: "Popis",
            info: "info"
        },
        
        // Spoloƒçn√© polia
        common: centralConfig.fields.common,
        
        // Mapovanie pre r√Ωchly pr√≠stup
        uhradaZavazku: "√öhrada z√°v√§zku",
        zapocitatPohladavku: "Zapoƒç√≠ta≈• pohƒæad√°vku",
        zavazky: "Z√°v√§zky",
        pohladavky: "Pohƒæad√°vky",
        suma: "Suma",
        zPreplatkulytvori≈•: "Z preplatku vytvori≈•",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },
    
    // Kni≈ænice
    libraries: {
        cashBook: centralConfig.libraries.cashBook || "Poklad≈àa",
        obligations: centralConfig.libraries.obligations || "Z√°v√§zky",
        receivables: centralConfig.libraries.receivables || "Pohƒæad√°vky",
        employees: centralConfig.libraries.employees || "Zamestnanci"
    },
    
    // Ikony
    icons: centralConfig.icons,
    
    // Kon≈°tanty
    constants: {
        // Stavy
        stavy: {
            neuhradene: "Neuhraden√©",
            ciastocneUhradene: "ƒåiastoƒçne uhraden√©",
            uhradene: "Uhraden√©"
        },
        
        // Typy preplatkov
        typyPreplatku: {
            pohladavka: "Pohƒæad√°vku",
            premia: "Pr√©miu",
            zaloha: "Z√°lohu"
        },
        
        // √öƒçel v√Ωdaja
        ucelVydaja: {
            mzda: "Mzda",
            mzdaPremia: "Mzda pr√©mia",
            mzdaZaloha: "Mzda z√°loha",
            fakturyDodavatelov: "Fakt√∫ry dod√°vateƒæov",
            ostatneVydavky: "Ostatn√© v√Ωdavky"
        },
        
        // Pohyb
        pohyb: {
            prijem: "Pr√≠jem",
            vydavok: "V√Ωdavok"
        }
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "ƒåas spustenia: " + utils.formatDate(moment()));
        
        // Kroky spracovania
        var steps = {
            step1: { success: false, name: "Kontrola sp√∫≈°≈•ac√≠ch podmienok" },
            step2: { success: false, name: "Valid√°cia a filtrovanie z√°v√§zkov" },
            step3: { success: false, name: "Kontrola a spracovanie pohƒæad√°vok" },
            step4: { success: false, name: "Proces √∫hrad z√°v√§zkov" },
            step5: { success: false, name: "Spracovanie preplatku" },
            step6: { success: false, name: "Finaliz√°cia transakcie" }
        };
        
        // KROK 1: Kontrola sp√∫≈°≈•ac√≠ch podmienok
        utils.addDebug(currentEntry, utils.getIcon("validation") + " KROK 1: Kontrola sp√∫≈°≈•ac√≠ch podmienok");
        
        var uhradaZavazku = utils.safeGet(currentEntry, CONFIG.fields.uhradaZavazku, false);
        
        if (!uhradaZavazku) {
            utils.addDebug(currentEntry, "‚ùå Script ukonƒçen√Ω - '√öhrada z√°v√§zku' nie je za≈°krtnut√°");
            return true; // Nekonƒç√≠me chybou, len preskakujeme
        }
        
        // Kontrola ƒçi u≈æ nebola √∫hrada spracovan√°
        var infoContent = utils.safeGet(currentEntry, CONFIG.fields.info, "");
        if (infoContent.indexOf("√öHRADA Z√ÅV√ÑZKOV DOKONƒåEN√Å") !== -1) {
            utils.addDebug(currentEntry, "‚úÖ √öhrada u≈æ bola spracovan√° - preskakujem");
            return true;
        }
        
        steps.step1.success = true;
        
        // KROK 2: Valid√°cia a filtrovanie z√°v√§zkov
        utils.addDebug(currentEntry, utils.getIcon("validation") + " KROK 2: Valid√°cia z√°v√§zkov");
        
        var validationResult = validateObligations();
        if (!validationResult.success) {
            utils.addError(currentEntry, validationResult.error, "main");
            message("‚ùå " + validationResult.error);
            return false;
        }
        steps.step2.success = true;
        
        // KROK 3: Kontrola a spracovanie pohƒæad√°vok
        utils.addDebug(currentEntry, utils.getIcon("search") + " KROK 3: Kontrola pohƒæad√°vok");
        
        var pohladavkyResult = checkAndProcessReceivables(validationResult.ownerInfo, validationResult.dostupnaSuma);
        var finalAmount = pohladavkyResult.finalAmount;
        var usedReceivables = pohladavkyResult.usedAmount;
        
        steps.step3.success = true;
        
        // KROK 4: Proces √∫hrad z√°v√§zkov
        utils.addDebug(currentEntry, utils.getIcon("money") + " KROK 4: Proces √∫hrady z√°v√§zkov");
        
        var paymentResult = processPayments(validationResult.validZavazky, finalAmount, validationResult.ownerInfo);
        steps.step4.success = paymentResult.success;
        
        // KROK 5: Spracovanie preplatku
        if (paymentResult.preplatokSuma > 0) {
            utils.addDebug(currentEntry, utils.getIcon("create") + " KROK 5: Spracovanie preplatku");
            
            var typPreplatku = utils.safeGet(currentEntry, CONFIG.fields.zPreplatkulytvori≈•);
            var preplatokResult = processOverpayment(paymentResult.preplatokSuma, typPreplatku, validationResult.ownerInfo);
            steps.step5.success = preplatokResult.success;
        } else {
            steps.step5.success = true;
        }
        
        // KROK 6: Finaliz√°cia transakcie
        utils.addDebug(currentEntry, utils.getIcon("save") + " KROK 6: Finaliz√°cia transakcie");
        finalizeTransaction(validationResult.dostupnaSuma, paymentResult, validationResult.ownerInfo, usedReceivables);
        steps.step6.success = true;
        
        // Z√°vereƒçn√© zhrnutie
        logFinalSummary(steps);
        
        // Zobraz report u≈æ√≠vateƒæovi
        var finalReport = generateFinalReport(
            validationResult.dostupnaSuma, 
            paymentResult.preplatokSuma, 
            paymentResult, 
            validationResult.ownerInfo,
            typPreplatku,
            usedReceivables
        );
        
        message(finalReport);
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message("‚ùå Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// KROK 2: VALID√ÅCIA Z√ÅV√ÑZKOV
// ==============================================

function validateObligations() {
    try {
        var zavazkyArray = utils.safeGetLinks(currentEntry, CONFIG.fields.zavazky);
        
        if (!zavazkyArray || zavazkyArray.length === 0) {
            return { success: false, error: "Nie s√∫ vybran√© ≈æiadne z√°v√§zky!" };
        }
        
        utils.addDebug(currentEntry, "  üìã Poƒçet vybran√Ωch z√°v√§zkov: " + zavazkyArray.length);
        
        // Z√≠skanie sumy
        var suma = utils.safeGet(currentEntry, CONFIG.fields.suma, 0);
        suma = parseFloat(suma);
        
        if (isNaN(suma) || suma <= 0) {
            return { success: false, error: "Suma mus√≠ by≈• v√§ƒç≈°ia ako 0‚Ç¨!" };
        }
        
        // Filtrovanie platn√Ωch z√°v√§zkov
        var validZavazky = [];
        var ownerInfo = null;
        var totalZostatok = 0;
        
        for (var i = 0; i < zavazkyArray.length; i++) {
            var zavazok = zavazkyArray[i];
            var stav = utils.safeGet(zavazok, CONFIG.fields.obligations.state);
            
            // Kontrola stavu
            if (stav !== CONFIG.constants.stavy.neuhradene && 
                stav !== CONFIG.constants.stavy.ciastocneUhradene) {
                utils.addDebug(currentEntry, "  ‚ö†Ô∏è Z√°v√§zok #" + zavazok.field("ID") + 
                             " preskoƒçen√Ω - stav: " + stav, "warning");
                continue;
            }
            
            // Z√≠skanie vlastn√≠ka
            var currentOwner = getObligationOwner(zavazok);
            if (!currentOwner) {
                utils.addDebug(currentEntry, "  ‚ö†Ô∏è Z√°v√§zok #" + zavazok.field("ID") + 
                             " nem√° vlastn√≠ka", "warning");
                continue;
            }
            
            // Kontrola konzistentnosti vlastn√≠ka
            if (!ownerInfo) {
                ownerInfo = currentOwner;
            } else if (ownerInfo.id !== currentOwner.id) {
                return { 
                    success: false, 
                    error: "V≈°etky z√°v√§zky musia ma≈• rovnak√©ho vlastn√≠ka!\n" +
                          "Prv√Ω vlastn√≠k: " + ownerInfo.displayName + "\n" +
                          "Konfliktn√Ω vlastn√≠k: " + currentOwner.displayName 
                };
            }
            
            var zostatok = utils.safeGet(zavazok, CONFIG.fields.obligations.balance, 0);
            totalZostatok += zostatok;
            validZavazky.push(zavazok);
        }
        
        if (validZavazky.length === 0) {
            return { success: false, error: "≈Ωiadne platn√© z√°v√§zky na uhradenie!" };
        }
        
        utils.addDebug(currentEntry, "‚úÖ Valid√°cia √∫spe≈°n√°:");
        utils.addDebug(currentEntry, "  ‚Ä¢ Platn√© z√°v√§zky: " + validZavazky.length);
        utils.addDebug(currentEntry, "  ‚Ä¢ Vlastn√≠k: " + ownerInfo.displayName);
        utils.addDebug(currentEntry, "  ‚Ä¢ Celkov√Ω zostatok: " + utils.formatMoney(totalZostatok));
        utils.addDebug(currentEntry, "  ‚Ä¢ Dostupn√° suma: " + utils.formatMoney(suma));
        
        return {
            success: true,
            validZavazky: validZavazky,
            ownerInfo: ownerInfo,
            totalZostatok: totalZostatok,
            dostupnaSuma: suma
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "validateObligations", error);
        return { success: false, error: "Chyba valid√°cie: " + error.toString() };
    }
}

// ==============================================
// POMOCN√Å FUNKCIA: Z√çSKANIE VLASTN√çKA Z√ÅV√ÑZKU
// ==============================================

function getObligationOwner(zavazok) {
    try {
        // Kontrola typu veriteƒæa a z√≠skanie vlastn√≠ka
        var creditorType = utils.safeGet(zavazok, CONFIG.fields.obligations.creditor);
        
        var owner = null;
        var type = null;
        var displayName = "Nezn√°my";
        
        // Zamestnanec
        var employees = utils.safeGetLinks(zavazok, CONFIG.fields.obligations.employee);
        if (employees && employees.length > 0) {
            owner = employees[0];
            type = "employee";
            displayName = utils.formatEmployeeName(owner);
        }
        
        // Dod√°vateƒæ
        if (!owner) {
            var suppliers = utils.safeGetLinks(zavazok, CONFIG.fields.obligations.supplier);
            if (suppliers && suppliers.length > 0) {
                owner = suppliers[0];
                type = "supplier";
                displayName = utils.safeGet(owner, "N√°zov") || "Dod√°vateƒæ";
            }
        }
        
        // Partner
        if (!owner) {
            var partners = utils.safeGetLinks(zavazok, CONFIG.fields.obligations.partner);
            if (partners && partners.length > 0) {
                owner = partners[0];
                type = "partner";
                displayName = utils.safeGet(owner, "N√°zov") || "Partner";
            }
        }
        
        // Klient
        if (!owner) {
            var clients = utils.safeGetLinks(zavazok, CONFIG.fields.obligations.client);
            if (clients && clients.length > 0) {
                owner = clients[0];
                type = "client";
                displayName = utils.safeGet(owner, "N√°zov") || "Klient";
            }
        }
        
        if (!owner) {
            return null;
        }
        
        return {
            owner: owner,
            type: type,
            displayName: displayName,
            id: owner.field("ID") || owner.field("id"),
            creditorType: creditorType
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ vlastn√≠ka", "getObligationOwner", error);
        return null;
    }
}

// ==============================================
// KROK 3: KONTROLA A SPRACOVANIE POHƒΩAD√ÅVOK
// ==============================================

function checkAndProcessReceivables(ownerInfo, zakladnaSuma) {
    try {
        var zapocitat = utils.safeGet(currentEntry, CONFIG.fields.zapocitatPohladavku, false);
        
        if (!zapocitat) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Zapoƒç√≠tanie pohƒæad√°vok nie je po≈æadovan√©");
            return { finalAmount: zakladnaSuma, usedAmount: 0 };
        }
        
        // Z√≠skanie pohƒæad√°vok
        var pohladavkyArray = utils.safeGetLinks(currentEntry, CONFIG.fields.pohladavky);
        
        if (!pohladavkyArray || pohladavkyArray.length === 0) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è ≈Ωiadne pohƒæad√°vky na zapoƒç√≠tanie", "warning");
            return { finalAmount: zakladnaSuma, usedAmount: 0 };
        }
        
        // Filtrovanie platn√Ωch pohƒæad√°vok
        var validPohladavky = [];
        var totalPohladavky = 0;
        
        for (var i = 0; i < pohladavkyArray.length; i++) {
            var pohladavka = pohladavkyArray[i];
            var pohladavkaOwner = getReceivableOwner(pohladavka);
            
            // Kontrola vlastn√≠ka
            if (!pohladavkaOwner || pohladavkaOwner.id !== ownerInfo.id) {
                utils.addDebug(currentEntry, "  ‚ö†Ô∏è Pohƒæad√°vka #" + pohladavka.field("ID") + 
                             " m√° in√©ho vlastn√≠ka", "warning");
                continue;
            }
            
            var zostatok = utils.safeGet(pohladavka, CONFIG.fields.receivables.balance, 0);
            if (zostatok > 0) {
                validPohladavky.push({
                    entry: pohladavka,
                    zostatok: zostatok
                });
                totalPohladavky += zostatok;
            }
        }
        
        if (validPohladavky.length === 0) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è ≈Ωiadne platn√© pohƒæad√°vky rovnak√©ho vlastn√≠ka", "warning");
            return { finalAmount: zakladnaSuma, usedAmount: 0 };
        }
        
        // Spracovanie pohƒæad√°vok
        var usedAmount = 0;
        var potrebnaSuma = Math.min(totalPohladavky, zakladnaSuma);
        
        for (var j = 0; j < validPohladavky.length && potrebnaSuma > 0; j++) {
            var pohladavkaInfo = validPohladavky[j];
            var pouzit = Math.min(pohladavkaInfo.zostatok, potrebnaSuma);
            
            // Aktualiz√°cia pohƒæad√°vky
            var novyZostatok = pohladavkaInfo.zostatok - pouzit;
            var noveZaplatene = utils.safeGet(pohladavkaInfo.entry, CONFIG.fields.receivables.paid, 0) + pouzit;
            
            utils.safeSet(pohladavkaInfo.entry, CONFIG.fields.receivables.paid, noveZaplatene);
            utils.safeSet(pohladavkaInfo.entry, CONFIG.fields.receivables.balance, novyZostatok);
            utils.safeSet(pohladavkaInfo.entry, CONFIG.fields.receivables.state, 
                         novyZostatok > 0 ? CONFIG.constants.stavy.ciastocneUhradene : CONFIG.constants.stavy.uhradene);
            
            // Info z√°znam
            utils.addInfo(pohladavkaInfo.entry, "ZAPOƒå√çTANIE POHƒΩAD√ÅVKY", {
                suma: pouzit,
                zostatok: novyZostatok,
                zdrojZaznam: "Poklad≈àa #" + currentEntry.field("ID")
            });
            
            usedAmount += pouzit;
            potrebnaSuma -= pouzit;
            
            utils.addDebug(currentEntry, "  ‚úÖ Pou≈æit√° pohƒæad√°vka #" + pohladavkaInfo.entry.field("ID") + 
                         ": " + utils.formatMoney(pouzit));
        }
        
        var finalAmount = zakladnaSuma + usedAmount;
        
        utils.addDebug(currentEntry, "‚úÖ Pohƒæad√°vky spracovan√©:");
        utils.addDebug(currentEntry, "  ‚Ä¢ Pou≈æit√° suma: " + utils.formatMoney(usedAmount));
        utils.addDebug(currentEntry, "  ‚Ä¢ Fin√°lna suma: " + utils.formatMoney(finalAmount));
        
        return { finalAmount: finalAmount, usedAmount: usedAmount };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "checkAndProcessReceivables", error);
        return { finalAmount: zakladnaSuma, usedAmount: 0 };
    }
}

// ==============================================
// POMOCN√Å FUNKCIA: Z√çSKANIE VLASTN√çKA POHƒΩAD√ÅVKY
// ==============================================

function getReceivableOwner(pohladavka) {
    try {
        var owner = null;
        var type = null;
        var displayName = "Nezn√°my";
        
        // Podobn√° logika ako pri z√°v√§zkoch
        var employees = utils.safeGetLinks(pohladavka, CONFIG.fields.receivables.employee);
        if (employees && employees.length > 0) {
            owner = employees[0];
            type = "employee";
            displayName = utils.formatEmployeeName(owner);
        }
        
        if (!owner) {
            var suppliers = utils.safeGetLinks(pohladavka, CONFIG.fields.receivables.supplier);
            if (suppliers && suppliers.length > 0) {
                owner = suppliers[0];
                type = "supplier";
                displayName = utils.safeGet(owner, "N√°zov") || "Dod√°vateƒæ";
            }
        }
        
        if (!owner) {
            var partners = utils.safeGetLinks(pohladavka, CONFIG.fields.receivables.partner);
            if (partners && partners.length > 0) {
                owner = partners[0];
                type = "partner";
                displayName = utils.safeGet(owner, "N√°zov") || "Partner";
            }
        }
        
        if (!owner) {
            var clients = utils.safeGetLinks(pohladavka, CONFIG.fields.receivables.client);
            if (clients && clients.length > 0) {
                owner = clients[0];
                type = "client";
                displayName = utils.safeGet(owner, "N√°zov") || "Klient";
            }
        }
        
        if (!owner) {
            return null;
        }
        
        return {
            owner: owner,
            type: type,
            displayName: displayName,
            id: owner.field("ID") || owner.field("id")
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ vlastn√≠ka pohƒæad√°vky", "getReceivableOwner", error);
        return null;
    }
}

// ==============================================
// KROK 4: PROCES √öHRAD Z√ÅV√ÑZKOV
// ==============================================

function processPayments(validZavazky, dostupnaSuma, ownerInfo) {
    try {
        utils.addDebug(currentEntry, "Sp√∫≈°≈•am proces √∫hrad...");
        utils.addDebug(currentEntry, "  ‚Ä¢ Dostupn√° suma: " + utils.formatMoney(dostupnaSuma));
        utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet z√°v√§zkov: " + validZavazky.length);
        
        var uhradeneZavazky = [];
        var datumyZavazkov = [];
        var zbyvajucaSuma = dostupnaSuma;
        
        // Zoradenie z√°v√§zkov chronologicky
        validZavazky.sort(function(a, b) {
            var dateA = utils.safeGet(a, CONFIG.fields.obligations.date, new Date(0));
            var dateB = utils.safeGet(b, CONFIG.fields.obligations.date, new Date(0));
            return new Date(dateA) - new Date(dateB);
        });
        
        // Spracovanie ka≈æd√©ho z√°v√§zku
        for (var i = 0; i < validZavazky.length && zbyvajucaSuma > 0.01; i++) {
            var zavazok = validZavazky[i];
            var zostatok = utils.safeGet(zavazok, CONFIG.fields.obligations.balance, 0);
            var datum = utils.safeGet(zavazok, CONFIG.fields.obligations.date);
            
            utils.addDebug(currentEntry, "  üìã Z√°v√§zok " + (i + 1) + "/" + validZavazky.length + 
                         ": " + utils.formatMoney(zostatok));
            
            if (zbyvajucaSuma >= zostatok) {
                // √öpln√° √∫hrada
                processFullPayment(zavazok, zostatok, ownerInfo);
                
                uhradeneZavazky.push({
                    zavazok: zavazok,
                    amount: zostatok,
                    type: "√∫pln√°"
                });
                
                zbyvajucaSuma = Math.round((zbyvajucaSuma - zostatok) * 100) / 100;
                
            } else if (zbyvajucaSuma > 0) {
                // ƒåiastoƒçn√° √∫hrada
                processPartialPayment(zavazok, zbyvajucaSuma, ownerInfo);
                
                uhradeneZavazky.push({
                    zavazok: zavazok,
                    amount: zbyvajucaSuma,
                    type: "ƒçiastoƒçn√°"
                });
                
                zbyvajucaSuma = 0;
            }
            
            // Zaznamenanie d√°tumu
            if (datum) {
                datumyZavazkov.push(utils.formatDate(datum));
            }
        }
        
        utils.addDebug(currentEntry, "‚úÖ Proces √∫hrad dokonƒçen√Ω:");
        utils.addDebug(currentEntry, "  ‚Ä¢ Uhraden√© z√°v√§zky: " + uhradeneZavazky.length);
        utils.addDebug(currentEntry, "  ‚Ä¢ Preplatok: " + utils.formatMoney(zbyvajucaSuma));
        
        return {
            success: true,
            uhradeneZavazky: uhradeneZavazky,
            datumyZavazkov: datumyZavazkov,
            preplatokSuma: zbyvajucaSuma
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processPayments", error);
        return {
            success: false,
            uhradeneZavazky: [],
            datumyZavazkov: [],
            preplatokSuma: 0
        };
    }
}

// ==============================================
// POMOCN√â FUNKCIE PRE PLATBY
// ==============================================

function processFullPayment(zavazok, suma, ownerInfo) {
    try {
        var pvodneZaplatene = utils.safeGet(zavazok, CONFIG.fields.obligations.paid, 0);
        var noveZaplatene = pvodneZaplatene + suma;
        
        // Aktualiz√°cia z√°v√§zku
        utils.safeSet(zavazok, CONFIG.fields.obligations.paid, noveZaplatene);
        utils.safeSet(zavazok, CONFIG.fields.obligations.balance, 0);
        utils.safeSet(zavazok, CONFIG.fields.obligations.state, CONFIG.constants.stavy.uhradene);
        
        // Info z√°znam
        utils.addInfo(zavazok, "√öPLN√Å √öHRADA Z√ÅV√ÑZKU", {
            suma: suma,
            zostatok: 0,
            vlastnik: ownerInfo.displayName,
            zdrojZaznam: "Poklad≈àa #" + currentEntry.field("ID")
        });
        
        utils.addDebug(currentEntry, "    ‚úÖ √öpln√° √∫hrada: " + utils.formatMoney(suma));
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processFullPayment", error);
    }
}

function processPartialPayment(zavazok, suma, ownerInfo) {
    try {
        var zostatok = utils.safeGet(zavazok, CONFIG.fields.obligations.balance, 0);
        var pvodneZaplatene = utils.safeGet(zavazok, CONFIG.fields.obligations.paid, 0);
        var noveZaplatene = pvodneZaplatene + suma;
        var novyZostatok = zostatok - suma;
        
        // Aktualiz√°cia z√°v√§zku
        utils.safeSet(zavazok, CONFIG.fields.obligations.paid, noveZaplatene);
        utils.safeSet(zavazok, CONFIG.fields.obligations.balance, novyZostatok);
        utils.safeSet(zavazok, CONFIG.fields.obligations.state, CONFIG.constants.stavy.ciastocneUhradene);
        
        // Info z√°znam
        utils.addInfo(zavazok, "ƒåIASTOƒåN√Å √öHRADA Z√ÅV√ÑZKU", {
            suma: suma,
            zostatok: novyZostatok,
            vlastnik: ownerInfo.displayName,
            zdrojZaznam: "Poklad≈àa #" + currentEntry.field("ID")
        });
        
        utils.addDebug(currentEntry, "    üîÑ ƒåiastoƒçn√° √∫hrada: " + utils.formatMoney(suma) + 
                     ", zost√°va: " + utils.formatMoney(novyZostatok));
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processPartialPayment", error);
    }
}

// ==============================================
// KROK 5: SPRACOVANIE PREPLATKU
// ==============================================

function processOverpayment(preplatokSuma, typPreplatku, ownerInfo) {
    try {
        utils.addDebug(currentEntry, "Spracov√°vam preplatok: " + utils.formatMoney(preplatokSuma));
        
        if (!typPreplatku) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Typ preplatku nie je nastaven√Ω", "warning");
            return { success: false };
        }
        
        var result = { success: false };
        
        switch (typPreplatku) {
            case CONFIG.constants.typyPreplatku.pohladavka:
                result = createReceivableFromOverpayment(preplatokSuma, ownerInfo);
                break;
                
            case CONFIG.constants.typyPreplatku.zaloha:
                result = createAdvancePayment(preplatokSuma, ownerInfo);
                break;
                
            case CONFIG.constants.typyPreplatku.premia:
                result = createBonusPayment(preplatokSuma, ownerInfo);
                break;
                
            default:
                utils.addError(currentEntry, "Nezn√°my typ preplatku: " + typPreplatku, "processOverpayment");
        }
        
        if (result.success) {
            utils.addDebug(currentEntry, "‚úÖ Preplatok spracovan√Ω ako: " + typPreplatku);
        }
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processOverpayment", error);
        return { success: false };
    }
}

// ==============================================
// FUNKCIE PRE VYTVORENIE PREPLATKOV
// ==============================================

function createReceivableFromOverpayment(suma, ownerInfo) {
    try {
        var pohladavkyLib = libByName(CONFIG.libraries.receivables);
        if (!pohladavkyLib) {
            utils.addError(currentEntry, "Kni≈ænica Pohƒæad√°vky nen√°jden√°", "createReceivableFromOverpayment");
            return { success: false };
        }
        
        var novaPohladavka = pohladavkyLib.create({});
        
        // Nastavenie z√°kladn√Ωch √∫dajov
        utils.safeSet(novaPohladavka, CONFIG.fields.receivables.date, moment().toDate());
        utils.safeSet(novaPohladavka, CONFIG.fields.receivables.type, "Preplatok z √∫hrady z√°v√§zkov");
        utils.safeSet(novaPohladavka, CONFIG.fields.receivables.state, CONFIG.constants.stavy.neuhradene);
        utils.safeSet(novaPohladavka, CONFIG.fields.receivables.amount, suma);
        utils.safeSet(novaPohladavka, CONFIG.fields.receivables.paid, 0);
        utils.safeSet(novaPohladavka, CONFIG.fields.receivables.balance, suma);
        
        // Nastavenie vlastn√≠ka
        if (ownerInfo.type === "employee") {
            utils.safeSet(novaPohladavka, CONFIG.fields.receivables.employee, [ownerInfo.owner]);
        } else if (ownerInfo.type === "supplier") {
            utils.safeSet(novaPohladavka, CONFIG.fields.receivables.supplier, [ownerInfo.owner]);
        } else if (ownerInfo.type === "partner") {
            utils.safeSet(novaPohladavka, CONFIG.fields.receivables.partner, [ownerInfo.owner]);
        } else if (ownerInfo.type === "client") {
            utils.safeSet(novaPohladavka, CONFIG.fields.receivables.client, [ownerInfo.owner]);
        }
        
        // Popis
        var popis = "Preplatok z √∫hrady z√°v√§zkov - " + ownerInfo.displayName;
        utils.safeSet(novaPohladavka, CONFIG.fields.receivables.description, popis);
        
        // Info z√°znam
        utils.addInfo(novaPohladavka, "AUTOMATICKY VYTVOREN√Å POHƒΩAD√ÅVKA", {
            dovod: "Preplatok z √∫hrady z√°v√§zkov",
            suma: suma,
            vlastnik: ownerInfo.displayName,
            zdrojZaznam: "Poklad≈àa #" + currentEntry.field("ID"),
            zdrojKniznica: CONFIG.libraries.cashBook
        });
        
        // Linknutie pohƒæad√°vky na poklad≈àu
        var existingPohladavky = utils.safeGetLinks(currentEntry, CONFIG.fields.pohladavky) || [];
        existingPohladavky.push(novaPohladavka);
        utils.safeSet(currentEntry, CONFIG.fields.pohladavky, existingPohladavky);
        
        utils.addDebug(currentEntry, "  ‚úÖ Vytvoren√° pohƒæad√°vka #" + novaPohladavka.field("ID"));
        
        return { success: true, pohladavka: novaPohladavka };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createReceivableFromOverpayment", error);
        return { success: false };
    }
}

function createAdvancePayment(suma, ownerInfo) {
    try {
        // Pre z√°lohu vytv√°rame aj pohƒæad√°vku a nov√Ω pokladniƒçn√Ω z√°znam
        var pohladavkaResult = createReceivableFromOverpayment(suma, ownerInfo);
        if (!pohladavkaResult.success) {
            return { success: false };
        }
        
        // Vytvorenie nov√©ho pokladniƒçn√©ho z√°znamu pre z√°lohu
        var pokladnaLib = libByName(CONFIG.libraries.cashBook);
        if (!pokladnaLib) {
            utils.addError(currentEntry, "Kni≈ænica Poklad≈àa nen√°jden√°", "createAdvancePayment");
            return { success: false };
        }
        
        var novyZaznam = pokladnaLib.create({});
        
        // Nastavenie √∫dajov
        utils.safeSet(novyZaznam, CONFIG.fields.cashBook.date, moment().toDate());
        utils.safeSet(novyZaznam, CONFIG.fields.cashBook.transactionType, CONFIG.constants.pohyb.vydavok);
        utils.safeSet(novyZaznam, CONFIG.fields.cashBook.sum, suma);
        
        // √öƒçel v√Ωdaja
        var ucelVydaja = CONFIG.constants.ucelVydaja.ostatneVydavky;
        if (ownerInfo.type === "employee") {
            ucelVydaja = CONFIG.constants.ucelVydaja.mzdaZaloha;
        }
        utils.safeSet(novyZaznam, "√öƒçel v√Ωdaja", ucelVydaja);
        
        // Popis platby
        var popisZalohy = ownerInfo.displayName + ", z√°loha na mzdu";
        utils.safeSet(novyZaznam, "Popis platby", popisZalohy);
        
        // Vlastn√≠k
        if (ownerInfo.type === "employee") {
            utils.safeSet(novyZaznam, CONFIG.fields.cashBook.employee, [ownerInfo.owner]);
        } else if (ownerInfo.type === "supplier") {
            utils.safeSet(novyZaznam, CONFIG.fields.cashBook.supplier, [ownerInfo.owner]);
        }
        
        // Prepojenie s pohƒæad√°vkou
        utils.safeSet(novyZaznam, CONFIG.fields.pohladavky, [pohladavkaResult.pohladavka]);
        
        // Z pokladne
        var zPokladne = utils.safeGetLinks(currentEntry, "Z pokladne");
        if (zPokladne && zPokladne.length > 0) {
            utils.safeSet(novyZaznam, "Z pokladne", zPokladne);
        }
        
        // Info z√°znam
        utils.addInfo(novyZaznam, "AUTOMATICKY VYTVOREN√Å Z√ÅLOHA", {
            dovod: "Preplatok z √∫hrady z√°v√§zkov",
            suma: suma,
            vlastnik: ownerInfo.displayName,
            zdrojZaznam: "Poklad≈àa #" + currentEntry.field("ID")
        });
        
        utils.addDebug(currentEntry, "  ‚úÖ Vytvoren√Ω pokladniƒçn√Ω z√°znam pre z√°lohu #" + novyZaznam.field("ID"));
        
        return { success: true, pohladavka: pohladavkaResult.pohladavka, pokladna: novyZaznam };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createAdvancePayment", error);
        return { success: false };
    }
}

function createBonusPayment(suma, ownerInfo) {
    try {
        // Pre pr√©miu vytv√°rame nov√Ω pokladniƒçn√Ω z√°znam
        var pokladnaLib = libByName(CONFIG.libraries.cashBook);
        if (!pokladnaLib) {
            utils.addError(currentEntry, "Kni≈ænica Poklad≈àa nen√°jden√°", "createBonusPayment");
            return { success: false };
        }
        
        var novyZaznam = pokladnaLib.create({});
        
        // Nastavenie √∫dajov
        utils.safeSet(novyZaznam, CONFIG.fields.cashBook.date, moment().toDate());
        utils.safeSet(novyZaznam, CONFIG.fields.cashBook.transactionType, CONFIG.constants.pohyb.vydavok);
        utils.safeSet(novyZaznam, CONFIG.fields.cashBook.sum, suma);
        utils.safeSet(novyZaznam, "√öƒçel v√Ωdaja", CONFIG.constants.ucelVydaja.mzdaPremia);
        
        // Popis platby
        var popis = ownerInfo.displayName + ", pr√©mia z preplatku";
        utils.safeSet(novyZaznam, "Popis platby", popis);
        
        // Vlastn√≠k
        if (ownerInfo.type === "employee") {
            utils.safeSet(novyZaznam, CONFIG.fields.cashBook.employee, [ownerInfo.owner]);
        }
        
        // Z pokladne
        var zPokladne = utils.safeGetLinks(currentEntry, "Z pokladne");
        if (zPokladne && zPokladne.length > 0) {
            utils.safeSet(novyZaznam, "Z pokladne", zPokladne);
        }
        
        // Info z√°znam
        utils.addInfo(novyZaznam, "AUTOMATICKY VYTVOREN√Å PR√âMIA", {
            dovod: "Preplatok z √∫hrady z√°v√§zkov",
            suma: suma,
            vlastnik: ownerInfo.displayName,
            zdrojZaznam: "Poklad≈àa #" + currentEntry.field("ID")
        });
        
        utils.addDebug(currentEntry, "  ‚úÖ Vytvoren√Ω pokladniƒçn√Ω z√°znam pre pr√©miu #" + novyZaznam.field("ID"));
        
        return { success: true, pokladna: novyZaznam };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createBonusPayment", error);
        return { success: false };
    }
}

// ==============================================
// KROK 6: FINALIZ√ÅCIA TRANSAKCIE
// ==============================================

function finalizeTransaction(dostupnaSuma, paymentResult, ownerInfo, usedReceivables) {
    try {
        utils.addDebug(currentEntry, "Finalizujem transakciu...");
        
        // Nastavenie vlastn√≠ka v pokladni
        clearOwnerFields();
        setOwnerField(ownerInfo);
        
        // Vytvorenie popisu platby
        var datumyStr = "";
        if (paymentResult.datumyZavazkov && paymentResult.datumyZavazkov.length > 0) {
            var uniqueDates = [];
            for (var i = 0; i < paymentResult.datumyZavazkov.length; i++) {
                if (uniqueDates.indexOf(paymentResult.datumyZavazkov[i]) === -1) {
                    uniqueDates.push(paymentResult.datumyZavazkov[i]);
                }
            }
            datumyStr = uniqueDates.join(", ");
        }
        
        var popis = generatePaymentDescription(ownerInfo, datumyStr);
        utils.safeSet(currentEntry, "Popis platby", popis);
        
        // Nastavenie √∫ƒçelu v√Ωdaja
        var ucelVydaja = CONFIG.constants.ucelVydaja.ostatneVydavky;
        if (ownerInfo.type === "employee") {
            ucelVydaja = CONFIG.constants.ucelVydaja.mzda;
        } else if (ownerInfo.type === "supplier") {
            ucelVydaja = CONFIG.constants.ucelVydaja.fakturyDodavatelov;
        }
        utils.safeSet(currentEntry, "√öƒçel v√Ωdaja", ucelVydaja);
        
        // Info z√°znam
        var infoData = {
            suma: dostupnaSuma,
            vlastnik: ownerInfo.displayName,
            uhradenychZavazkov: paymentResult.uhradeneZavazky.length,
            preplatok: paymentResult.preplatokSuma
        };
        
        if (usedReceivables > 0) {
            infoData.pouzitePohladavky = usedReceivables;
        }
        
        utils.addInfo(currentEntry, "√öHRADA Z√ÅV√ÑZKOV DOKONƒåEN√Å", infoData);
        
        utils.addDebug(currentEntry, "‚úÖ Transakcia finalizovan√°");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "finalizeTransaction", error);
    }
}

// ==============================================
// POMOCN√â FUNKCIE PRE FINALIZ√ÅCIU
// ==============================================

function clearOwnerFields() {
    try {
        utils.safeSet(currentEntry, CONFIG.fields.cashBook.employee, []);
        utils.safeSet(currentEntry, CONFIG.fields.cashBook.supplier, []);
        utils.safeSet(currentEntry, CONFIG.fields.cashBook.partner, []);
        utils.safeSet(currentEntry, CONFIG.fields.cashBook.client || "Klient", []);
    } catch (error) {
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Niektor√© polia vlastn√≠kov sa nepodarilo vymaza≈•", "warning");
    }
}

function setOwnerField(ownerInfo) {
    try {
        if (ownerInfo.type === "employee") {
            utils.safeSet(currentEntry, CONFIG.fields.cashBook.employee, [ownerInfo.owner]);
        } else if (ownerInfo.type === "supplier") {
            utils.safeSet(currentEntry, CONFIG.fields.cashBook.supplier, [ownerInfo.owner]);
        } else if (ownerInfo.type === "partner") {
            utils.safeSet(currentEntry, CONFIG.fields.cashBook.partner, [ownerInfo.owner]);
        } else if (ownerInfo.type === "client") {
            utils.safeSet(currentEntry, CONFIG.fields.cashBook.client || "Klient", [ownerInfo.owner]);
        }
        
        utils.addDebug(currentEntry, "  ‚úÖ Nastaven√Ω " + ownerInfo.type + ": " + ownerInfo.displayName);
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri nastaven√≠ vlastn√≠ka", "setOwnerField", error);
    }
}

function generatePaymentDescription(ownerInfo, datumyStr) {
    var popis = ownerInfo.displayName;
    
    if (ownerInfo.type === "employee") {
        // Pok√∫s sa z√≠ska≈• Nick
        var nick = utils.safeGet(ownerInfo.owner, "Nick");
        if (nick) {
            popis = "Mzda " + nick;
        }
    }
    
    popis += ", √∫hrada z√°v√§zkov";
    
    if (datumyStr) {
        popis += " zo " + datumyStr;
    }
    
    return popis;
}

// ==============================================
// Z√ÅVEREƒåN√â FUNKCIE
// ==============================================

function generateFinalReport(originalAmount, preplatokSuma, paymentResult, ownerInfo, typPreplatku, usedReceivables) {
    try {
        var finalUsedAmount = originalAmount - preplatokSuma;
        
        var report = utils.getIcon("success") + " √öHRADA Z√ÅV√ÑZKOV DOKONƒåEN√Å (v" + CONFIG.version + ")\n\n";
        report += "üë§ Vlastn√≠k: " + ownerInfo.displayName + "\n";
        
        if (usedReceivables > 0) {
            report += utils.getIcon("money") + " Pou≈æit√© pohƒæad√°vky: " + utils.formatMoney(usedReceivables) + "\n";
            report += utils.getIcon("money") + " Zadan√° suma: " + utils.formatMoney(originalAmount - usedReceivables) + "\n";
            report += utils.getIcon("money") + " Celkov√° suma na √∫hrady: " + utils.formatMoney(originalAmount) + "\n";
        } else {
            report += utils.getIcon("money") + " P√¥vodn√° suma: " + utils.formatMoney(originalAmount) + "\n";
        }
        
        report += "üìã Uhraden√© z√°v√§zky: " + paymentResult.uhradeneZavazky.length + "\n";
        report += "üíµ Pou≈æit√° suma na √∫hrady: " + utils.formatMoney(finalUsedAmount) + "\n";
        
        if (preplatokSuma > 0) {
            report += "\n" + utils.getIcon("create") + " Preplatok: " + utils.formatMoney(preplatokSuma) + "\n";
            
            if (typPreplatku === CONFIG.constants.typyPreplatku.pohladavka) {
                report += "üìù Vytvoren√° pohƒæad√°vka\n";
            } else if (typPreplatku === CONFIG.constants.typyPreplatku.zaloha) {
                report += "üìù Vytvoren√©:\n";
                report += "  ‚Ä¢ Pohƒæad√°vka\n";
                report += "  ‚Ä¢ Poklad≈àa - z√°loha na mzdu\n";
            } else if (typPreplatku === CONFIG.constants.typyPreplatku.premia) {
                report += "üìù Vytvoren√Ω pokladniƒçn√Ω z√°znam - pr√©mia\n";
            }
        } else {
            report += "\n‚úÖ Bez preplatku - presn√° suma\n";
        }
        
        report += "\nüìä Detaily v Debug_Log a info poliach";
        
        return report;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "generateFinalReport", error);
        return "‚ùå Chyba pri generovan√≠ reportu";
    }
}

function logFinalSummary(steps) {
    try {
        utils.addDebug(currentEntry, "\nüéØ === S√öHRN SPRACOVANIA ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola z√°vislost√≠
var dependencyCheck = utils.checkDependencies(['config', 'core', 'business']);
if (!dependencyCheck.success) {
    message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly: " + dependencyCheck.missing.join(", "));
    cancel();
}

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
}