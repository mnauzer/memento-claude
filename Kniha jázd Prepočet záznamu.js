// ==============================================
// MEMENTO DATABASE - PREPOƒåET MIEZD A ODPRACOVAN√âHO ƒåASU
// ==============================================
// Kni≈ænica: Z√°znam pr√°c
// √öƒçel: Prepoƒçet pracovnej doby, odpracovan√Ωch hod√≠n, mzdov√Ωch n√°kladov a HZS
// 
// POLIA V KNI≈ΩNICI "Z√°znam pr√°c":
// - Zamestnanci (Link to Entry) - zoznam zamestnancov na pr√°ci
// - D√°tum (Date) - d√°tum pr√°ce
// - Od (Time) - zaƒçiatok pr√°ce  
// - Do (Time) - koniec pr√°ce
// - Pracovn√° doba (Duration) - vypoƒç√≠tan√° doba pr√°ce jedn√©ho ƒçloveka
// - Odpracovan√© (Duration) - celkov√© hodiny v≈°etk√Ωch zamestnancov
// - Poƒçet pracovn√≠kov (Number) - poƒçet zamestnancov
// - Mzdov√© n√°klady (Number) - celkov√© mzdy v EUR
// - Hodinov√° z√∫ƒçtovacia sadzba (Link to Entry) - odkaz na Cenn√≠k pr√°c
// - Suma HZS (Number) - celkov√° suma hodinovej z√∫ƒçtovacej sadzby
// - Debug_Log (Text) - debug inform√°cie
// - Error_Log (Text) - chyby a probl√©my
// 
// LINKED KNI≈ΩNICE:
// - "sadzby zamestnancov": Zamestnanec, Platnos≈• od, Sadzba
// - "Cenn√≠k pr√°c": Cena bez DPH
// - "ceny pr√°c": Pr√°ca (Link to Entry), Platnos≈• od, Cena  
// - "ASISTANTO Defaults": Default HZS
// ==============================================

// Konfigur√°cia scriptu
var CONFIG = {
    // Debug nastavenia
    debug: true,
    debugFieldName: "Debug_Log",
    errorFieldName: "Error_Log",
    
    // N√°zvy kni≈æn√≠c
    sadzbyLibrary: "sadzby zamestnancov",
    cennikPracLibrary: "Cenn√≠k pr√°c",
    cenyPracLibrary: "ceny pr√°c",
    defaultsLibrary: "ASISTANTO Defaults",
    
    // N√°zvy pol√≠ - kni≈ænica "Z√°znam pr√°c"
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        od: "Od", 
        do: "Do",
        pracovnaDoba: "Pracovn√° doba",
        odpracovane: "Odpracovan√©",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        mzdy: "Mzdov√© n√°klady",
        hodinovaZuctovacia: "Hodinov√° z√∫ƒçtovacia sadzba",
        sumaHZS: "Suma HZS"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "sadzby zamestnancov"
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "Cenn√≠k pr√°c"
    cennikFields: {
        cenaBezDPH: "Cena bez DPH"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "ceny pr√°c"
    cenyFields: {
        praca: "Pr√°ca",
        platnostOd: "Platnos≈• od",
        cena: "Cena"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "ASISTANTO Defaults"
    defaultsFields: {
        defaultHZS: "Default HZS"
    }
};

// Glob√°lne premenn√© pre logging
var debugLog = [];
var errorLog = [];

// Debug a error logging funkcie
function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm");
    var prefix = location ? "[" + location + "] " : "";
    errorLog.push("[" + timestamp + "] ‚ùå " + prefix + message);
}

function saveLogs() {
    var currentEntry = entry();
    
    // V≈ædy prep√≠≈° oba logy (aj keƒè s√∫ pr√°zdne)
    try {
        currentEntry.set(CONFIG.debugFieldName, debugLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania debug logu
    }
    
    try {
        currentEntry.set(CONFIG.errorFieldName, errorLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania error logu  
    }
}

// Funkcia pre spracovanie hodinovej z√∫ƒçtovacej sadzby
function spracujHodinovuZuctovacuSadzbu(currentEntry, datum, odpracovaneHodiny) {
    addDebug("üí∞ === SPRACOVANIE HODINOVEJ Z√öƒåTOVACEJ SADZBY ===");
    
    var hzsSuccess = false;
    var finalnaCena = 0;
    
    // Z√≠skaj HZS pole
    var hzsPole = currentEntry.field(CONFIG.fields.hodinovaZuctovacia);
    
    if (!hzsPole || hzsPole.length === 0) {
        addDebug("‚ö†Ô∏è HZS nie je linknut√©, pou≈æ√≠vam default");
        
        // Z√≠skaj default HZS
        try {
            var defaultsLib = libByName(CONFIG.defaultsLibrary);
            if (defaultsLib) {
                var defaultEntry = defaultsLib.lastEntry();
                if (defaultEntry) {
                    var defaultHZS = defaultEntry.field(CONFIG.defaultsFields.defaultHZS);
                    if (defaultHZS && defaultHZS.length > 0) {
                        // Linkni default HZS
                        currentEntry.set(CONFIG.fields.hodinovaZuctovacia, defaultHZS);
                        addDebug("‚úÖ Default HZS linknut√©");
                        
                        // D√îLE≈ΩIT√â: Znovu naƒç√≠taj pole z currentEntry po linknut√≠
                        try {
                            hzsPole = currentEntry.field(CONFIG.fields.hodinovaZuctovacia);
                            if (hzsPole && hzsPole.length > 0) {
                                addDebug("‚úÖ HZS pole znovu naƒç√≠tan√© po linknut√≠");
                            } else {
                                addError("HZS pole je pr√°zdne aj po linknut√≠", "spracujHZS_reload");
                            }
                        } catch (reloadError) {
                            addError("Chyba pri znovu naƒç√≠tan√≠ HZS: " + reloadError.toString(), "spracujHZS_reload");
                        }
                    } else {
                        addError("Default HZS pole je pr√°zdne", "spracujHZS_default");
                    }
                } else {
                    addError("Defaults kni≈ænica je pr√°zdna", "spracujHZS_default");
                }
            } else {
                addError("Defaults kni≈ænica neexistuje", "spracujHZS_default");
            }
        } catch (defaultError) {
            addError("Chyba pri z√≠skavan√≠ default HZS: " + defaultError.toString(), "spracujHZS_default");
        }
    }
    
    if (hzsPole && hzsPole.length > 0) {
        var hzsZaznam = hzsPole[0]; // Prv√Ω linknut√Ω z√°znam
        
        try {
            addDebug("üìã Spracov√°vam HZS z√°znam...");
            
            // Skontroluj existuj√∫cu cenu v atrib√∫te
            var existujucaCena = null;
            try {
                existujucaCena = hzsZaznam.getAttr("cena");
                if (existujucaCena) {
                    addDebug("üìå Existuj√∫ca cena v atrib√∫te: " + existujucaCena + " ‚Ç¨");
                }
            } catch (attrError) {
                addDebug("üîç ≈Ωiadna existuj√∫ca cena v atrib√∫te");
            }
            
            // Z√≠skaj ceny cez linksFrom
            addDebug("üîç Hƒæad√°m ceny cez linksFrom...");
            var ceny = null;
            var linksFromSuccess = false;
            
            try {
                // linksFrom(kni≈ænica, n√°zov_poƒæa_v_tej_kni≈ænici)
                // Pole "Pr√°ca" v kni≈ænici "ceny pr√°c" odkazuje na kni≈ænicu "Cenn√≠k pr√°c"
                ceny = hzsZaznam.linksFrom(CONFIG.cenyPracLibrary, CONFIG.cenyFields.praca);
                if (ceny && ceny.length > 0) {
                    addDebug("‚úÖ Na≈°iel " + ceny.length + " cien");
                    linksFromSuccess = true;
                } else {
                    addError("HZS z√°znam nem√° ≈æiadne ceny", "spracujHZS_linksFrom");
                }
            } catch (linksError) {
                addError("LinksFrom zlyhalo pre HZS: " + linksError.toString(), "spracujHZS_linksFrom");
            }
            
            if (linksFromSuccess) {
                // N√°jdi najnov≈°iu platn√∫ cenu k d√°tumu
                var najnovsiaCena = null;
                var najnovsiDatum = null;
                
                addDebug("üìã Analyzujem ceny k d√°tumu " + moment(datum).format("DD.MM.YYYY") + ":");
                
                for (var k = 0; k < ceny.length; k++) {
                    var cenaEntry = ceny[k];
                    
                    if (!cenaEntry) {
                        addDebug("    ‚ö†Ô∏è Cena " + k + " je null");
                    } else {
                        try {
                            var platnostOd = cenaEntry.field(CONFIG.cenyFields.platnostOd);
                            var cena = cenaEntry.field(CONFIG.cenyFields.cena);
                            
                            addDebug("    üìã Cena " + k + ": " + cena + " ‚Ç¨ od " + 
                                    (platnostOd ? moment(platnostOd).format("DD.MM.YYYY") : "?"));
                            
                            if (platnostOd && cena && platnostOd <= datum) {
                                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                                    najnovsiDatum = platnostOd;
                                    najnovsiaCena = cena;
                                    addDebug("    ‚úÖ Najnov≈°ia platn√° cena: " + cena + " ‚Ç¨");
                                }
                            } else {
                                addDebug("    ‚ùå Cena neplatn√° k d√°tumu");
                            }
                        } catch (cenaFieldError) {
                            addDebug("    ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ ceny " + k + ": " + cenaFieldError.toString());
                        }
                    }
                }
                
                if (!najnovsiaCena || najnovsiaCena <= 0) {
                    addError("Nena≈°la sa platn√° cena pre HZS k d√°tumu", "spracujHZS_validacia");
                } else {
                    addDebug("üí∂ Fin√°lna HZS cena: " + najnovsiaCena + " ‚Ç¨");
                    finalnaCena = najnovsiaCena;
                    
                    // Nastav cenu do atrib√∫tu HZS z√°znamu
                    try {
                        hzsZaznam.setAttr("cena", najnovsiaCena);
                        addDebug("üíæ Atrib√∫t cena nastaven√Ω do HZS z√°znamu");
                        
                        // Over nastavenie
                        var kontrolaCeny = hzsZaznam.getAttr("cena");
                        if (kontrolaCeny) {
                            addDebug("‚úÖ Overenie HZS atrib√∫tu: " + kontrolaCeny + " ‚Ç¨");
                        } else {
                            addDebug("‚ö†Ô∏è HZS atrib√∫t getAttr() vr√°tilo null");
                        }
                    } catch (hzsAttrError) {
                        addError("setAttr() cena do HZS zlyhalo: " + hzsAttrError.toString(), "spracujHZS_setAttr");
                    }
                    
                    // Nastav cenu do Cenn√≠k pr√°c pole "Cena bez DPH"
                    try {
                        hzsZaznam.set(CONFIG.cennikFields.cenaBezDPH, najnovsiaCena);
                        addDebug("üíæ Cena bez DPH nastaven√° v Cenn√≠ku pr√°c: " + najnovsiaCena + " ‚Ç¨");
                    } catch (cennikSetError) {
                        addError("Nepodarilo sa nastavi≈• Cena bez DPH: " + cennikSetError.toString(), "spracujHZS_cennikSet");
                    }
                    
                    hzsSuccess = true;
                }
            }
            
        } catch (hzsError) {
            addError("Chyba pri spracovan√≠ HZS: " + hzsError.toString(), "spracujHZS_general");
        }
    } else {
        addError("Nepodarilo sa z√≠ska≈• ani default HZS", "spracujHZS_noHZS");
    }
    
    // Vypoƒç√≠taj Suma HZS
    if (hzsSuccess && finalnaCena > 0) {
        var sumaHZS = finalnaCena * odpracovaneHodiny;
        addDebug("üìä Suma HZS: " + finalnaCena + " ‚Ç¨ √ó " + odpracovaneHodiny.toFixed(2) + " h = " + sumaHZS.toFixed(2) + " ‚Ç¨");
        
        try {
            currentEntry.set(CONFIG.fields.sumaHZS, Math.round(sumaHZS * 100) / 100);
            addDebug("üíæ Suma HZS ulo≈æen√°: " + sumaHZS.toFixed(2) + " ‚Ç¨");
        } catch (sumaError) {
            addError("Nepodarilo sa ulo≈æi≈• Sumu HZS: " + sumaError.toString(), "spracujHZS_sumaSet");
        }
    } else {
        addDebug("‚ùå HZS sa nepodarilo spracova≈•, Suma HZS = 0");
        try {
            currentEntry.set(CONFIG.fields.sumaHZS, 0);
            addDebug("üíæ Suma HZS nastaven√° na 0");
        } catch (sumaError) {
            addError("Nepodarilo sa nastavi≈• Sumu HZS na 0: " + sumaError.toString(), "spracujHZS_suma0");
        }
    }
    
    return hzsSuccess;
}

// Hlavn√° funkcia scriptu
function hlavnaFunkcia() {
    addDebug("üöÄ === ≈†TART PREPOƒåTU MIEZD ===");
    
    var currentEntry = entry();
    var globalSuccess = false;
    
    // Vyma≈æ predch√°dzaj√∫ce logy hneƒè na zaƒçiatku
    currentEntry.set(CONFIG.debugFieldName, "");
    currentEntry.set(CONFIG.errorFieldName, "");
    addDebug("üßπ Vymazan√© predch√°dzaj√∫ce logy");
    
    // KROK 1: Z√≠skaj z√°kladn√© √∫daje
    addDebug("üìã KROK 1: Z√≠skavam z√°kladn√© √∫daje...");
    
    var datum = currentEntry.field(CONFIG.fields.datum);
    var casOd = currentEntry.field(CONFIG.fields.od);
    var casDo = currentEntry.field(CONFIG.fields.do);
    var zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
    
    addDebug("  üìÖ D√°tum: " + (datum ? moment(datum).format("DD.MM.YYYY") : "CH√ùBA"));
    addDebug("  üïê Od: " + (casOd ? moment(casOd).format("HH:mm") : "CH√ùBA"));
    addDebug("  üïê Do: " + (casDo ? moment(casDo).format("HH:mm") : "CH√ùBA"));
    addDebug("  üë• Zamestnanci: " + (zamestnanci ? zamestnanci.length + " zamestnancov" : "CH√ùBA"));
    
    // Z√°kladn√° valid√°cia
    var basicDataValid = false;
    if (!datum) {
        addError("D√°tum nie je vyplnen√Ω", "krok1");
    } else if (!casOd) {
        addError("Od nie je vyplnen√©", "krok1");
    } else if (!casDo) {
        addError("Do nie je vyplnen√©", "krok1");
    } else if (!zamestnanci || zamestnanci.length === 0) {
        addError("Zamestnanci nie s√∫ vyplnen√≠", "krok1");
    } else {
        addDebug("‚úÖ Z√°kladn√© √∫daje s√∫ v poriadku - " + zamestnanci.length + " zamestnancov");
        basicDataValid = true;
    }
    
    if (basicDataValid) {
        // KROK 2: Vypoƒç√≠taj pracovn√∫ dobu
        addDebug("‚è∞ KROK 2: Poƒç√≠tam pracovn√∫ dobu...");
        
        var pracovnaDobaHodiny = 0;
        var pracovnaDobaValid = false;
        
        try {
            var odMs = casOd;
            var doMs = casDo;
            
            addDebug("  üïê Od ms: " + moment(odMs).format("HH:mm"));
            addDebug("  üïê Do ms: " + moment(doMs).format("HH:mm"));
            
            // Ak je do men≈°ie ako od, ide o pr√°cu cez polnoc
            if (doMs < odMs) {
                doMs += 24 * 60 * 60 * 1000; // Pridaj 24 hod√≠n
                addDebug("  üåô Pr√°ca cez polnoc - pridal som 24 hod√≠n");
            }
            
            var rozdielMs = doMs - odMs;
            pracovnaDobaHodiny = rozdielMs / (1000 * 60 * 60);
            
            addDebug("  ‚è±Ô∏è Pracovn√° doba: " + pracovnaDobaHodiny.toFixed(2) + " h");
            
            if (pracovnaDobaHodiny > 0 && pracovnaDobaHodiny <= 24) {
                try {
                    currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
                    addDebug("  üíæ Pracovn√° doba ulo≈æen√°: " + pracovnaDobaHodiny.toFixed(2) + " h");
                    pracovnaDobaValid = true;
                } catch (saveError) {
                    addError("Nepodarilo sa ulo≈æi≈• pracovn√∫ dobu: " + saveError.toString(), "krok2");
                }
            } else {
                addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny.toFixed(2) + " h", "krok2");
            }
            
        } catch (error) {
            addError("Chyba pri v√Ωpoƒçte pracovnej doby: " + error.toString(), "krok2");
        }
        
        if (pracovnaDobaValid) {
            // KROK 3: Vypoƒç√≠taj odpracovan√© hodiny a poƒçet pracovn√≠kov
            addDebug("üìä KROK 3: Poƒç√≠tam odpracovan√© hodiny a poƒçet pracovn√≠kov...");
            
            var pocetZamestnancov = zamestnanci.length;
            var odpracovaneHodiny = pracovnaDobaHodiny * pocetZamestnancov;
            
            addDebug("  üë• Poƒçet pracovn√≠kov: " + pocetZamestnancov);
            addDebug("  üìä Odpracovan√©: " + pracovnaDobaHodiny.toFixed(2) + " h √ó " + pocetZamestnancov + " = " + odpracovaneHodiny.toFixed(2) + " h");
            
            // Ulo≈æ poƒçet pracovn√≠kov
            try {
                currentEntry.set(CONFIG.fields.pocetPracovnikov, pocetZamestnancov);
                addDebug("  üíæ Poƒçet pracovn√≠kov ulo≈æen√Ω: " + pocetZamestnancov);
            } catch (error) {
                addError("Nepodarilo sa ulo≈æi≈• poƒçet pracovn√≠kov: " + error.toString(), "krok3_pocet");
            }
            
            // Ulo≈æ odpracovan√© hodiny
            try {
                currentEntry.set(CONFIG.fields.odpracovane, odpracovaneHodiny);
                addDebug("  üíæ Odpracovan√© ulo≈æen√©: " + odpracovaneHodiny.toFixed(2) + " h");
            } catch (error) {
                addError("Nepodarilo sa ulo≈æi≈• odpracovan√© hodiny: " + error.toString(), "krok3_odpracovane");
            }
            
            // KROK 4: Spracuj zamestnancov a vypoƒç√≠taj mzdy
            addDebug("üí∞ KROK 4: Sprac√∫vam zamestnancov...");
            
            var celkoveMzdy = 0;
            var uspesneSpracovani = 0;
            var chyby = 0;
            var hodinovkyZamestnancov = []; // Lok√°lne ulo≈æenie hodinoviek namiesto atrib√∫tov
            
            // Iteruj cez ka≈æd√©ho zamestnanca
            for (var i = 0; i < zamestnanci.length; i++) {
                addDebug("\n--- Zamestnanec " + (i + 1) + "/" + zamestnanci.length + " ---");
                
                var zamestnanec = zamestnanci[i];
                
                if (!zamestnanec) {
                    addError("Zamestnanec na poz√≠cii " + i + " je null", "krok4_zamestnanec_" + i);
                    chyby++;
                    hodinovkyZamestnancov[i] = 0; // Nastav 0 pre null zamestnancov
                } else {
                    try {
                        // Z√≠skaj meno zamestnanca
                        var menoZamestnanca = "Nezn√°my";
                        try {
                            var tempMeno = zamestnanec.field("Meno");
                            if (tempMeno) {
                                menoZamestnanca = tempMeno;
                            }
                        } catch (menoError) {
                            addDebug("  ‚ö†Ô∏è Nepodarilo sa z√≠ska≈• meno");
                        }
                        
                        addDebug("  üë§ " + menoZamestnanca);
                        
                        // Inicializuj hodinovku pre tohto zamestnanca
                        hodinovkyZamestnancov[i] = 0;
                        
                        // N√°jdi sadzby zamestnanca pomocou linksFrom
                        addDebug("  üîç Hƒæad√°m sadzby cez linksFrom...");
                        var sadzby = null;
                        var linksFromSuccess = false;
                        
                        try {
                            sadzby = zamestnanec.linksFrom(CONFIG.sadzbyLibrary, CONFIG.sadzbyFields.zamestnanec);
                            if (sadzby && sadzby.length > 0) {
                                addDebug("  ‚úÖ Na≈°iel " + sadzby.length + " sadzieb");
                                linksFromSuccess = true;
                            } else {
                                addError("Zamestnanec " + menoZamestnanca + " nem√° sadzby", "krok4_linksFrom_zamestnanec_" + i);
                                chyby++;
                            }
                        } catch (linksError) {
                            addError("LinksFrom zlyhalo pre " + menoZamestnanca + ": " + linksError.toString(), "krok4_linksFrom_zamestnanec_" + i);
                            chyby++;
                        }
                        
                        if (linksFromSuccess) {
                            // N√°jdi najnov≈°iu platn√∫ sadzbu k d√°tumu
                            var aktualnaHodinovka = null;
                            var najnovsiDatum = null;
                            
                            addDebug("  üìã Analyzujem sadzby k d√°tumu " + moment(datum).format("DD.MM.YYYY") + ":");
                            
                            for (var j = 0; j < sadzby.length; j++) {
                                var sadzbaEntry = sadzby[j];
                                
                                if (!sadzbaEntry) {
                                    addDebug("    ‚ö†Ô∏è Sadzba " + j + " je null");
                                } else {
                                    try {
                                        var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
                                        var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
                                        
                                        addDebug("    üìã Sadzba " + j + ": " + hodinovka + " ‚Ç¨/h od " + 
                                                (platnostOd ? moment(platnostOd).format("DD.MM.YYYY") : "?"));
                                        
                                        if (platnostOd && hodinovka && platnostOd <= datum) {
                                            if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                                                najnovsiDatum = platnostOd;
                                                aktualnaHodinovka = hodinovka;
                                                addDebug("    ‚úÖ Najnov≈°ia platn√° sadzba: " + hodinovka + " ‚Ç¨/h");
                                            }
                                        } else {
                                            addDebug("    ‚ùå Sadzba neplatn√° k d√°tumu");
                                        }
                                    } catch (sadzbaFieldError) {
                                        addDebug("    ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ sadzby " + j + ": " + sadzbaFieldError.toString());
                                    }
                                }
                            }
                            
                            if (!aktualnaHodinovka || aktualnaHodinovka <= 0) {
                                addError("Nena≈°la sa platn√° sadzba pre " + menoZamestnanca + " k d√°tumu", "krok4_sadzba_zamestnanec_" + i);
                                chyby++;
                            } else {
                                addDebug("  üí∂ Fin√°lna hodinovka: " + aktualnaHodinovka + " ‚Ç¨/h");
                                
                                // Ulo≈æ hodinovku do lok√°lneho poƒæa
                                hodinovkyZamestnancov[i] = aktualnaHodinovka;
                                addDebug("  üíæ Hodinovka ulo≈æen√°: " + aktualnaHodinovka + " ‚Ç¨/h");
                                
                                // Vypoƒç√≠taj mzdu pre tohto zamestnanca
                                var mzdaZamestnanca = aktualnaHodinovka * pracovnaDobaHodiny;
                                addDebug("  üí∞ Mzda: " + aktualnaHodinovka + " ‚Ç¨/h √ó " + pracovnaDobaHodiny.toFixed(2) + " h = " + mzdaZamestnanca.toFixed(2) + " ‚Ç¨");
                                
                                // Priebe≈æne pripoƒç√≠taj k celkov√Ωm mzd√°m
                                celkoveMzdy += mzdaZamestnanca;
                                uspesneSpracovani++;
                            }
                        }
                        
                    } catch (zamestnanecError) {
                        addError("Chyba pri spracovan√≠ zamestnanca " + (i + 1) + ": " + zamestnanecError.toString(), "krok4_general_zamestnanec_" + i);
                        chyby++;
                    }
                }
            }
            
            // KROK 5: Ulo≈æ celkov√© mzdy
            addDebug("\nüéØ KROK 5: Finaliz√°cia mzdov√Ωch n√°kladov...");
            addDebug("  ‚úÖ √öspe≈°ne spracovan√Ωch: " + uspesneSpracovani + "/" + zamestnanci.length);
            addDebug("  ‚ùå Ch√Ωb: " + chyby);
            addDebug("  üí∞ Celkov√© mzdov√© n√°klady: " + celkoveMzdy.toFixed(2) + " ‚Ç¨");
            
            try {
                var finalMzdy = Math.round(celkoveMzdy * 100) / 100;
                currentEntry.set(CONFIG.fields.mzdy, finalMzdy);
                addDebug("  üíæ Mzdov√© n√°klady ulo≈æen√©: " + finalMzdy + " ‚Ç¨");
                globalSuccess = true;
            } catch (saveError) {
                addError("Nepodarilo sa ulo≈æi≈• mzdov√© n√°klady: " + saveError.toString(), "krok5");
            }
            
            // KROK 6: Spracuj hodinov√∫ z√∫ƒçtovaciu sadzbu
            addDebug("\nüí∞ KROK 6: Sprac√∫vam hodinov√∫ z√∫ƒçtovaciu sadzbu...");
            var hzsSuccess = spracujHodinovuZuctovacuSadzbu(currentEntry, datum, odpracovaneHodiny);
            
            if (hzsSuccess) {
                addDebug("‚úÖ Hodinov√° z√∫ƒçtovacia sadzba √∫spe≈°ne spracovan√°");
            } else {
                addDebug("‚ö†Ô∏è Spracovanie hodinovej z√∫ƒçtovacej sadzby malo probl√©my");
            }
            
        } else {
            addDebug("‚ùå Pracovn√° doba nie je validn√° - preru≈°ujem");
        }
    } else {
        addDebug("‚ùå Z√°kladn√© √∫daje nie s√∫ validn√© - preru≈°ujem");
    }
    
    // Finaliz√°cia a spr√°va pou≈æ√≠vateƒæovi
    addDebug("üèÅ === KONIEC PREPOƒåTU ===");
    
    saveLogs();
    
    var sumaHZS = 0;
    try {
        sumaHZS = currentEntry.field(CONFIG.fields.sumaHZS) || 0;
    } catch (hzsReadError) {
        sumaHZS = 0;
    }
    
    if (globalSuccess) {
        var sprava = "‚úÖ Prepoƒçet dokonƒçen√Ω!\n";
        sprava += "üí∞ Mzdov√© n√°klady: " + celkoveMzdy.toFixed(2) + " ‚Ç¨\n";
        sprava += "‚è±Ô∏è Pracovn√° doba: " + pracovnaDobaHodiny.toFixed(2) + " h\n";
        sprava += "üìä Odpracovan√©: " + odpracovaneHodiny.toFixed(2) + " h\n";
        sprava += "üë• Poƒçet pracovn√≠kov: " + pocetZamestnancov + "\n";
        sprava += "üèóÔ∏è Spracovan√Ωch: " + uspesneSpracovani + "/" + zamestnanci.length;
        
        if (sumaHZS > 0) {
            sprava += "\nüí∞ Suma HZS: " + sumaHZS.toFixed(2) + " ‚Ç¨";
        }
        
        if (chyby > 0) {
            sprava += "\n‚ö†Ô∏è Chyby: " + chyby + " (pozrite Error_Log)";
        }
        
        message(sprava);
    } else {
        var chybovaSprava = "‚ùå Prepoƒçet sa nepodaril!\n";
        if (errorLog.length > 0) {
            chybovaSprava += "Pozrite Error_Log pre detaily.";
        }
        message(chybovaSprava);
    }
}

// Spustenie scriptu
addDebug("=== INICIALIZ√ÅCIA SCRIPTU ===");
addDebug("Timestamp: " + moment().format("DD.MM.YY HH:mm"));

try {
    hlavnaFunkcia();
} catch (kritickachyba) {
    addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "main");
    saveLogs();
    message("‚ùå KRITICK√Å CHYBA! Pozrite Error_Log.");
}