// ==============================================
// MEMENTO DATABASE - POKLAD≈áA PREPOƒåET DPH
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Poklad≈àa | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Automatick√Ω prepoƒçet s√∫m s DPH a bez DPH
//    - Z√≠skanie platnej sadzby DPH z kni≈ænice "sadzby dph"
//    - V√Ωber medzi z√°kladnou a zn√≠≈æenou sadzbou
//    - V√Ωpoƒçet len ak je checkbox "s DPH" za≈°krtnut√Ω
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoBusiness (business logika - vzor pre z√≠skanie sadzby)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

// Z√≠skanie centr√°lneho configu
// var centralConfig = {};
// if (typeof MementoConfig !== 'undefined') {
//     centralConfig = MementoConfig.getConfig() || {};
// }
// if (!centralConfig.fields && utils && utils.config) {
//     centralConfig = utils.config;
// }

var CONFIG = {
    scriptName: "Poklad≈àa Prepoƒçet DPH",
    version: "1.0.1",
    
    // Kni≈ænice
    libraries: {
        cashBook: (centralConfig.libraries && centralConfig.libraries.cashBook) || "Poklad≈àa",
        vatRates: "sadzby dph"
    },
    
    // Polia Poklad≈àa
    fields: {
        // DPH polia
        isVat: "s DPH",
        vatRate: "sadzba DPH",
        sum: "Suma",
        sumTotal: "Suma s DPH",
        vat: "DPH",
        date: "D√°tum",
        
        // Spoloƒçn√© polia
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },
    
    // Polia kni≈ænice "sadzby dph"
    vatRatesFields: {
        validFrom: "Platnos≈• od",
        standard: "z√°kladn√°",
        reduced: "zn√≠≈æen√°"
    },
    
    // Kon≈°tanty
    constants: {
        vatRateTypes: {
            standard: "z√°kladn√°",
            reduced: "zn√≠≈æen√°",
            zero: "nulov√°"
        }
    },
    
    // Ikony
    icons: (centralConfig.icons) || {
        start: "üöÄ",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è",
        money: "üí∞",
        calculation: "üßÆ"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
        // Kontrola ƒçi m√° by≈• DPH
        var isVat = utils.safeGet(currentEntry, CONFIG.fields.isVat, false);
        
        if (!isVat) {
            utils.addDebug(currentEntry, CONFIG.icons.info + " DPH nie je za≈°krtnut√© - prepoƒçet sa nespust√≠");
            // Vyƒçisti DPH polia
            clearVatFields();
            return true;
        }
        
        utils.addDebug(currentEntry, CONFIG.icons.success + " DPH je za≈°krtnut√© - pokraƒçujem v prepoƒçte");
        
        // Z√≠skanie d√°tumu pre urƒçenie platnej sadzby
        var datum = utils.safeGet(currentEntry, CONFIG.fields.date, moment().toDate());
        utils.addDebug(currentEntry, CONFIG.icons.info + " D√°tum pre sadzbu: " + utils.formatDate(datum));
        
        // Z√≠skanie typu sadzby
        var vatRateType = utils.safeGet(currentEntry, CONFIG.fields.vatRate, CONFIG.constants.vatRateTypes.standard);
        utils.addDebug(currentEntry, CONFIG.icons.info + " Typ sadzby DPH: " + vatRateType);
        
        // Z√≠skanie platnej sadzby DPH
        var vatRateResult = getValidVatRate(datum, vatRateType);
        if (!vatRateResult.success) {
            utils.addError(currentEntry, vatRateResult.error, "main");
            message(CONFIG.icons.error + " " + vatRateResult.error);
            return false;
        }
        
        var vatRate = vatRateResult.rate;
        utils.addDebug(currentEntry, CONFIG.icons.success + " Platn√° sadzba DPH: " + vatRate + "%");
        
        // Prepoƒçet s√∫m
        var calculationResult = calculateVat(vatRate);
        if (!calculationResult.success) {
            utils.addError(currentEntry, calculationResult.error, "main");
            message(CONFIG.icons.error + " " + calculationResult.error);
            return false;
        }
        
        // Vytvorenie info z√°znamu
        createInfoRecord(vatRate, calculationResult);
        
        utils.addDebug(currentEntry, CONFIG.icons.success + " === PREPOƒåET DPH DOKONƒåEN√ù ===");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message(CONFIG.icons.error + " Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// Z√çSKANIE PLATNEJ SADZBY DPH
// ==============================================

function getValidVatRate(date, vatRateType) {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.calculation + " Hƒæad√°m platn√∫ sadzbu DPH...");
        
        // Pre nulov√∫ sadzbu vr√°time 0
        if (vatRateType === CONFIG.constants.vatRateTypes.zero) {
            return { success: true, rate: 0 };
        }
        
        // Z√≠skanie kni≈ænice sadzieb DPH
        var vatRatesLib = libByName(CONFIG.libraries.vatRates);
        if (!vatRatesLib) {
            return { 
                success: false, 
                error: "Kni≈ænica '" + CONFIG.libraries.vatRates + "' nen√°jden√°!" 
            };
        }
        
        // Z√≠skanie v≈°etk√Ωch sadzieb
        var allRates = vatRatesLib.entries();
        if (!allRates || allRates.length === 0) {
            return { 
                success: false, 
                error: "V kni≈ænici '" + CONFIG.libraries.vatRates + "' nie s√∫ ≈æiadne sadzby!" 
            };
        }
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet z√°znamov sadzieb: " + allRates.length);
        
        // Filtrovanie platn√Ωch sadzieb k d√°tumu
        var validRates = [];
        
        for (var i = 0; i < allRates.length; i++) {
            var rateEntry = allRates[i];
            var validFrom = utils.safeGet(rateEntry, CONFIG.vatRatesFields.validFrom);
            
            if (!validFrom) {
                utils.addDebug(currentEntry, "  ‚ö†Ô∏è Sadzba #" + rateEntry.field("ID") + 
                             " nem√° d√°tum platnosti", "warning");
                continue;
            }
            
            // Porovnanie d√°tumov
            if (new Date(validFrom) <= new Date(date)) {
                validRates.push({
                    entry: rateEntry,
                    validFrom: validFrom,
                    standard: utils.safeGet(rateEntry, CONFIG.vatRatesFields.standard, 0),
                    reduced: utils.safeGet(rateEntry, CONFIG.vatRatesFields.reduced, 0)
                });
            }
        }
        
        if (validRates.length === 0) {
            return { 
                success: false, 
                error: "Nena≈°la sa ≈æiadna platn√° sadzba DPH k d√°tumu " + utils.formatDate(date) 
            };
        }
        
        // Zoradenie podƒæa d√°tumu platnosti (najnov≈°ia prv√°)
        validRates.sort(function(a, b) {
            return new Date(b.validFrom) - new Date(a.validFrom);
        });
        
        // V√Ωber najnov≈°ej platnej sadzby
        var currentRate = validRates[0];
        utils.addDebug(currentEntry, "  ‚Ä¢ Pou≈æit√° sadzba platn√° od: " + utils.formatDate(currentRate.validFrom));
        
        // V√Ωber konkr√©tnej sadzby podƒæa typu
        var selectedRate = 0;
        if (vatRateType === CONFIG.constants.vatRateTypes.standard) {
            selectedRate = currentRate.standard;
        } else if (vatRateType === CONFIG.constants.vatRateTypes.reduced) {
            selectedRate = currentRate.reduced;
        }
        
        return { 
            success: true, 
            rate: selectedRate,
            rateEntry: currentRate.entry
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "getValidVatRate", error);
        return { 
            success: false, 
            error: "Chyba pri z√≠skavan√≠ sadzby DPH: " + error.toString() 
        };
    }
}

// ==============================================
// PREPOƒåET DPH
// ==============================================

function calculateVat(vatRate) {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.calculation + " Prepoƒç√≠tavam sumy...");
        
        // Z√≠skanie existuj√∫cich s√∫m
        var sumWithoutVat = utils.safeGet(currentEntry, CONFIG.fields.sum, 0);
        var sumWithVat = utils.safeGet(currentEntry, CONFIG.fields.sumTotal, 0);
        
        // Koeficient pre v√Ωpoƒçet
        var vatCoefficient = vatRate / 100;
        
        var finalSumWithoutVat, finalSumWithVat, vatAmount;
        
        // Urƒçenie smeru v√Ωpoƒçtu podƒæa toho, ktor√© pole je vyplnen√©
        if (sumWithVat > 0 && sumWithoutVat === 0) {
            // M√°me sumu s DPH, vypoƒç√≠tame sumu bez DPH
            utils.addDebug(currentEntry, "  ‚Ä¢ V√Ωpoƒçet zo sumy s DPH: " + utils.formatMoney(sumWithVat));
            
            finalSumWithVat = sumWithVat;
            finalSumWithoutVat = sumWithVat / (1 + vatCoefficient);
            vatAmount = finalSumWithVat - finalSumWithoutVat;
            
        } else if (sumWithoutVat > 0) {
            // M√°me sumu bez DPH, vypoƒç√≠tame sumu s DPH
            utils.addDebug(currentEntry, "  ‚Ä¢ V√Ωpoƒçet zo sumy bez DPH: " + utils.formatMoney(sumWithoutVat));
            
            finalSumWithoutVat = sumWithoutVat;
            vatAmount = sumWithoutVat * vatCoefficient;
            finalSumWithVat = sumWithoutVat + vatAmount;
            
        } else {
            return { 
                success: false, 
                error: "Mus√≠ by≈• zadan√° buƒè 'Suma' alebo 'Suma s DPH'!" 
            };
        }
        
        // Zaokr√∫hlenie na 2 desatinn√© miesta
        finalSumWithoutVat = Math.round(finalSumWithoutVat * 100) / 100;
        finalSumWithVat = Math.round(finalSumWithVat * 100) / 100;
        vatAmount = Math.round(vatAmount * 100) / 100;
        
        // Ulo≈æenie vypoƒç√≠tan√Ωch hodn√¥t
        utils.safeSet(currentEntry, CONFIG.fields.sum, finalSumWithoutVat);
        utils.safeSet(currentEntry, CONFIG.fields.sumTotal, finalSumWithVat);
        utils.safeSet(currentEntry, CONFIG.fields.vat, vatAmount);  // Uklad√° DPH do poƒæa "DPH"
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Suma bez DPH: " + utils.formatMoney(finalSumWithoutVat));
        utils.addDebug(currentEntry, "  ‚Ä¢ DPH (" + vatRate + "%): " + utils.formatMoney(vatAmount));
        utils.addDebug(currentEntry, "  ‚Ä¢ Suma s DPH: " + utils.formatMoney(finalSumWithVat));
        
        return {
            success: true,
            sumWithoutVat: finalSumWithoutVat,
            vatAmount: vatAmount,
            sumWithVat: finalSumWithVat
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateVat", error);
        return { 
            success: false, 
            error: "Chyba pri v√Ωpoƒçte DPH: " + error.toString() 
        };
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function clearVatFields() {
    try {
        // Ak nie je DPH, vyƒçisti DPH polia
        utils.safeSet(currentEntry, CONFIG.fields.vat, 0);
        
        // Ak je vyplnen√° suma s DPH, prekop√≠ruj ju do sumy bez DPH
        var sumWithVat = utils.safeGet(currentEntry, CONFIG.fields.sumTotal, 0);
        if (sumWithVat > 0) {
            utils.safeSet(currentEntry, CONFIG.fields.sum, sumWithVat);
            utils.safeSet(currentEntry, CONFIG.fields.sumTotal, 0);
            utils.addDebug(currentEntry, CONFIG.icons.info + " Suma s DPH prekop√≠rovan√° do sumy bez DPH");
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "clearVatFields", error);
    }
}

function createInfoRecord(vatRate, calculationResult) {
    try {
        var infoText = "üìä PREPOƒåET DPH\n";
        infoText += "================\n";
        infoText += "Sadzba DPH: " + vatRate + "%\n";
        infoText += "Suma bez DPH: " + utils.formatMoney(calculationResult.sumWithoutVat) + "\n";
        infoText += "DPH: " + utils.formatMoney(calculationResult.vatAmount) + "\n";
        infoText += "Suma s DPH: " + utils.formatMoney(calculationResult.sumWithVat) + "\n";
        infoText += "ƒåas: " + moment().format("DD.MM.YYYY HH:mm:ss");
        
        utils.addInfo(currentEntry, infoText);
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createInfoRecord", error);
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola z√°vislost√≠
if (typeof MementoUtils === 'undefined') {
    message("‚ùå Ch√Ωba kni≈ænica MementoUtils!");
    cancel();
}

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zru≈° ulo≈æenie
if (!result) {
    utils.addError(currentEntry, "Script zlyhal - zru≈°en√© ulo≈æenie", "main");
    cancel();
}