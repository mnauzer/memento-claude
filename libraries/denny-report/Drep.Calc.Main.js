// ==============================================
// MEMENTO DATABASE - DENN√ù REPORT PREPOƒåET
// Verzia: 1.2.0 | D√°tum: okt√≥ber 2025 | Autor: ASISTANTO
// Kni≈ænica: Denn√Ω report | Trigger: Before Save
// ==============================================
// ‚úÖ FUNKCIONALITA v1.2.0:
//    - Agreg√°cia d√°t z Doch√°dzky, Z√°znamov pr√°c, Knihy j√°zd a Pokladne
//    - Vytv√°ranie Info z√°znamov pre ka≈æd√∫ sekciu (markdown form√°t)
//    - Vytvorenie spoloƒçn√©ho info z√°znamu
//    - V√Ωpoƒçet celkov√Ωch odpracovan√Ωch hod√≠n
//    - V√Ωpoƒçet celkov√Ωch km, pr√≠jmov a v√Ωdavkov
//    - Generovanie popisu z√°znamu
//    - Automatick√© prid√°vanie ik√¥n pre vyplnen√© sekcie
//    - Agreg√°cia strojov a materi√°lu zo Z√°znamov pr√°c
//    - Pr√≠prava na integr√°ciu s MementoTelegram a MementoAI
// üîß CHANGELOG v1.2.0:
//    - OPRAVA: Pole "Odpracovan√©" v Z√°zname pr√°c (nie "Hodiny")
//    - PRIDAN√â: Pole "Popis" vyplnen√© z√°kazkami vo form√°te "ƒå√≠slo.N√°zov"
//    - PRIDAN√â: Agreg√°cia Strojov zo Z√°znamov pr√°c
//    - PRIDAN√â: Agreg√°cia Materi√°lu zo Z√°znamov pr√°c
//    - PRIDAN√â: Zobrazenie Strojov a Materi√°lu v info blokoch
//    - Vylep≈°en√© zobrazenie zamestnancov v info blokoch (viacer√≠ zamestnanci)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var telegram = MementoTelegram;
var ai = MementoAI;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Denn√Ω report Prepoƒçet",
    version: "1.2.0",

    // Referencie na centr√°lny config
    fields: {
        dailyReport: centralConfig.fields.dailyReport,
        attendance: centralConfig.fields.attendance,
        workRecord: centralConfig.fields.workRecord,
        rideLog: centralConfig.fields.rideLog,
        cashBook: centralConfig.fields.cashBook,
        order: centralConfig.fields.order,
        employee: centralConfig.fields.employee,
        vehicle: centralConfig.fields.vehicle,
        material: centralConfig.fields.material,
        machine: centralConfig.fields.machines,
        common: centralConfig.fields.common
    },
    libraries: centralConfig.libraries,
    icons: centralConfig.icons
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.clearLogs(currentEntry, true);

        // Z√≠skaj d√°tum z√°znamu
        var reportDate = utils.safeGet(currentEntry, CONFIG.fields.dailyReport.date);
        if (!reportDate) {
            utils.addError(currentEntry, "D√°tum nie je vyplnen√Ω", "main");
            message("‚ùå D√°tum nie je vyplnen√Ω!");
            return false;
        }

        utils.addDebug(currentEntry, "üìÖ D√°tum reportu: " + utils.formatDate(reportDate));

        // KROK 1: Spracovanie Doch√°dzky
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 1: Spracovanie Doch√°dzky");
        var attendanceResult = processAttendance();

        // KROK 2: Spracovanie Z√°znamov pr√°c
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 2: Spracovanie Z√°znamov pr√°c");
        var workRecordsResult = processWorkRecords();

        // KROK 3: Spracovanie Knihy j√°zd
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 3: Spracovanie Knihy j√°zd");
        var rideLogResult = processRideLog();

        // KROK 4: Spracovanie Pokladne
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 4: Spracovanie Pokladne");
        var cashBookResult = processCashBook();

        // KROK 5: V√Ωpoƒçet celkov√Ωch hod√≠n
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 5: V√Ωpoƒçet celkov√Ωch hod√≠n");
        var totalHoursResult = calculateTotalHours(attendanceResult, workRecordsResult);

        // KROK 6: Vytvorenie s√∫hrnn√©ho popisu
        utils.addDebug(currentEntry, utils.getIcon("note") + " KROK 6: Generovanie popisu z√°znamu");
        var descriptionResult = generateRecordDescription(attendanceResult, workRecordsResult, rideLogResult, cashBookResult);

        // KROK 7: Vytvorenie spoloƒçn√©ho info z√°znamu
        utils.addDebug(currentEntry, utils.getIcon("note") + " KROK 7: Vytvorenie spoloƒçn√©ho info");
        var commonInfoResult = createCommonInfo(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult);

        // KROK 8: Telegram notifik√°cie (voliteƒæn√© - pripraven√© na neskor≈°iu implement√°ciu)
        utils.addDebug(currentEntry, utils.getIcon("telegram") + " KROK 8: Telegram notifik√°cie");
        var telegramResult = sendTelegramNotifications(attendanceResult, workRecordsResult, rideLogResult, cashBookResult);

        utils.addDebug(currentEntry, utils.getIcon("success") + " === PREPOƒåET DOKONƒåEN√ù ===");

        // Zhrnutie
        var summary = buildSummary(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult);
        if (summary) {
            message(summary);
        }

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message("‚ùå Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// SPRACOVANIE DOCH√ÅDZKY
// ==============================================

function processAttendance() {
    var result = {
        success: false,
        count: 0,
        totalHours: 0,
        employees: [],
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy Doch√°dzky
        var attendanceRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.attendance);

        if (!attendanceRecords || attendanceRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy doch√°dzky");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov doch√°dzky: " + attendanceRecords.length);

        var infoBlocks = [];
        var totalWorked = 0;
        var employeeSet = {};

        // Spracuj ka≈æd√Ω z√°znam doch√°dzky
        for (var i = 0; i < attendanceRecords.length; i++) {
            var attendance = attendanceRecords[i];
            var attId = attendance.field("ID");

            // Z√≠skaj d√°ta
            var employees = utils.safeGetLinks(attendance, CONFIG.fields.attendance.employees);
            var workedHours = utils.safeGet(attendance, CONFIG.fields.attendance.workedHours, 0);
            var arrival = utils.safeGet(attendance, CONFIG.fields.attendance.arrival);
            var departure = utils.safeGet(attendance, CONFIG.fields.attendance.departure);

            // Agreguj zamestnancov
            if (employees && employees.length > 0) {
                for (var j = 0; j < employees.length; j++) {
                    var empName = utils.safeGet(employees[j], CONFIG.fields.employee.nick);
                    if (empName) {
                        employeeSet[empName] = true;
                    }
                }
            }

            totalWorked += workedHours;

            // Vytvor info blok pre tento z√°znam
            var block = "üìã Doch√°dzka #" + attId + "\n";
            if (employees && employees.length > 0) {
                var empNames = [];
                for (var k = 0; k < employees.length; k++) {
                    empNames.push(utils.safeGet(employees[k], CONFIG.fields.employee.nick));
                }
                block += "  üë• Zamestnanci: " + empNames.join(", ") + "\n";
            }
            if (arrival) {
                block += "  üïê Pr√≠chod: " + utils.formatTime(arrival) + "\n";
            }
            if (departure) {
                block += "  üïë Odchod: " + utils.formatTime(departure) + "\n";
            }
            block += "  ‚è±Ô∏è Odpracovan√©: " + workedHours.toFixed(2) + " h\n";

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);
        var infoText = "\nüìä DOCH√ÅDZKA - ZHRNUTIE: " + timestamp + "\n";
        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        infoText += "üìà Celkom z√°znamov: " + attendanceRecords.length + "\n";
        infoText += "‚è±Ô∏è Celkom odpracovan√Ωch hod√≠n: " + totalWorked.toFixed(2) + " h\n";

        var employeeNames = Object.keys(employeeSet);
        if (employeeNames.length > 0) {
            infoText += "üë• Zamestnanci (" + employeeNames.length + "): " + employeeNames.join(", ") + "\n";
        }

        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        infoText += infoBlocks.join("\n");

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("DOCH√ÅDZKA", timestamp, [
            { label: "Celkom z√°znamov", value: attendanceRecords.length },
            { label: "Celkom odpracovan√Ωch hod√≠n", value: totalWorked.toFixed(2) + " h" },
            { label: "Zamestnanci (" + employeeNames.length + ")", value: employeeNames.join(", ") }
        ], infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoAttendance, markdownInfo);
        addRecordIcon("üë•");
        utils.addDebug(currentEntry, "  ‚úÖ Info doch√°dzka vytvoren√Ω a zap√≠san√Ω (" + attendanceRecords.length + " z√°znamov)");

        result.success = true;
        result.count = attendanceRecords.length;
        result.totalHours = totalWorked;
        result.employees = employeeNames;
        result.info = infoText;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ doch√°dzky: " + error.toString(), "processAttendance", error);
    }

    return result;
}

// ==============================================
// SPRACOVANIE Z√ÅZNAMOV PR√ÅC
// ==============================================

function processWorkRecords() {
    var result = {
        success: false,
        count: 0,
        totalHours: 0,
        orders: [],
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy pr√°c
        var workRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.workRecord);

        if (!workRecords || workRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy pr√°c");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov pr√°c: " + workRecords.length);

        var infoBlocks = [];
        var totalWorkedHours = 0;
        var orderSet = {};
        var orderFullNames = {}; // ƒå√≠slo.N√°zov pre pole Popis
        var machinesSet = {};
        var materialSet = {};

        // Spracuj ka≈æd√Ω z√°znam pr√°ce
        for (var i = 0; i < workRecords.length; i++) {
            var work = workRecords[i];
            var workId = work.field("ID");

            // Z√≠skaj d√°ta
            var order = utils.safeGetLinks(work, CONFIG.fields.workRecord.order);
            var workedHours = utils.safeGet(work, CONFIG.fields.workRecord.workedHours, 0);
            var description = utils.safeGet(work, CONFIG.fields.workRecord.workDescription, "");
            var employees = utils.safeGetLinks(work, CONFIG.fields.workRecord.employees);
            var machines = utils.safeGetLinks(work, CONFIG.fields.workRecord.machinery);
            var materials = utils.safeGetLinks(work, CONFIG.fields.workRecord.workItems);

            // Agreguj z√°kazky
            if (order && order.length > 0) {
                var orderName = utils.safeGet(order[0], CONFIG.fields.order.name);
                var orderNumber = utils.safeGet(order[0], CONFIG.fields.order.number, "");
                if (orderName) {
                    orderSet[orderName] = true;
                    // Vytvor form√°t ƒå√≠slo.N√°zov
                    var fullName = orderNumber ? orderNumber + "." + orderName : orderName;
                    orderFullNames[fullName] = true;
                }
            }

            // Agreguj stroje
            if (machines && machines.length > 0) {
                for (var m = 0; m < machines.length; m++) {
                    var machineName = utils.safeGet(machines[m], CONFIG.fields.machine.name);
                    if (machineName) {
                        machinesSet[machineName] = true;
                    }
                }
            }

            // Agreguj materi√°l (workItems - Pr√°ce Polo≈æky)
            if (materials && materials.length > 0) {
                for (var mat = 0; mat < materials.length; mat++) {
                    // workItems maj√∫ pole "name" alebo "description"
                    var materialName = utils.safeGet(materials[mat], "name") || utils.safeGet(materials[mat], "description", "");
                    if (materialName) {
                        materialSet[materialName] = true;
                    }
                }
            }

            totalWorkedHours += workedHours;

            // Vytvor info blok pre tento z√°znam
            var block = "üìù Z√°znam pr√°c #" + workId + "\n";
            if (order && order.length > 0) {
                var orderNum = utils.safeGet(order[0], CONFIG.fields.order.number, "");
                var orderNm = utils.safeGet(order[0], CONFIG.fields.order.name);
                block += "  üéØ Z√°kazka: " + (orderNum ? orderNum + "." : "") + orderNm + "\n";
            }
            if (employees && employees.length > 0) {
                var empNames = [];
                for (var e = 0; e < employees.length; e++) {
                    empNames.push(utils.safeGet(employees[e], CONFIG.fields.employee.nick));
                }
                block += "  üë• Zamestnanci: " + empNames.join(", ") + "\n";
            }
            if (machines && machines.length > 0) {
                var machNames = [];
                for (var mch = 0; mch < machines.length; mch++) {
                    machNames.push(utils.safeGet(machines[mch], CONFIG.fields.machine.name));
                }
                block += "  üöú Stroje: " + machNames.join(", ") + "\n";
            }
            if (materials && materials.length > 0) {
                var matNames = [];
                for (var mtl = 0; mtl < materials.length; mtl++) {
                    var matName = utils.safeGet(materials[mtl], "name") || utils.safeGet(materials[mtl], "description", "");
                    if (matName) {
                        matNames.push(matName);
                    }
                }
                if (matNames.length > 0) {
                    block += "  üì¶ Materi√°l: " + matNames.join(", ") + "\n";
                }
            }
            if (description) {
                block += "  üìã Popis: " + description.substring(0, 100) + (description.length > 100 ? "..." : "") + "\n";
            }
            block += "  ‚è±Ô∏è Odpracovan√©: " + workedHours.toFixed(2) + " h\n";

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);

        var orderNames = Object.keys(orderSet);
        var machineNames = Object.keys(machinesSet);
        var materialNames = Object.keys(materialSet);

        // Vytvor stats pre markdown
        var stats = [
            { label: "Celkom z√°znamov", value: workRecords.length },
            { label: "Odpracovan√© hodiny", value: totalWorkedHours.toFixed(2) + " h" }
        ];

        if (orderNames.length > 0) {
            stats.push({ label: "Z√°kazky (" + orderNames.length + ")", value: orderNames.join(", ") });
        }
        if (machineNames.length > 0) {
            stats.push({ label: "Stroje (" + machineNames.length + ")", value: machineNames.join(", ") });
        }
        if (materialNames.length > 0) {
            stats.push({ label: "Materi√°l (" + materialNames.length + ")", value: materialNames.join(", ") });
        }

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("Z√ÅZNAMY PR√ÅC", timestamp, stats, infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoWorkRecords, markdownInfo);
        addRecordIcon("üìù");
        utils.addDebug(currentEntry, "  ‚úÖ Info z√°znam pr√°c vytvoren√Ω a zap√≠san√Ω (" + workRecords.length + " z√°znamov)");

        result.success = true;
        result.count = workRecords.length;
        result.totalHours = totalWorkedHours;
        result.orders = orderNames;
        result.orderFullNames = Object.keys(orderFullNames); // Pre pole Popis
        result.machines = machineNames;
        result.materials = materialNames;
        result.info = markdownInfo;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ z√°znamov pr√°c: " + error.toString(), "processWorkRecords", error);
    }

    return result;
}

// ==============================================
// SPRACOVANIE KNIHY J√ÅZD
// ==============================================

function processRideLog() {
    var result = {
        success: false,
        count: 0,
        totalKm: 0,
        vehicles: [],
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy z Knihy j√°zd
        var rideRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.rideLog);

        if (!rideRecords || rideRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy z knihy j√°zd");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov z knihy j√°zd: " + rideRecords.length);

        var infoBlocks = [];
        var totalKm = 0;
        var vehicleSet = {};

        // Spracuj ka≈æd√Ω z√°znam z knihy j√°zd
        for (var i = 0; i < rideRecords.length; i++) {
            var ride = rideRecords[i];
            var rideId = ride.field("ID");

            // Z√≠skaj d√°ta
            var vehicle = utils.safeGetLinks(ride, CONFIG.fields.rideLog.vehicle);
            var km = utils.safeGet(ride, CONFIG.fields.rideLog.km, 0);
            var route = utils.safeGet(ride, CONFIG.fields.rideLog.route, "");
            var driver = utils.safeGetLinks(ride, CONFIG.fields.rideLog.driver);

            // Agreguj vozidl√°
            if (vehicle && vehicle.length > 0) {
                var vehicleName = utils.safeGet(vehicle[0], CONFIG.fields.vehicle.name);
                if (vehicleName) {
                    vehicleSet[vehicleName] = true;
                }
            }

            totalKm += km;

            // Vytvor info blok pre tento z√°znam
            var block = "üöó Kniha j√°zd #" + rideId + "\n";
            if (vehicle && vehicle.length > 0) {
                block += "  üöô Vozidlo: " + utils.safeGet(vehicle[0], CONFIG.fields.vehicle.name) + "\n";
            }
            if (driver && driver.length > 0) {
                block += "  üë§ Vodiƒç: " + utils.safeGet(driver[0], CONFIG.fields.employee.nick) + "\n";
            }
            if (route) {
                block += "  üìç Trasa: " + route.substring(0, 100) + (route.length > 100 ? "..." : "") + "\n";
            }
            block += "  üìè Km: " + km.toFixed(2) + " km\n";

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);
        var infoText = "\nüöó KNIHA J√ÅZD - ZHRNUTIE: " + timestamp + "\n";
        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        infoText += "üìà Celkom z√°znamov: " + rideRecords.length + "\n";
        infoText += "üìè Celkom km: " + totalKm.toFixed(2) + " km\n";

        var vehicleNames = Object.keys(vehicleSet);
        if (vehicleNames.length > 0) {
            infoText += "üöô Vozidl√° (" + vehicleNames.length + "): " + vehicleNames.join(", ") + "\n";
        }

        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        infoText += infoBlocks.join("\n");

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("KNIHA J√ÅZD", timestamp, [
            { label: "Celkom z√°znamov", value: rideRecords.length },
            { label: "Celkom km", value: totalKm.toFixed(2) + " km" },
            { label: "Vozidl√° (" + vehicleNames.length + ")", value: vehicleNames.join(", ") }
        ], infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoRideLog, markdownInfo);
        addRecordIcon("üöó");
        utils.addDebug(currentEntry, "  ‚úÖ Info kniha j√°zd vytvoren√Ω a zap√≠san√Ω (" + rideRecords.length + " z√°znamov)");

        result.success = true;
        result.count = rideRecords.length;
        result.totalKm = totalKm;
        result.vehicles = vehicleNames;
        result.info = infoText;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ knihy j√°zd: " + error.toString(), "processRideLog", error);
    }

    return result;
}

// ==============================================
// SPRACOVANIE POKLADNE
// ==============================================

function processCashBook() {
    var result = {
        success: false,
        count: 0,
        totalIncome: 0,
        totalExpense: 0,
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy z Pokladne
        var cashRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.cashBook);

        if (!cashRecords || cashRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy z pokladne");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov z pokladne: " + cashRecords.length);

        var infoBlocks = [];
        var totalIncome = 0;
        var totalExpense = 0;

        // Spracuj ka≈æd√Ω z√°znam z pokladne
        for (var i = 0; i < cashRecords.length; i++) {
            var cash = cashRecords[i];
            var cashId = cash.field("ID");

            // Z√≠skaj d√°ta
            var type = utils.safeGet(cash, CONFIG.fields.cashBook.type, "");
            var amount = utils.safeGet(cash, CONFIG.fields.cashBook.amount, 0);
            var description = utils.safeGet(cash, CONFIG.fields.cashBook.description, "");

            // Agreguj pr√≠jmy a v√Ωdavky
            if (type === "Pr√≠jem" || type === "pr√≠jem") {
                totalIncome += amount;
            } else if (type === "V√Ωdavok" || type === "v√Ωdavok") {
                totalExpense += amount;
            }

            // Vytvor info blok pre tento z√°znam
            var block = "üí∞ Poklad≈àa #" + cashId + "\n";
            block += "  üìä Typ: " + type + "\n";
            block += "  üíµ Suma: " + amount.toFixed(2) + " ‚Ç¨\n";
            if (description) {
                block += "  üìã Popis: " + description.substring(0, 100) + (description.length > 100 ? "..." : "") + "\n";
            }

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);
        var infoText = "\nüí∞ POKLAD≈áA - ZHRNUTIE: " + timestamp + "\n";
        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        infoText += "üìà Celkom z√°znamov: " + cashRecords.length + "\n";
        infoText += "üìà Pr√≠jmy: +" + totalIncome.toFixed(2) + " ‚Ç¨\n";
        infoText += "üìâ V√Ωdavky: -" + totalExpense.toFixed(2) + " ‚Ç¨\n";
        infoText += "üí∞ Bilancia: " + (totalIncome - totalExpense).toFixed(2) + " ‚Ç¨\n";
        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        infoText += infoBlocks.join("\n");

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("POKLAD≈áA", timestamp, [
            { label: "Celkom z√°znamov", value: cashRecords.length },
            { label: "Pr√≠jmy", value: "+" + totalIncome.toFixed(2) + " ‚Ç¨" },
            { label: "V√Ωdavky", value: "-" + totalExpense.toFixed(2) + " ‚Ç¨" },
            { label: "Bilancia", value: (totalIncome - totalExpense).toFixed(2) + " ‚Ç¨" }
        ], infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoCashBook, markdownInfo);
        addRecordIcon("üí∞");
        utils.addDebug(currentEntry, "  ‚úÖ Info poklad≈àa vytvoren√Ω a zap√≠san√Ω (" + cashRecords.length + " z√°znamov)");

        result.success = true;
        result.count = cashRecords.length;
        result.totalIncome = totalIncome;
        result.totalExpense = totalExpense;
        result.info = infoText;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ pokladne: " + error.toString(), "processCashBook", error);
    }

    return result;
}

// ==============================================
// V√ùPOƒåET CELKOV√ùCH HOD√çN
// ==============================================

function calculateTotalHours(attendanceResult, workRecordsResult) {
    var result = {
        success: false,
        totalHours: 0
    };

    try {
        // S√∫ƒçet z doch√°dzky a z√°znamov pr√°c
        var totalFromAttendance = attendanceResult.totalHours || 0;
        var totalFromWork = workRecordsResult.totalHours || 0;

        // Pou≈æij maximum (v pr√≠pade, ≈æe s√∫ oba hodnoty vyplnen√©)
        var totalHours = Math.max(totalFromAttendance, totalFromWork);

        // Ak s√∫ obe hodnoty 0, sk√∫s s√∫ƒçet
        if (totalHours === 0) {
            totalHours = totalFromAttendance + totalFromWork;
        }

        utils.addDebug(currentEntry, "  ‚è±Ô∏è Celkov√© odpracovan√© hodiny: " + totalHours.toFixed(2) + " h");

        // Ulo≈æ do poƒæa
        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.hoursWorked, totalHours);

        result.success = true;
        result.totalHours = totalHours;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri v√Ωpoƒçte celkov√Ωch hod√≠n: " + error.toString(), "calculateTotalHours", error);
    }

    return result;
}

// ==============================================
// GENEROVANIE POPISU Z√ÅZNAMU
// ==============================================

function generateRecordDescription(attendanceResult, workRecordsResult, rideLogResult, cashBookResult) {
    var result = {
        success: false,
        description: ""
    };

    try {
        // Pole Popis - vypl≈à z√°kazkami vo form√°te ƒå√≠slo.N√°zov
        var orderDescription = "";
        if (workRecordsResult.orderFullNames && workRecordsResult.orderFullNames.length > 0) {
            orderDescription = workRecordsResult.orderFullNames.join(", ");
            utils.safeSet(currentEntry, CONFIG.fields.dailyReport.description, orderDescription);
            utils.addDebug(currentEntry, "  ‚úÖ Popis (z√°kazky): " + orderDescription);
        }

        // Pole Popis z√°znamu - struƒçn√Ω prehƒæad sekci√≠
        var parts = [];

        // Doch√°dzka
        if (attendanceResult.count > 0) {
            parts.push("üë• " + attendanceResult.count + " doch√°dzka");
            if (attendanceResult.employees.length > 0) {
                parts.push("(" + attendanceResult.employees.join(", ") + ")");
            }
        }

        // Z√°znamy pr√°c
        if (workRecordsResult.count > 0) {
            parts.push("üìù " + workRecordsResult.count + " pr√°ca");
            if (workRecordsResult.orders.length > 0) {
                parts.push("(" + workRecordsResult.orders.join(", ") + ")");
            }
        }

        // Kniha j√°zd
        if (rideLogResult.count > 0) {
            parts.push("üöó " + rideLogResult.count + " jazda");
            if (rideLogResult.vehicles.length > 0) {
                parts.push("(" + rideLogResult.vehicles.join(", ") + ")");
            }
        }

        // Poklad≈àa
        if (cashBookResult.count > 0) {
            parts.push("üí∞ " + cashBookResult.count + " poklad≈àa");
        }

        var description = parts.join(" | ");

        if (description) {
            utils.addDebug(currentEntry, "  ‚úÖ Popis z√°znamu: " + description);
            utils.safeSet(currentEntry, CONFIG.fields.dailyReport.recordDescription, description);
        }

        result.success = true;
        result.description = description;
        result.orderDescription = orderDescription;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri generovan√≠ popisu: " + error.toString(), "generateRecordDescription", error);
    }

    return result;
}

// ==============================================
// SP√ÑTN√â LINKOVANIE
// ==============================================
// TODO: Implement√°cia sp√§tn√Ωch linkov bude pridan√° nesk√¥r
// Po overen√≠ spr√°vnosti v√Ωpoƒçtov a agreg√°ci√≠

// ==============================================
// TELEGRAM NOTIFIK√ÅCIE
// ==============================================

function sendTelegramNotifications(attendanceResult, workRecordsResult, rideLogResult, cashBookResult) {
    var result = {
        success: false,
        sent: 0
    };

    try {
        // Kontrola, ƒçi je MementoTelegram dostupn√Ω
        if (typeof telegram === 'undefined' || !telegram) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è MementoTelegram nie je dostupn√Ω - preskakujem notifik√°cie");
            return result;
        }

        // TODO: Implement√°cia Telegram notifik√°ci√≠
        // - Z√≠ska≈• nastavenia notifik√°ci√≠ z ASISTANTO Defaults
        // - Vytvori≈• form√°tovan√∫ spr√°vu
        // - Odosla≈• cez MementoTelegram

        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Telegram notifik√°cie - pripraven√© na implement√°ciu");

        result.success = true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri odosielan√≠ Telegram notifik√°ci√≠: " + error.toString(), "sendTelegramNotifications", error);
    }

    return result;
}

// ==============================================
// SPOLOƒåN√ù INFO Z√ÅZNAM
// ==============================================

function createCommonInfo(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult) {
    var result = {
        success: false
    };

    try {
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);

        // Hlaviƒçka
        var info = "# üìä DENN√ù REPORT - ZHRNUTIE\n\n";
        info += "**D√°tum:** " + utils.formatDate(utils.safeGet(currentEntry, CONFIG.fields.dailyReport.date)) + "  \n";
        info += "**Aktualizovan√©:** " + timestamp + "\n\n";
        info += "---\n\n";

        // Sekcia Doch√°dzka
        if (attendanceResult.count > 0) {
            info += "## üë• Doch√°dzka\n\n";
            info += "- **Poƒçet z√°znamov:** " + attendanceResult.count + "\n";
            info += "- **Odpracovan√© hodiny:** " + attendanceResult.totalHours.toFixed(2) + " h\n";
            if (attendanceResult.employees.length > 0) {
                info += "- **Zamestnanci (" + attendanceResult.employees.length + "):** " + attendanceResult.employees.join(", ") + "\n";
            }
            info += "\n";
        }

        // Sekcia Z√°znamy pr√°c
        if (workRecordsResult.count > 0) {
            info += "## üìù Z√°znamy pr√°c\n\n";
            info += "- **Poƒçet z√°znamov:** " + workRecordsResult.count + "\n";
            info += "- **Celkom hod√≠n:** " + workRecordsResult.totalHours.toFixed(2) + " h\n";
            if (workRecordsResult.orders.length > 0) {
                info += "- **Z√°kazky (" + workRecordsResult.orders.length + "):** " + workRecordsResult.orders.join(", ") + "\n";
            }
            info += "\n";
        }

        // Sekcia Kniha j√°zd
        if (rideLogResult.count > 0) {
            info += "## üöó Kniha j√°zd\n\n";
            info += "- **Poƒçet z√°znamov:** " + rideLogResult.count + "\n";
            info += "- **Celkom km:** " + rideLogResult.totalKm.toFixed(2) + " km\n";
            if (rideLogResult.vehicles.length > 0) {
                info += "- **Vozidl√° (" + rideLogResult.vehicles.length + "):** " + rideLogResult.vehicles.join(", ") + "\n";
            }
            info += "\n";
        }

        // Sekcia Poklad≈àa
        if (cashBookResult.count > 0) {
            info += "## üí∞ Poklad≈àa\n\n";
            info += "- **Poƒçet z√°znamov:** " + cashBookResult.count + "\n";
            info += "- **Pr√≠jmy:** +" + cashBookResult.totalIncome.toFixed(2) + " ‚Ç¨\n";
            info += "- **V√Ωdavky:** -" + cashBookResult.totalExpense.toFixed(2) + " ‚Ç¨\n";
            var balance = cashBookResult.totalIncome - cashBookResult.totalExpense;
            info += "- **Bilancia:** " + (balance >= 0 ? "+" : "") + balance.toFixed(2) + " ‚Ç¨\n";
            info += "\n";
        }

        // Celkov√© hodiny
        if (totalHoursResult.totalHours > 0) {
            info += "---\n\n";
            info += "## ‚è±Ô∏è Celkov√© hodiny\n\n";
            info += "**" + totalHoursResult.totalHours.toFixed(2) + " h**\n\n";
        }

        // Ulo≈æ do spoloƒçn√©ho info poƒæa
        utils.safeSet(currentEntry, CONFIG.fields.common.info, info);
        utils.addDebug(currentEntry, "  ‚úÖ Spoloƒçn√Ω info z√°znam vytvoren√Ω a zap√≠san√Ω");

        result.success = true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ spoloƒçn√©ho info: " + error.toString(), "createCommonInfo", error);
    }

    return result;
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Prid√° ikonu do poƒæa ikony z√°znamu
 */
function addRecordIcon(icon) {
    try {
        var currentIcons = utils.safeGet(currentEntry, CONFIG.fields.dailyReport.recordIcons, "");

        // Skontroluj, ƒçi ikona u≈æ nie je pridan√°
        if (currentIcons.indexOf(icon) === -1) {
            var newIcons = currentIcons ? currentIcons + " " + icon : icon;
            utils.safeSet(currentEntry, CONFIG.fields.dailyReport.recordIcons, newIcons);
            utils.addDebug(currentEntry, "  üìå Pridan√° ikona: " + icon);
        }
    } catch (error) {
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa prida≈• ikonu: " + error.toString());
    }
}

/**
 * Vytvor√≠ markdown form√°tovan√Ω info z√°znam
 */
function createMarkdownInfo(title, timestamp, stats, detailBlocks) {
    var info = "## üìä " + title + " - ZHRNUTIE\n\n";
    info += "**Aktualizovan√©:** " + timestamp + "\n\n";

    // ≈†tatistiky
    for (var i = 0; i < stats.length; i++) {
        var stat = stats[i];
        info += "- **" + stat.label + ":** " + stat.value + "\n";
    }

    info += "\n---\n\n";

    // Detailn√© bloky (ak existuj√∫)
    if (detailBlocks && detailBlocks.length > 0) {
        for (var j = 0; j < detailBlocks.length; j++) {
            // Konvertuj emoji bloky na markdown
            var block = detailBlocks[j];
            // Odstr√°≈à √∫vodn√© emoji a nahraƒè bold markdown
            block = block.replace(/^(üìã|üìù|üöó|üí∞)\s+/, "### ");
            block = block.replace(/^\s+/gm, ""); // Odstr√°≈à indent√°ciu
            info += block + "\n\n";
        }
    }

    return info;
}

function buildSummary(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult) {
    var lines = [];

    lines.push("‚úÖ Denn√Ω report spracovan√Ω:\n");

    if (attendanceResult.count > 0) {
        lines.push("üë• Doch√°dzka: " + attendanceResult.count + " z√°znamov, " + attendanceResult.totalHours.toFixed(2) + " h");
    }

    if (workRecordsResult.count > 0) {
        lines.push("üìù Pr√°ce: " + workRecordsResult.count + " z√°znamov, " + workRecordsResult.totalHours.toFixed(2) + " h");
    }

    if (rideLogResult.count > 0) {
        lines.push("üöó Jazdy: " + rideLogResult.count + " z√°znamov, " + rideLogResult.totalKm.toFixed(2) + " km");
    }

    if (cashBookResult.count > 0) {
        var balance = cashBookResult.totalIncome - cashBookResult.totalExpense;
        lines.push("üí∞ Poklad≈àa: " + cashBookResult.count + " z√°znamov, bilancia " + balance.toFixed(2) + " ‚Ç¨");
    }

    if (totalHoursResult.totalHours > 0) {
        lines.push("\n‚è±Ô∏è Celkov√© hodiny: " + totalHoursResult.totalHours.toFixed(2) + " h");
    }

    return lines.join("\n");
}

// ==============================================
// SPUSTENIE
// ==============================================

main();
