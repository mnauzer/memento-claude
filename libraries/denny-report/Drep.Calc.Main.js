// ==============================================
// MEMENTO DATABASE - DENN√ù REPORT PREPOƒåET
// Verzia: 1.8.2 | D√°tum: okt√≥ber 2025 | Autor: ASISTANTO
// Kni≈ænica: Denn√Ω report | Trigger: Before Save
// ==============================================
// ‚úÖ FUNKCIONALITA v1.8.2:
//    - AUTO-LINKOVANIE z√°znamov podƒæa d√°tumu (Doch√°dzka, Pr√°ce, Jazdy, Poklad≈àa)
//    - Automatick√© nastavenie d≈àa v t√Ω≈ædni podƒæa d√°tumu
//    - Agreg√°cia d√°t z Doch√°dzky, Z√°znamov pr√°c, Knihy j√°zd a Pokladne
//    - Vytv√°ranie Info z√°znamov pre ka≈æd√∫ sekciu (markdown form√°t)
//    - Vytvorenie spoloƒçn√©ho info z√°znamu
//    - V√Ωpoƒçet celkov√Ωch odpracovan√Ωch hod√≠n
//    - V√Ωpoƒçet celkov√Ωch km, pr√≠jmov a v√Ωdavkov
//    - Generovanie popisu z√°znamu (markdown form√°t)
//    - Automatick√© prid√°vanie ik√¥n pre vyplnen√© sekcie a upozornenia
//    - Agreg√°cia strojov a materi√°lu zo Z√°znamov pr√°c
//    - Agreg√°cia zamestnancov (Doch√°dzka, Pr√°ce) a pos√°dky (Jazdy)
//    - Valid√°cia ch√Ωbaj√∫cich z√°znamov (Doch√°dzka, Pr√°ce, Jazdy povinn√©)
//    - Valid√°cia konzistencie zamestnancov s menami (poƒçet + zhoda)
//    - Kontrola prestojov (porovnanie hod√≠n Doch√°dzka vs Pr√°ce)
//    - Pr√≠prava na integr√°ciu s MementoTelegram a MementoAI
// üîß CHANGELOG v1.8.2:
//    - OPRAVA: Spr√°vna syntax pre linkovanie - field().push() + set()
//    - OPRAVA: Z√≠skaj existuj√∫ce linky, pridaj nov√Ω, nastav sp√§≈•
//    - Syntax: var links = entry.field("pole"); links.push(newEntry); entry.set("pole", links);
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var telegram = MementoTelegram;
var ai = MementoAI;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Denn√Ω report Prepoƒçet",
    version: "1.8.2",

    // Referencie na centr√°lny config
    fields: {
        dailyReport: centralConfig.fields.dailyReport,
        attendance: centralConfig.fields.attendance,
        workRecord: centralConfig.fields.workRecord,
        rideLog: centralConfig.fields.rideLog,
        cashBook: centralConfig.fields.cashBook,
        order: centralConfig.fields.order,
        employee: centralConfig.fields.employee,
        vehicle: centralConfig.fields.vehicle,
        material: centralConfig.fields.material,
        machine: centralConfig.fields.machine,
        common: centralConfig.fields.common,
        place: centralConfig.fields.place
    },
    libraries: centralConfig.libraries,
    icons: centralConfig.icons
};

// ==============================================
// AUTO-LINKOVANIE Z√ÅZNAMOV
// ==============================================

/**
 * Automaticky n√°jde a nalinkuje z√°znamy z kni≈æn√≠c s rovnak√Ωm d√°tumom
 * Zabezpeƒçuje, ≈æe ned√¥jde k duplicitn√©mu linkovaniu
 */
function autoLinkRecords(reportDate) {
    var result = {
        success: false,
        linked: {
            attendance: 0,
            workRecords: 0,
            rideLog: 0,
            cashBook: 0
        }
    };

    try {
        utils.addDebug(currentEntry, "üîó AUTO-LINKOVANIE: Vyhƒæad√°vam z√°znamy pre d√°tum " + utils.formatDate(reportDate));

        // Z√≠skaj aktu√°lne linknut√© z√°znamy (aby sme predi≈°li duplicit√°m)
        var currentAttendance = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.attendance) || [];
        var currentWorkRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.workRecord) || [];
        var currentRideLog = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.rideLog) || [];
        var currentCashBook = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.cashBook) || [];

        // Vytvor mapy ID u≈æ linknut√Ωch z√°znamov
        var attendanceIds = {};
        var workRecordIds = {};
        var rideLogIds = {};
        var cashBookIds = {};

        for (var i = 0; i < currentAttendance.length; i++) {
            attendanceIds[currentAttendance[i].field("ID")] = true;
        }
        for (var j = 0; j < currentWorkRecords.length; j++) {
            workRecordIds[currentWorkRecords[j].field("ID")] = true;
        }
        for (var k = 0; k < currentRideLog.length; k++) {
            rideLogIds[currentRideLog[k].field("ID")] = true;
        }
        for (var l = 0; l < currentCashBook.length; l++) {
            cashBookIds[currentCashBook[l].field("ID")] = true;
        }

        // 1. Doch√°dzka
        var attendanceLib = libByName(CONFIG.libraries.attendance);
        var attendanceEntries = attendanceLib.entries();
        utils.addDebug(currentEntry, "  üîç Kontrolujem Doch√°dzku: " + attendanceEntries.length + " z√°znamov");

        for (var a = 0; a < attendanceEntries.length; a++) {
            var attEntry = attendanceEntries[a];
            var attDate = utils.safeGet(attEntry, CONFIG.fields.attendance.date);
            var attId = attEntry.field("ID");

            if (attDate && utils.formatDate(attDate) === utils.formatDate(reportDate)) {
                // Skontroluj, ƒçi u≈æ nie je linknut√Ω
                if (!attendanceIds[attId]) {
                    // Pridaj z√°znam do existuj√∫cich linkov
                    var currentLinks = currentEntry.field(CONFIG.fields.dailyReport.attendance);
                    currentLinks.push(attEntry);
                    currentEntry.set(CONFIG.fields.dailyReport.attendance, currentLinks);

                    result.linked.attendance++;
                    utils.addDebug(currentEntry, "  ‚úÖ Linknut√Ω z√°znam Doch√°dzky #" + attId);

                    // Pridaj ikonu Denn√©ho reportu do z√°znamu Doch√°dzky
                    addDailyReportIcon(attEntry, "ikony z√°znamu");
                }
            }
        }

        // 2. Z√°znam pr√°c
        var workRecordsLib = libByName(CONFIG.libraries.workRecords);
        var workEntries = workRecordsLib.entries();
        utils.addDebug(currentEntry, "  üîç Kontrolujem Z√°znam pr√°c: " + workEntries.length + " z√°znamov");

        for (var w = 0; w < workEntries.length; w++) {
            var workEntry = workEntries[w];
            var workDate = utils.safeGet(workEntry, CONFIG.fields.workRecord.date);
            var workId = workEntry.field("ID");

            if (workDate && utils.formatDate(workDate) === utils.formatDate(reportDate)) {
                if (!workRecordIds[workId]) {
                    var currentLinks = currentEntry.field(CONFIG.fields.dailyReport.workRecord);
                    currentLinks.push(workEntry);
                    currentEntry.set(CONFIG.fields.dailyReport.workRecord, currentLinks);

                    result.linked.workRecords++;
                    utils.addDebug(currentEntry, "  ‚úÖ Linknut√Ω z√°znam pr√°c #" + workId);

                    // Pridaj ikonu Denn√©ho reportu do Z√°znamu pr√°c
                    addDailyReportIcon(workEntry, "ikony z√°znamu");
                }
            }
        }

        // 3. Kniha j√°zd
        var rideLogLib = libByName(CONFIG.libraries.rideLog);
        var rideEntries = rideLogLib.entries();
        utils.addDebug(currentEntry, "  üîç Kontrolujem Knihu j√°zd: " + rideEntries.length + " z√°znamov");

        for (var r = 0; r < rideEntries.length; r++) {
            var rideEntry = rideEntries[r];
            var rideDate = utils.safeGet(rideEntry, CONFIG.fields.rideLog.date);
            var rideId = rideEntry.field("ID");

            if (rideDate && utils.formatDate(rideDate) === utils.formatDate(reportDate)) {
                if (!rideLogIds[rideId]) {
                    var currentLinks = currentEntry.field(CONFIG.fields.dailyReport.rideLog);
                    currentLinks.push(rideEntry);
                    currentEntry.set(CONFIG.fields.dailyReport.rideLog, currentLinks);

                    result.linked.rideLog++;
                    utils.addDebug(currentEntry, "  ‚úÖ Linknut√Ω z√°znam z Knihy j√°zd #" + rideId);

                    // Pridaj ikonu Denn√©ho reportu do Knihy j√°zd
                    addDailyReportIcon(rideEntry, "ikony z√°znamu");
                }
            }
        }

        // 4. Poklad≈àa
        var cashBookLib = libByName(CONFIG.libraries.cashBook);
        var cashEntries = cashBookLib.entries();
        for (var c = 0; c < cashEntries.length; c++) {
            var cashEntry = cashEntries[c];
            var cashDate = utils.safeGet(cashEntry, CONFIG.fields.cashBook.date);
            var cashId = cashEntry.field("ID");

            if (cashDate && utils.formatDate(cashDate) === utils.formatDate(reportDate)) {
                if (!cashBookIds[cashId]) {
                    var currentLinks = currentEntry.field(CONFIG.fields.dailyReport.cashBook);
                    currentLinks.push(cashEntry);
                    currentEntry.set(CONFIG.fields.dailyReport.cashBook, currentLinks);

                    result.linked.cashBook++;
                    utils.addDebug(currentEntry, "  ‚úÖ Linknut√Ω z√°znam z Pokladne #" + cashId);

                    // Pridaj ikonu Denn√©ho reportu do Pokladne
                    addDailyReportIcon(cashEntry, "ikony z√°znamu");
                }
            }
        }

        var totalLinked = result.linked.attendance + result.linked.workRecords + result.linked.rideLog + result.linked.cashBook;
        utils.addDebug(currentEntry, "üîó AUTO-LINKOVANIE DOKONƒåEN√â: " + totalLinked + " nov√Ωch z√°znamov nalinkovan√Ωch");
        utils.addDebug(currentEntry, "  üìä Doch√°dzka: " + result.linked.attendance + ", Pr√°ce: " + result.linked.workRecords + ", Jazdy: " + result.linked.rideLog + ", Poklad≈àa: " + result.linked.cashBook);

        result.success = true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri auto-linkovan√≠ z√°znamov: " + error.toString(), "autoLinkRecords", error);
    }

    return result;
}

/**
 * Prid√° ikonu Denn√©ho reportu do nalinkovan√©ho z√°znamu
 */
function addDailyReportIcon(entry, iconFieldName) {
    try {
        var currentIcons = utils.safeGet(entry, iconFieldName, "");
        var dailyReportIcon = "üìä";

        // Skontroluj, ƒçi ikona u≈æ nie je pridan√°
        if (currentIcons.indexOf(dailyReportIcon) === -1) {
            var newIcons = currentIcons ? currentIcons + " " + dailyReportIcon : dailyReportIcon;
            utils.safeSet(entry, iconFieldName, newIcons);
        }
    } catch (error) {
        // Tich√° chyba - ikona nie je kritick√°
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa prida≈• ikonu do z√°znamu: " + error.toString());
    }
}

/**
 * Odstr√°ni ikonu zo z√°znamu
 */
function removeRecordIcon(icon) {
    try {
        var currentIcons = currentEntry.field(CONFIG.fields.dailyReport.recordIcons);
        if (!currentIcons) {
            return;
        }

        // Odstr√°≈à ikonu zo stringu
        var iconsArray = currentIcons.split(" ");
        var newIconsArray = [];
        for (var i = 0; i < iconsArray.length; i++) {
            if (iconsArray[i] !== icon && iconsArray[i] !== "") {
                newIconsArray.push(iconsArray[i]);
            }
        }

        var newIcons = newIconsArray.join(" ");
        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.recordIcons, newIcons);
    } catch (error) {
        // Tich√° chyba - ikona nie je kritick√°
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa odstr√°ni≈• ikonu zo z√°znamu: " + error.toString());
    }
}

/**
 * Nastav√≠ de≈à v t√Ω≈ædni podƒæa d√°tumu
 */
function setDayOfWeek(date) {
    try {
        if (!date) {
            return;
        }

        // Dni v t√Ω≈ædni v slovenƒçine (0 = Nedeƒæa, 1 = Pondelok, ...)
        var dayNames = ["Nedeƒæa", "Pondelok", "Utorok", "Streda", "≈†tvrtok", "Piatok", "Sobota"];

        // Z√≠skaj ƒç√≠slo d≈àa (0-6)
        var dayIndex = date.getDay();
        var dayName = dayNames[dayIndex];

        // Nastav hodnotu v poli De≈à
        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.dayOfWeek, dayName);
        utils.addDebug(currentEntry, "  üìÖ Nastaven√Ω de≈à: " + dayName);

    } catch (error) {
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa nastavi≈• de≈à v t√Ω≈ædni: " + error.toString());
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.clearLogs(currentEntry, true);

        // Z√≠skaj d√°tum z√°znamu
        var reportDate = utils.safeGet(currentEntry, CONFIG.fields.dailyReport.date);
        if (!reportDate) {
            utils.addError(currentEntry, "D√°tum nie je vyplnen√Ω", "main");
            message("‚ùå D√°tum nie je vyplnen√Ω!");
            return false;
        }

        utils.addDebug(currentEntry, "üìÖ D√°tum reportu: " + utils.formatDate(reportDate));

        // Nastav de≈à v t√Ω≈ædni podƒæa d√°tumu
        setDayOfWeek(reportDate);

        // KROK 0: Auto-linkovanie z√°znamov
        utils.addDebug(currentEntry, utils.getIcon("link") + " KROK 0: Auto-linkovanie z√°znamov");
        var linkingResult = autoLinkRecords(reportDate);

        // KROK 1: Spracovanie Doch√°dzky
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 1: Spracovanie Doch√°dzky");
        var attendanceResult = processAttendance();

        // KROK 2: Spracovanie Z√°znamov pr√°c
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 2: Spracovanie Z√°znamov pr√°c");
        var workRecordsResult = processWorkRecords();

        // KROK 3: Spracovanie Knihy j√°zd
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 3: Spracovanie Knihy j√°zd");
        var rideLogResult = processRideLog();

        // KROK 4: Spracovanie Pokladne
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 4: Spracovanie Pokladne");
        var cashBookResult = processCashBook();

        // KROK 5: V√Ωpoƒçet celkov√Ωch hod√≠n
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 5: V√Ωpoƒçet celkov√Ωch hod√≠n");
        var totalHoursResult = calculateTotalHours(attendanceResult, workRecordsResult);

        // KROK 6: Kontrola ch√Ωbaj√∫cich z√°znamov a konzistencie
        utils.addDebug(currentEntry, utils.getIcon("warning") + " KROK 6: Kontrola z√°znamov");
        var validationResult = validateRecords(attendanceResult, workRecordsResult, rideLogResult);

        // KROK 7: Vytvorenie s√∫hrnn√©ho popisu
        utils.addDebug(currentEntry, utils.getIcon("note") + " KROK 7: Generovanie popisu z√°znamu");
        generateRecordDescription(attendanceResult, workRecordsResult, rideLogResult, cashBookResult);

        // KROK 8: Vytvorenie spoloƒçn√©ho info z√°znamu
        utils.addDebug(currentEntry, utils.getIcon("note") + " KROK 8: Vytvorenie spoloƒçn√©ho info");
        createCommonInfo(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult, validationResult);

        // KROK 9: Telegram notifik√°cie (voliteƒæn√© - pripraven√© na neskor≈°iu implement√°ciu)
        utils.addDebug(currentEntry, utils.getIcon("telegram") + " KROK 9: Telegram notifik√°cie");
        sendTelegramNotifications(attendanceResult, workRecordsResult, rideLogResult, cashBookResult);

        utils.addDebug(currentEntry, utils.getIcon("success") + " === PREPOƒåET DOKONƒåEN√ù ===");

        // Zhrnutie
        var summary = buildSummary(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult);
        if (summary) {
            message(summary);
        }

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message("‚ùå Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// SPRACOVANIE DOCH√ÅDZKY
// ==============================================

function processAttendance() {
    var result = {
        success: false,
        count: 0,
        totalHours: 0,
        employees: [],
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy Doch√°dzky
        var attendanceRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.attendance);

        if (!attendanceRecords || attendanceRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy doch√°dzky");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov doch√°dzky: " + attendanceRecords.length);

        var infoBlocks = [];
        var totalWorked = 0;
        var employeeSet = {};

        // Spracuj ka≈æd√Ω z√°znam doch√°dzky
        for (var i = 0; i < attendanceRecords.length; i++) {
            var attendance = attendanceRecords[i];
            var attId = attendance.field("ID");

            // Z√≠skaj d√°ta
            var employees = utils.safeGetLinks(attendance, CONFIG.fields.attendance.employees);
            var workTime = utils.safeGet(attendance, CONFIG.fields.attendance.workTime, 0);
            var workedHours = utils.safeGet(attendance, CONFIG.fields.attendance.workedHours, 0);
            var arrival = utils.safeGet(attendance, CONFIG.fields.attendance.arrival);
            var departure = utils.safeGet(attendance, CONFIG.fields.attendance.departure);

            // Agreguj zamestnancov
            if (employees && employees.length > 0) {
                for (var j = 0; j < employees.length; j++) {
                    var empName = utils.safeGet(employees[j], CONFIG.fields.employee.nick);
                    if (empName) {
                        employeeSet[empName] = true;
                    }
                }
            }

            totalWorked += workedHours;

            // Vytvor info blok pre tento z√°znam
            var block = "üìã Doch√°dzka #" + attId + "\n";
            if (employees && employees.length > 0) {
                var empNames = [];
                for (var k = 0; k < employees.length; k++) {
                    empNames.push(utils.safeGet(employees[k], CONFIG.fields.employee.nick));
                }
                block += "  üë• Zamestnanci: **" + empNames.join(", ") + "**\n";
            }
            if (arrival && departure) {
                block += "  üïê Pracovn√Ω ƒças: **" + utils.formatTime(arrival) + " - " + utils.formatTime(departure) + "**\n";
            }
            block += "  ‚è±Ô∏è Pracovn√° doba: **" + workTime.toFixed(2) + " h**\n";
            block += "  ‚è±Ô∏è Odpracovan√©: **" + workedHours.toFixed(2) + " h**\n";

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);
        var infoText = "\n\nüìä DOCH√ÅDZKA - ZHRNUTIE: " + timestamp + "\n";
        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        infoText += "üìà Celkom z√°znamov: " + attendanceRecords.length + "\n";
        infoText += "‚è±Ô∏è Celkom odpracovan√Ωch hod√≠n: " + totalWorked.toFixed(2) + " h\n";

        var employeeNames = Object.keys(employeeSet);
        if (employeeNames.length > 0) {
            infoText += "üë• Zamestnanci (" + employeeNames.length + "): " + employeeNames.join(", ") + "\n";
        }

        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        infoText += infoBlocks.join("\n");

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("DOCH√ÅDZKA", timestamp, [
            { label: "Celkom z√°znamov", value: attendanceRecords.length },
            { label: "Celkom odpracovan√Ωch hod√≠n", value: totalWorked.toFixed(2) + " h" },
            { label: "Zamestnanci (" + employeeNames.length + ")", value: employeeNames.join(", ") }
        ], infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoAttendance, markdownInfo);
        addRecordIcon("üë•");
        utils.addDebug(currentEntry, "  ‚úÖ Info doch√°dzka vytvoren√Ω a zap√≠san√Ω (" + attendanceRecords.length + " z√°znamov)");

        result.success = true;
        result.count = attendanceRecords.length;
        result.totalHours = totalWorked;
        result.employees = employeeNames;
        result.info = infoText;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ doch√°dzky: " + error.toString(), "processAttendance", error);
    }

    return result;
}

// ==============================================
// SPRACOVANIE Z√ÅZNAMOV PR√ÅC
// ==============================================

function processWorkRecords() {
    var result = {
        success: false,
        count: 0,
        totalHours: 0,
        orders: [],
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy pr√°c
        var workRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.workRecord);

        if (!workRecords || workRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy pr√°c");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov pr√°c: " + workRecords.length);

        var infoBlocks = [];
        var totalWorkedHours = 0;
        var orderSet = {};
        var orderFullNames = {}; // ƒå√≠slo.N√°zov pre pole Popis
        var machinesSet = {};
        var materialSet = {};
        var employeeSet = {};

        // Spracuj ka≈æd√Ω z√°znam pr√°ce
        for (var i = 0; i < workRecords.length; i++) {
            var work = workRecords[i];
            var workId = work.field("ID");

            // Z√≠skaj d√°ta
            var order = utils.safeGetLinks(work, CONFIG.fields.workRecord.order);
            var workedHours = utils.safeGet(work, CONFIG.fields.workRecord.workedHours, 0);
            var description = utils.safeGet(work, CONFIG.fields.workRecord.workDescription, "");
            var employees = utils.safeGetLinks(work, CONFIG.fields.workRecord.employees);
            var machines = utils.safeGetLinks(work, CONFIG.fields.workRecord.machinery);
            var materials = utils.safeGetLinks(work, CONFIG.fields.workRecord.workItems);

            // Agreguj z√°kazky
            if (order && order.length > 0) {
                var orderName = utils.safeGet(order[0], CONFIG.fields.order.name);
                var orderNumber = utils.safeGet(order[0], CONFIG.fields.order.number, "");
                if (orderName) {
                    orderSet[orderName] = true;
                    // Vytvor form√°t ƒå√≠slo.N√°zov
                    var fullName = orderNumber ? orderNumber + "." + orderName : orderName;
                    orderFullNames[fullName] = true;
                }
            }

            // Agreguj stroje
            if (machines && machines.length > 0) {
                for (var m = 0; m < machines.length; m++) {
                    var machineName = utils.safeGet(machines[m], CONFIG.fields.machine.name);
                    if (machineName) {
                        machinesSet[machineName] = true;
                    }
                }
            }

            // Agreguj materi√°l (workItems - Pr√°ce Polo≈æky)
            if (materials && materials.length > 0) {
                for (var mat = 0; mat < materials.length; mat++) {
                    // workItems maj√∫ pole "name" alebo "description"
                    var materialName = utils.safeGet(materials[mat], "name") || utils.safeGet(materials[mat], "description", "");
                    if (materialName) {
                        materialSet[materialName] = true;
                    }
                }
            }

            // Agreguj zamestnancov
            if (employees && employees.length > 0) {
                for (var emp = 0; emp < employees.length; emp++) {
                    var empName = utils.safeGet(employees[emp], CONFIG.fields.employee.nick);
                    if (empName) {
                        employeeSet[empName] = true;
                    }
                }
            }

            totalWorkedHours += workedHours;

            // Vytvor info blok pre tento z√°znam
            var block = "üìù Z√°znam pr√°c #" + workId + "\n";
            if (order && order.length > 0) {
                var orderNum = utils.safeGet(order[0], CONFIG.fields.order.number, "");
                var orderNm = utils.safeGet(order[0], CONFIG.fields.order.name);
                block += "  üéØ Z√°kazka: **" + (orderNum ? orderNum + "." : "") + orderNm.trim() + "**\n";
            }
            if (employees && employees.length > 0) {
                var empNames = [];
                for (var e = 0; e < employees.length; e++) {
                    empNames.push(utils.safeGet(employees[e], CONFIG.fields.employee.nick));
                }
                block += "  üë• Zamestnanci: **" + empNames.join(", ") + "**\n";
            }
            if (machines && machines.length > 0) {
                var machNames = [];
                for (var mch = 0; mch < machines.length; mch++) {
                    machNames.push(utils.safeGet(machines[mch], CONFIG.fields.machine.name));
                }
                block += "  üöú Stroje: **" + machNames.join(", ") + "**\n";
            }
            if (materials && materials.length > 0) {
                var matNames = [];
                for (var mtl = 0; mtl < materials.length; mtl++) {
                    var matName = utils.safeGet(materials[mtl], "name") || utils.safeGet(materials[mtl], "description", "");
                    if (matName) {
                        matNames.push(matName);
                    }
                }
                if (matNames.length > 0) {
                    block += "  üì¶ Materi√°l: **" + matNames.join(", ") + "**\n";
                }
            }
            if (description) {
                block += "  üî® Pr√°ce: **" + description.substring(0, 150).trim() + (description.length > 150 ? "..." : "") + "**\n";
            }
            block += "  ‚è±Ô∏è Odpracovan√©: **" + workedHours.toFixed(2) + " h**\n";

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);

        var orderNames = Object.keys(orderSet);
        var machineNames = Object.keys(machinesSet);
        var materialNames = Object.keys(materialSet);
        var employeeNames = Object.keys(employeeSet);

        // Vytvor stats pre markdown
        var stats = [
            { label: "Celkom z√°znamov", value: workRecords.length },
            { label: "Odpracovan√© hodiny", value: totalWorkedHours.toFixed(2) + " h" }
        ];

        if (employeeNames.length > 0) {
            stats.push({ label: "Zamestnanci (" + employeeNames.length + ")", value: employeeNames.join(", ") });
        }
        if (orderNames.length > 0) {
            stats.push({ label: "Z√°kazky (" + orderNames.length + ")", value: orderNames.join(", ") });
        }
        if (machineNames.length > 0) {
            stats.push({ label: "Stroje (" + machineNames.length + ")", value: machineNames.join(", ") });
        }
        if (materialNames.length > 0) {
            stats.push({ label: "Materi√°l (" + materialNames.length + ")", value: materialNames.join(", ") });
        }

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("Z√ÅZNAMY PR√ÅC", timestamp, stats, infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoWorkRecords, markdownInfo);
        addRecordIcon("üõ†Ô∏è");
        utils.addDebug(currentEntry, "  ‚úÖ Info z√°znam pr√°c vytvoren√Ω a zap√≠san√Ω (" + workRecords.length + " z√°znamov)");

        result.success = true;
        result.count = workRecords.length;
        result.totalHours = totalWorkedHours;
        result.employees = employeeNames;
        result.orders = orderNames;
        result.orderFullNames = Object.keys(orderFullNames); // Pre pole Popis
        result.machines = machineNames;
        result.materials = materialNames;
        result.info = markdownInfo;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ z√°znamov pr√°c: " + error.toString(), "processWorkRecords", error);
    }

    return result;
}

// ==============================================
// SPRACOVANIE KNIHY J√ÅZD
// ==============================================

function processRideLog() {
    var result = {
        success: false,
        count: 0,
        totalKm: 0,
        vehicles: [],
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy z Knihy j√°zd
        var rideRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.rideLog);

        if (!rideRecords || rideRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy z knihy j√°zd");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov z knihy j√°zd: " + rideRecords.length);

        var infoBlocks = [];
        var totalKm = 0;
        var vehicleSet = {};
        var crewSet = {};

        // Spracuj ka≈æd√Ω z√°znam z knihy j√°zd
        for (var i = 0; i < rideRecords.length; i++) {
            var ride = rideRecords[i];
            var rideId = ride.field("ID");

            // Z√≠skaj d√°ta
            var vehicle = utils.safeGetLinks(ride, CONFIG.fields.rideLog.vehicle);
            var km = utils.safeGet(ride, CONFIG.fields.rideLog.km, 0);
            var route = utils.safeGet(ride, CONFIG.fields.rideLog.route, "");
            var crew = utils.safeGetLinks(ride, "Pos√°dka");
            var start = utils.safeGetLinks(ride, CONFIG.fields.rideLog.start);
            var stops = utils.safeGetLinks(ride, CONFIG.fields.rideLog.stops);
            var destination = utils.safeGetLinks(ride, CONFIG.fields.rideLog.destination);

            // Agreguj vozidl√°
            if (vehicle && vehicle.length > 0) {
                var vehicleName = utils.safeGet(vehicle[0], CONFIG.fields.vehicle.name);
                if (vehicleName) {
                    vehicleSet[vehicleName] = true;
                }
            }

            // Agreguj pos√°dku
            if (crew && crew.length > 0) {
                for (var cr = 0; cr < crew.length; cr++) {
                    var crewName = utils.safeGet(crew[cr], CONFIG.fields.employee.nick);
                    if (crewName) {
                        crewSet[crewName] = true;
                    }
                }
            }

            totalKm += km;

            // Vytvor info blok pre tento z√°znam
            var block = "üöó Kniha j√°zd #" + rideId + "\n";
            if (vehicle && vehicle.length > 0) {
                block += "  üöô Vozidlo: **" + utils.safeGet(vehicle[0], CONFIG.fields.vehicle.name) + "**\n";
            }
            if (crew && crew.length > 0) {
                var crewNames = [];
                for (var cn = 0; cn < crew.length; cn++) {
                    crewNames.push(utils.safeGet(crew[cn], CONFIG.fields.employee.nick));
                }
                block += "  üë• Pos√°dka: **" + crewNames.join(", ") + "**\n";
            }

            // Form√°tuj trasu: 1. ≈†tart, 2. Z√°stavka - km, 3. Cieƒæ - km
            if (start || stops || destination) {
                var routeParts = [];
                var stepNum = 1;

                if (start && start.length > 0) {
                    var startName = utils.safeGet(start[0], CONFIG.fields.place.name) || utils.safeGet(start[0], CONFIG.fields.place.nick, "");
                    if (startName) {
                        routeParts.push(stepNum + ". " + startName);
                        stepNum++;
                    }
                }

                if (stops && stops.length > 0) {
                    for (var st = 0; st < stops.length; st++) {
                        var stopName = utils.safeGet(stops[st], CONFIG.fields.place.name) || utils.safeGet(stops[st], CONFIG.fields.place.nick, "");
                        if (stopName) {
                            // Predpoklad√°me, ≈æe km s√∫ rozdelen√© rovnomerne alebo pou≈æijeme celkov√© km
                            routeParts.push(stepNum + ". " + stopName);
                            stepNum++;
                        }
                    }
                }

                if (destination && destination.length > 0) {
                    var destName = utils.safeGet(destination[0], CONFIG.fields.place.name) || utils.safeGet(destination[0], CONFIG.fields.place.nick, "");
                    if (destName) {
                        routeParts.push(stepNum + ". " + destName + " - " + km.toFixed(2) + " km");
                    }
                }

                if (routeParts.length > 0) {
                    block += "  üìç Trasa: **" + routeParts.join(", ") + "**\n";
                }
            } else if (route) {
                block += "  üìç Trasa: **" + route.substring(0, 100) + (route.length > 100 ? "..." : "") + "**\n";
            }

            block += "  üìè Celkom: **" + km.toFixed(2) + " km**\n";

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);

        var vehicleNames = Object.keys(vehicleSet);
        var crewNames = Object.keys(crewSet);

        // Vytvor stats pre markdown
        var stats = [
            { label: "Celkom z√°znamov", value: rideRecords.length },
            { label: "Celkom km", value: totalKm.toFixed(2) + " km" }
        ];

        if (vehicleNames.length > 0) {
            stats.push({ label: "Vozidl√° (" + vehicleNames.length + ")", value: vehicleNames.join(", ") });
        }
        if (crewNames.length > 0) {
            stats.push({ label: "Pos√°dka (" + crewNames.length + ")", value: crewNames.join(", ") });
        }

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("KNIHA J√ÅZD", timestamp, stats, infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoRideLog, markdownInfo);
        addRecordIcon("üöó");
        utils.addDebug(currentEntry, "  ‚úÖ Info kniha j√°zd vytvoren√Ω a zap√≠san√Ω (" + rideRecords.length + " z√°znamov)");

        result.success = true;
        result.count = rideRecords.length;
        result.totalKm = totalKm;
        result.vehicles = vehicleNames;
        result.crew = crewNames;
        result.info = markdownInfo;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ knihy j√°zd: " + error.toString(), "processRideLog", error);
    }

    return result;
}

// ==============================================
// SPRACOVANIE POKLADNE
// ==============================================

function processCashBook() {
    var result = {
        success: false,
        count: 0,
        totalIncome: 0,
        totalExpense: 0,
        info: ""
    };

    try {
        // Z√≠skaj linknut√© z√°znamy z Pokladne
        var cashRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.cashBook);

        if (!cashRecords || cashRecords.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne z√°znamy z pokladne");
            return result;
        }

        utils.addDebug(currentEntry, "  üìä Poƒçet z√°znamov z pokladne: " + cashRecords.length);

        var infoBlocks = [];
        var totalIncome = 0;
        var totalExpense = 0;

        // Spracuj ka≈æd√Ω z√°znam z pokladne
        for (var i = 0; i < cashRecords.length; i++) {
            var cash = cashRecords[i];
            var cashId = cash.field("ID");

            // Z√≠skaj d√°ta
            var transactionType = utils.safeGet(cash, CONFIG.fields.cashBook.transactionType, "");
            var sumTotal = utils.safeGet(cash, CONFIG.fields.cashBook.sumTotal, 0);
            var sum = utils.safeGet(cash, CONFIG.fields.cashBook.sum, 0);
            var description = utils.safeGet(cash, CONFIG.fields.cashBook.description, "");

            // Debug: zobraz hodnoty
            utils.addDebug(currentEntry, "  üîç Poklad≈àa #" + cashId + ": Typ=" + transactionType + ", sumTotal=" + sumTotal + ", sum=" + sum);

            // Konvertuj na ƒç√≠sla ak s√∫ stringy
            if (typeof sumTotal === "string") {
                sumTotal = parseFloat(sumTotal) || 0;
            }
            if (typeof sum === "string") {
                sum = parseFloat(sum) || 0;
            }

            // Pou≈æij sumTotal ak existuje, inak sum
            var amount = (sumTotal !== null && sumTotal !== undefined && sumTotal !== 0) ? sumTotal : sum;

            // Agreguj pr√≠jmy a v√Ωdavky podƒæa typu pohybu
            if (transactionType === "Pr√≠jem") {
                totalIncome += amount;
            } else if (transactionType === "V√Ωdaj" || transactionType === "V√Ωdavok") {
                totalExpense += amount;
            }
            // PP (Priebe≈æn√° polo≈æka) sa nezapoƒç√≠tava do pr√≠jmov ani v√Ωdavkov

            utils.addDebug(currentEntry, "  üí∞ Amount=" + amount + ", totalIncome=" + totalIncome + ", totalExpense=" + totalExpense);

            // Vytvor info blok pre tento z√°znam
            var block = "üí∞ Poklad≈àa #" + cashId + "\n";
            block += "  üìä Typ: **" + transactionType + "**\n";
            block += "  üíµ Suma: **" + amount.toFixed(2) + " ‚Ç¨**\n";
            if (description) {
                block += "  üìã Popis: **" + description.substring(0, 100) + (description.length > 100 ? "..." : "") + "**\n";
            }

            infoBlocks.push(block);
        }

        // Vytvor zjednoten√Ω info z√°znam
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);
        var infoText = "\n\nüí∞ POKLAD≈áA - ZHRNUTIE: " + timestamp + "\n";
        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        infoText += "üìà Celkom z√°znamov: " + cashRecords.length + "\n";
        infoText += "üìà Pr√≠jmy: +" + totalIncome.toFixed(2) + " ‚Ç¨\n";
        infoText += "üìâ V√Ωdavky: -" + totalExpense.toFixed(2) + " ‚Ç¨\n";
        infoText += "üí∞ Bilancia: " + (totalIncome - totalExpense).toFixed(2) + " ‚Ç¨\n";
        infoText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        infoText += infoBlocks.join("\n");

        // Ulo≈æ info z√°znam do poƒæa (markdown form√°t)
        var markdownInfo = createMarkdownInfo("POKLAD≈áA", timestamp, [
            { label: "Celkom z√°znamov", value: cashRecords.length },
            { label: "Pr√≠jmy", value: "+" + totalIncome.toFixed(2) + " ‚Ç¨" },
            { label: "V√Ωdavky", value: "-" + totalExpense.toFixed(2) + " ‚Ç¨" },
            { label: "Bilancia", value: (totalIncome - totalExpense).toFixed(2) + " ‚Ç¨" }
        ], infoBlocks);

        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.infoCashBook, markdownInfo);
        addRecordIcon("üí∞");
        utils.addDebug(currentEntry, "  ‚úÖ Info poklad≈àa vytvoren√Ω a zap√≠san√Ω (" + cashRecords.length + " z√°znamov)");

        result.success = true;
        result.count = cashRecords.length;
        result.totalIncome = totalIncome;
        result.totalExpense = totalExpense;
        result.info = infoText;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ pokladne: " + error.toString(), "processCashBook", error);
    }

    return result;
}

// ==============================================
// V√ùPOƒåET CELKOV√ùCH HOD√çN
// ==============================================

function calculateTotalHours(attendanceResult, workRecordsResult) {
    var result = {
        success: false,
        totalHours: 0
    };

    try {
        // S√∫ƒçet z doch√°dzky a z√°znamov pr√°c
        var totalFromAttendance = attendanceResult.totalHours || 0;
        var totalFromWork = workRecordsResult.totalHours || 0;

        // Pou≈æij maximum (v pr√≠pade, ≈æe s√∫ oba hodnoty vyplnen√©)
        var totalHours = Math.max(totalFromAttendance, totalFromWork);

        // Ak s√∫ obe hodnoty 0, sk√∫s s√∫ƒçet
        if (totalHours === 0) {
            totalHours = totalFromAttendance + totalFromWork;
        }

        utils.addDebug(currentEntry, "  ‚è±Ô∏è Celkov√© odpracovan√© hodiny: " + totalHours.toFixed(2) + " h");

        // Ulo≈æ do poƒæa
        utils.safeSet(currentEntry, CONFIG.fields.dailyReport.hoursWorked, totalHours);

        result.success = true;
        result.totalHours = totalHours;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri v√Ωpoƒçte celkov√Ωch hod√≠n: " + error.toString(), "calculateTotalHours", error);
    }

    return result;
}

// ==============================================
// VALID√ÅCIA Z√ÅZNAMOV
// ==============================================

function validateRecords(attendanceResult, workRecordsResult, rideLogResult) {
    var result = {
        success: true,
        warnings: [],
        errors: [],
        employeeConsistency: true
    };

    try {
        // Kontrola povinn√Ωch sekci√≠
        if (attendanceResult.count === 0) {
            result.warnings.push("‚ö†Ô∏è Chybuje z√°znam Doch√°dzky");
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è UPOZORNENIE: Chybuje z√°znam Doch√°dzky");
        }

        if (workRecordsResult.count === 0) {
            result.warnings.push("‚ö†Ô∏è Chybuje z√°znam Pr√°c");
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è UPOZORNENIE: Chybuje z√°znam Pr√°c");
        }

        if (rideLogResult.count === 0) {
            result.warnings.push("‚ö†Ô∏è Chybuje z√°znam z Knihy j√°zd");
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è UPOZORNENIE: Chybuje z√°znam z Knihy j√°zd");
        }

        // Kontrola konzistencie zamestnancov medzi Doch√°dzkou, Z√°znamami pr√°c a Knihou j√°zd
        if (attendanceResult.count > 0) {
            var attendanceEmployees = attendanceResult.employees || [];
            var attendanceSet = {};
            for (var ae = 0; ae < attendanceEmployees.length; ae++) {
                attendanceSet[attendanceEmployees[ae]] = true;
            }

            // Z√≠skaj zamestnancov zo Z√°znamov pr√°c
            var workRecordEmployees = {};
            if (workRecordsResult.count > 0) {
                var workRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.workRecord);
                if (workRecords && workRecords.length > 0) {
                    for (var i = 0; i < workRecords.length; i++) {
                        var employees = utils.safeGetLinks(workRecords[i], CONFIG.fields.workRecord.employees);
                        if (employees && employees.length > 0) {
                            for (var j = 0; j < employees.length; j++) {
                                var empName = utils.safeGet(employees[j], CONFIG.fields.employee.nick);
                                if (empName) {
                                    workRecordEmployees[empName] = true;
                                }
                            }
                        }
                    }
                }
            }

            // Z√≠skaj zamestnancov z Knihy j√°zd (Pos√°dka)
            var rideLogEmployees = {};
            if (rideLogResult.count > 0) {
                var rideRecords = utils.safeGetLinks(currentEntry, CONFIG.fields.dailyReport.rideLog);
                if (rideRecords && rideRecords.length > 0) {
                    for (var r = 0; r < rideRecords.length; r++) {
                        // Z√≠skaj pos√°dku (v≈°etci zamestnanci v jazde)
                        var crew = utils.safeGetLinks(rideRecords[r], "Pos√°dka");
                        if (crew && crew.length > 0) {
                            for (var c = 0; c < crew.length; c++) {
                                var crewName = utils.safeGet(crew[c], CONFIG.fields.employee.nick);
                                if (crewName) {
                                    rideLogEmployees[crewName] = true;
                                }
                            }
                        }
                    }
                }
            }

            var workEmployeeNames = Object.keys(workRecordEmployees);
            var rideEmployeeNames = Object.keys(rideLogEmployees);

            // Kontrola zhody zamestnancov - mus√≠me urobi≈• pred kontrolou poƒçtu, aby sme mali men√°
            var missingInWork = [];
            var extraInWork = [];
            var missingInRides = [];
            var extraInRides = [];

            // Porovnaj Doch√°dzku a Z√°znamy pr√°c
            if (workRecordsResult.count > 0) {
                for (var a1 = 0; a1 < attendanceEmployees.length; a1++) {
                    if (!workRecordEmployees[attendanceEmployees[a1]]) {
                        missingInWork.push(attendanceEmployees[a1]);
                    }
                }
                for (var w = 0; w < workEmployeeNames.length; w++) {
                    if (!attendanceSet[workEmployeeNames[w]]) {
                        extraInWork.push(workEmployeeNames[w]);
                    }
                }
            }

            // Porovnaj Doch√°dzku a Knihu j√°zd
            if (rideLogResult.count > 0) {
                for (var a2 = 0; a2 < attendanceEmployees.length; a2++) {
                    if (!rideLogEmployees[attendanceEmployees[a2]]) {
                        missingInRides.push(attendanceEmployees[a2]);
                    }
                }
                for (var rl = 0; rl < rideEmployeeNames.length; rl++) {
                    if (!attendanceSet[rideEmployeeNames[rl]]) {
                        extraInRides.push(rideEmployeeNames[rl]);
                    }
                }
            }

            // Kontrola poƒçtu zamestnancov s menami ch√Ωbaj√∫cich
            var countMismatch = false;
            if (workRecordsResult.count > 0 && attendanceEmployees.length !== workEmployeeNames.length) {
                var countMsg = "‚ùå Poƒçet zamestnancov sa nezhoduje: Doch√°dzka (" + attendanceEmployees.length + ") ‚â† Z√°znamy pr√°c (" + workEmployeeNames.length + ")";
                if (missingInWork.length > 0) {
                    countMsg += " | Ch√Ωbaj√∫ v Pr√°cach: " + missingInWork.join(", ");
                }
                if (extraInWork.length > 0) {
                    countMsg += " | Navy≈°e v Pr√°cach: " + extraInWork.join(", ");
                }
                result.warnings.push(countMsg);
                result.employeeConsistency = false;
                countMismatch = true;
                utils.addDebug(currentEntry, "  " + countMsg);
            }

            if (rideLogResult.count > 0 && attendanceEmployees.length !== rideEmployeeNames.length) {
                var countMsg2 = "‚ùå Poƒçet zamestnancov sa nezhoduje: Doch√°dzka (" + attendanceEmployees.length + ") ‚â† Kniha j√°zd (" + rideEmployeeNames.length + ")";
                if (missingInRides.length > 0) {
                    countMsg2 += " | Ch√Ωbaj√∫ v Jazd√°ch: " + missingInRides.join(", ");
                }
                if (extraInRides.length > 0) {
                    countMsg2 += " | Navy≈°e v Jazd√°ch: " + extraInRides.join(", ");
                }
                result.warnings.push(countMsg2);
                result.employeeConsistency = false;
                countMismatch = true;
                utils.addDebug(currentEntry, "  " + countMsg2);
            }

            // Hl√°senia o nezhod√°ch (len ak poƒçty sedia, ale zamestnanci sa nezhoduj√∫)
            if (!countMismatch) {
                if (missingInWork.length > 0) {
                    var msg = "‚ùå Zamestnanci z Doch√°dzky ch√Ωbaj√∫ v Z√°znamoch pr√°c: " + missingInWork.join(", ");
                    result.warnings.push(msg);
                    result.employeeConsistency = false;
                    utils.addDebug(currentEntry, "  " + msg);
                }

                if (extraInWork.length > 0) {
                    var msg1 = "‚ùå Zamestnanci v Z√°znamoch pr√°c, ktor√≠ nie s√∫ v Doch√°dzke: " + extraInWork.join(", ");
                    result.warnings.push(msg1);
                    result.employeeConsistency = false;
                    utils.addDebug(currentEntry, "  " + msg1);
                }

                if (missingInRides.length > 0) {
                    var msg3 = "‚ùå Zamestnanci z Doch√°dzky ch√Ωbaj√∫ v Knihe j√°zd: " + missingInRides.join(", ");
                    result.warnings.push(msg3);
                    result.employeeConsistency = false;
                    utils.addDebug(currentEntry, "  " + msg3);
                }

                if (extraInRides.length > 0) {
                    var msg4 = "‚ùå Zamestnanci v Knihe j√°zd, ktor√≠ nie s√∫ v Doch√°dzke: " + extraInRides.join(", ");
                    result.warnings.push(msg4);
                    result.employeeConsistency = false;
                    utils.addDebug(currentEntry, "  " + msg4);
                }
            }

            if (result.employeeConsistency && !countMismatch) {
                utils.addDebug(currentEntry, "  ‚úÖ Zamestnanci s√∫ konzistentn√≠ vo v≈°etk√Ωch z√°znamoch");
            }
        }

        if (result.warnings.length === 0) {
            utils.addDebug(currentEntry, "  ‚úÖ V≈°etky povinn√© z√°znamy s√∫ pr√≠tomn√©");
        }

        result.success = true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri valid√°cii z√°znamov: " + error.toString(), "validateRecords", error);
    }

    return result;
}

// ==============================================
// GENEROVANIE POPISU Z√ÅZNAMU
// ==============================================

function generateRecordDescription(attendanceResult, workRecordsResult, rideLogResult, cashBookResult) {
    var result = {
        success: false,
        description: ""
    };

    try {
        // Pole Popis - vypl≈à z√°kazkami vo form√°te ƒå√≠slo.N√°zov
        var orderDescription = "";
        if (workRecordsResult.orderFullNames && workRecordsResult.orderFullNames.length > 0) {
            orderDescription = workRecordsResult.orderFullNames.join(", ");
            utils.safeSet(currentEntry, CONFIG.fields.dailyReport.description, orderDescription);
            utils.addDebug(currentEntry, "  ‚úÖ Popis (z√°kazky): " + orderDescription);
        }

        // Pole Popis z√°znamu - markdown form√°t
        var descParts = [];

        // Doch√°dzka
        if (attendanceResult.count > 0) {
            var attText = "**üë• Doch√°dzka** (" + attendanceResult.count + ")";
            if (attendanceResult.employees.length > 0) {
                attText += ": " + attendanceResult.employees.join(", ");
            }
            descParts.push(attText);
        }

        // Z√°znamy pr√°c
        if (workRecordsResult.count > 0) {
            var workText = "**üìù Pr√°ce** (" + workRecordsResult.count + ")";
            if (workRecordsResult.orders.length > 0) {
                workText += ": " + workRecordsResult.orders.join(", ");
            }
            descParts.push(workText);
        }

        // Kniha j√°zd
        if (rideLogResult.count > 0) {
            var rideText = "**üöó Jazdy** (" + rideLogResult.count + ")";
            if (rideLogResult.vehicles.length > 0) {
                rideText += ": " + rideLogResult.vehicles.join(", ");
            }
            descParts.push(rideText);
        }

        // Poklad≈àa
        if (cashBookResult.count > 0) {
            descParts.push("**üí∞ Poklad≈àa** (" + cashBookResult.count + ")");
        }

        var description = descParts.join("  \n");

        if (description) {
            utils.addDebug(currentEntry, "  ‚úÖ Popis z√°znamu vytvoren√Ω");
            utils.safeSet(currentEntry, CONFIG.fields.dailyReport.recordDescription, description);
        }

        result.success = true;
        result.description = description;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri generovan√≠ popisu: " + error.toString(), "generateRecordDescription", error);
    }

    return result;
}

// ==============================================
// SP√ÑTN√â LINKOVANIE
// ==============================================
// TODO: Implement√°cia sp√§tn√Ωch linkov bude pridan√° nesk√¥r
// Po overen√≠ spr√°vnosti v√Ωpoƒçtov a agreg√°ci√≠

// ==============================================
// TELEGRAM NOTIFIK√ÅCIE
// ==============================================

function sendTelegramNotifications(attendanceResult, workRecordsResult, rideLogResult, cashBookResult) {
    var result = {
        success: false,
        sent: 0
    };

    try {
        // Kontrola, ƒçi je MementoTelegram dostupn√Ω
        if (typeof telegram === 'undefined' || !telegram) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è MementoTelegram nie je dostupn√Ω - preskakujem notifik√°cie");
            return result;
        }

        // TODO: Implement√°cia Telegram notifik√°ci√≠
        // - Z√≠ska≈• nastavenia notifik√°ci√≠ z ASISTANTO Defaults
        // - Vytvori≈• form√°tovan√∫ spr√°vu
        // - Odosla≈• cez MementoTelegram

        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Telegram notifik√°cie - pripraven√© na implement√°ciu");

        result.success = true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri odosielan√≠ Telegram notifik√°ci√≠: " + error.toString(), "sendTelegramNotifications", error);
    }

    return result;
}

// ==============================================
// SPOLOƒåN√ù INFO Z√ÅZNAM
// ==============================================

function createCommonInfo(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult, validationResult) {
    var result = {
        success: false
    };

    try {
        var now = new Date();
        var timestamp = utils.formatDate(now) + " " + utils.formatTime(now);

        // Hlaviƒçka
        var info = "## üìä DENN√ù REPORT - ZHRNUTIE\n\n";
        info += "**D√°tum:** " + utils.formatDate(utils.safeGet(currentEntry, CONFIG.fields.dailyReport.date)) + "  \n";
        info += "**Aktualizovan√©:** " + timestamp + "\n\n";

        // Varovania z valid√°cie
        var hasWarnings = validationResult && validationResult.warnings && validationResult.warnings.length > 0;

        if (hasWarnings) {
            info += "## ‚ö†Ô∏è Upozornenia\n\n";
            for (var v = 0; v < validationResult.warnings.length; v++) {
                info += "- " + validationResult.warnings[v] + "\n";
            }
            info += "\n";

            // Pridaj ikonu upozornenia
            addRecordIcon("‚ö†Ô∏è");
        } else {
            // Ak u≈æ nie s√∫ ≈æiadne upozornenia, odstr√°≈à ikonu upozornenia
            removeRecordIcon("‚ö†Ô∏è");
        }

        // Kontrola prestojov - porovnanie hod√≠n medzi Doch√°dzkou a Pr√°cami
        if (attendanceResult.count > 0 && workRecordsResult.count > 0) {
            var attendanceHours = attendanceResult.totalHours;
            var workHours = workRecordsResult.totalHours;
            var hoursDiff = attendanceHours - workHours;

            if (hoursDiff > 0) {
                // Prestoje: Doch√°dzka m√° viac hod√≠n ako Pr√°ce
                info += "## ‚è∏Ô∏è Prestoje\n\n";
                info += "- **Prestoj:** " + hoursDiff.toFixed(2) + " h\n";
                info += "- **Doch√°dzka:** " + attendanceHours.toFixed(2) + " h\n";
                info += "- **Pr√°ce:** " + workHours.toFixed(2) + " h\n";
                info += "- ‚ö†Ô∏è Zamestnanci boli pr√≠tomn√≠, ale nevykon√°vali pr√°ce\n\n";
                addRecordIcon("‚è∏Ô∏è");
            } else if (hoursDiff < 0) {
                // Chyba: Pr√°ce maj√∫ viac hod√≠n ako Doch√°dzka - treba skontrolova≈•
                info += "## ‚ö†Ô∏è Skontrolova≈• a opravi≈•\n\n";
                info += "- **Nezhoda hod√≠n:** " + Math.abs(hoursDiff).toFixed(2) + " h\n";
                info += "- **Doch√°dzka:** " + attendanceHours.toFixed(2) + " h\n";
                info += "- **Pr√°ce:** " + workHours.toFixed(2) + " h\n";
                info += "- ‚ùå Pr√°ce maj√∫ viac hod√≠n ako Doch√°dzka - skontrolujte a opravte\n\n";
                addRecordIcon("‚ö†Ô∏è");
            } else {
                // Hodiny sa zhoduj√∫ - odstr√°≈à ikonu prestojov ak existuje
                removeRecordIcon("‚è∏Ô∏è");
            }
        } else {
            // Ak nie s√∫ z√°znamy, odstr√°≈à ikonu prestojov
            removeRecordIcon("‚è∏Ô∏è");
        }

        info += "---\n\n";

        // Sekcia Doch√°dzka
        if (attendanceResult.count > 0) {
            info += "## üë• Doch√°dzka\n\n";
            info += "- **Poƒçet z√°znamov:** " + attendanceResult.count + "\n";
            info += "- **Odpracovan√© hodiny:** " + attendanceResult.totalHours.toFixed(2) + " h\n";
            if (attendanceResult.employees.length > 0) {
                info += "- **Zamestnanci (" + attendanceResult.employees.length + "):** " + attendanceResult.employees.join(", ") + "\n";
            }
            info += "\n";
        }

        // Sekcia Z√°znamy pr√°c
        if (workRecordsResult.count > 0) {
            info += "## üìù Z√°znamy pr√°c\n\n";
            info += "- **Poƒçet z√°znamov:** " + workRecordsResult.count + "\n";
            info += "- **Celkom hod√≠n:** " + workRecordsResult.totalHours.toFixed(2) + " h\n";
            if (workRecordsResult.employees && workRecordsResult.employees.length > 0) {
                info += "- **Zamestnanci (" + workRecordsResult.employees.length + "):** " + workRecordsResult.employees.join(", ") + "\n";
            }
            if (workRecordsResult.orders.length > 0) {
                info += "- **Z√°kazky (" + workRecordsResult.orders.length + "):** " + workRecordsResult.orders.join(", ") + "\n";
            }
            info += "\n";
        }

        // Sekcia Kniha j√°zd
        if (rideLogResult.count > 0) {
            info += "## üöó Kniha j√°zd\n\n";
            info += "- **Poƒçet z√°znamov:** " + rideLogResult.count + "\n";
            info += "- **Celkom km:** " + rideLogResult.totalKm.toFixed(2) + " km\n";
            if (rideLogResult.crew && rideLogResult.crew.length > 0) {
                info += "- **Pos√°dka (" + rideLogResult.crew.length + "):** " + rideLogResult.crew.join(", ") + "\n";
            }
            if (rideLogResult.vehicles.length > 0) {
                info += "- **Vozidl√° (" + rideLogResult.vehicles.length + "):** " + rideLogResult.vehicles.join(", ") + "\n";
            }
            info += "\n";
        }

        // Sekcia Poklad≈àa
        if (cashBookResult.count > 0) {
            info += "## üí∞ Poklad≈àa\n\n";
            info += "- **Poƒçet z√°znamov:** " + cashBookResult.count + "\n";
            info += "- **Pr√≠jmy:** +" + cashBookResult.totalIncome.toFixed(2) + " ‚Ç¨\n";
            info += "- **V√Ωdavky:** -" + cashBookResult.totalExpense.toFixed(2) + " ‚Ç¨\n";
            var balance = cashBookResult.totalIncome - cashBookResult.totalExpense;
            info += "- **Bilancia:** " + (balance >= 0 ? "+" : "") + balance.toFixed(2) + " ‚Ç¨\n";
            info += "\n";
        }

        // Celkov√© hodiny
        if (totalHoursResult.totalHours > 0) {
            info += "---\n\n";
            info += "## ‚è±Ô∏è Celkov√© hodiny\n\n";
            info += "**" + totalHoursResult.totalHours.toFixed(2) + " h**\n\n";
        }

        // Ulo≈æ do spoloƒçn√©ho info poƒæa
        utils.safeSet(currentEntry, CONFIG.fields.common.info, info);
        utils.addDebug(currentEntry, "  ‚úÖ Spoloƒçn√Ω info z√°znam vytvoren√Ω a zap√≠san√Ω");

        result.success = true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vytv√°ran√≠ spoloƒçn√©ho info: " + error.toString(), "createCommonInfo", error);
    }

    return result;
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Prid√° ikonu do poƒæa ikony z√°znamu
 */
function addRecordIcon(icon) {
    try {
        var currentIcons = utils.safeGet(currentEntry, CONFIG.fields.dailyReport.recordIcons, "");

        // Skontroluj, ƒçi ikona u≈æ nie je pridan√°
        if (currentIcons.indexOf(icon) === -1) {
            var newIcons = currentIcons ? currentIcons + " " + icon : icon;
            utils.safeSet(currentEntry, CONFIG.fields.dailyReport.recordIcons, newIcons);
            utils.addDebug(currentEntry, "  üìå Pridan√° ikona: " + icon);
        }
    } catch (error) {
        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa prida≈• ikonu: " + error.toString());
    }
}

/**
 * Vytvor√≠ markdown form√°tovan√Ω info z√°znam
 */
function createMarkdownInfo(title, timestamp, stats, detailBlocks) {
    var info = "\n\n## üìä " + title + " - ZHRNUTIE\n\n";
    //info += "**Aktualizovan√©:** " + timestamp + "\n\n";

    // ≈†tatistiky
    for (var i = 0; i < stats.length; i++) {
        var stat = stats[i];
        info += "- **" + stat.label + ":** " + stat.value + "\n";
    }

    info += "\n---\n\n";

    // Detailn√© bloky (ak existuj√∫)
    if (detailBlocks && detailBlocks.length > 0) {
        for (var j = 0; j < detailBlocks.length; j++) {
            // Konvertuj emoji bloky na markdown
            var block = detailBlocks[j];
            // Odstr√°≈à √∫vodn√© emoji a nahraƒè bold markdown
            block = block.replace(/^(üìã|üìù|üöó|üí∞)\s+/, "### ");
            block = block.replace(/^\s+/gm, ""); // Odstr√°≈à indent√°ciu
            info += block + "\n\n";
        }
    }

    return info;
}

function buildSummary(attendanceResult, workRecordsResult, rideLogResult, cashBookResult, totalHoursResult) {
    var lines = [];

    lines.push("‚úÖ Denn√Ω report spracovan√Ω:\n");

    if (attendanceResult.count > 0) {
        lines.push("üë• Doch√°dzka: " + attendanceResult.count + " z√°znamov, " + attendanceResult.totalHours.toFixed(2) + " h");
    }

    if (workRecordsResult.count > 0) {
        lines.push("üìù Pr√°ce: " + workRecordsResult.count + " z√°znamov, " + workRecordsResult.totalHours.toFixed(2) + " h");
    }

    if (rideLogResult.count > 0) {
        lines.push("üöó Jazdy: " + rideLogResult.count + " z√°znamov, " + rideLogResult.totalKm.toFixed(2) + " km");
    }

    if (cashBookResult.count > 0) {
        var balance = cashBookResult.totalIncome - cashBookResult.totalExpense;
        lines.push("üí∞ Poklad≈àa: " + cashBookResult.count + " z√°znamov, bilancia " + balance.toFixed(2) + " ‚Ç¨");
    }

    if (totalHoursResult.totalHours > 0) {
        lines.push("\n‚è±Ô∏è Celkov√© hodiny: " + totalHoursResult.totalHours.toFixed(2) + " h");
    }

    return lines.join("\n");
}

// ==============================================
// SPUSTENIE
// ==============================================

main();
