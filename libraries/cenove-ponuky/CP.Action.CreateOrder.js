/**
 * CENOV√â PONUKY - Vytvorenie/Aktualiz√°cia Z√°kazky
 *
 * Typ scriptu: Manual Action (manu√°lne spustenie pou≈æ√≠vateƒæom)
 * Kni≈ænica: Cenov√© ponuky
 *
 * Popis:
 * - Vytvor√≠ alebo aktualizuje z√°znam v kni≈ænici Z√°kazky z cenovej ponuky
 * - Pri CREATE: Vytvor√≠ z√°kazku + v≈°etky diely v Z√°kazky Diely
 * - Pri UPDATE: Sync v≈°etky polia okrem dielov (diely sa upravuj√∫ ruƒçne)
 * - Prepojenie: Z√°kazky ‚Üí linkToEntry Cenov√© ponuky (vytvor√≠ linksFrom)
 * - Automatick√© generovanie ƒç√≠sla z√°kazky pomocou MementoAutoNumber
 *
 * Verzia: 1.2.1
 * D√°tum: 2025-10-10
 * Autor: ASISTANTO
 *
 * CHANGELOG:
 * v1.2.1 (2025-10-10):
 * - OPRAVA: Vylep≈°en√° detekcia existuj√∫cej z√°kazky cez linksFrom
 * - Porovn√°va ID aj n√°zov kni≈ænice pre spoƒæahlivej≈°iu kontrolu
 * - Pridan√Ω detailn√Ω debug log pre kontrolu prepojen√≠
 * v1.2.0 (2025-10-10):
 * - NOV√â: D√°tum z√°kazky sa nastav√≠ na d√°tum generovania (nie z CP)
 * - NOV√â: D√°tum dielov sa nastav√≠ na d√°tum generovania (nie z CP)
 * - ZMENA: Pole "ƒå√≠slo CP" v dieloch z√°kazky teraz obsahuje ƒç√≠slo z√°kazky (nie CP)
 * - NOV√â: Automatick√© z√≠skanie Klienta z poƒæa Miesto ‚Üí Klient
 * - NOV√â: Kopirovanie atrib√∫tov (mno≈æstvo, cena, cena celkom) pre Materi√°l a Pr√°ce
 * v1.1.3 (2025-10-10):
 * - OPRAVA: Pou≈æitie lib.create({}) s pr√°zdnym objektom namiesto lib.create()
 * - FIX: NullPointerException pri vytv√°ran√≠ z√°kazky - potrebn√Ω pr√°zdny objekt ako parameter
 * - Aplikovan√© na ordersLib.create({}) aj orderPartsLib.create({})
 * v1.1.2 (2025-10-10):
 * - OPRAVA: Pridan√° kontrola ƒçi sa z√°kazka vytvorila
 * - DIAGNOSTIKA: Jasn√° chybov√° hl√°≈°ka ak Manual Action nem√¥≈æe vytv√°ra≈• z√°znamy
 * - N√°vrh rie≈°enia: Pou≈æi≈• Trigger script namiesto Manual Action
 * v1.1.1 (2025-10-10):
 * - OPRAVA: MementoConfig.getConfig() namiesto priameho pr√≠stupu
 * - FIX: "Cannot read property quote of undefined" - pou≈æit√Ω getConfig()
 * v1.1.0 (2025-10-10):
 * - PRIDAN√â: Automatick√© generovanie ƒç√≠sla z√°kazky pomocou MementoAutoNumber
 * - Pou≈æ√≠va "Z Placeholder" z ASISTANTO Defaults (form√°t: ZYYXXX)
 * - Fallback: Ak MementoAutoNumber nie je dostupn√Ω, pou≈æije ƒç√≠slo z cenovej ponuky
 * - Detailn√Ω debug log pre generovanie ƒç√≠sla
 * v1.0.0 (2025-10-10):
 * - Vytvoren√Ω script pre tvorbu z√°kaziek z cenov√Ωch pon√∫k
 * - Implementovan√° CREATE logika (z√°kazka + diely)
 * - Implementovan√° UPDATE logika (len polia z√°kazky)
 * - Mapovanie pol√≠ podƒæa CP.Action.CreateOrder.MAPPING.js
 */

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var lib = lib();
var currentEntry = entry();
var utils = MementoUtils;
var centralConfig = MementoConfig.getConfig(); // Z√≠skaj CONFIG objekt

// ==============================================
// SKRIPT START
// ==============================================

try {
    utils.clearLogs(currentEntry);
    utils.addDebug(currentEntry, "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
    utils.addDebug(currentEntry, "‚ïë   VYTVORENIE/AKTUALIZ√ÅCIA Z√ÅKAZKY Z CENOVEJ PONUKY   ‚ïë");
    utils.addDebug(currentEntry, "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    utils.addDebug(currentEntry, "");

    // Z√≠skaj konfiguraƒçn√© polia
    var fields = centralConfig.fields.quote;
    var orderFields = centralConfig.fields.order;
    var quotePartFields = centralConfig.fields.quotePart;
    var orderPartFields = centralConfig.fields.orderPart;
    var commonFields = centralConfig.fields.common;

    // Z√≠skaj kni≈ænice
    var ordersLib = libByName("Z√°kazky");
    var orderPartsLib = libByName("Z√°kazky Diely");

    if (!ordersLib) {
        throw new Error("Kni≈ænica 'Z√°kazky' nebola n√°jden√°");
    }
    if (!orderPartsLib) {
        throw new Error("Kni≈ænica 'Z√°kazky Diely' nebola n√°jden√°");
    }

    // ==============================================
    // KROK 1: KONTROLA EXISTENCIE Z√ÅKAZKY
    // ==============================================

    utils.addDebug(currentEntry, "üìã KROK 1: Kontrola existencie z√°kazky");
    utils.addDebug(currentEntry, "");

    // Zisti ƒç√≠slo cenovej ponuky
    var quoteNumber = utils.safeGet(currentEntry, fields.number) || "";
    var quoteName = utils.safeGet(currentEntry, fields.name) || "";

    utils.addDebug(currentEntry, "  Cenov√° ponuka:");
    utils.addDebug(currentEntry, "    ƒå√≠slo: " + quoteNumber);
    utils.addDebug(currentEntry, "    N√°zov: " + quoteName);
    utils.addDebug(currentEntry, "");

    // N√°jdi existuj√∫cu z√°kazku cez linksFrom
    var existingOrders = [];
    try {
        var linkedEntries = currentEntry.linksFrom();
        utils.addDebug(currentEntry, "  üîç Kontrolujem linksFrom: " + (linkedEntries ? linkedEntries.length : 0) + " prepojen√≠");

        if (linkedEntries && linkedEntries.length > 0) {
            for (var i = 0; i < linkedEntries.length; i++) {
                var linkedEntry = linkedEntries[i];
                try {
                    // Skontroluj ƒçi prepojenie je z kni≈ænice Z√°kazky
                    var linkedLib = linkedEntry.lib();
                    var linkedLibName = linkedLib.name();
                    var linkedLibId = linkedLib.id();
                    var ordersLibId = ordersLib.id();

                    utils.addDebug(currentEntry, "    Prepojenie " + (i + 1) + ": Kni≈ænica '" + linkedLibName + "' (ID: " + linkedLibId + ")");

                    // Porovnaj ID kni≈ænice alebo n√°zov
                    if (linkedLibId === ordersLibId || linkedLibName === "Z√°kazky") {
                        existingOrders.push(linkedEntry);
                        utils.addDebug(currentEntry, "      ‚úÖ Toto je z√°kazka!");
                    }
                } catch (e2) {
                    utils.addDebug(currentEntry, "    ‚ö†Ô∏è Chyba pri kontrole prepojenia: " + e2.toString());
                }
            }
        }
    } catch (e) {
        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne existuj√∫ce prepojenia zo Z√°kaziek (chyba: " + e.toString() + ")");
    }

    var orderExists = existingOrders.length > 0;
    var order = orderExists ? existingOrders[0] : null;
    var mode = orderExists ? "UPDATE" : "CREATE";

    utils.addDebug(currentEntry, "");
    utils.addDebug(currentEntry, "  üìä Poƒçet n√°jden√Ωch z√°kaziek: " + existingOrders.length);

    utils.addDebug(currentEntry, "  Re≈æim: " + mode);
    if (orderExists) {
        var orderNumber = utils.safeGet(order, orderFields.number) || "";
        var orderName = utils.safeGet(order, orderFields.name) || "";
        utils.addDebug(currentEntry, "  ‚úÖ Existuj√∫ca z√°kazka:");
        utils.addDebug(currentEntry, "    ƒå√≠slo: " + orderNumber);
        utils.addDebug(currentEntry, "    N√°zov: " + orderName);
    } else {
        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Z√°kazka neexistuje, bude vytvoren√° nov√°");
    }
    utils.addDebug(currentEntry, "");

    // ==============================================
    // KROK 2: PR√çPRAVA D√ÅT PRE SYNCHRONIZ√ÅCIU
    // ==============================================

    utils.addDebug(currentEntry, "üì¶ KROK 2: Pr√≠prava d√°t pre synchroniz√°ciu");
    utils.addDebug(currentEntry, "");

    var syncData = {};

    // === Z√ÅKLADN√â IDENTIFIKAƒåN√â POLIA ===
    syncData[orderFields.number] = utils.safeGet(currentEntry, fields.number);
    syncData[orderFields.name] = utils.safeGet(currentEntry, fields.name);
    syncData[orderFields.description] = utils.safeGet(currentEntry, fields.description); // Popis cenovej ponuky ‚Üí Popis z√°kazky
    // D√°tum bude nastaven√Ω na d√°tum generovania (nie z cenovej ponuky)
    syncData[orderFields.date] = new Date();

    // Typ cenovej ponuky ‚Üí Typ z√°kazky
    syncData[orderFields.orderCalculationType] = utils.safeGet(currentEntry, fields.type);

    // Miesto realiz√°cie ‚Üí Miesto
    syncData[orderFields.place] = utils.safeGetLinks(currentEntry, fields.place);

    // === KLIENT Z MIESTA ===
    // Zisti klienta z poƒæa Miesto -> Klient
    var placeEntries = utils.safeGetLinks(currentEntry, fields.place);
    if (placeEntries && placeEntries.length > 0) {
        var placeEntry = placeEntries[0];
        var clientEntries = utils.safeGetLinks(placeEntry, centralConfig.fields.place.customer);
        if (clientEntries && clientEntries.length > 0) {
            syncData[orderFields.client] = clientEntries;
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Klient z√≠skan√Ω z miesta: " + utils.safeGet(clientEntries[0], centralConfig.fields.client.name || "N√°zov"));
        }
    }

    utils.addDebug(currentEntry, "  ‚úÖ Z√°kladn√© polia pripraven√©");

    // === √öƒåTOVANIE DOPRAVY ===
    syncData[orderFields.rideCalculation] = utils.safeGet(currentEntry, fields.rideCalculation);
    syncData[orderFields.transportPercentage] = utils.safeGet(currentEntry, fields.ridePercentage);
    syncData[orderFields.kmPrice] = utils.safeGetLinks(currentEntry, fields.kmPrice);
    syncData[orderFields.rideFlatRate] = utils.safeGetLinks(currentEntry, fields.rideFlatRate);
    syncData[orderFields.fixedTransportPrice] = utils.safeGet(currentEntry, fields.fixedTransportPrice);

    utils.addDebug(currentEntry, "  ‚úÖ Doprava pripraven√°");

    // === √öƒåTOVANIE PRESUNU HM√îT ===
    syncData[orderFields.massTransferCalculation] = utils.safeGet(currentEntry, fields.massTransferCalculation);
    syncData[orderFields.massTransferPercentage] = utils.safeGet(currentEntry, fields.massTransferPercentage);
    syncData[orderFields.massTransferPrice] = utils.safeGetLinks(currentEntry, fields.massTransferPriceEntry); // Cena presunu hm√¥t materi√°lu
    syncData[orderFields.massTransferFlatRate] = utils.safeGetLinks(currentEntry, fields.massTransferFlatRate);
    syncData[orderFields.fixedMassTransferPrice] = utils.safeGet(currentEntry, fields.fixedMassTransferPrice);
    syncData[orderFields.materialWeight] = utils.safeGet(currentEntry, fields.materialWeight);

    utils.addDebug(currentEntry, "  ‚úÖ Presun hm√¥t pripraven√Ω");

    // === √öƒåTOVANIE SUBDOD√ÅVOK ===
    syncData[orderFields.subcontractsCalculation] = utils.safeGet(currentEntry, fields.subcontractsCalculation);
    syncData[orderFields.subcontractorMarkup] = utils.safeGet(currentEntry, fields.subcontractsPercentage); // Subdod√°vky % ‚Üí Prir√°≈æka subdod√°vky

    utils.addDebug(currentEntry, "  ‚úÖ Subdod√°vky pripraven√©");

    // === DPH ===
    syncData[orderFields.vatRate] = utils.safeGet(currentEntry, fields.vatRate);

    utils.addDebug(currentEntry, "  ‚úÖ DPH pripraven√©");
    utils.addDebug(currentEntry, "");

    // ==============================================
    // KROK 3: VYTVORENIE ALEBO AKTUALIZ√ÅCIA Z√ÅKAZKY
    // ==============================================

    utils.addDebug(currentEntry, "üîß KROK 3: " + (orderExists ? "Aktualiz√°cia" : "Vytvorenie") + " z√°kazky");
    utils.addDebug(currentEntry, "");

    if (!orderExists) {
        // === CREATE MODE ===
        utils.addDebug(currentEntry, "  üÜï Vytv√°ram nov√∫ z√°kazku...");

        // Vytvor z√°znam s pr√°zdnym objektom
        order = ordersLib.create({});

        // Kontrola ƒçi sa z√°kazka vytvorila
        if (!order) {
            throw new Error("Nepodarilo sa vytvori≈• z√°znam v kni≈ænici Z√°kazky. Skontroluj opr√°vnenia a ƒçi kni≈ænica existuje.");
        }

        utils.addDebug(currentEntry, "  ‚úÖ Nov√Ω z√°znam vytvoren√Ω v kni≈ænici Z√°kazky");

        // === GENEROVANIE ƒå√çSLA Z√ÅKAZKY ===
        utils.addDebug(currentEntry, "  üî¢ Generujem ƒç√≠slo z√°kazky...");

        // Pou≈æitie MementoAutoNumber pre generovanie ƒç√≠sla
        var orderNumber = "";
        try {
            if (typeof MementoAutoNumber !== 'undefined' && MementoAutoNumber.isLoaded && MementoAutoNumber.isLoaded()) {
                var numberResult = MementoAutoNumber.generateNumber(
                    "Z√°kazky",
                    "ƒå√≠slo",
                    "Z Placeholder"
                );

                if (numberResult.success) {
                    orderNumber = numberResult.number;
                    utils.addDebug(currentEntry, "    ‚úÖ Vygenerovan√© ƒç√≠slo: " + orderNumber);
                } else {
                    utils.addDebug(currentEntry, "    ‚ö†Ô∏è Chyba pri generovan√≠ ƒç√≠sla: " + numberResult.error);
                    utils.addDebug(currentEntry, "    ‚ÑπÔ∏è Pou≈æije sa ƒç√≠slo z cenovej ponuky");
                    orderNumber = quoteNumber;
                }
            } else {
                utils.addDebug(currentEntry, "    ‚ÑπÔ∏è MementoAutoNumber nie je dostupn√Ω");
                utils.addDebug(currentEntry, "    ‚ÑπÔ∏è Pou≈æije sa ƒç√≠slo z cenovej ponuky");
                orderNumber = quoteNumber;
            }
        } catch (e) {
            utils.addDebug(currentEntry, "    ‚ö†Ô∏è Chyba pri volan√≠ MementoAutoNumber: " + e.toString());
            utils.addDebug(currentEntry, "    ‚ÑπÔ∏è Pou≈æije sa ƒç√≠slo z cenovej ponuky");
            orderNumber = quoteNumber;
        }

        // Nastav ƒç√≠slo z√°kazky
        syncData[orderFields.number] = orderNumber;
        utils.addDebug(currentEntry, "");

        // Nastav v≈°etky polia
        for (var fieldName in syncData) {
            if (syncData.hasOwnProperty(fieldName)) {
                var value = syncData[fieldName];
                if (value !== null && value !== undefined) {
                    try {
                        order.set(fieldName, value);
                    } catch (e) {
                        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri nastaven√≠ poƒæa '" + fieldName + "': " + e.toString());
                    }
                }
            }
        }

        // Vytvor linkToEntry: Z√°kazka ‚Üí Cenov√° ponuka
        order.set(orderFields.quote, [currentEntry]);

        utils.addDebug(currentEntry, "  ‚úÖ Z√°kazka vytvoren√°");
        utils.addDebug(currentEntry, "    ƒå√≠slo: " + utils.safeGet(order, orderFields.number));
        utils.addDebug(currentEntry, "    N√°zov: " + utils.safeGet(order, orderFields.name));
        utils.addDebug(currentEntry, "");

    } else {
        // === UPDATE MODE ===
        utils.addDebug(currentEntry, "  üîÑ Aktualizujem existuj√∫cu z√°kazku...");

        // Aktualizuj v≈°etky polia OKREM ƒç√≠sla z√°kazky (ƒç√≠slo sa nemen√≠ pri update)
        for (var fieldName in syncData) {
            if (syncData.hasOwnProperty(fieldName)) {
                // Preskoƒçi≈• ƒç√≠slo z√°kazky - to sa nemen√≠ pri aktualiz√°cii
                if (fieldName === orderFields.number) {
                    continue;
                }

                var value = syncData[fieldName];
                if (value !== null && value !== undefined) {
                    try {
                        order.set(fieldName, value);
                    } catch (e) {
                        utils.addDebug(currentEntry, "  ‚ö†Ô∏è Chyba pri aktualiz√°cii poƒæa '" + fieldName + "': " + e.toString());
                    }
                }
            }
        }

        utils.addDebug(currentEntry, "  ‚úÖ Z√°kazka aktualizovan√°");
        utils.addDebug(currentEntry, "    ƒå√≠slo: " + utils.safeGet(order, orderFields.number));
        utils.addDebug(currentEntry, "    N√°zov: " + utils.safeGet(order, orderFields.name));
        utils.addDebug(currentEntry, "");
    }

    // ==============================================
    // KROK 4: VYTVORENIE DIELOV (LEN PRI CREATE)
    // ==============================================

    if (!orderExists) {
        utils.addDebug(currentEntry, "üìã KROK 4: Vytvorenie dielov z√°kazky");
        utils.addDebug(currentEntry, "");

        // Z√≠skaj diely z cenovej ponuky
        var quoteParts = utils.safeGetLinks(currentEntry, fields.parts) || [];
        utils.addDebug(currentEntry, "  Poƒçet dielov v cenovej ponuke: " + quoteParts.length);
        utils.addDebug(currentEntry, "");

        if (quoteParts.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Cenov√° ponuka nem√° ≈æiadne diely");
        } else {
            var createdPartsCount = 0;
            var generatedOrderNumber = utils.safeGet(order, orderFields.number) || quoteNumber; // ƒå√≠slo vygenerovanej z√°kazky
            var creationDate = new Date(); // D√°tum generovania

            for (var i = 0; i < quoteParts.length; i++) {
                var quotePart = quoteParts[i];

                try {
                    var partType = utils.safeGet(quotePart, quotePartFields.partType) || ("Diel #" + (i + 1));
                    var partName = utils.safeGet(quotePart, quotePartFields.name) || "";

                    utils.addDebug(currentEntry, "  üîß Vytv√°ram diel " + (i + 1) + "/" + quoteParts.length + ":");
                    utils.addDebug(currentEntry, "    Typ: " + partType);
                    utils.addDebug(currentEntry, "    N√°zov: " + partName);

                    // Vytvor nov√Ω diel v Z√°kazky Diely
                    var orderPart = orderPartsLib.create({});

                    // === Z√ÅKLADN√â POLIA ===
                    orderPart.set(orderPartFields.number, utils.safeGet(quotePart, quotePartFields.number));
                    orderPart.set(orderPartFields.date, creationDate); // D√°tum generovania z√°kazky
                    orderPart.set(orderPartFields.quoteNumber, generatedOrderNumber); // ƒå√≠slo z√°kazky (bolo ƒå√≠slo CP)
                    orderPart.set(orderPartFields.name, partName);
                    orderPart.set(orderPartFields.partType, partType);
                    orderPart.set(orderPartFields.note, utils.safeGet(quotePart, quotePartFields.note));

                    // === CENOV√â POLIA ===
                    orderPart.set(orderPartFields.materialSum, utils.safeGet(quotePart, quotePartFields.materialSum));
                    orderPart.set(orderPartFields.workSum, utils.safeGet(quotePart, quotePartFields.workSum));
                    orderPart.set(orderPartFields.totalSum, utils.safeGet(quotePart, quotePartFields.totalSum));

                    // === POLO≈ΩKY S ATRIB√öTMI ===
                    var materials = utils.safeGetLinks(quotePart, quotePartFields.materials);
                    var works = utils.safeGetLinks(quotePart, quotePartFields.works);

                    // Mapuj materi√°ly s atrib√∫tmi
                    if (materials && materials.length > 0) {
                        var materialsWithAttrs = [];
                        for (var m = 0; m < materials.length; m++) {
                            var material = materials[m];
                            var attrs = {};

                            // Skop√≠ruj atrib√∫ty z cenovej ponuky
                            try {
                                attrs["mno≈æstvo"] = material.a("mno≈æstvo") || 0;
                                attrs["cena"] = material.a("cena") || 0;
                                attrs["cena celkom"] = material.a("cena celkom") || 0;
                            } catch (e) {
                                utils.addDebug(currentEntry, "      ‚ö†Ô∏è Chyba pri kop√≠rovan√≠ atrib√∫tov materi√°lu: " + e.toString());
                            }

                            materialsWithAttrs.push({entry: material, attributes: attrs});
                        }
                        orderPart.set(orderPartFields.materials, materialsWithAttrs);
                    }

                    // Mapuj pr√°ce s atrib√∫tmi
                    if (works && works.length > 0) {
                        var worksWithAttrs = [];
                        for (var w = 0; w < works.length; w++) {
                            var work = works[w];
                            var attrs = {};

                            // Skop√≠ruj atrib√∫ty z cenovej ponuky
                            try {
                                attrs["mno≈æstvo"] = work.a("mno≈æstvo") || 0;
                                attrs["cena"] = work.a("cena") || 0;
                                attrs["cena celkom"] = work.a("cena celkom") || 0;
                            } catch (e) {
                                utils.addDebug(currentEntry, "      ‚ö†Ô∏è Chyba pri kop√≠rovan√≠ atrib√∫tov pr√°ce: " + e.toString());
                            }

                            worksWithAttrs.push({entry: work, attributes: attrs});
                        }
                        orderPart.set(orderPartFields.works, worksWithAttrs);
                    }

                    utils.addDebug(currentEntry, "    Materi√°ly: " + (materials ? materials.length : 0));
                    utils.addDebug(currentEntry, "    Pr√°ce: " + (works ? works.length : 0));
                    utils.addDebug(currentEntry, "    Celkom: " + (utils.safeGet(quotePart, quotePartFields.totalSum) || 0).toFixed(2) + " ‚Ç¨");

                    // Pripoj diel k z√°kazke
                    var existingParts = utils.safeGetLinks(order, orderFields.parts) || [];
                    existingParts.push(orderPart);
                    order.set(orderFields.parts, existingParts);

                    createdPartsCount++;
                    utils.addDebug(currentEntry, "    ‚úÖ Diel vytvoren√Ω");

                } catch (e) {
                    var errorMsg = "Chyba pri vytv√°ran√≠ dielu " + (i + 1) + ": " + e.toString();
                    if (e.lineNumber) errorMsg += ", Line: " + e.lineNumber;
                    utils.addError(currentEntry, errorMsg, "createOrderPart", e);
                    utils.addDebug(currentEntry, "    ‚ùå " + errorMsg);
                }

                utils.addDebug(currentEntry, "");
            }

            utils.addDebug(currentEntry, "  üìä Vytvoren√© diely: " + createdPartsCount + " / " + quoteParts.length);
        }

    } else {
        utils.addDebug(currentEntry, "üìã KROK 4: Aktualiz√°cia dielov (preskoƒçen√©)");
        utils.addDebug(currentEntry, "");
        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Diely z√°kazky sa synchronizuj√∫ len pri vytvoren√≠");
        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Diely v z√°kazke upravuj ruƒçne");
        utils.addDebug(currentEntry, "");
    }

    // ==============================================
    // V√ùSLEDOK
    // ==============================================

    utils.addDebug(currentEntry, "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
    if (!orderExists) {
        utils.addDebug(currentEntry, "‚ïë         ‚úÖ Z√ÅKAZKA √öSPE≈†NE VYTVOREN√Å                  ‚ïë");
        utils.addDebug(currentEntry, "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        utils.addDebug(currentEntry, "");
        utils.addDebug(currentEntry, "Z√°kazka: " + utils.safeGet(order, orderFields.number) + " - " + utils.safeGet(order, orderFields.name));
        utils.addDebug(currentEntry, "Poƒçet dielov: " + (quoteParts ? quoteParts.length : 0));

        message("‚úÖ Z√°kazka vytvoren√°\n" +
                "ƒå√≠slo: " + utils.safeGet(order, orderFields.number) + "\n" +
                "Poƒçet dielov: " + (quoteParts ? quoteParts.length : 0));
    } else {
        utils.addDebug(currentEntry, "‚ïë         ‚úÖ Z√ÅKAZKA √öSPE≈†NE AKTUALIZOVAN√Å              ‚ïë");
        utils.addDebug(currentEntry, "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        utils.addDebug(currentEntry, "");
        utils.addDebug(currentEntry, "Z√°kazka: " + utils.safeGet(order, orderFields.number) + " - " + utils.safeGet(order, orderFields.name));
        utils.addDebug(currentEntry, "Aktualizovan√© polia: V≈°etky okrem dielov");

        message("‚úÖ Z√°kazka aktualizovan√°\n" +
                "ƒå√≠slo: " + utils.safeGet(order, orderFields.number) + "\n" +
                "Polia: V≈°etky okrem dielov");
    }

} catch (error) {
    var errorMsg = "‚ùå KRITICK√Å CHYBA: " + error.toString();
    if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
    if (error.stack) errorMsg += "\nStack: " + error.stack;

    utils.addError(currentEntry, errorMsg, "CP.Action.CreateOrder", error);

    utils.addDebug(currentEntry, "");
    utils.addDebug(currentEntry, "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
    utils.addDebug(currentEntry, "‚ïë         ‚ùå CHYBA PRI VYTV√ÅRAN√ç/AKTUALIZ√ÅCII           ‚ïë");
    utils.addDebug(currentEntry, "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    utils.addDebug(currentEntry, "");
    utils.addDebug(currentEntry, errorMsg);

    message("‚ùå Chyba pri vytv√°ran√≠/aktualiz√°cii z√°kazky\n" + error.toString());
}
