// ==============================================
// CENOV√â PONUKY DIELY - Hlavn√Ω prepoƒçet
// Verzia: 3.4.0 | D√°tum: 2025-10-07 | Autor: ASISTANTO
// Kni≈ænica: Cenov√© ponuky Diely (ID: nCAgQkfvK)
// Trigger: onChange
// ==============================================
// üìã FUNKCIA:
//    - Prepoƒçet polo≈æiek cenovej ponuky (Materi√°l, Pr√°ce)
//    - V≈ΩDY z√≠skava ceny z datab√°zy (ceny materi√°lu / ceny pr√°c)
//    - Porovnanie ruƒçne zadan√Ωch cien s cenami z datab√°zy
//    - Dial√≥g pre update cien v datab√°ze pri rozdieloch
//    - Automatick√© vytvorenie nov√Ωch cenov√Ωch z√°znamov
//    - Aktualiz√°cia ƒç√≠sla, n√°zvu A D√ÅTUMU z nadriadenej cenovej ponuky
//    - Aktualiz√°cia poƒæa "Cena" v z√°znamy materi√°lu/pr√°ce pri vytvoren√≠ novej ceny
//    - Automatick√© pou≈æitie ceny z poƒæa "Cena" ak atrib√∫t nie je zadan√Ω
//    - V√Ωpoƒçet s√∫ƒçtov za jednotliv√© kateg√≥rie
//    - V√Ωpoƒçet celkovej sumy cenovej ponuky
//    - Automatick√© vymazanie debug, error a info logov pri ≈°tarte
//    - Vytvorenie prehƒæadn√©ho markdown reportu v info poli
// ==============================================
// üîß CHANGELOG v3.4.0 (2025-10-07):
//    - NOV√Å FUNKCIA: Automatick√© vymazanie debug, error a info logov pri ≈°tarte (utils.clearLogs)
//    - NOV√Å FUNKCIA: Vytvorenie prehƒæadn√©ho markdown reportu v info poli
//    - PRIDAN√Å FUNKCIA: buildQuoteInfoReport() - vytvor√≠ markdown tabuƒæky s polo≈ækami
//    - INFO REPORT obsahuje:
//      ‚Ä¢ N√°zov cenovej ponuky a ƒç√≠slo (header)
//      ‚Ä¢ Tabuƒæku materi√°lu (n√°zov, mno≈æstvo, cena, celkom)
//      ‚Ä¢ Tabuƒæku pr√°c (n√°zov, mno≈æstvo, cena, celkom)
//      ‚Ä¢ S√∫ƒçtov√© riadky a celkov√∫ sumu
//    - Zbieranie √∫dajov o polo≈æk√°ch do materialItemsInfo a workItemsInfo arrayov
// üîß CHANGELOG v3.3.1 (2025-10-07):
//    - KRITICK√Å OPRAVA: Zaokr√∫hlenie finalPrice na 2 desatinn√© miesta pred v√Ωpoƒçtom totalPrice
//    - FIX: Materi√°l 25 √ó 17,24 = 431,00 (bolo 430,89 kv√¥li nezaokr√∫hlen√Ωm cen√°m z DB)
//    - FIX: Materi√°l 25 √ó 0,41 = 10,25 (bolo 10,16 kv√¥li nezaokr√∫hlen√Ωm cen√°m z DB)
//    - Pridan√©: Math.round(finalPrice * 100) / 100 pre materi√°l aj pr√°ce
// üîß CHANGELOG v3.3.0 (2025-10-07):
//    - NOV√Å FUNKCIA: Ak cena atrib√∫tu nie je zadan√°/je 0 ‚Üí pou≈æije sa cena z poƒæa "Cena" v z√°zname
//    - Automaticky sa vytvor√≠ nov√Ω cenov√Ω z√°znam a dopln√≠ do atrib√∫tu
//    - Pri vytvoren√≠ novej ceny sa V≈ΩDY aktualizuje aj pole "Cena" v samotnom z√°zname
//    - Pridan√© funkcie updateMaterialItemPrice() a updateWorkItemPrice()
// üîß CHANGELOG v3.2.0 (2025-10-07):
//    - OPRAVA: Pridan√© dateField: "date" pre materialPrices (oprava duplicitn√Ωch z√°znamov)
//    - NOV√Å FUNKCIA: Synchroniz√°cia d√°tumu z nadriadenej cenovej ponuky
//    - D√°tum z cenovej ponuky sa pou≈æ√≠va aj pre kontrolu a update cien
// üîß CHANGELOG v3.1.0 (2025-10-07):
//    - OPRAVA: Pou≈æitie dialog() namiesto message() pre potvrdenie aktualiz√°cie cien
//    - Pou≈æ√≠vateƒæ m√¥≈æe potvrdi≈• alebo zru≈°i≈• aktualiz√°ciu cien cez dial√≥g
//    - Callback funkcie pre pozit√≠vne/negat√≠vne tlaƒçidlo
// üîß CHANGELOG v3.0.1 (2025-10-06):
//    - OPRAVA: Bezpeƒçn√© z√≠skanie n√°zvu polo≈æky pomocou item.field() s try/catch
//    - Fallback na "Materi√°l #N" / "Pr√°ca #N" ak n√°zov nie je dostupn√Ω
// üîß CHANGELOG v3.0.0 (2025-10-06):
//    - Z√ÅSADN√Å ZMENA: Ceny sa V≈ΩDY z√≠skavaj√∫ z datab√°zy
//    - Porovnanie ruƒçne zadan√Ωch cien s datab√°zov√Ωmi cenami
//    - Dial√≥g pre update cien ak s√∫ rozdiely
//    - Automatick√© vytvorenie nov√Ωch price records s aktu√°lnym d√°tumom
//    - Zoznam v≈°etk√Ωch polo≈æiek s rozdielmi v jednom dial√≥gu
// üîß CHANGELOG v2.1.0 (2025-10-06):
//    - PRIDAN√â: Funkcia updateQuoteInfo() - kop√≠ruje ƒå√≠slo a N√°zov z nadriadenej CP
//    - Pou≈æ√≠va utils.safeGetLinksFrom() pre z√≠skanie nadriaden√©ho z√°znamu
//    - Automatick√© vyplnenie pol√≠ "ƒå√≠slo CP" a "N√°zov" z hlavnej cenovej ponuky
// üîß CHANGELOG v2.0.0 (2025-10-06):
//    - KOMPLETN√ù REWRITE: Pou≈æitie ≈°tandardn√Ωch Memento funkci√≠
//    - ≈Ωiadne processing, ≈æiadne categories - len CONFIG.fields
//    - Priamy pr√≠stup k poliam: fields.materials, fields.works
//    - ≈†tandardn√© utils.safeGetLinks pre linkToEntry polia
//    - Atrib√∫ty cez nat√≠vnu Memento API (.attr, .setAttr)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================

var utils = MementoUtils;
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Cenov√© ponuky Diely - Prepoƒçet",
    version: "3.4.0",

    // Referencie na centr√°lny config
    fields: centralConfig.fields.quotePart,
    attributes: {
        materials: centralConfig.attributes.quotePartMaterials,
        works: centralConfig.attributes.quotePartWorks
    },
    icons: centralConfig.icons,

    // Polia pre cenov√© kni≈ænice
    priceFields: {
        materialPrices: centralConfig.fields.materialPrices,
        workPrices: centralConfig.fields.workPrices
    },

    // Polia pre polo≈æky (materi√°l a pr√°ce)
    itemFields: {
        material: centralConfig.fields.items,  // Materi√°l
        work: "Cena"  // Cenn√≠k pr√°c - priamo n√°zov poƒæa (nie je v MementoConfig)
    }
};

// Glob√°lne premenn√© pre zbieranie rozdielov v cen√°ch
var priceDifferences = [];

// Glob√°lne premenn√© pre zbieranie info o polo≈æk√°ch
var materialItemsInfo = [];
var workItemsInfo = [];

var fields = CONFIG.fields;

// Vyƒçisti≈• debug, error a info logy pred zaƒçiatkom
utils.clearLogs(currentEntry, true);  // true = vyƒçist√≠ aj Error_Log

utils.addDebug(currentEntry, "üöÄ START: Prepoƒçet cenovej ponuky Diely");

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Vytvor√≠ prehƒæadn√Ω markdown report s polo≈ækami materi√°lu a pr√°c
 * @param {Number} materialSum - Suma za materi√°l
 * @param {Number} workSum - Suma za pr√°ce
 * @param {Number} totalSum - Celkov√° suma
 * @returns {String} - Markdown form√°tovan√Ω report
 */
function buildQuoteInfoReport(materialSum, workSum, totalSum) {
    var report = "";

    // Header s n√°zvom cenovej ponuky
    var quoteName = utils.safeGet(currentEntry, fields.name) || "Cenov√° ponuka";
    var quoteNumber = utils.safeGet(currentEntry, fields.quoteNumber) || "";
    var quoteDate = utils.safeGet(currentEntry, fields.date);

    report += "# üìã " + quoteName + "\n";
    if (quoteNumber) {
        report += "**ƒå√≠slo:** " + quoteNumber + "\n";
    }
    if (quoteDate) {
        report += "**D√°tum:** " + moment(quoteDate).format("DD.MM.YYYY") + "\n";
    }
    report += "\n---\n\n";

    // MATERI√ÅL
    if (materialItemsInfo.length > 0) {
        report += "## üì¶ MATERI√ÅL\n\n";
        report += "| N√°zov | Mno≈æstvo | Cena | Celkom |\n";
        report += "|:------|----------:|------:|--------:|\n";

        for (var i = 0; i < materialItemsInfo.length; i++) {
            var item = materialItemsInfo[i];
            report += "| " + item.name + " | ";
            report += item.quantity.toFixed(2) + " | ";
            report += item.price.toFixed(2) + " ‚Ç¨ | ";
            report += "**" + item.totalPrice.toFixed(2) + " ‚Ç¨** |\n";
        }

        report += "| | | **SPOLU MATERI√ÅL:** | **" + materialSum.toFixed(2) + " ‚Ç¨** |\n";
        report += "\n";
    } else {
        report += "## üì¶ MATERI√ÅL\n\n";
        report += "_≈Ωiadne polo≈æky materi√°lu_\n\n";
    }

    // PR√ÅCE
    if (workItemsInfo.length > 0) {
        report += "## üî® PR√ÅCE\n\n";
        report += "| N√°zov | Mno≈æstvo | Cena | Celkom |\n";
        report += "|:------|----------:|------:|--------:|\n";

        for (var i = 0; i < workItemsInfo.length; i++) {
            var item = workItemsInfo[i];
            report += "| " + item.name + " | ";
            report += item.quantity.toFixed(2) + " | ";
            report += item.price.toFixed(2) + " ‚Ç¨ | ";
            report += "**" + item.totalPrice.toFixed(2) + " ‚Ç¨** |\n";
        }

        report += "| | | **SPOLU PR√ÅCE:** | **" + workSum.toFixed(2) + " ‚Ç¨** |\n";
        report += "\n";
    } else {
        report += "## üî® PR√ÅCE\n\n";
        report += "_≈Ωiadne polo≈æky pr√°c_\n\n";
    }

    // CELKOV√Å SUMA
    report += "---\n\n";
    report += "### üí∞ CELKOV√Å SUMA\n\n";
    report += "| Polo≈æka | Suma |\n";
    report += "|:--------|------:|\n";
    report += "| Materi√°l | " + materialSum.toFixed(2) + " ‚Ç¨ |\n";
    report += "| Pr√°ce | " + workSum.toFixed(2) + " ‚Ç¨ |\n";
    report += "| **CELKOM** | **" + totalSum.toFixed(2) + " ‚Ç¨** |\n";

    return report;
}

/**
 * Aktualizuje ƒç√≠slo, n√°zov a d√°tum cenovej ponuky z nadriaden√©ho z√°znamu
 * Hƒæad√° linksFrom z kni≈ænice "Cenov√© ponuky" a kop√≠ruje ƒå√≠slo, N√°zov a D√°tum
 * @returns {Date|null} - D√°tum z cenovej ponuky alebo null
 */
function updateQuoteInfo() {
    try {
        var quoteLibraryName = centralConfig.libraries.quotes; // "Cenov√© ponuky"
        var partsFieldName = centralConfig.fields.quote.parts; // "Diely"

        utils.addDebug(currentEntry, "\nüîó Aktualiz√°cia √∫dajov z cenovej ponuky");
        utils.addDebug(currentEntry, "  Hƒæad√°m v kni≈ænici: " + quoteLibraryName);
        utils.addDebug(currentEntry, "  Pole: " + partsFieldName);

        // Z√≠skaj linksFrom z nadriadenej cenovej ponuky
        var quoteEntries = utils.safeGetLinksFrom(currentEntry, quoteLibraryName, partsFieldName);

        if (!quoteEntries || quoteEntries.length === 0) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nena≈°iel som nadriaden√∫ cenov√∫ ponuku");
            return null;
        }

        // Pou≈æij prv√Ω n√°jden√Ω z√°znam (malo by by≈• len jeden)
        var quoteEntry = quoteEntries[0];

        // Z√≠skaj ƒç√≠slo, n√°zov a d√°tum z cenovej ponuky
        var quoteNumber = utils.safeGet(quoteEntry, centralConfig.fields.quote.number);
        var quoteName = utils.safeGet(quoteEntry, centralConfig.fields.quote.name);
        var quoteDate = utils.safeGet(quoteEntry, centralConfig.fields.quote.date);

        utils.addDebug(currentEntry, "  ‚úÖ N√°jden√° cenov√° ponuka:");
        utils.addDebug(currentEntry, "     ƒå√≠slo: " + (quoteNumber || "nezn√°me"));
        utils.addDebug(currentEntry, "     N√°zov: " + (quoteName || "nezn√°my"));
        utils.addDebug(currentEntry, "     D√°tum: " + (quoteDate ? moment(quoteDate).format("DD.MM.YYYY") : "nezn√°my"));

        // Zap√≠≈° do pol√≠ dielu
        if (quoteNumber) {
            currentEntry.set(fields.quoteNumber, quoteNumber);
        }
        if (quoteName) {
            currentEntry.set(fields.name, quoteName);
        }
        if (quoteDate) {
            currentEntry.set(fields.date, quoteDate);
        }

        return quoteDate;

    } catch (error) {
        utils.addError(currentEntry, "‚ùå Chyba pri aktualiz√°cii √∫dajov z CP: " + error.toString(), "updateQuoteInfo", error);
        return null;
    }
}

/**
 * N√°jde platn√∫ cenu materi√°lu k dan√©mu d√°tumu
 * @param {Entry} materialEntry - Z√°znam materi√°lu
 * @param {Date} date - D√°tum pre ktor√Ω hƒæad√°me cenu
 * @returns {Number|null} - Platn√° cena alebo null
 */
function findMaterialPrice(materialEntry, date) {
    var options = {
        priceLibrary: "materialPrices",
        linkField: "material",
        dateField: "date",  // KRITICK√â: V materialPrices je pole pre d√°tum nazvan√© "date" (nie "validFrom")
        priceField: "sellPrice",
        fallbackPriceField: "price",
        currentEntry: currentEntry
    };
    return utils.findValidPrice(materialEntry, date, options);
}

/**
 * N√°jde platn√∫ cenu pr√°ce k dan√©mu d√°tumu
 * @param {Entry} workEntry - Z√°znam pr√°ce
 * @param {Date} date - D√°tum pre ktor√Ω hƒæad√°me cenu
 * @returns {Number|null} - Platn√° cena alebo null
 */
function findWorkPrice(workEntry, date) {
    var options = {
        priceLibrary: "workPrices",
        linkField: "work",
        priceField: "price",
        currentEntry: currentEntry
    };
    return utils.findValidPrice(workEntry, date, options);
}

/**
 * Aktualizuje pole "Cena" v z√°zname materi√°lu
 * @param {Entry} materialEntry - Z√°znam materi√°lu
 * @param {Number} newPrice - Nov√° cena
 */
function updateMaterialItemPrice(materialEntry, newPrice) {
    try {
        var priceFieldName = CONFIG.itemFields.material.price; // "Cena"
        materialEntry.set(priceFieldName, newPrice);
        utils.addDebug(currentEntry, "    üîÑ Aktualizovan√© pole Cena v materi√°li: " + newPrice.toFixed(2) + " ‚Ç¨");
    } catch (error) {
        utils.addError(currentEntry, "‚ö†Ô∏è Chyba pri aktualiz√°cii Cena v materi√°li: " + error.toString(), "updateMaterialItemPrice", error);
    }
}

/**
 * Aktualizuje pole "Cena" v z√°zname pr√°ce
 * @param {Entry} workEntry - Z√°znam pr√°ce
 * @param {Number} newPrice - Nov√° cena
 */
function updateWorkItemPrice(workEntry, newPrice) {
    try {
        var priceFieldName = CONFIG.itemFields.work; // "Cena"
        workEntry.set(priceFieldName, newPrice);
        utils.addDebug(currentEntry, "    üîÑ Aktualizovan√© pole Cena v pr√°ci: " + newPrice.toFixed(2) + " ‚Ç¨");
    } catch (error) {
        utils.addError(currentEntry, "‚ö†Ô∏è Chyba pri aktualiz√°cii Cena v pr√°ci: " + error.toString(), "updateWorkItemPrice", error);
    }
}

/**
 * Vytvor√≠ nov√Ω z√°znam ceny pre materi√°l a aktualizuje pole "Cena" v samotnom z√°zname
 * @param {Entry} materialEntry - Z√°znam materi√°lu
 * @param {Number} newPrice - Nov√° cena
 * @param {Date} validFrom - Platnos≈• od
 */
function createMaterialPriceRecord(materialEntry, newPrice, validFrom) {
    try {
        var materialPricesLib = libByName(centralConfig.libraries.materialPrices);
        var priceFields = CONFIG.priceFields.materialPrices;

        var newPriceEntry = materialPricesLib.create({});
        newPriceEntry.set(priceFields.material, [materialEntry]);
        newPriceEntry.set(priceFields.date, validFrom);
        newPriceEntry.set(priceFields.sellPrice, newPrice);

        utils.addDebug(currentEntry, "    ‚úÖ Vytvoren√Ω nov√Ω cenov√Ω z√°znam pre materi√°l, cena: " + newPrice);

        // Aktualizuj aj pole "Cena" v samotnom z√°zname materi√°lu
        updateMaterialItemPrice(materialEntry, newPrice);

        return true;
    } catch (error) {
        utils.addError(currentEntry, "‚ùå Chyba pri vytv√°ran√≠ cenov√©ho z√°znamu pre materi√°l: " + error.toString(), "createMaterialPriceRecord", error);
        return false;
    }
}

/**
 * Vytvor√≠ nov√Ω z√°znam ceny pre pr√°cu a aktualizuje pole "Cena" v samotnom z√°zname
 * @param {Entry} workEntry - Z√°znam pr√°ce
 * @param {Number} newPrice - Nov√° cena
 * @param {Date} validFrom - Platnos≈• od
 */
function createWorkPriceRecord(workEntry, newPrice, validFrom) {
    try {
        var workPricesLib = libByName(centralConfig.libraries.workPrices);
        var priceFields = CONFIG.priceFields.workPrices;

        var newPriceEntry = workPricesLib.create({});
        newPriceEntry.set(priceFields.work, [workEntry]);
        newPriceEntry.set(priceFields.validFrom, validFrom);
        newPriceEntry.set(priceFields.price, newPrice);

        utils.addDebug(currentEntry, "    ‚úÖ Vytvoren√Ω nov√Ω cenov√Ω z√°znam pre pr√°cu, cena: " + newPrice);

        // Aktualizuj aj pole "Cena" v samotnom z√°zname pr√°ce
        updateWorkItemPrice(workEntry, newPrice);

        return true;
    } catch (error) {
        utils.addError(currentEntry, "‚ùå Chyba pri vytv√°ran√≠ cenov√©ho z√°znamu pre pr√°cu: " + error.toString(), "createWorkPriceRecord", error);
        return false;
    }
}

/**
 * Zobraz√≠ dial√≥g s rozdielmi v cen√°ch a umo≈æn√≠ pou≈æ√≠vateƒæovi potvrdi≈• aktualiz√°ciu
 */
function showPriceDifferenceDialog() {
    if (priceDifferences.length === 0) {
        return;
    }

    var dialogMessage = "Na≈°li sa rozdiely medzi zadan√Ωmi cenami a cenami v datab√°ze:\n\n";

    for (var i = 0; i < priceDifferences.length; i++) {
        var diff = priceDifferences[i];
        dialogMessage += (i + 1) + ". " + diff.itemName + " (" + diff.type + ")\n";
        dialogMessage += "   ‚Ä¢ Zadan√° cena: " + diff.manualPrice.toFixed(2) + " ‚Ç¨\n";
        dialogMessage += "   ‚Ä¢ Cena v DB:   " + (diff.dbPrice ? diff.dbPrice.toFixed(2) + " ‚Ç¨" : "neexistuje") + "\n";
        dialogMessage += "   ‚Ä¢ Rozdiel:     " + diff.difference.toFixed(2) + " ‚Ç¨\n\n";
    }

    dialogMessage += "Chcete aktualizova≈• ceny v datab√°ze?\n";
    dialogMessage += "(Vytvor√≠ sa nov√Ω cenov√Ω z√°znam s d√°tumom: " + moment(currentDate).format("DD.MM.YYYY") + ")";

    dialog()
        .title("üîç Zisten√© rozdiely v cen√°ch")
        .text(dialogMessage)
        .positiveButton("√Åno, aktualizova≈•", function() {
            processPriceUpdates();
        })
        .negativeButton("Nie, zru≈°i≈•", function() {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Pou≈æ√≠vateƒæ zru≈°il aktualiz√°ciu cien");
        })
        .show();
}

/**
 * Spracuje update cien v datab√°ze
 */
function processPriceUpdates() {
    utils.addDebug(currentEntry, "\nüíæ Aktualiz√°cia cien v datab√°ze");

    var successCount = 0;
    var failCount = 0;

    for (var i = 0; i < priceDifferences.length; i++) {
        var diff = priceDifferences[i];

        utils.addDebug(currentEntry, "  Aktualizujem: " + diff.itemName + " (" + diff.type + ")");

        var success = false;
        if (diff.type === "Materi√°l") {
            success = createMaterialPriceRecord(diff.itemEntry, diff.manualPrice, currentDate);
        } else if (diff.type === "Pr√°ce") {
            success = createWorkPriceRecord(diff.itemEntry, diff.manualPrice, currentDate);
        }

        if (success) {
            successCount++;
        } else {
            failCount++;
        }
    }

    utils.addDebug(currentEntry, "  ‚úÖ √öspe≈°ne aktualizovan√Ωch: " + successCount);
    if (failCount > 0) {
        utils.addDebug(currentEntry, "  ‚ùå Ne√∫spe≈°n√Ωch: " + failCount);
    }

    message("Aktualiz√°cia dokonƒçen√°:\n‚úÖ √öspe≈°n√Ωch: " + successCount + "\n" + (failCount > 0 ? "‚ùå Ch√Ωb: " + failCount : ""));
}

// ==============================================
// HLAVN√Å LOGIKA PREPOƒåTU
// ==============================================

try {
    // ========== AKTUALIZ√ÅCIA √öDAJOV Z CENOVEJ PONUKY ==========
    var quoteDateFromParent = updateQuoteInfo();

    // Urƒçenie d√°tumu pre v√Ωpoƒçty - priorita m√° d√°tum z cenovej ponuky
    var currentDate = quoteDateFromParent || utils.safeGet(currentEntry, fields.date);

    if (!currentDate) {
        currentDate = new Date();
        utils.addDebug(currentEntry, "‚ö†Ô∏è D√°tum nie je zadan√Ω ani v CP ani v Diely, pou≈æijem dne≈°n√Ω d√°tum");
    }

    utils.addDebug(currentEntry, "üìÖ D√°tum pre v√Ωpoƒçty: " + moment(currentDate).format("DD.MM.YYYY"));
    
    var materialSum = 0;
    var workSum = 0;

    // ========== SPRACOVANIE MATERI√ÅLU ==========
    utils.addDebug(currentEntry, "\nüì¶ MATERI√ÅL");
    utils.addDebug(currentEntry, "Pole: " + fields.materials);

    var materialItems = utils.safeGetLinks(currentEntry, fields.materials);
    utils.addDebug(currentEntry, "Poƒçet polo≈æiek: " + (materialItems ? materialItems.length : 0));

    if (materialItems && materialItems.length > 0) {
        var attrs = CONFIG.attributes.materials;

        for (var i = 0; i < materialItems.length; i++) {
            var item = materialItems[i];

            // Z√≠skaj n√°zov materi√°lu - sk√∫s viacer√© mo≈æn√© polia
            var itemName = "Nezn√°my materi√°l";
            try {
                itemName = item.field("N√°zov") || item.field("Name") || "Nezn√°my materi√°l";
            } catch (e) {
                itemName = "Materi√°l #" + (i + 1);
            }

            var quantity = item.attr(attrs.quantity) || 0;
            var manualPrice = item.attr(attrs.price); // Ruƒçne zadan√° cena

            utils.addDebug(currentEntry, "  ‚Ä¢ Polo≈æka #" + (i + 1) + ": " + itemName);
            utils.addDebug(currentEntry, "    Mno≈æstvo: " + quantity + ", Ruƒçn√° cena: " + (manualPrice || "nie je zadan√°"));

            // V≈ΩDY z√≠skaj cenu z datab√°zy
            utils.addDebug(currentEntry, "    üîç Z√≠skavam cenu z datab√°zy...");
            var dbPrice = findMaterialPrice(item, currentDate);

            var finalPrice = 0;

            if (dbPrice !== null && dbPrice !== undefined) {
                utils.addDebug(currentEntry, "    ‚úÖ Cena v DB: " + dbPrice.toFixed(2) + " ‚Ç¨");

                // Ak je zadan√° ruƒçn√° cena, porovnaj
                if (manualPrice && manualPrice > 0) {
                    var difference = Math.abs(manualPrice - dbPrice);

                    if (difference > 0.01) { // Tolerancia 1 cent
                        utils.addDebug(currentEntry, "    ‚ö†Ô∏è ROZDIEL: Ruƒçn√° cena (" + manualPrice.toFixed(2) + " ‚Ç¨) vs DB cena (" + dbPrice.toFixed(2) + " ‚Ç¨)");

                        // Zaznamenaj rozdiel
                        priceDifferences.push({
                            itemEntry: item,
                            itemName: itemName,
                            type: "Materi√°l",
                            manualPrice: manualPrice,
                            dbPrice: dbPrice,
                            difference: difference
                        });

                        finalPrice = manualPrice; // Pou≈æij ruƒçn√∫ cenu
                    } else {
                        finalPrice = dbPrice; // Ceny s√∫ rovnak√©
                    }
                } else {
                    // Nie je zadan√° ruƒçn√° cena, pou≈æij DB cenu
                    finalPrice = dbPrice;
                    item.setAttr(attrs.price, finalPrice);
                    utils.addDebug(currentEntry, "    ‚Üí Nastaven√° cena z DB: " + finalPrice.toFixed(2) + " ‚Ç¨");
                }
            } else {
                // Cena nie je v datab√°ze
                if (manualPrice && manualPrice > 0) {
                    utils.addDebug(currentEntry, "    ‚ö†Ô∏è Cena nie je v DB, pou≈æijem ruƒçn√∫: " + manualPrice.toFixed(2) + " ‚Ç¨");

                    // Zaznamenaj pre vytvorenie nov√©ho z√°znamu
                    priceDifferences.push({
                        itemEntry: item,
                        itemName: itemName,
                        type: "Materi√°l",
                        manualPrice: manualPrice,
                        dbPrice: null,
                        difference: manualPrice
                    });

                    finalPrice = manualPrice;
                } else {
                    // Ani v DB ani ruƒçn√° cena nie je zadan√° - sk√∫s z√≠ska≈• z poƒæa "Cena" v z√°zname
                    utils.addDebug(currentEntry, "    üîç Pok√∫≈°am sa z√≠ska≈• cenu z poƒæa Cena v z√°zname materi√°lu...");
                    var itemPriceField = CONFIG.itemFields.material.price; // "Cena"
                    var itemPrice = utils.safeGet(item, itemPriceField);

                    if (itemPrice && itemPrice > 0) {
                        utils.addDebug(currentEntry, "    ‚úÖ N√°jden√° cena v z√°zname: " + itemPrice.toFixed(2) + " ‚Ç¨");

                        // Zaznamenaj pre automatick√© vytvorenie cenov√©ho z√°znamu
                        priceDifferences.push({
                            itemEntry: item,
                            itemName: itemName,
                            type: "Materi√°l",
                            manualPrice: itemPrice,
                            dbPrice: null,
                            difference: itemPrice,
                            autoCreate: true  // Flag pre automatick√© vytvorenie
                        });

                        finalPrice = itemPrice;
                        // Dopl≈à do atrib√∫tu
                        item.setAttr(attrs.price, finalPrice);
                        utils.addDebug(currentEntry, "    ‚Üí Doplnen√° cena do atrib√∫tu: " + finalPrice.toFixed(2) + " ‚Ç¨");
                    } else {
                        utils.addDebug(currentEntry, "    ‚ùå ≈Ωiadna cena - ani v DB ani ruƒçn√° ani v z√°zname");
                        finalPrice = 0;
                    }
                }
            }

            // Zaokr√∫hli finalPrice na 2 desatinn√© miesta pre spr√°vny v√Ωpoƒçet
            finalPrice = Math.round(finalPrice * 100) / 100;

            // Vypoƒç√≠taj cenu celkom
            var totalPrice = quantity * finalPrice;
            item.setAttr(attrs.totalPrice, totalPrice);
            materialSum += totalPrice;

            // Zaznamenaj polo≈æku pre info report
            materialItemsInfo.push({
                name: itemName,
                quantity: quantity,
                price: finalPrice,
                totalPrice: totalPrice
            });

            utils.addDebug(currentEntry, "    üí∞ Fin√°lna cena: " + finalPrice.toFixed(2) + " ‚Ç¨, Celkom: " + totalPrice.toFixed(2) + " ‚Ç¨");
        }

        utils.addDebug(currentEntry, "  ‚úÖ Materi√°l suma: " + materialSum.toFixed(2) + " ‚Ç¨");
    } else {
        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne polo≈æky materi√°lu");
    }

    // ========== SPRACOVANIE PR√ÅC ==========
    utils.addDebug(currentEntry, "\nüî® PR√ÅCE");
    utils.addDebug(currentEntry, "Pole: " + fields.works);

    var workItems = utils.safeGetLinks(currentEntry, fields.works);
    utils.addDebug(currentEntry, "Poƒçet polo≈æiek: " + (workItems ? workItems.length : 0));

    if (workItems && workItems.length > 0) {
        var attrs = CONFIG.attributes.works;

        for (var i = 0; i < workItems.length; i++) {
            var item = workItems[i];

            // Z√≠skaj n√°zov pr√°ce - sk√∫s viacer√© mo≈æn√© polia
            var itemName = "Nezn√°ma pr√°ca";
            try {
                itemName = item.field("N√°zov") || item.field("Name") || "Nezn√°ma pr√°ca";
            } catch (e) {
                itemName = "Pr√°ca #" + (i + 1);
            }

            var quantity = item.attr(attrs.quantity) || 0;
            var manualPrice = item.attr(attrs.price); // Ruƒçne zadan√° cena

            utils.addDebug(currentEntry, "  ‚Ä¢ Polo≈æka #" + (i + 1) + ": " + itemName);
            utils.addDebug(currentEntry, "    Mno≈æstvo: " + quantity + ", Ruƒçn√° cena: " + (manualPrice || "nie je zadan√°"));

            // V≈ΩDY z√≠skaj cenu z datab√°zy
            utils.addDebug(currentEntry, "    üîç Z√≠skavam cenu z datab√°zy...");
            var dbPrice = findWorkPrice(item, currentDate);

            var finalPrice = 0;

            if (dbPrice !== null && dbPrice !== undefined) {
                utils.addDebug(currentEntry, "    ‚úÖ Cena v DB: " + dbPrice.toFixed(2) + " ‚Ç¨");

                // Ak je zadan√° ruƒçn√° cena, porovnaj
                if (manualPrice && manualPrice > 0) {
                    var difference = Math.abs(manualPrice - dbPrice);

                    if (difference > 0.01) { // Tolerancia 1 cent
                        utils.addDebug(currentEntry, "    ‚ö†Ô∏è ROZDIEL: Ruƒçn√° cena (" + manualPrice.toFixed(2) + " ‚Ç¨) vs DB cena (" + dbPrice.toFixed(2) + " ‚Ç¨)");

                        // Zaznamenaj rozdiel
                        priceDifferences.push({
                            itemEntry: item,
                            itemName: itemName,
                            type: "Pr√°ce",
                            manualPrice: manualPrice,
                            dbPrice: dbPrice,
                            difference: difference
                        });

                        finalPrice = manualPrice; // Pou≈æij ruƒçn√∫ cenu
                    } else {
                        finalPrice = dbPrice; // Ceny s√∫ rovnak√©
                    }
                } else {
                    // Nie je zadan√° ruƒçn√° cena, pou≈æij DB cenu
                    finalPrice = dbPrice;
                    item.setAttr(attrs.price, finalPrice);
                    utils.addDebug(currentEntry, "    ‚Üí Nastaven√° cena z DB: " + finalPrice.toFixed(2) + " ‚Ç¨");
                }
            } else {
                // Cena nie je v datab√°ze
                if (manualPrice && manualPrice > 0) {
                    utils.addDebug(currentEntry, "    ‚ö†Ô∏è Cena nie je v DB, pou≈æijem ruƒçn√∫: " + manualPrice.toFixed(2) + " ‚Ç¨");

                    // Zaznamenaj pre vytvorenie nov√©ho z√°znamu
                    priceDifferences.push({
                        itemEntry: item,
                        itemName: itemName,
                        type: "Pr√°ce",
                        manualPrice: manualPrice,
                        dbPrice: null,
                        difference: manualPrice
                    });

                    finalPrice = manualPrice;
                } else {
                    // Ani v DB ani ruƒçn√° cena nie je zadan√° - sk√∫s z√≠ska≈• z poƒæa "Cena" v z√°zname
                    utils.addDebug(currentEntry, "    üîç Pok√∫≈°am sa z√≠ska≈• cenu z poƒæa Cena v z√°zname pr√°ce...");
                    var itemPriceField = CONFIG.itemFields.work; // "Cena"
                    var itemPrice = utils.safeGet(item, itemPriceField);

                    if (itemPrice && itemPrice > 0) {
                        utils.addDebug(currentEntry, "    ‚úÖ N√°jden√° cena v z√°zname: " + itemPrice.toFixed(2) + " ‚Ç¨");

                        // Zaznamenaj pre automatick√© vytvorenie cenov√©ho z√°znamu
                        priceDifferences.push({
                            itemEntry: item,
                            itemName: itemName,
                            type: "Pr√°ce",
                            manualPrice: itemPrice,
                            dbPrice: null,
                            difference: itemPrice,
                            autoCreate: true  // Flag pre automatick√© vytvorenie
                        });

                        finalPrice = itemPrice;
                        // Dopl≈à do atrib√∫tu
                        item.setAttr(attrs.price, finalPrice);
                        utils.addDebug(currentEntry, "    ‚Üí Doplnen√° cena do atrib√∫tu: " + finalPrice.toFixed(2) + " ‚Ç¨");
                    } else {
                        utils.addDebug(currentEntry, "    ‚ùå ≈Ωiadna cena - ani v DB ani ruƒçn√° ani v z√°zname");
                        finalPrice = 0;
                    }
                }
            }

            // Zaokr√∫hli finalPrice na 2 desatinn√© miesta pre spr√°vny v√Ωpoƒçet
            finalPrice = Math.round(finalPrice * 100) / 100;

            // Vypoƒç√≠taj cenu celkom
            var totalPrice = quantity * finalPrice;
            item.setAttr(attrs.totalPrice, totalPrice);
            workSum += totalPrice;

            // Zaznamenaj polo≈æku pre info report
            workItemsInfo.push({
                name: itemName,
                quantity: quantity,
                price: finalPrice,
                totalPrice: totalPrice
            });

            utils.addDebug(currentEntry, "    üí∞ Fin√°lna cena: " + finalPrice.toFixed(2) + " ‚Ç¨, Celkom: " + totalPrice.toFixed(2) + " ‚Ç¨");
        }

        utils.addDebug(currentEntry, "  ‚úÖ Pr√°ce suma: " + workSum.toFixed(2) + " ‚Ç¨");
    } else {
        utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne polo≈æky pr√°c");
    }

    // ========== KONTROLA A UPDATE CIEN ==========
    if (priceDifferences.length > 0) {
        utils.addDebug(currentEntry, "\n‚ö†Ô∏è Zisten√© rozdiely v cen√°ch: " + priceDifferences.length);

        // Zobraz dial√≥g pre potvrdenie aktualiz√°cie cien
        showPriceDifferenceDialog();
    } else {
        utils.addDebug(currentEntry, "\n‚úÖ ≈Ωiadne rozdiely v cen√°ch");
    }

    // ========== Z√ÅPIS V√ùSLEDKOV ==========
    var totalSum = materialSum + workSum;

    currentEntry.set(fields.materialSum, materialSum);
    currentEntry.set(fields.workSum, workSum);
    currentEntry.set(fields.totalSum, totalSum);

    // Debug v√Ωstup
    utils.addDebug(currentEntry, "\n" + "=".repeat(50));
    utils.addDebug(currentEntry, "üí∞ S√öHRN CENOVEJ PONUKY DIELY:");
    utils.addDebug(currentEntry, "  ‚Ä¢ Materi√°l:     " + materialSum.toFixed(2) + " ‚Ç¨");
    utils.addDebug(currentEntry, "  ‚Ä¢ Pr√°ce:        " + workSum.toFixed(2) + " ‚Ç¨");
    utils.addDebug(currentEntry, "  " + "-".repeat(48));
    utils.addDebug(currentEntry, "  ‚Ä¢ CELKOM:       " + totalSum.toFixed(2) + " ‚Ç¨");
    utils.addDebug(currentEntry, "=".repeat(50));

    // ========== VYTVORENIE INFO REPORTU ==========
    var infoReport = buildQuoteInfoReport(materialSum, workSum, totalSum);

    // Vyma≈æ predch√°dzaj√∫ce info (utils.clearLogs vyma≈æe len debug a error, nie info)
    currentEntry.set(centralConfig.fields.common.info, "");

    // Zap√≠≈° prehƒæadn√Ω report do info poƒæa
    var infoFieldName = centralConfig.fields.common.info || "info";
    currentEntry.set(infoFieldName, infoReport);

    utils.addDebug(currentEntry, "\nüìÑ INFO REPORT: Vytvoren√Ω prehƒæadn√Ω report s " +
        (materialItemsInfo.length + workItemsInfo.length) + " polo≈ækami");

    utils.addDebug(currentEntry, "‚úÖ FINISH: Prepoƒçet cenovej ponuky Diely √∫spe≈°ne dokonƒçen√Ω");

} catch (error) {
    utils.addError(currentEntry, "‚ùå KRITICK√Å CHYBA: " + error.toString() + ", Line: " + error.lineNumber, "MAIN", error);
}
