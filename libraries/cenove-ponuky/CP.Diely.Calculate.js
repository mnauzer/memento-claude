// ==============================================
// CENOV√â PONUKY DIELY - Hlavn√Ω prepoƒçet
// Verzia: 1.6.0 | D√°tum: 2025-10-06 | Autor: ASISTANTO
// Kni≈ænica: Cenov√© ponuky Diely (ID: nCAgQkfvK)
// Trigger: onChange
// ==============================================
// üìã FUNKCIA:
//    - Prepoƒçet polo≈æiek cenovej ponuky (Materi√°l, Pr√°ce)
//    - Automatick√© doplnenie cien z hist√≥rie ak nie s√∫ zadan√©
//    - V√Ωpoƒçet s√∫ƒçtov za jednotliv√© kateg√≥rie
//    - V√Ωpoƒçet celkovej sumy cenovej ponuky
// ==============================================
// üîß CHANGELOG v1.6.0 (2025-10-06):
//    - ODSTR√ÅNEN√â v≈°etky hardcoded n√°zvy aj z CONFIG
//    - Pou≈æ√≠va centralConfig.processing.quotePart namiesto lok√°lneho CONFIG.categories
//    - V≈°etka konfigur√°cia spracovania polo≈æiek je v MementoConfig7.js v7.0.26+
// üîß CHANGELOG v1.5.1 (2025-10-06):
//    - OPRAVA: Pou≈æitie utils.safeGetLinks namiesto utils.safeGet pre linkToEntry polia
//    - OPRAVA: Spr√°vny pr√≠stup k poƒæu cez CONFIG.fields.quotePart[categoryConfig.field]
// üîß CHANGELOG v1.5 (2025-10-06):
//    - ODSTR√ÅNEN√â v≈°etky hardcoded n√°zvy
//    - CONFIG.categories s kompletnou konfigur√°ciou pre ka≈æd√∫ kateg√≥riu
//    - Dynamick√Ω loop cez kateg√≥rie (ƒæahko roz≈°√≠riteƒæn√©)
//    - Jedna univerz√°lna funkcia processCategoryItems
//    - Jeden wrapper findValidPrice s category config
// üîß CHANGELOG v1.4 (2025-10-06):
//    - Pou≈æitie CONFIG.attributes podƒæa vzoru Zazp.Calc.Main.js
//    - Atrib√∫ty definovan√© v MementoConfig7.js
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA MODULOV
// ==============================================

var utils = MementoUtils;
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Cenov√© ponuky Diely - Prepoƒçet",
    version: "1.6.0", // V≈°etka konfigur√°cia z centralConfig.processing.quotePart

    // Referencie na centr√°lny config
    fields: {
        quotePart: centralConfig.fields.quotePart,
        materialPrices: centralConfig.fields.materialPrices,
        workPrices: centralConfig.fields.workPrices,
        items: centralConfig.fields.items,
        priceList: centralConfig.fields.priceList,
        common: centralConfig.fields.common
    },
    attributes: {
        materials: centralConfig.attributes.quotePartMaterials,
        works: centralConfig.attributes.quotePartWorks
    },
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,

    // Processing konfigur√°cia z centr√°lneho configu
    processing: centralConfig.processing.quotePart
};

var fields = CONFIG.fields.quotePart;
var currentDate = utils.safeGet(currentEntry, fields.date);

if (!currentDate) {
    currentDate = new Date();
    utils.addDebug(currentEntry, "‚ö†Ô∏è D√°tum nie je zadan√Ω, pou≈æijem dne≈°n√Ω d√°tum");
}

utils.addDebug(currentEntry, "üöÄ START: Prepoƒçet cenovej ponuky Diely - " + moment(currentDate).format("DD.MM.YYYY"));

// === POMOCN√â FUNKCIE ===

/**
 * Wrapper pre hƒæadanie platnej ceny polo≈æky
 * Pou≈æ√≠va univerz√°lnu utils.findValidPrice funkciu
 * @param {Object} itemEntry - Z√°znam polo≈æky
 * @param {Date} date - D√°tum pre ktor√Ω hƒæad√°me cenu
 * @param {Object} categoryConfig - Konfigur√°cia kateg√≥rie z CONFIG.categories
 * @returns {Number|null} - Platn√° cena alebo null
 */
function findValidPrice(itemEntry, date, categoryConfig) {
    var options = {
        priceLibrary: categoryConfig.priceLibrary,
        linkField: categoryConfig.linkField,
        priceField: categoryConfig.priceField,
        currentEntry: currentEntry
    };

    if (categoryConfig.fallbackPriceField) {
        options.fallbackPriceField = categoryConfig.fallbackPriceField;
    }

    return utils.findValidPrice(itemEntry, date, options);
}

/**
 * Spracuje jednu kateg√≥riu polo≈æiek (Materi√°l, Pr√°ce)
 * @param {String} categoryKey - Kƒæ√∫ƒç kateg√≥rie v CONFIG.processing (napr. "materials", "works")
 * @returns {Number} - S√∫ƒçet za kateg√≥riu
 */
function processCategoryItems(categoryKey) {
    try {
        var categoryConfig = CONFIG.processing[categoryKey];
        var displayName = categoryConfig.displayName;

        utils.addDebug(currentEntry, "\nüì¶ Spracov√°vam kateg√≥riu: " + displayName);

        // Z√≠skaj pole pomocou CONFIG.fields.quotePart.materials alebo CONFIG.fields.quotePart.works
        var fieldName = CONFIG.fields.quotePart[categoryConfig.field];
        utils.addDebug(currentEntry, "  üîç Pole: " + fieldName + " (key: " + categoryConfig.field + ")");

        var categoryEntries = utils.safeGetLinks(currentEntry, fieldName);

        if (!categoryEntries || categoryEntries.length === 0) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è ≈Ωiadne polo≈æky v kateg√≥rii " + displayName);
            return 0;
        }

        var categorySum = 0;
        var itemsProcessed = 0;
        var attrs = CONFIG.attributes[categoryConfig.attribute];

        for (var i = 0; i < categoryEntries.length; i++) {
            var item = categoryEntries[i];

            // Z√≠skaj atrib√∫ty pomocou nat√≠vnej Memento API
            var quantity = item.attr(attrs.quantity) || 0;
            var price = item.attr(attrs.price);
            var totalPrice = 0;

            utils.addDebug(currentEntry, "  ‚Ä¢ Polo≈æka #" + (i + 1) + ": mno≈æstvo=" + quantity + ", cena=" + (price || "nedefinovan√°"));

            // Ak cena nie je zadan√°, pok√∫s sa ju n√°js≈• v hist√≥rii
            if (!price || price === 0) {
                utils.addDebug(currentEntry, "    üîç Hƒæad√°m cenu v hist√≥rii...");
                var foundPrice = findValidPrice(item, currentDate, categoryConfig);

                if (foundPrice !== null && foundPrice !== undefined) {
                    price = foundPrice;
                    item.setAttr(attrs.price, price);
                    utils.addDebug(currentEntry, "    ‚úÖ N√°jden√° cena: " + price);
                } else {
                    utils.addDebug(currentEntry, "    ‚ö†Ô∏è Cena nebola n√°jden√° v hist√≥rii");
                    price = 0;
                }
            }

            // Vypoƒç√≠taj cenu celkom
            totalPrice = quantity * price;
            item.setAttr(attrs.totalPrice, totalPrice);

            categorySum += totalPrice;
            itemsProcessed++;

            utils.addDebug(currentEntry, "    üí∞ Cena celkom: " + totalPrice.toFixed(2) + " ‚Ç¨ (mno≈æstvo: " + quantity + " √ó cena: " + price.toFixed(2) + ")");
        }

        utils.addDebug(currentEntry, "  ‚úÖ Kateg√≥ria " + displayName + " spracovan√°: " + itemsProcessed + " polo≈æiek, suma: " + categorySum.toFixed(2) + " ‚Ç¨");

        return categorySum;

    } catch (error) {
        var catConfig = CONFIG.processing[categoryKey];
        var dispName = catConfig ? catConfig.displayName : categoryKey;
        utils.addError(currentEntry, "‚ùå Chyba pri spracovan√≠ kateg√≥rie " + dispName + ": " + error.toString(), "processCategoryItems", error);
        return 0;
    }
}

// ==============================================
// HLAVN√Å LOGIKA PREPOƒåTU
// ==============================================

try {
    var totalSum = 0;
    var results = {};

    // Spracuj v≈°etky kateg√≥rie z centralConfig.processing.quotePart
    for (var categoryKey in CONFIG.processing) {
        if (CONFIG.processing.hasOwnProperty(categoryKey)) {
            results[categoryKey] = processCategoryItems(categoryKey);
            totalSum += results[categoryKey];
        }
    }

    // Zap√≠≈° v√Ωsledky do pol√≠
    currentEntry.set(fields.materialSum, results.materials || 0);
    currentEntry.set(fields.workSum, results.works || 0);
    currentEntry.set(fields.totalSum, totalSum);
    currentEntry.set(fields.totalPrice, totalSum);

    // Debug v√Ωstup
    utils.addDebug(currentEntry, "\n" + "=".repeat(50));
    utils.addDebug(currentEntry, "üí∞ S√öHRN CENOVEJ PONUKY DIELY:");

    for (var key in CONFIG.processing) {
        if (CONFIG.processing.hasOwnProperty(key)) {
            var cat = CONFIG.processing[key];
            var sum = results[key] || 0;
            utils.addDebug(currentEntry, "  ‚Ä¢ " + cat.displayName + ":     " + sum.toFixed(2) + " ‚Ç¨");
        }
    }

    utils.addDebug(currentEntry, "  " + "-".repeat(48));
    utils.addDebug(currentEntry, "  ‚Ä¢ CELKOM:       " + totalSum.toFixed(2) + " ‚Ç¨");
    utils.addDebug(currentEntry, "=".repeat(50));

    utils.addDebug(currentEntry, "‚úÖ FINISH: Prepoƒçet cenovej ponuky Diely √∫spe≈°ne dokonƒçen√Ω");

} catch (error) {
    utils.addError(currentEntry, "‚ùå KRITICK√Å CHYBA pri prepoƒçte cenovej ponuky Diely: " + error.toString() + ", Line: " + error.lineNumber, "MAIN", error);
}
