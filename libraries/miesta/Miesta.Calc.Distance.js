// ==============================================
// MEMENTO DATABASE - V√ùPOƒåET VZDIALENOSTI
// ==============================================
// Kni≈ænica: Miesta
// Polia: GPS, Vzdialenos≈• (Number), view (Choice), Debug_Log (Text/Memo), Error_Log (Text/Memo)
// Linked Library: ASISTANTO Defaults ‚Üí V√Ωchodzia adresa (Link to Entry ‚Üí kni≈ænica Miesta)
// 
// V√ùPOƒåET: GPS aktu√°lneho miesta ‚Üí GPS V√Ωchodzej adresy
// V√ùSLEDOK: Vzdialenos≈• v km (cel√© ƒç√≠slo, zaokr√∫hlen√© hore)
// MET√ìDA: Haversine formula (orthodromick√° vzdialenos≈•)
// 
// PRESN√â N√ÅZVY POL√ç:
// - GPS, Vzdialenos≈•, view
// - V kni≈ænici ASISTANTO Defaults: V√Ωchodzia adresa
// - V kni≈ænici Miesta: GPS, N√°zov
// ==============================================

// Naƒç√≠taj view re≈æim pre konfigur√°ciu debug
var viewMode = entry().field("view") || "Edit√°cia";

var CONFIG = {
    debug: (viewMode === "Debug"),
    debugFieldName: "Debug_Log",
    errorFieldName: "Error_Log",
    // Nastavenia v√Ωpoƒçtu
    earthRadiusKm: 6371,        // Polomer Zeme v km pre Haversine formulu
    defaultsLibraryName: "ASISTANTO Defaults",
    addressFieldName: "V√Ωchodzia ≈°tart adresa",
    distanceFieldName: "Vzdialenos≈•",
    gpsFieldName: "GPS"
};

var debugMessages = [];
var errorMessages = [];

function debugLog(message) {
    if (CONFIG.debug) {
        var timestamp = new Date().toLocaleTimeString();
        debugMessages.push("[" + timestamp + "] " + message);
    }
}

function errorLog(message, functionName) {
    var timestamp = new Date().toLocaleTimeString();
    var context = functionName ? "[" + functionName + "] " : "";
    errorMessages.push("[" + timestamp + "] ‚ùå " + context + message);
}

function writeDebugToField() {
    if (CONFIG.debug && debugMessages.length > 0) {
        try {
            entry().set(CONFIG.debugFieldName, debugMessages.join("\n"));
        } catch (error) {
            errorLog("Chyba pri z√°pise Debug_Log: " + error.toString(), "writeDebugToField");
        }
    }
    
    if (errorMessages.length > 0) {
        try {
            entry().set(CONFIG.errorFieldName, errorMessages.join("\n"));
        } catch (error) {
            message("Error_Log z√°pis chyba: " + error);
        }
    }
}

// ==============================================
// HELPER FUNKCIE
// ==============================================

function getEntryName(entryObj) {
    var resultName = "Nezn√°my z√°znam";
    
    if (entryObj && typeof entryObj.field === 'function') {
        var nameFields = ["N√°zov", "Nazov", "Name", "name"];
        
        for (var i = 0; i < nameFields.length; i++) {
            try {
                var nameValue = entryObj.field(nameFields[i]);
                if (nameValue && nameValue.length > 0) {
                    resultName = nameValue;
                    break;
                }
            } catch (error) {
                // Pokraƒçuj s ƒèal≈°√≠m poƒæom
            }
        }
        
        // Ak nen√°jde n√°zov, sk√∫s ID
        if (resultName === "Nezn√°my z√°znam") {
            try {
                var id = null;
                try {
                    id = entryObj.field("ID");
                } catch (e1) {
                    try {
                        id = entryObj.field("id");
                    } catch (e2) {
                        // ID pole neexistuje
                    }
                }
                
                if (id) {
                    resultName = "Z√°znam #" + id;
                } else {
                    resultName = "Bez n√°zvu";
                }
            } catch (error) {
                resultName = "Bez n√°zvu";
            }
        }
    }
    
    return resultName;
}

// ==============================================
// V√ùPOƒåET VZDIALENOSTI
// ==============================================

function calculateHaversineDistance(lat1, lng1, lat2, lng2) {
    debugLog("=== HAVERSINE V√ùPOƒåET ===");
    debugLog("  üßÆ Vstupn√© s√∫radnice:");
    debugLog("    Od: " + lat1 + "¬∞, " + lng1 + "¬∞");
    debugLog("    Do: " + lat2 + "¬∞, " + lng2 + "¬∞");
    debugLog("  üåç Polomer Zeme: " + CONFIG.earthRadiusKm + " km");
    
    var R = CONFIG.earthRadiusKm;
    var PI = Math.PI;
    
    // Konverzia stup≈àov na radi√°ny
    var lat1Rad = lat1 * (PI / 180);
    var lng1Rad = lng1 * (PI / 180);
    var lat2Rad = lat2 * (PI / 180);
    var lng2Rad = lng2 * (PI / 180);
    
    debugLog("  üîÑ Radi√°ny:");
    debugLog("    Od: " + lat1Rad.toFixed(6) + ", " + lng1Rad.toFixed(6));
    debugLog("    Do: " + lat2Rad.toFixed(6) + ", " + lng2Rad.toFixed(6));
    
    // Haversine formula
    var dLat = lat2Rad - lat1Rad;
    var dLng = lng2Rad - lng1Rad;
    
    debugLog("  üìê Delty:");
    debugLog("    dLat: " + dLat.toFixed(6));
    debugLog("    dLng: " + dLng.toFixed(6));
    
    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1Rad) * Math.cos(lat2Rad) * 
            Math.sin(dLng/2) * Math.sin(dLng/2);
    
    debugLog("  ‚ö° Haversine 'a': " + a.toFixed(8));
    
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    var distance = R * c;
    
    debugLog("  üéØ Haversine 'c': " + c.toFixed(8));
    debugLog("  üìè Presn√° vzdialenos≈•: " + distance.toFixed(3) + " km");
    
    return distance;
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function calculateDistance() {
    var currentEntry = entry();
    
    debugLog("=== V√ùPOƒåET VZDIALENOSTI ===");
    debugLog("üöÄ View re≈æim: " + viewMode);
    debugLog("üîß Debug: " + (CONFIG.debug ? "ZAPNUT√ù" : "VYPNUT√ù"));
    try {
        var currentId = currentEntry.field("ID") || currentEntry.field("id") || "nezn√°me";
        debugLog("üìç Aktu√°lny z√°znam ID: " + currentId);
    } catch (error) {
        debugLog("üìç Aktu√°lny z√°znam ID: nezn√°me (pole ID nedostupn√©)");
    }
    
    // Krok 1: Z√≠skaj GPS s√∫radnice aktu√°lneho z√°znamu
    debugLog("=== KROK 1: AKTU√ÅLNE GPS ===");
    var currentGPS = currentEntry.field(CONFIG.gpsFieldName);
    debugLog("üéØ Aktu√°lne GPS pole obsahuje: " + JSON.stringify(currentGPS));
    
    if (currentGPS) {
        // Parsovanie GPS s√∫radn√≠c aktu√°lneho z√°znamu
        debugLog("--- Parsovanie GPS s√∫radn√≠c pre: Aktu√°lne miesto ---");
        debugLog("  üéØ GPS d√°ta typ: " + typeof currentGPS);
        debugLog("  üìç GPS d√°ta hodnota: " + JSON.stringify(currentGPS));
        
        var currentLat = null;
        var currentLng = null;
        var currentLocationParsed = false;
        
        if (typeof currentGPS === 'string' && currentGPS.length > 0) {
            debugLog("  üìù String form√°t GPS");
            var currentParts = currentGPS.split(',');
            debugLog("  üîç Rozdelen√© na ƒçasti: " + JSON.stringify(currentParts));
            
            if (currentParts.length === 2) {
                currentLat = parseFloat(currentParts[0].trim());
                currentLng = parseFloat(currentParts[1].trim());
                debugLog("  üßÆ Parsovan√© hodnoty - Lat: " + currentLat + ", Lng: " + currentLng);
                
                if (!isNaN(currentLat) && !isNaN(currentLng)) {
                    if (currentLat >= -90 && currentLat <= 90 && currentLng >= -180 && currentLng <= 180) {
                        debugLog("  ‚úÖ GPS s√∫radnice √∫spe≈°ne validovan√©: " + currentLat + "¬∞, " + currentLng + "¬∞");
                        currentLocationParsed = true;
                    } else {
                        errorLog("GPS s√∫radnice mimo platn√©ho rozsahu - Lat: " + currentLat + " (rozsah: -90 a≈æ 90), Lng: " + currentLng + " (rozsah: -180 a≈æ 180)", "calculateDistance");
                    }
                } else {
                    errorLog("Neplatn√© ƒç√≠seln√© hodnoty GPS s√∫radn√≠c - Lat: " + currentLat + ", Lng: " + currentLng, "calculateDistance");
                }
            } else {
                errorLog("GPS string nem√° spr√°vny form√°t (oƒçak√°van√© 2 ƒçasti oddelen√© ƒçiarkou): " + currentGPS, "calculateDistance");
            }
        } else if (typeof currentGPS === 'object' && currentGPS !== null) {
            debugLog("  üóÇÔ∏è Objektov√Ω form√°t GPS");
            
            // Sk√∫s r√¥zne property n√°zvy
            if (typeof currentGPS.lat !== 'undefined') {
                currentLat = parseFloat(currentGPS.lat);
                debugLog("  ‚úÖ Na≈°iel currentGPS.lat: " + currentLat);
            }
            if (typeof currentGPS.lon !== 'undefined') {
                currentLng = parseFloat(currentGPS.lon);
                debugLog("  ‚úÖ Na≈°iel currentGPS.lon: " + currentLng);
            }
            if (typeof currentGPS.lng !== 'undefined') {
                currentLng = parseFloat(currentGPS.lng);
                debugLog("  ‚úÖ Na≈°iel currentGPS.lng: " + currentLng);
            }
            if (typeof currentGPS.latitude !== 'undefined') {
                currentLat = parseFloat(currentGPS.latitude);
                debugLog("  ‚úÖ Na≈°iel currentGPS.latitude: " + currentLat);
            }
            if (typeof currentGPS.longitude !== 'undefined') {
                currentLng = parseFloat(currentGPS.longitude);
                debugLog("  ‚úÖ Na≈°iel currentGPS.longitude: " + currentLng);
            }
            
            // Array-like pr√≠stup
            if (currentLat === null && currentLng === null && currentGPS.length >= 2) {
                currentLat = parseFloat(currentGPS[0]);
                currentLng = parseFloat(currentGPS[1]);
                debugLog("  üìä Array pr√≠stup - [0]: " + currentLat + ", [1]: " + currentLng);
            }
            
            if (currentLat !== null && currentLng !== null && !isNaN(currentLat) && !isNaN(currentLng)) {
                if (currentLat >= -90 && currentLat <= 90 && currentLng >= -180 && currentLng <= 180) {
                    debugLog("  ‚úÖ GPS s√∫radnice √∫spe≈°ne validovan√©: " + currentLat + "¬∞, " + currentLng + "¬∞");
                    currentLocationParsed = true;
                } else {
                    errorLog("GPS s√∫radnice mimo platn√©ho rozsahu - Lat: " + currentLat + " (rozsah: -90 a≈æ 90), Lng: " + currentLng + " (rozsah: -180 a≈æ 180)", "calculateDistance");
                }
            } else {
                errorLog("Neplatn√© ƒç√≠seln√© hodnoty GPS s√∫radn√≠c - Lat: " + currentLat + ", Lng: " + currentLng, "calculateDistance");
            }
        } else {
            errorLog("Nerozpoznan√Ω form√°t GPS s√∫radn√≠c: " + typeof currentGPS, "calculateDistance");
        }
        
        if (currentLocationParsed) {
            // Krok 2: Z√≠skaj kni≈ænicu ASISTANTO Defaults
            debugLog("=== KROK 2: ASISTANTO DEFAULTS ===");
            var defaultsLib = libByName(CONFIG.defaultsLibraryName);
            
            if (defaultsLib) {
                debugLog("‚úÖ Kni≈ænica '" + CONFIG.defaultsLibraryName + "' n√°jden√°");
                
                // Krok 3: Z√≠skaj posledn√Ω z√°znam z ASISTANTO Defaults
                debugLog("=== KROK 3: POSLEDN√ù Z√ÅZNAM ===");
                var lastDefaultEntry = defaultsLib.lastEntry();
                
                if (lastDefaultEntry) {
                    try {
                        var lastDefaultId = lastDefaultEntry.field("ID") || lastDefaultEntry.field("id") || "nezn√°me";
                        debugLog("‚úÖ Posledn√Ω z√°znam ID: " + lastDefaultId);
                    } catch (error) {
                        debugLog("‚úÖ Posledn√Ω z√°znam ID: nezn√°me (pole ID nedostupn√©)");
                    }
                    
                    // Krok 4: Z√≠skaj link na v√Ωchodziu adresu
                    debugLog("=== KROK 4: V√ùCHODZIA ADRESA ===");
                    var defaultAddressLink = lastDefaultEntry.field(CONFIG.addressFieldName);
                    debugLog("üîó Pole '" + CONFIG.addressFieldName + "' obsahuje: " + JSON.stringify(defaultAddressLink));
                    
                    if (defaultAddressLink && defaultAddressLink.length && defaultAddressLink.length > 0) {
                        debugLog("‚úÖ N√°jden√Ωch " + defaultAddressLink.length + " link(ov) na v√Ωchodziu adresu");
                        
                        // Krok 5: Z√≠skaj GPS s√∫radnice v√Ωchodzej adresy
                        debugLog("=== KROK 5: GPS V√ùCHODZEJ ADRESY ===");
                        var defaultLocationEntry = defaultAddressLink[0]; // Pou≈æij prv√Ω link
                        var entryName = getEntryName(defaultLocationEntry);
                        debugLog("üéØ Pou≈æ√≠vam prv√Ω link - z√°znam: " + entryName);
                        
                        var defaultGPS = defaultLocationEntry.field(CONFIG.gpsFieldName);
                        debugLog("üìç GPS v√Ωchodzej adresy: " + JSON.stringify(defaultGPS));
                        
                        if (defaultGPS) {
                            // Parsovanie GPS s√∫radn√≠c v√Ωchodzej adresy
                            debugLog("--- Parsovanie GPS s√∫radn√≠c pre: " + entryName + " ---");
                            debugLog("  üéØ GPS d√°ta typ: " + typeof defaultGPS);
                            debugLog("  üìç GPS d√°ta hodnota: " + JSON.stringify(defaultGPS));
                            
                            var defaultLat = null;
                            var defaultLng = null;
                            var defaultLocationParsed = false;
                            
                            if (typeof defaultGPS === 'string' && defaultGPS.length > 0) {
                                debugLog("  üìù String form√°t GPS");
                                var defaultParts = defaultGPS.split(',');
                                debugLog("  üîç Rozdelen√© na ƒçasti: " + JSON.stringify(defaultParts));
                                
                                if (defaultParts.length === 2) {
                                    defaultLat = parseFloat(defaultParts[0].trim());
                                    defaultLng = parseFloat(defaultParts[1].trim());
                                    debugLog("  üßÆ Parsovan√© hodnoty - Lat: " + defaultLat + ", Lng: " + defaultLng);
                                    
                                    if (!isNaN(defaultLat) && !isNaN(defaultLng)) {
                                        if (defaultLat >= -90 && defaultLat <= 90 && defaultLng >= -180 && defaultLng <= 180) {
                                            debugLog("  ‚úÖ GPS s√∫radnice √∫spe≈°ne validovan√©: " + defaultLat + "¬∞, " + defaultLng + "¬∞");
                                            defaultLocationParsed = true;
                                        } else {
                                            errorLog("GPS s√∫radnice mimo platn√©ho rozsahu - Lat: " + defaultLat + " (rozsah: -90 a≈æ 90), Lng: " + defaultLng + " (rozsah: -180 a≈æ 180)", "calculateDistance");
                                        }
                                    } else {
                                        errorLog("Neplatn√© ƒç√≠seln√© hodnoty GPS s√∫radn√≠c - Lat: " + defaultLat + ", Lng: " + defaultLng, "calculateDistance");
                                    }
                                } else {
                                    errorLog("GPS string nem√° spr√°vny form√°t (oƒçak√°van√© 2 ƒçasti oddelen√© ƒçiarkou): " + defaultGPS, "calculateDistance");
                                }
                            } else if (typeof defaultGPS === 'object' && defaultGPS !== null) {
                                debugLog("  üóÇÔ∏è Objektov√Ω form√°t GPS");
                                
                                // Sk√∫s r√¥zne property n√°zvy
                                if (typeof defaultGPS.lat !== 'undefined') {
                                    defaultLat = parseFloat(defaultGPS.lat);
                                    debugLog("  ‚úÖ Na≈°iel defaultGPS.lat: " + defaultLat);
                                }
                                if (typeof defaultGPS.lon !== 'undefined') {
                                    defaultLng = parseFloat(defaultGPS.lon);
                                    debugLog("  ‚úÖ Na≈°iel defaultGPS.lon: " + defaultLng);
                                }
                                if (typeof defaultGPS.lng !== 'undefined') {
                                    defaultLng = parseFloat(defaultGPS.lng);
                                    debugLog("  ‚úÖ Na≈°iel defaultGPS.lng: " + defaultLng);
                                }
                                if (typeof defaultGPS.latitude !== 'undefined') {
                                    defaultLat = parseFloat(defaultGPS.latitude);
                                    debugLog("  ‚úÖ Na≈°iel defaultGPS.latitude: " + defaultLat);
                                }
                                if (typeof defaultGPS.longitude !== 'undefined') {
                                    defaultLng = parseFloat(defaultGPS.longitude);
                                    debugLog("  ‚úÖ Na≈°iel defaultGPS.longitude: " + defaultLng);
                                }
                                
                                // Array-like pr√≠stup
                                if (defaultLat === null && defaultLng === null && defaultGPS.length >= 2) {
                                    defaultLat = parseFloat(defaultGPS[0]);
                                    defaultLng = parseFloat(defaultGPS[1]);
                                    debugLog("  üìä Array pr√≠stup - [0]: " + defaultLat + ", [1]: " + defaultLng);
                                }
                                
                                if (defaultLat !== null && defaultLng !== null && !isNaN(defaultLat) && !isNaN(defaultLng)) {
                                    if (defaultLat >= -90 && defaultLat <= 90 && defaultLng >= -180 && defaultLng <= 180) {
                                        debugLog("  ‚úÖ GPS s√∫radnice √∫spe≈°ne validovan√©: " + defaultLat + "¬∞, " + defaultLng + "¬∞");
                                        defaultLocationParsed = true;
                                    } else {
                                        errorLog("GPS s√∫radnice mimo platn√©ho rozsahu - Lat: " + defaultLat + " (rozsah: -90 a≈æ 90), Lng: " + defaultLng + " (rozsah: -180 a≈æ 180)", "calculateDistance");
                                    }
                                } else {
                                    errorLog("Neplatn√© ƒç√≠seln√© hodnoty GPS s√∫radn√≠c - Lat: " + defaultLat + ", Lng: " + defaultLng, "calculateDistance");
                                }
                            } else {
                                errorLog("Nerozpoznan√Ω form√°t GPS s√∫radn√≠c: " + typeof defaultGPS, "calculateDistance");
                            }
                            
                            if (defaultLocationParsed) {
                                // Krok 6: Vypoƒç√≠taj vzdialenos≈•
                                debugLog("=== KROK 6: V√ùPOƒåET VZDIALENOSTI ===");
                                debugLog("üìè V√Ωpoƒçet vzdialenosti medzi:");
                                debugLog("  üè† " + entryName + " (" + defaultLat + "¬∞, " + defaultLng + "¬∞)");
                                debugLog("  üìç Aktu√°lne miesto (" + currentLat + "¬∞, " + currentLng + "¬∞)");
                                
                                var preciseDistance = calculateHaversineDistance(
                                    defaultLat, defaultLng,
                                    currentLat, currentLng
                                );
                                
                                // Zaokr√∫hli na jednotky hore
                                var roundedDistance = Math.ceil(preciseDistance);
                                debugLog("  üéØ Presn√° vzdialenos≈•: " + preciseDistance.toFixed(3) + " km");
                                debugLog("  üìä Zaokr√∫hlen√° vzdialenos≈• (Math.ceil): " + roundedDistance + " km");
                                
                                // Krok 7: Ulo≈æ v√Ωsledok
                                debugLog("=== KROK 7: ULO≈ΩENIE V√ùSLEDKU ===");
                                try {
                                    currentEntry.set(CONFIG.distanceFieldName, roundedDistance);
                                    debugLog("‚úÖ Vzdialenos≈• ulo≈æen√° do poƒæa '" + CONFIG.distanceFieldName + "': " + roundedDistance + " km");
                                    
                                    debugLog("=== DOKONƒåEN√â ===");
                                    debugLog("üéâ V√Ωpoƒçet vzdialenosti √∫spe≈°ne dokonƒçen√Ω");
                                    
                                    writeDebugToField();
                                    
                                    // Zostavy √∫spe≈°n√∫ spr√°vu
                                    var messageText = "‚úÖ √öSPECH!\n\n";
                                    messageText += "üìè Vzdialenos≈•: " + roundedDistance + " km\n";
                                    messageText += "üéØ Presne: " + preciseDistance.toFixed(2) + " km (zaokr√∫hlen√© hore)\n\n";
                                    messageText += "üó∫Ô∏è Trasa:\n";
                                    messageText += "üè† Od: " + entryName + "\n";
                                    messageText += "üìç Do: Aktu√°lne miesto\n\n";
                                    messageText += "üßÆ Met√≥da: Haversine formula (orthodromick√° vzdialenos≈•)\n";
                                    messageText += "üåç Polomer Zeme: " + CONFIG.earthRadiusKm + " km";
                                    
                                    if (!CONFIG.debug) {
                                        messageText += "\n\nüí° Pre debug info nastavte view = 'Debug'";
                                    }
                                    
                                    message(messageText);
                                    
                                } catch (error) {
                                    errorLog("Chyba pri ulo≈æen√≠ do poƒæa '" + CONFIG.distanceFieldName + "': " + error.toString(), "calculateDistance");
                                    writeDebugToField();
                                    message("‚ùå CHYBA: Nepodarilo sa ulo≈æi≈• v√Ωsledok!\n\nSkontrolujte pole '" + CONFIG.distanceFieldName + "' v kni≈ænici");
                                }
                            } else {
                                writeDebugToField();
                                message("‚ùå CHYBA: Neplatn√© GPS s√∫radnice v√Ωchodzej adresy!\n\nSkontrolujte form√°t GPS s√∫radn√≠c v z√°zname '" + entryName + "'");
                            }
                        } else {
                            errorLog("V√Ωchodzia adresa nem√° GPS s√∫radnice v poli '" + CONFIG.gpsFieldName + "'", "calculateDistance");
                            writeDebugToField();
                            message("‚ùå CHYBA: V√Ωchodzia adresa nem√° GPS s√∫radnice!\n\nV z√°zname '" + entryName + "' nastavte pole '" + CONFIG.gpsFieldName + "'");
                        }
                    } else {
                        errorLog("Pole '" + CONFIG.addressFieldName + "' je pr√°zdne alebo neexistuje", "calculateDistance");
                        writeDebugToField();
                        message("‚ùå CHYBA: V√Ωchodzia adresa nie je nastaven√°!\n\nV kni≈ænici '" + CONFIG.defaultsLibraryName + "' nastavte pole '" + CONFIG.addressFieldName + "'");
                    }
                } else {
                    errorLog("Kni≈ænica '" + CONFIG.defaultsLibraryName + "' neobsahuje ≈æiadne z√°znamy", "calculateDistance");
                    writeDebugToField();
                    message("‚ùå CHYBA: Kni≈ænica '" + CONFIG.defaultsLibraryName + "' je pr√°zdna!\n\nPridajte aspo≈à jeden z√°znam s v√Ωchodzou adresou");
                }
            } else {
                errorLog("Kni≈ænica '" + CONFIG.defaultsLibraryName + "' nebola n√°jden√°", "calculateDistance");
                writeDebugToField();
                message("‚ùå CHYBA: Kni≈ænica '" + CONFIG.defaultsLibraryName + "' neexistuje!\n\nSkontrolujte n√°zov kni≈ænice");
            }
        } else {
            writeDebugToField();
            message("‚ùå CHYBA: Neplatn√© GPS s√∫radnice aktu√°lneho z√°znamu!\n\nSkontrolujte form√°t GPS s√∫radn√≠c");
        }
    } else {
        errorLog("Aktu√°lny z√°znam nem√° GPS s√∫radnice v poli '" + CONFIG.gpsFieldName + "'", "calculateDistance");
        writeDebugToField();
        message("‚ùå CHYBA: Aktu√°lny z√°znam nem√° GPS s√∫radnice!\n\nSkontrolujte pole '" + CONFIG.gpsFieldName + "'");
    }
}

// ==============================================
// SPUSTENIE
// ==============================================

debugLog("üöÄ SP√ö≈†≈§AM V√ùPOƒåET VZDIALENOSTI");
debugLog("View re≈æim: " + viewMode + " (debug " + (CONFIG.debug ? "ZAPNUT√ù" : "VYPNUT√ù") + ")");

try {
    calculateDistance();
} catch (error) {
    errorLog("KRITICK√Å CHYBA v hlavnom programe: " + error.toString(), "main");
    writeDebugToField();
    message("‚ùå KRITICK√Å CHYBA: " + error + "\n\nPozrite Error_Log pre detaily");
}