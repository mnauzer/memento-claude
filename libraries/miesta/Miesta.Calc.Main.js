// ==============================================
// MEMENTO DATABASE - MIESTA PREPOƒåET
// Verzia: 2.1.0 | D√°tum: okt√≥ber 2025 | Autor: ASISTANTO
// Kni≈ænica: Miesta | Trigger: Before Save
// ==============================================
// ‚úÖ REFAKTOROVAN√â v2.1:
//    - OPRAVEN√â: Spr√°vne volanie utils.extractGPSFromPlace(entry)
//    - OPRAVEN√â: calculateSegment vracia objekt {success, km, duration, metoda}
//    - Odstr√°nen√° duplicitn√° lok√°lna funkcia extractGPSCoordinates
//    - Pou≈æ√≠va sa konzistentne MementoGPS.extractGPSFromPlace pre obe miesta
// ‚úÖ REFAKTOROVAN√â v2.0:
//    - Integr√°cia s MementoGPS pre v√Ωpoƒçet vzdialenosti
//    - Pou≈æitie MementoUtils a MementoConfig
//    - Automatick√© vyplnenie poƒæa N√°zov vo form√°te "Nick (Lokalita)"
//    - Nick sa z√≠skava z linknut√©ho z√°znamu podƒæa kateg√≥rie
//    - Lokalita sa z√≠skava z poƒæa Lokalita
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var gps = MementoGPS;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Miesta Prepoƒçet",
    version: "2.1.0",

    // Referencie na centr√°lny config
    fields: {
        place: centralConfig.fields.place,
        common: centralConfig.fields.common,
        client: centralConfig.fields.client,
        supplier: centralConfig.fields.supplier,
        partner: centralConfig.fields.partner,
        employee: centralConfig.fields.employee
    },
    libraries: centralConfig.libraries,
    icons: centralConfig.icons
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.clearLogs(currentEntry, true);

        // Krok 1: Vypoƒç√≠taj vzdialenos≈• od v√Ωchodzej adresy
        utils.addDebug(currentEntry, utils.getIcon("calculation") + " KROK 1: V√Ωpoƒçet vzdialenosti");
        var distanceResult = calculateDistance();

        // Krok 2: Vygeneruj a nastav pole N√°zov
        utils.addDebug(currentEntry, utils.getIcon("note") + " KROK 2: Generovanie n√°zvu");
        var nameResult = generateName();

        utils.addDebug(currentEntry, utils.getIcon("success") + " === PREPOƒåET DOKONƒåEN√ù ===");

        // Zhrnutie
        var summary = "";
        if (distanceResult.success) {
            summary += "‚úÖ Vzdialenos≈•: " + distanceResult.distance + " km\n";
        }
        if (nameResult.success) {
            summary += "‚úÖ N√°zov: " + nameResult.name + "\n";
        }

        if (summary) {
            message(summary);
        }

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message("‚ùå Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// V√ùPOƒåET VZDIALENOSTI
// ==============================================

function calculateDistance() {
    var result = {
        success: false,
        distance: 0
    };

    try {
        // Extrahuj GPS s√∫radnice aktu√°lneho miesta pomocou MementoGPS
        utils.addDebug(currentEntry, "  üìç Extrakcia GPS aktu√°lneho miesta...");
        var currentCoords = utils.extractGPSFromPlace(currentEntry);

        if (!currentCoords) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Miesto nem√° GPS s√∫radnice - preskakujem v√Ωpoƒçet vzdialenosti");
            return result;
        }

        // Z√≠skaj v√Ωchodziu adresu z ASISTANTO Defaults
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Kni≈ænica ASISTANTO Defaults nen√°jden√°");
            return result;
        }

        var defaultEntry = defaultsLib.lastEntry();
        if (!defaultEntry) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è ASISTANTO Defaults neobsahuje z√°znamy");
            return result;
        }

        // Z√≠skaj link na v√Ωchodziu adresu
        var defaultAddressField = "V√Ωchodzia ≈°tart adresa";
        var defaultAddress = utils.safeGetLinks(defaultEntry, defaultAddressField);

        if (!defaultAddress || defaultAddress.length === 0) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è V√Ωchodzia adresa nie je nastaven√°");
            return result;
        }

        var defaultPlace = defaultAddress[0];
        var defaultPlaceName = utils.safeGet(defaultPlace, CONFIG.fields.place.name, "V√Ωchodzia adresa");
        utils.addDebug(currentEntry, "  üè† V√Ωchodzia adresa: " + defaultPlaceName);

        // Extrahuj GPS s√∫radnice v√Ωchodzej adresy pomocou MementoGPS
        var defaultCoords = utils.extractGPSFromPlace(defaultPlace);
        if (!defaultCoords) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa extrahova≈• GPS s√∫radnice v√Ωchodzej adresy");
            return result;
        }

        // Vypoƒç√≠taj vzdialenos≈• pomocou MementoGPS
        utils.addDebug(currentEntry, "  üßÆ V√Ωpoƒçet vzdialenosti...");
        var distanceResult = utils.calculateSegment(defaultCoords, currentCoords, "Vzdialenos≈• miesta");

        if (!distanceResult.success) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nepodarilo sa vypoƒç√≠ta≈• vzdialenos≈•");
            return result;
        }

        var distance = distanceResult.km;
        var method = distanceResult.metoda || "N/A";

        // Zaokr√∫hli na cel√© ƒç√≠slo hore
        var roundedDistance = Math.ceil(distance);

        utils.addDebug(currentEntry, "  ‚úÖ Vzdialenos≈•: " + distance.toFixed(2) + " km (zaokr√∫hlen√©: " + roundedDistance + " km)");
        utils.addDebug(currentEntry, "  üìä Met√≥da: " + method);

        // Ulo≈æ vzdialenos≈•
        utils.safeSet(currentEntry, CONFIG.fields.place.distance, roundedDistance);

        result.success = true;
        result.distance = roundedDistance;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri v√Ωpoƒçte vzdialenosti: " + error.toString(), "calculateDistance", error);
    }

    return result;
}

// ==============================================
// GENEROVANIE N√ÅZVU
// ==============================================

function generateName() {
    var result = {
        success: false,
        name: ""
    };

    try {
        // Z√≠skaj kateg√≥riu
        var category = utils.safeGet(currentEntry, CONFIG.fields.place.category);
        if (!category) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Kateg√≥ria nie je nastaven√° - preskakujem generovanie n√°zvu");
            return result;
        }

        utils.addDebug(currentEntry, "  üìã Kateg√≥ria: " + category);

        // Z√≠skaj Nick z pr√≠slu≈°n√©ho linku podƒæa kateg√≥rie
        var nick = "";
        var linkFieldName = "";

        switch (category) {
            case "Klient":
                linkFieldName = CONFIG.fields.place.customer;
                var customers = utils.safeGetLinks(currentEntry, linkFieldName);
                if (customers && customers.length > 0) {
                    nick = utils.safeGet(customers[0], CONFIG.fields.client.nick, "");
                }
                break;

            case "Dod√°vateƒæ":
                linkFieldName = CONFIG.fields.place.supplier;
                var suppliers = utils.safeGetLinks(currentEntry, linkFieldName);
                if (suppliers && suppliers.length > 0) {
                    nick = utils.safeGet(suppliers[0], CONFIG.fields.supplier.nick, "");
                }
                break;

            case "Partner":
                linkFieldName = CONFIG.fields.place.partner;
                var partners = utils.safeGetLinks(currentEntry, linkFieldName);
                if (partners && partners.length > 0) {
                    nick = utils.safeGet(partners[0], CONFIG.fields.partner.nick, "");
                }
                break;

            case "Zamestnanec":
                linkFieldName = CONFIG.fields.place.employee;
                var employees = utils.safeGetLinks(currentEntry, linkFieldName);
                if (employees && employees.length > 0) {
                    nick = utils.safeGet(employees[0], CONFIG.fields.employee.nick, "");
                }
                break;

            default:
                utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nezn√°ma kateg√≥ria: " + category);
                return result;
        }

        if (!nick) {
            utils.addDebug(currentEntry, "  ‚ö†Ô∏è Nick nen√°jden√Ω v linknutom z√°zname");
            return result;
        }

        utils.addDebug(currentEntry, "  ‚úÖ Nick: " + nick);

        // Z√≠skaj Lokalitu
        var locality = utils.safeGet(currentEntry, CONFIG.fields.place.locality, "").trim();
        if (!locality) {
            utils.addDebug(currentEntry, "  ‚ÑπÔ∏è Lokalita nie je vyplnen√°");
            // N√°zov bude len Nick
            result.name = nick;
        } else {
            utils.addDebug(currentEntry, "  ‚úÖ Lokalita: " + locality);
            // N√°zov bude Nick (Lokalita)
            result.name = nick + " (" + locality + ")";
        }

        // Ulo≈æ n√°zov
        utils.safeSet(currentEntry, CONFIG.fields.place.name, result.name);
        utils.addDebug(currentEntry, "  ‚úÖ N√°zov nastaven√Ω: " + result.name);

        result.success = true;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri generovan√≠ n√°zvu: " + error.toString(), "generateName", error);
    }

    return result;
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

// Extrakcia GPS sa rie≈°i cez utils.extractGPSFromPlace(entry)
// z MementoGPS modulu

// ==============================================
// SPUSTENIE
// ==============================================

main();
