// ==============================================
// AUTO-LINKOVANIE Z√ÅKAZIEK - S ATRIB√öTMI
// ==============================================
// Rie≈°enie:
// 1. Pou≈æ√≠vaj ƒå√≠slo z√°kazky namiesto N√°zvu (jedineƒçnos≈•)
// 2. Nalinkuj spr√°vne z√°kazky do Link to Entry poƒæa
// 3. Nastav atrib√∫ty pomocou entry().setAttr("poƒçet", array)
// 4. Poƒçet v√Ωskytov do atrib√∫tov linknut√Ωch z√°kaziek
// ==============================================

// Konfigur√°cia
var CONFIG = {
    debug: true,
    debugFieldName: "Debug_Log",
    errorFieldName: "Error_Log",
    
    // N√°zvy kni≈æn√≠c
    zakazkyLibrary: "Z√°kazky",
    
    // N√°zvy pol√≠ - Kniha j√°zd
    fields: {
        zastavky: "Zast√°vky",
        zakazky: "Z√°kazky",
        datum: "D√°tum"
    },
    
    // N√°zvy pol√≠ - Miesta
    miestalFields: {
        nazov: "N√°zov",
        jeZakazka: "Z√°kazka"  // Checkbox pole
    },
    
    // N√°zvy pol√≠ - Z√°kazky
    zakazkyFields: {
        cislo: "ƒå√≠slo",      // KƒΩ√öƒåOV√â - pou≈æi≈• namiesto n√°zvu
        nazov: "N√°zov",
        miesto: "Miesto",
        stav: "Stav",
        datum: "D√°tum"
    }
};

// Glob√°lne premenn√©
var debugLog = [];
var errorLog = [];

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("HH:mm:ss");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("HH:mm:ss");
    var prefix = location ? "[" + location + "] " : "";
    errorLog.push("[" + timestamp + "] ‚ùå " + prefix + message);
}

function saveLogs() {
    var currentEntry = entry();
    
    try {
        currentEntry.set(CONFIG.debugFieldName, debugLog.join("\n"));
        currentEntry.set(CONFIG.errorFieldName, errorLog.join("\n"));
    } catch (e) {
        // Ignoruj chyby ukladania logov
    }
}

function getNazovMiesta(miestoEntry) {
    if (!miestoEntry) return "null miesto";
    
    try {
        var nazov = miestoEntry.field(CONFIG.miestalFields.nazov);
        return nazov || "Bez n√°zvu";
    } catch (error) {
        return "Chyba n√°zvu";
    }
}

function getZakazkaInfo(zakazkaEntry) {
    if (!zakazkaEntry) return { cislo: null, nazov: "null z√°kazka", display: "null z√°kazka" };
    
    var cislo = null;
    var nazov = "Bez n√°zvu";
    
    try {
        cislo = zakazkaEntry.field(CONFIG.zakazkyFields.cislo);
    } catch (cisloError) {
        // Ignoruj chybu - mo≈æno pole neexistuje
    }
    
    try {
        var tempNazov = zakazkaEntry.field(CONFIG.zakazkyFields.nazov);
        if (tempNazov) {
            nazov = tempNazov;
        }
    } catch (nazovError) {
        // Ignoruj chybu
    }
    
    var display = cislo ? "#" + cislo + " " + nazov : nazov;
    
    return {
        cislo: cislo,
        nazov: nazov,
        display: display
    };
}

function najdiNajnovsieZakazku(zakazky, datumZaznamu) {
    if (!zakazky || zakazky.length === 0) {
        return null;
    }
    
    if (zakazky.length === 1) {
        return zakazky[0];
    }
    
    // Ak je viac z√°kaziek, vyber najnov≈°iu platn√° k d√°tumu
    var najlepsiaZakazka = null;
    var najnovsiDatum = null;
    
    for (var i = 0; i < zakazky.length; i++) {
        var zakazka = zakazky[i];
        if (!zakazka) continue;
        
        try {
            var datumZakazky = zakazka.field(CONFIG.zakazkyFields.datum);
            
            // Kontrola platnosti k d√°tumu
            var jePlatna = false;
            if (!datumZakazky) {
                jePlatna = true; // Z√°kazky bez d√°tumu s√∫ v≈ædy platn√©
            } else if (!datumZaznamu) {
                jePlatna = true; // Ak z√°znam nem√° d√°tum, akceptuj v≈°etky
            } else {
                jePlatna = (datumZakazky <= datumZaznamu);
            }
            
            if (jePlatna) {
                if (!najlepsiaZakazka || 
                    (datumZakazky && (!najnovsiDatum || datumZakazky > najnovsiDatum))) {
                    najlepsiaZakazka = zakazka;
                    najnovsiDatum = datumZakazky;
                }
            }
        } catch (error) {
            // Ignoruj chybn√© z√°kazky
        }
    }
    
    return najlepsiaZakazka || zakazky[0]; // Fallback na prv√∫ z√°kazku
}

// Hlavn√° funkcia
function hlavnaFunkcia() {
    addDebug("üöÄ === ≈†TART AUTO-LINKOVANIE Z√ÅKAZIEK (S ATRIB√öTMI) ===");
    
    var currentEntry = entry();
    
    // Vyma≈æ predch√°dzaj√∫ce logy
    currentEntry.set(CONFIG.debugFieldName, "");
    currentEntry.set(CONFIG.errorFieldName, "");
    addDebug("üßπ Vymazan√© predch√°dzaj√∫ce logy");
    
    // Z√≠skaj d√°tum z√°znamu
    var datumZaznamu = null;
    try {
        datumZaznamu = currentEntry.field(CONFIG.fields.datum);
        addDebug("üìÖ D√°tum z√°znamu: " + (datumZaznamu ? moment(datumZaznamu).format("DD.MM.YYYY") : "NEVYPLNEN√ù"));
    } catch (datumError) {
        addError("Chyba pri z√≠skavan√≠ d√°tumu: " + datumError.toString(), "datum");
    }
    
    // Z√≠skaj zast√°vky
    var zastavky = null;
    try {
        zastavky = currentEntry.field(CONFIG.fields.zastavky);
        addDebug("üìç Zast√°vok: " + (zastavky ? zastavky.length : 0));
    } catch (zastavkyError) {
        addError("Chyba pri z√≠skavan√≠ zast√°vok: " + zastavkyError.toString(), "zastavky");
    }
    
    if (!zastavky || zastavky.length === 0) {
        addDebug("‚ö†Ô∏è ≈Ωiadne zast√°vky - ukonƒçujem");
        saveLogs();
        message("‚ÑπÔ∏è ≈Ωiadne zast√°vky na spracovanie");
        return;
    }
    
    // KROK 1: Spoƒç√≠taj z√°kazky podƒæa ID/ƒç√≠sla
    addDebug("\nüî¢ === POƒå√çTANIE Z√ÅKAZIEK (POU≈ΩITIE ƒå√çSLA) ===");
    
    var countZakaziek = {}; // cislo_zakazky ‚Üí poƒçet v√Ωskytov
    var unikatneZakazky = {}; // cislo_zakazky ‚Üí z√°kazka object (len prv√Ω v√Ωskyt)
    var zastavokSoZakazkou = 0;
    var najdeneZakazky = 0;
    
    for (var i = 0; i < zastavky.length; i++) {
        var zastavka = zastavky[i];
        addDebug("\n--- Zast√°vka " + (i + 1) + " ---");
        
        if (!zastavka) {
            addDebug("  ‚ùå Zast√°vka je null");
            continue;
        }
        
        var nazovMiesta = getNazovMiesta(zastavka);
        addDebug("  üìç Miesto: " + nazovMiesta);
        
        // Kontrola checkbox "Z√°kazka"
        var jeZakazka = false;
        try {
            var checkboxValue = zastavka.field(CONFIG.miestalFields.jeZakazka);
            jeZakazka = (checkboxValue === true);
            addDebug("  üîç Checkbox 'Z√°kazka': " + (jeZakazka ? "‚úÖ TRUE" : "‚ùå FALSE"));
        } catch (checkboxError) {
            addError("Chyba pri ƒç√≠tan√≠ checkbox: " + checkboxError.toString(), "checkbox_" + i);
            addDebug("  ‚ö†Ô∏è Chyba checkbox - pova≈æujem za FALSE");
        }
        
        if (!jeZakazka) {
            addDebug("  ‚è≠Ô∏è PRESKAKUJEM - nie je z√°kazka");
            continue;
        }
        
        zastavokSoZakazkou++;
        
        // N√°jdi z√°kazky pre toto miesto
        var zakazky = null;
        try {
            zakazky = zastavka.linksFrom(CONFIG.zakazkyLibrary, CONFIG.zakazkyFields.miesto);
            addDebug("  üîó LinksFrom na≈°iel: " + (zakazky ? zakazky.length : 0) + " z√°kaziek");
        } catch (linksFromError) {
            addError("LinksFrom zlyhalo: " + linksFromError.toString(), "linksFrom_" + i);
            addDebug("  ‚ùå LinksFrom zlyhalo");
            continue;
        }
        
        if (!zakazky || zakazky.length === 0) {
            addDebug("  ‚ùå ≈Ωiadne z√°kazky nen√°jden√©");
            continue;
        }
        
        // Vyber najlep≈°iu z√°kazku
        var vybranaZakazka = najdiNajnovsieZakazku(zakazky, datumZaznamu);
        
        if (!vybranaZakazka) {
            addDebug("  ‚ùå Nepodarilo sa vybra≈• z√°kazku");
            continue;
        }
        
        najdeneZakazky++;
        var zakazkaInfo = getZakazkaInfo(vybranaZakazka);
        addDebug("  ‚úÖ Vybran√° z√°kazka: " + zakazkaInfo.display);
        
        // Spoƒç√≠taj v√Ωskyt podƒæa ƒç√≠sla (alebo n√°zvu ako fallback)
        var identifikator = zakazkaInfo.cislo ? zakazkaInfo.cislo.toString() : zakazkaInfo.nazov;
        
        if (countZakaziek[identifikator]) {
            countZakaziek[identifikator]++;
            addDebug("    üìä Zv√Ω≈°en√Ω count na: " + countZakaziek[identifikator]);
        } else {
            countZakaziek[identifikator] = 1;
            unikatneZakazky[identifikator] = vybranaZakazka;
            addDebug("    ‚ûï Nov√° z√°kazka (count: 1)");
        }
        
        // Debug info o identifik√°tore
        if (zakazkaInfo.cislo) {
            addDebug("    üÜî Identifik√°tor: ƒå√≠slo #" + zakazkaInfo.cislo);
        } else {
            addDebug("    üÜî Identifik√°tor: N√°zov '" + zakazkaInfo.nazov + "' (ƒç√≠slo ch√Ωba)");
        }
    }
    
    // KROK 2: V√Ωsledky poƒç√≠tania
    addDebug("\nüìä === V√ùSLEDKY POƒå√çTANIA ===");
    addDebug("  üèÅ Spracovan√Ωch zast√°vok: " + zastavky.length);
    addDebug("  üéØ Zast√°vok oznaƒçen√Ωch ako z√°kazka: " + zastavokSoZakazkou);
    addDebug("  üíº √öspe≈°ne n√°jden√Ωch z√°kaziek: " + najdeneZakazky);
    
    var zakazkyArray = [];
    var celkovyCount = 0;
    
    for (var identifikator in unikatneZakazky) {
        var zakazka = unikatneZakazky[identifikator];
        var pocet = countZakaziek[identifikator];
        var info = getZakazkaInfo(zakazka);
        
        zakazkyArray.push(zakazka);
        celkovyCount += pocet;
        
        addDebug("  üìã " + info.display + ": " + pocet + "x (ID: " + identifikator + ")");
    }
    
    addDebug("üéØ Unik√°tnych z√°kaziek: " + zakazkyArray.length);
    addDebug("üéØ Celkov√Ω count: " + celkovyCount);
    
    if (zakazkyArray.length === 0) {
        addDebug("‚ö†Ô∏è ≈Ωiadne z√°kazky na linkovanie");
        saveLogs();
        message("‚ÑπÔ∏è ≈Ωiadne z√°kazky nen√°jden√©");
        return;
    }
    
    // KROK 3: Nastavenie Link to Entry poƒæa + ATRIB√öTY
    addDebug("\nüíæ === NASTAVENIE LINKOV + ATRIB√öTY ===");
    
    try {
        // Nastav Link to Entry pole
        currentEntry.set(CONFIG.fields.zakazky, zakazkyArray);
        addDebug("‚úÖ Link to Entry pole nastaven√© (" + zakazkyArray.length + " z√°kaziek)");
        
        // KROK 3.1: Nastavenie atrib√∫tov pomocou spr√°vnej syntax Link to Entry
        addDebug("\nüî¢ === NASTAVENIE ATRIB√öTOV ===");
        addDebug("Syntax: entry().field(\"Z√°kazky\")[index].setAttr(\"poƒçet\", value)");
        
        var atributUspechy = 0;
        var atributChyby = 0;
        
        // Znovu naƒç√≠taj Link to Entry pole po nastaven√≠
        var linknuteZakazky = null;
        try {
            linknuteZakazky = currentEntry.field(CONFIG.fields.zakazky);
            addDebug("üîó Znovu naƒç√≠tan√© Link to Entry pole: " + (linknuteZakazky ? linknuteZakazky.length : 0) + " z√°kaziek");
        } catch (reloadError) {
            addError("Chyba pri znovu naƒç√≠tan√≠ poƒæa: " + reloadError.toString(), "reload");
        }
        
        if (linknuteZakazky && linknuteZakazky.length > 0) {
            for (var j = 0; j < linknuteZakazky.length; j++) {
                var zakazkaObj = linknuteZakazky[j];
                var zakazkaInfo = getZakazkaInfo(zakazkaObj);
                var identifikator = zakazkaInfo.cislo ? zakazkaInfo.cislo.toString() : zakazkaInfo.nazov;
                var pocet = countZakaziek[identifikator];
                
                addDebug("  üìù Index " + j + ": " + zakazkaInfo.display + " ‚Üí poƒçet = " + pocet);
                
                // VARIANT 1: Cez entry().field()[index].setAttr()
                try {
                    addDebug("    üéØ API: entry().field(\"Z√°kazky\")[" + j + "].setAttr(\"poƒçet\", " + pocet + ")");
                    currentEntry.field(CONFIG.fields.zakazky)[j].setAttr("poƒçet", pocet);
                    addDebug("    ‚úÖ VARIANT 1 √öSPE≈†N√â!");
                    atributUspechy++;
                } catch (attr1Error) {
                    addDebug("    ‚ùå VARIANT 1 ZLYHALO: " + attr1Error.toString());
                    
                    // VARIANT 2: Priamo na objekte
                    try {
                        addDebug("    üîÑ VARIANT 2: zakazkaObj.setAttr(\"poƒçet\", " + pocet + ")");
                        zakazkaObj.setAttr("poƒçet", pocet);
                        addDebug("    ‚úÖ VARIANT 2 √öSPE≈†N√â!");
                        atributUspechy++;
                    } catch (attr2Error) {
                        addDebug("    ‚ùå VARIANT 2 ZLYHALO: " + attr2Error.toString());
                        atributChyby++;
                    }
                }
            }
        } else {
            addError("Linknut√© z√°kazky nie s√∫ dostupn√© pre atrib√∫ty", "attributes_no_links");
            atributChyby = zakazkyArray.length;
        }
        
        addDebug("üìä Atrib√∫ty v√Ωsledky: " + atributUspechy + " √∫spe≈°n√Ωch, " + atributChyby + " ch√Ωb");
        
        // Overenie atrib√∫tov
        if (atributUspechy > 0) {
            addDebug("\nüîç === OVERENIE ATRIB√öTOV ===");
            
            // VARIANT 1: Cez entry().field()[index].getAttr()
            for (var k = 0; k < Math.min(zakazkyArray.length, 3); k++) {
                var zakazkaInfoTest = getZakazkaInfo(zakazkyArray[k]);
                
                try {
                    addDebug("  üîç Test " + (k + 1) + ": " + zakazkaInfoTest.display);
                    
                    // Test cez entry().field()[index].getAttr()
                    var testPocet1 = currentEntry.field(CONFIG.fields.zakazky)[k].getAttr("poƒçet");
                    if (testPocet1 !== null && testPocet1 !== undefined) {
                        addDebug("    ‚úÖ entry().field()[" + k + "].getAttr(): poƒçet = " + testPocet1);
                    } else {
                        addDebug("    ‚ùå entry().field()[" + k + "].getAttr(): poƒçet = null");
                    }
                    
                } catch (test1Error) {
                    addDebug("    ‚ö†Ô∏è Test 1 zlyhalo: " + test1Error.toString());
                    
                    // Fallback test priamo na objekte
                    try {
                        var testPocet2 = zakazkyArray[k].getAttr("poƒçet");
                        if (testPocet2 !== null && testPocet2 !== undefined) {
                            addDebug("    ‚úÖ objekt.getAttr(): poƒçet = " + testPocet2);
                        } else {
                            addDebug("    ‚ùå objekt.getAttr(): poƒçet = null");
                        }
                    } catch (test2Error) {
                        addDebug("    ‚ö†Ô∏è Test 2 zlyhalo: " + test2Error.toString());
                    }
                }
            }
        }
        
        saveLogs();
        
        // User notification s detailn√Ωmi inform√°ciami
        var spravovaText = "‚úÖ Z√°kazky √∫spe≈°ne nalinkovan√©!\n";
        spravovaText += "üìã Unik√°tnych z√°kaziek: " + zakazkyArray.length + "\n";
        spravovaText += "üî¢ Celkovo v√Ωskytov: " + celkovyCount + "\n";
        spravovaText += "üéØ Zast√°vok so z√°kazkami: " + zastavokSoZakazkou + "/" + zastavky.length + "\n";
        
        if (atributUspechy > 0) {
            spravovaText += "üíæ Atrib√∫ty 'poƒçet': ‚úÖ NASTAVEN√â";
        } else {
            spravovaText += "üíæ Atrib√∫ty 'poƒçet': ‚ùå PROBL√âM";
        }
        
        // Pridaj zoznam z√°kaziek do spr√°vy ak nie je pr√≠li≈° dlh√Ω
        if (zakazkyArray.length <= 5) {
            spravovaText += "\n\nüìù Linknut√© z√°kazky:";
            for (var msg = 0; msg < zakazkyArray.length; msg++) {
                var zakazka = zakazkyArray[msg];
                var info = getZakazkaInfo(zakazka);
                var identifikator = info.cislo ? info.cislo.toString() : info.nazov;
                var pocet = countZakaziek[identifikator];
                spravovaText += "\n‚Ä¢ " + info.display + " (" + pocet + "x)";
            }
        }
        
        message(spravovaText);
        addDebug("üéâ Auto-linkovanie dokonƒçen√© √∫spe≈°ne");
        
    } catch (setError) {
        addError("Chyba pri nastavovan√≠ linkov: " + setError.toString(), "set");
        saveLogs();
        message("‚ùå Chyba pri nastavovan√≠ z√°kaziek\nPozrite Error_Log");
    }
}

// Spustenie scriptu
addDebug("=== INICIALIZ√ÅCIA AUTO-LINKOVANIE Z√ÅKAZIEK ===");
addDebug("Pr√≠stup: ƒå√≠slo z√°kazky + individu√°lne setAttr");
addDebug("Identifik√°cia: Pole 'ƒå√≠slo' namiesto 'N√°zov'");
addDebug("Atrib√∫ty: zakazkaObj.setAttr(\"poƒçet\", value) pre ka≈æd√∫ z√°kazku");
addDebug("Timestamp: " + moment().format("DD.MM.YY HH:mm:ss"));

try {
    hlavnaFunkcia();
} catch (initError) {
    addError("INIT CHYBA: " + initError.toString(), "init");
    message("‚ùå KRITICK√Å CHYBA! Pozrite Error_Log.");
} finally {
    saveLogs();
}