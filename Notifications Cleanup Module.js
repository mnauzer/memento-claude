// ==============================================
// DOCH√ÅDZKA NOTIFICATION CLEANUP MODULE
// Verzia: 1.0 | D√°tum: 20.08.2025 | Autor: ASISTANTO
// ==============================================
// üìã FUNKCIA:
//    - Modul pre spr√°vu notifik√°ci√≠ v doch√°dzke
//    - Vymaz√°vanie star√Ωch notifik√°ci√≠ pri √∫prave
//    - Integr√°cia s Telegram Delete API
//    - Prepojenie cez pole "Notifik√°cie"
// ==============================================

var DochadzkaNotifsCleanup = (function() {
    'use strict';
    
    // Import kni≈æn√≠c
    var utils = null;
    var notifHelper = null;
    var telegramApi = null;
    
    /**
     * Z√≠ska MementoUtils s lazy loading
     */
    function getUtils() {
        if (!utils) {
            try {
                if (typeof MementoUtils !== 'undefined') {
                    utils = MementoUtils;
                } else {
                    throw new Error("MementoUtils kni≈ænica nie je dostupn√°!");
                }
            } catch(e) {
                showError("MementoUtils nie je naƒç√≠tan√©. Script nem√¥≈æe pokraƒçova≈•.", e);
                cancel();
            }
        }
        return utils;
    }

    /**
     * Z√≠ska ASISTANTONotifications helper
     */
    function getNotifHelper() {
        if (!notifHelper) {
            try {
                if (typeof ASISTANTONotifications !== 'undefined') {
                    notifHelper = ASISTANTONotifications;
                } else {
                    getUtils().addDebug(getCurrentEntry(), "‚ö†Ô∏è ASISTANTONotifications nie je dostupn√Ω");
                }
            } catch(e) {
                // Optional dependency
            }
        }
        return notifHelper;
    }
    
    /**
     * Z√≠ska ASISTANTONotifications helper
     */
    function getTelegramApi() {
        if (!telegramApi) {
            try {
                if (typeof ASISTANTOTelegram !== 'undefined') {
                    telegramApi = ASISTANTOTelegram;
                } else {
                    getUtils().addDebug(getCurrentEntry(), "‚ö†Ô∏è ASISTANTOTelegram nie je dostupn√Ω");
                }
            } catch(e) {
                // Optional dependency
            }
        }
        return telegramApi;
    }

    var CONFIG = {
        version: "1.0",
        fields: {
            notifikacie: "Notifik√°cie", // Nov√© pole v Doch√°dzke
            messageId: "Message ID",
            chatId: "Chat ID",
            status: "Status"
        }
    };
    
    /**
     * Vyma≈æe v≈°etky linknut√© notifik√°cie z doch√°dzky
     * @param {Entry} dochadzkaEntry - Z√°znam doch√°dzky
     * @returns {Object} - V√Ωsledok cleanup oper√°cie
     */
    function cleanupOldNotifications(dochadzkaEntry) {
        var result = {
            deleted: 0,
            telegramDeleted: 0,
            errors: [],
            success: true
        };
        
        try {
            utils.addDebug(dochadzkaEntry, "üßπ === CLEANUP NOTIFIK√ÅCI√ç ===");
            
            // Z√≠skaj linknut√© notifik√°cie
            var linkedNotifications = utils.safeGetLinks(dochadzkaEntry, CONFIG.fields.notifikacie);
            
            if (!linkedNotifications || linkedNotifications.length === 0) {
                utils.addDebug(dochadzkaEntry, "‚ÑπÔ∏è ≈Ωiadne linknut√© notifik√°cie na vymazanie");
                return result;
            }
            
            utils.addDebug(dochadzkaEntry, "üìã Na≈°iel som " + linkedNotifications.length + " notifik√°ci√≠ na vymazanie");
            
            // Spracuj ka≈æd√∫ notifik√°ciu
            for (var i = 0; i < linkedNotifications.length; i++) {
                var notif = linkedNotifications[i];
                var notifId = notif.field("ID");
                
                try {
                    // 1. Pok√∫s sa vymaza≈• Telegram spr√°vu
                    var telegramResult = deleteTelegramMessage(notif);
                    if (telegramResult.success) {
                        result.telegramDeleted++;
                    }
                    
                    // 2. Vyma≈æ notifik√°ciu z Memento
                    notif.remove();
                    result.deleted++;
                    
                    utils.addDebug(dochadzkaEntry, "‚úÖ Notifik√°cia #" + notifId + " vymazan√°");
                    
                } catch (error) {
                    result.errors.push("Notifik√°cia #" + notifId + ": " + error.toString());
                    utils.addError(dochadzkaEntry, "Chyba pri mazan√≠ notifik√°cie #" + notifId + ": " + error.toString());
                }
            }
            
            // 3. Vyƒçisti pole Notifik√°cie v doch√°dzke
            dochadzkaEntry.set(CONFIG.fields.notifikacie, []);
            
            utils.addDebug(dochadzkaEntry, "üßπ Cleanup dokonƒçen√Ω: " + result.deleted + " vymazan√Ωch, " + 
                          result.telegramDeleted + " Telegram spr√°v");
            
            result.success = result.errors.length === 0;
            return result;
            
        } catch (error) {
            utils.addError(dochadzkaEntry, "Kritick√° chyba v cleanup: " + error.toString());
            result.success = false;
            result.errors.push(error.toString());
            return result;
        }
    }
    
    /**
     * Vyma≈æe Telegram spr√°vu ak existuje
     * @param {Entry} notificationEntry - Notifikaƒçn√Ω z√°znam
     * @returns {Object} - V√Ωsledok mazania
     */
    function deleteTelegramMessage(notificationEntry) {
        try {
            var messageId = notificationEntry.field(CONFIG.fields.messageId);
            var chatId = notificationEntry.field(CONFIG.fields.chatId);
            var status = notificationEntry.field(CONFIG.fields.status);
            
            // Kontrola ƒçi m√° zmysel maza≈•
            if (!messageId || !chatId || status !== "Odoslan√©") {
                return { success: false, reason: "Spr√°va nebola odoslan√° alebo ch√Ωbaj√∫ √∫daje" };
            }
            
            // Pou≈æitie Telegram API na vymazanie
            if (telegramApi && typeof telegramApi.deleteTelegramMessage === 'function') {
                var deleteResult = telegramApi.deleteTelegramMessage(chatId, messageId);
                
                if (deleteResult.success) {
                    utils.addDebug(notificationEntry, "üóëÔ∏è Telegram spr√°va vymazan√°: " + messageId);
                    return { success: true };
                } else {
                    // Telegram API m√¥≈æe vr√°ti≈• chybu ak spr√°va u≈æ neexistuje - to je OK
                    if (deleteResult.error && deleteResult.error.indexOf("message to delete not found") > -1) {
                        return { success: true, note: "Spr√°va u≈æ bola vymazan√°" };
                    }
                    return { success: false, error: deleteResult.error };
                }
            } else {
                // Fallback ak Telegram modul nie je dostupn√Ω
                utils.addDebug(notificationEntry, "‚ö†Ô∏è Telegram API nie je dostupn√© pre mazanie");
                return { success: false, reason: "Telegram API nedostupn√©" };
            }
            
        } catch (error) {
            return { success: false, error: error.toString() + "Line: " + error.lineNumber };
        }
    }
    
    /**
     * Linkuje novo vytvoren√© notifik√°cie k doch√°dzke
     * @param {Entry} dochadzkaEntry - Z√°znam doch√°dzky
     * @param {Array} notifications - Array notifikaƒçn√Ωch z√°znamov
     * @returns {boolean} - √öspe≈°nos≈• linkovania
     */
    function linkNotificationsToDochadzka(dochadzkaEntry, notifications) {
        try {
            if (!notifications || notifications.length === 0) {
                return true; // Niƒç na linkovanie
            }
            
            // Z√≠skaj existuj√∫ce notifik√°cie
            var existingNotifs = dochadzkaEntry.field(CONFIG.fields.notifikacie) || [];
            
            // Pridaj nov√©
            var allNotifs = existingNotifs.concat(notifications);
            
            // Ulo≈æ sp√§≈•
            dochadzkaEntry.set(CONFIG.fields.notifikacie, allNotifs);
            
            utils.addDebug(dochadzkaEntry, "üîó Linknut√Ωch " + notifications.length + " nov√Ωch notifik√°ci√≠");
            
            return true;
            
        } catch (error) {
            utils.addError(dochadzkaEntry, "Chyba pri linkovan√≠ notifik√°ci√≠: " + error.toString() + "Line: " + error.lineNumber, error);
            return false;
        }
    }
    
    // Public API
    return {
        version: CONFIG.version,
        cleanupOldNotifications: cleanupOldNotifications,
        linkNotificationsToDochadzka: linkNotificationsToDochadzka
    };
    
})();