/**
 * TEST SCRIPT - Z√≠skanie ≈°trukt√∫ry kni≈ænice
 *
 * Spustite tento script v Memento Database v ƒæubovoƒænej kni≈ænici
 * Zmenia n√°zov kni≈ænice v CONFIG a script vyp√≠≈°e v≈°etky polia do debug logu
 */

var utils = MementoUtils;
var currentEntry = entry();

var CONFIG = {
    // ZME≈á N√ÅZOV KNI≈ΩNICE KTOR√ö CHCE≈† ANALYZOVA≈§:
    targetLibraryName: "Z√°kazky Diely",

    // Alternat√≠vne n√°zvy ak nejak√Ω nefunguje:
    alternativeNames: [
        "Z√°kazky Diely",
        "z√°kazky diely",
        "Zakazky Diely",
        "Order Parts",
        "Diely z√°kazky"
    ]
};

try {
    utils.clearLogs(currentEntry);
    utils.addDebug(currentEntry, "=== ANAL√ùZA ≈†TRUKT√öRY KNI≈ΩNICE ===");

    var lib = null;
    var usedName = "";

    // Sk√∫s n√°js≈• kni≈ænicu podƒæa r√¥znych n√°zvov
    for (var i = 0; i < CONFIG.alternativeNames.length; i++) {
        try {
            lib = libByName(CONFIG.alternativeNames[i]);
            if (lib) {
                usedName = CONFIG.alternativeNames[i];
                utils.addDebug(currentEntry, "‚úÖ Kni≈ænica n√°jden√°: " + usedName);
                break;
            }
        } catch (e) {
            // Pokraƒçuj s ƒèal≈°√≠m n√°zvom
        }
    }

    if (!lib) {
        utils.addError(currentEntry, "‚ùå Kni≈ænica nen√°jden√°! Sk√∫s zmeni≈• n√°zov v CONFIG.");
        message("‚ùå Kni≈ænica nen√°jden√°!");
        throw new Error("Library not found");
    }

    // Z√≠skaj v≈°etky z√°znamy
    var entries = lib.entries();
    utils.addDebug(currentEntry, "üìä Poƒçet z√°znamov: " + entries.length);

    if (entries.length === 0) {
        utils.addDebug(currentEntry, "‚ö†Ô∏è Kni≈ænica je pr√°zdna - nem√¥≈æem zisti≈• ≈°trukt√∫ru pol√≠");
        utils.addDebug(currentEntry, "   Vytvor aspo≈à 1 testovac√≠ z√°znam v kni≈ænici '" + usedName + "'");
        message("‚ö†Ô∏è Kni≈ænica je pr√°zdna! Vytvor testovac√≠ z√°znam.");
        throw new Error("Library is empty");
    }

    // Vezmi prv√Ω z√°znam ako vzor
    var sampleEntry = entries[0];

    utils.addDebug(currentEntry, "\n=== POLIA KNI≈ΩNICE ===");

    // Z√≠skaj v≈°etky n√°zvy pol√≠
    var fieldNames = [];
    try {
        // Sk√∫s z√≠ska≈• v≈°etky polia cez reflection
        var allFields = sampleEntry.fields();
        for (var f = 0; f < allFields.length; f++) {
            fieldNames.push(allFields[f]);
        }
    } catch (e) {
        utils.addError(currentEntry, "Chyba pri z√≠skavan√≠ pol√≠: " + e.toString());
    }

    utils.addDebug(currentEntry, "üìã Poƒçet pol√≠: " + fieldNames.length);
    utils.addDebug(currentEntry, "");

    // Pre ka≈æd√© pole zisti typ a hodnotu
    for (var fn = 0; fn < fieldNames.length; fn++) {
        var fieldName = fieldNames[fn];
        var fieldValue = null;
        var fieldType = "unknown";

        try {
            fieldValue = sampleEntry.field(fieldName);

            // Zisti typ
            if (fieldValue === null || fieldValue === undefined) {
                fieldType = "null/empty";
            } else if (typeof fieldValue === "string") {
                fieldType = "string/text";
            } else if (typeof fieldValue === "number") {
                fieldType = "number";
            } else if (typeof fieldValue === "boolean") {
                fieldType = "boolean/checkbox";
            } else if (fieldValue instanceof Date) {
                fieldType = "date";
            } else if (Array.isArray(fieldValue)) {
                fieldType = "array/linkToEntry (length: " + fieldValue.length + ")";
            } else if (typeof fieldValue === "object") {
                fieldType = "object/entry";
            }

            // Skr√°ten√° hodnota pre v√Ωpis
            var displayValue = "";
            if (fieldValue === null || fieldValue === undefined) {
                displayValue = "(pr√°zdne)";
            } else if (Array.isArray(fieldValue)) {
                displayValue = "[" + fieldValue.length + " items]";
            } else if (typeof fieldValue === "object") {
                displayValue = "{object}";
            } else {
                displayValue = String(fieldValue).substring(0, 50);
            }

            utils.addDebug(currentEntry, (fn + 1) + ". \"" + fieldName + "\"");
            utils.addDebug(currentEntry, "   Typ: " + fieldType);
            utils.addDebug(currentEntry, "   Hodnota: " + displayValue);

        } catch (e) {
            utils.addDebug(currentEntry, (fn + 1) + ". \"" + fieldName + "\" - CHYBA: " + e.toString());
        }
    }

    utils.addDebug(currentEntry, "\n=== KONIEC ANAL√ùZY ===");
    utils.addDebug(currentEntry, "üí° Skop√≠ruj tento v√Ωstup a po≈°li ho pre doplnenie do MementoConfig");

    message("‚úÖ Anal√Ωza dokonƒçen√°! Pozri Debug Log.");

} catch (error) {
    var errorMsg = "‚ùå CHYBA: " + error.toString();
    if (error.lineNumber) errorMsg += ", Line: " + error.lineNumber;
    if (error.stack) errorMsg += "\nStack: " + error.stack;
    utils.addError(currentEntry, errorMsg);
    message(errorMsg);
}
