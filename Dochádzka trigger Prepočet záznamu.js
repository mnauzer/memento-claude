// ==============================================
// MEMENTO DATABASE - PREPOƒåET DOCH√ÅDZKY S ZAOKR√öHƒΩOVAN√çM
// ==============================================
// Kni≈ænica: Z√°znam pr√°c
// √öƒçel: Prepoƒçet pracovnej doby, odpracovan√Ωch hod√≠n a mzdov√Ωch n√°kladov s prec√≠znym zaokr√∫hƒæovan√≠m
// 
// POLIA V KNI≈ΩNICI "Z√°znam pr√°c":
// - Zamestnanci (Link to Entry) - zoznam zamestnancov na pr√°ci
// - D√°tum (Date) - d√°tum pr√°ce
// - Pr√≠chod (Time) - zaƒçiatok pr√°ce (zaokr√∫hlen√© na 15min)
// - Odchod (Time) - koniec pr√°ce (zaokr√∫hlen√© na 15min)
// - Pracovn√° doba (Number) - vypoƒç√≠tan√° doba pr√°ce jedn√©ho ƒçloveka (1 des. miesto)
// - Odpracovan√© (Number) - celkov√© hodiny v≈°etk√Ωch zamestnancov (1 des. miesto)
// - Poƒçet pracovn√≠kov (Number) - poƒçet zamestnancov
// - Mzdov√© n√°klady (Number) - celkov√© mzdy v EUR
// - Debug_Log (Text) - debug inform√°cie
// - Error_Log (Text) - chyby a probl√©my
// 
// LINKED KNI≈ΩNICA: "sadzby zamestnancov"
// - Zamestnanec (Link to Entry) - odkaz na zamestnanca
// - Platnos≈• od (Date) - od kedy plat√≠ sadzba
// - Sadzba (Number) - hodinov√° sadzba v EUR
// ==============================================

// Konfigur√°cia scriptu
var CONFIG = {
    // Debug nastavenia
    debug: true,
    debugFieldName: "Debug_Log",
    errorFieldName: "Error_Log",
    
    // N√°zvy kni≈æn√≠c
    sadzbyLibrary: "sadzby zamestnancov",
    
    // N√°zvy pol√≠ - kni≈ænica "Z√°znam pr√°c"
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod", 
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        odpracovane: "Odpracovan√©",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        mzdy: "Mzdov√© n√°klady"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "sadzby zamestnancov"
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "Zamestnanci"
    zamestnancilFields: {
        meno: "Meno"
    }
};

// Glob√°lne premenn√© pre logging
var debugLog = [];
var errorLog = [];

// ==============================================
// DEBUG A ERROR LOGGING SYST√âM
// ==============================================

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm:ss");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var prefix = location ? "[" + location + "] " : "";
    errorLog.push("[" + timestamp + "] ‚ùå " + prefix + message);
}

function saveLogs() {
    var currentEntry = entry();
    
    // V≈ædy prep√≠≈° oba logy (aj keƒè s√∫ pr√°zdne)
    try {
        currentEntry.set(CONFIG.debugFieldName, debugLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania debug logu
    }
    
    try {
        currentEntry.set(CONFIG.errorFieldName, errorLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania error logu  
    }
}

// ==============================================
// ZAOKR√öHƒΩOVACIE FUNKCIE
// ==============================================

function roundTimeToQuarter(timeMs) {
    // Zaokr√∫hli ƒças na 15 min√∫t
    var minutes = timeMs / (1000 * 60);
    var roundedMinutes = Math.round(minutes / 15) * 15;
    return roundedMinutes * 60 * 1000;
}

function roundToOneDecimal(number) {
    // Zaokr√∫hli na 1 desatinn√© miesto
    return Math.round(number * 10) / 10;
}

function formatTimeDisplay(timeMs) {
    // Konvertuj ms na HH:MM pre debug
    var hours = Math.floor(timeMs / (1000 * 60 * 60));
    var minutes = Math.floor((timeMs % (1000 * 60 * 60)) / (1000 * 60));
    return hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0');
}

// ==============================================
// VALIDAƒåN√â FUNKCIE
// ==============================================

function validateAndRoundTimes(currentEntry) {
    addDebug("‚è∞ === VALID√ÅCIA A ZAOKR√öHƒΩOVANIE ƒåASOV ===");
    
    var prichod = currentEntry.field(CONFIG.fields.prichod);
    var odchod = currentEntry.field(CONFIG.fields.odchod);
    
    addDebug("üìã Origin√°lne ƒçasy:");
    addDebug("  üïê Pr√≠chod: " + (prichod ? formatTimeDisplay(prichod) : "CH√ùBA"));
    addDebug("  üïê Odchod: " + (odchod ? formatTimeDisplay(odchod) : "CH√ùBA"));
    
    if (!prichod || !odchod) {
        addError("Pr√≠chod alebo Odchod nie je vyplnen√Ω", "validateAndRoundTimes");
        return null;
    }
    
    // Zaokr√∫hli ƒçasy na 15 min√∫t
    var prichodRounded = roundTimeToQuarter(prichod);
    var odchodRounded = roundTimeToQuarter(odchod);
    
    addDebug("üîÑ Zaokr√∫hlen√© ƒçasy:");
    addDebug("  üïê Pr√≠chod: " + formatTimeDisplay(prichodRounded));
    addDebug("  üïê Odchod: " + formatTimeDisplay(odchodRounded));
    
    // Ulo≈æ zaokr√∫hlen√© ƒçasy sp√§≈• do pol√≠
    try {
        currentEntry.set(CONFIG.fields.prichod, prichodRounded);
        currentEntry.set(CONFIG.fields.odchod, odchodRounded);
        addDebug("üíæ Zaokr√∫hlen√© ƒçasy ulo≈æen√©");
    } catch (saveError) {
        addError("Nepodarilo sa ulo≈æi≈• zaokr√∫hlen√© ƒçasy: " + saveError.toString(), "validateAndRoundTimes");
        return null;
    }
    
    return {
        prichod: prichodRounded,
        odchod: odchodRounded
    };
}

function calculateWorkHours(prichodMs, odchodMs) {
    addDebug("üìä === V√ùPOƒåET PRACOVNEJ DOBY ===");
    
    var odMs = odchodMs;
    var priMs = prichodMs;
    
    addDebug("  üïê Pr√≠chod ms: " + priMs + " (" + formatTimeDisplay(priMs) + ")");
    addDebug("  üïê Odchod ms: " + odMs + " (" + formatTimeDisplay(odMs) + ")");
    
    // Ak je odchod men≈°√≠ ako pr√≠chod, ide o pr√°cu cez polnoc
    if (odMs < priMs) {
        odMs += 24 * 60 * 60 * 1000; // Pridaj 24 hod√≠n
        addDebug("  üåô Pr√°ca cez polnoc - pridal som 24 hod√≠n");
    }
    
    var rozdielMs = odMs - priMs;
    var pracovnaDobaHodiny = rozdielMs / (1000 * 60 * 60);
    
    addDebug("  ‚è±Ô∏è Surov√° pracovn√° doba: " + pracovnaDobaHodiny.toFixed(3) + " h");
    
    if (pracovnaDobaHodiny > 0 && pracovnaDobaHodiny <= 24) {
        // Zaokr√∫hli na 1 desatinn√© miesto
        var pracovnaDobaRounded = roundToOneDecimal(pracovnaDobaHodiny);
        addDebug("  üîÑ Zaokr√∫hlen√° pracovn√° doba: " + pracovnaDobaRounded + " h");
        return pracovnaDobaRounded;
    } else {
        addError("Neplatn√° pracovn√° doba: " + pracovnaDobaHodiny.toFixed(2) + " h", "calculateWorkHours");
        return null;
    }
}

// ==============================================
// SPRACOVANIE ZAMESTNANCOV A SADZIEB
// ==============================================

function findValidSalary(zamestnanec, datum, menoZamestnanca) {
    addDebug("  üîç Hƒæad√°m sadzby cez linksFrom...");
    
    var sadzby = null;
    var linksFromSuccess = false;
    
    try {
        sadzby = zamestnanec.linksFrom(CONFIG.sadzbyLibrary, CONFIG.sadzbyFields.zamestnanec);
        if (sadzby && sadzby.length > 0) {
            addDebug("  ‚úÖ Na≈°iel " + sadzby.length + " sadzieb");
            linksFromSuccess = true;
        } else {
            addError("Zamestnanec " + menoZamestnanca + " nem√° sadzby", "findValidSalary");
            return null;
        }
    } catch (linksError) {
        addError("LinksFrom zlyhalo pre " + menoZamestnanca + ": " + linksError.toString(), "findValidSalary");
        return null;
    }
    
    if (linksFromSuccess) {
        // N√°jdi najnov≈°iu platn√∫ sadzbu k d√°tumu
        var aktualnaHodinovka = null;
        var najnovsiDatum = null;
        
        addDebug("  üìã Analyzujem sadzby k d√°tumu " + moment(datum).format("DD.MM.YYYY") + ":");
        
        for (var j = 0; j < sadzby.length; j++) {
            var sadzbaEntry = sadzby[j];
            
            if (!sadzbaEntry) {
                addDebug("    ‚ö†Ô∏è Sadzba " + j + " je null");
            } else {
                try {
                    var platnostOd = sadzbaEntry.field(CONFIG.sadzbyFields.platnostOd);
                    var hodinovka = sadzbaEntry.field(CONFIG.sadzbyFields.sadzba);
                    
                    addDebug("    üìã Sadzba " + j + ": " + hodinovka + " ‚Ç¨/h od " + 
                            (platnostOd ? moment(platnostOd).format("DD.MM.YYYY") : "?"));
                    
                    if (platnostOd && hodinovka && platnostOd <= datum) {
                        if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                            najnovsiDatum = platnostOd;
                            aktualnaHodinovka = hodinovka;
                            addDebug("    ‚úÖ Najnov≈°ia platn√° sadzba: " + hodinovka + " ‚Ç¨/h");
                        }
                    } else {
                        addDebug("    ‚ùå Sadzba neplatn√° k d√°tumu");
                    }
                } catch (sadzbaFieldError) {
                    addDebug("    ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ sadzby " + j + ": " + sadzbaFieldError.toString());
                }
            }
        }
        
        if (!aktualnaHodinovka || aktualnaHodinovka <= 0) {
            addError("Nena≈°la sa platn√° sadzba pre " + menoZamestnanca + " k d√°tumu", "findValidSalary");
            return null;
        } else {
            addDebug("  üí∂ Fin√°lna hodinovka: " + aktualnaHodinovka + " ‚Ç¨/h");
            return aktualnaHodinovka;
        }
    }
    
    return null;
}

function processEmployees(currentEntry, zamestnanci, datum, pracovnaDobaHodiny) {
    addDebug("üë• === SPRACOVANIE ZAMESTNANCOV S ATRIB√öTMI ===");
    
    var celkoveMzdy = 0;
    var uspesneSpracovani = 0;
    var chyby = 0;
    var hodinovkyZamestnancov = []; // Lok√°lne ulo≈æenie hodinoviek
    
    // Iteruj cez ka≈æd√©ho zamestnanca
    for (var i = 0; i < zamestnanci.length; i++) {
        addDebug("\n--- Zamestnanec " + (i + 1) + "/" + zamestnanci.length + " ---");
        
        var zamestnanec = zamestnanci[i];
        
        if (!zamestnanec) {
            addError("Zamestnanec na poz√≠cii " + i + " je null", "processEmployees_zamestnanec_" + i);
            hodinovkyZamestnancov[i] = 0; // Nastav 0 pre null zamestnancov
            chyby++;
        } else {
            try {
                // Z√≠skaj meno zamestnanca
                var menoZamestnanca = "Nezn√°my";
                try {
                    var tempMeno = zamestnanec.field(CONFIG.zamestnancilFields.meno);
                    if (tempMeno) {
                        menoZamestnanca = tempMeno;
                    }
                } catch (menoError) {
                    addDebug("  ‚ö†Ô∏è Nepodarilo sa z√≠ska≈• meno");
                }
                
                addDebug("  üë§ " + menoZamestnanca);
                
                // Inicializuj hodinovku pre tohto zamestnanca
                hodinovkyZamestnancov[i] = 0;
                
                // N√°jdi platn√∫ sadzbu
                var aktualnaHodinovka = findValidSalary(zamestnanec, datum, menoZamestnanca);
                
                if (aktualnaHodinovka) {
                    // Ulo≈æ hodinovku do lok√°lneho poƒæa
                    hodinovkyZamestnancov[i] = aktualnaHodinovka;
                    addDebug("  üíæ Hodinovka ulo≈æen√° lok√°lne: " + aktualnaHodinovka + " ‚Ç¨/h");
                    
                    // === NASTAVENIE V≈†ETK√ùCH ATRIB√öTOV ZAMESTNANCA ===
                    var atributSuccess = 0;
                    var atributTotal = 6; // Poƒçet atrib√∫tov na nastavenie
                    
                    // 1. Nastav atrib√∫t "odpracovan√©" s hodnotou "Pracovn√° doba"
                    try {
                        zamestnanec.setAttr("odpracovan√©", pracovnaDobaHodiny);
                        addDebug("  üíæ Atrib√∫t 'odpracovan√©' nastaven√Ω: " + pracovnaDobaHodiny + " h");
                        atributSuccess++;
                    } catch (attrError1) {
                        addError("setAttr('odpracovan√©') zlyhalo: " + attrError1.toString(), "processEmployees_attr1_" + i);
                    }
                    
                    // 2. Nastav atrib√∫t "hodinovka"
                    try {
                        zamestnanec.setAttr("hodinovka", aktualnaHodinovka);
                        addDebug("  üíæ Atrib√∫t 'hodinovka' nastaven√Ω: " + aktualnaHodinovka + " ‚Ç¨/h");
                        atributSuccess++;
                    } catch (attrError2) {
                        addError("setAttr('hodinovka') zlyhalo: " + attrError2.toString(), "processEmployees_attr2_" + i);
                    }
                    
                    // 3-6. Z√≠skaj existuj√∫ce hodnoty ostatn√Ωch atrib√∫tov alebo nastav 0
                    var priplatokHodinovka = 0;
                    var premia = 0;
                    var pokuta = 0;
                    
                    try {
                        var existujuciPriplatok = zamestnanec.attr("+pr√≠platok (‚Ç¨/h)");
                        priplatokHodinovka = existujuciPriplatok || 0;
                        
                        // Ak nie je nastaven√Ω, nastav na 0
                        if (!existujuciPriplatok) {
                            zamestnanec.setAttr("+pr√≠platok (‚Ç¨/h)", 0);
                            addDebug("  üíæ Atrib√∫t '+pr√≠platok (‚Ç¨/h)' nastaven√Ω na 0");
                        } else {
                            addDebug("  üìã Existuj√∫ci '+pr√≠platok (‚Ç¨/h)': " + priplatokHodinovka + " ‚Ç¨/h");
                        }
                        atributSuccess++;
                    } catch (attrError3) {
                        addError("Spracovanie '+pr√≠platok (‚Ç¨/h)' zlyhalo: " + attrError3.toString(), "processEmployees_attr3_" + i);
                    }
                    
                    try {
                        var existujucaPremia = zamestnanec.attr("+pr√©mia (‚Ç¨)");
                        premia = existujucaPremia || 0;
                        
                        // Ak nie je nastaven√°, nastav na 0
                        if (!existujucaPremia) {
                            zamestnanec.setAttr("+pr√©mia (‚Ç¨)", 0);
                            addDebug("  üíæ Atrib√∫t '+pr√©mia (‚Ç¨)' nastaven√Ω na 0");
                        } else {
                            addDebug("  üìã Existuj√∫ca '+pr√©mia (‚Ç¨)': " + premia + " ‚Ç¨");
                        }
                        atributSuccess++;
                    } catch (attrError4) {
                        addError("Spracovanie '+pr√©mia (‚Ç¨)' zlyhalo: " + attrError4.toString(), "processEmployees_attr4_" + i);
                    }
                    
                    try {
                        var existujucaPokuta = zamestnanec.attr("-pokuta (‚Ç¨)");
                        pokuta = existujucaPokuta || 0;
                        
                        // Ak nie je nastaven√°, nastav na 0
                        if (!existujucaPokuta) {
                            zamestnanec.setAttr("-pokuta (‚Ç¨)", 0);
                            addDebug("  üíæ Atrib√∫t '-pokuta (‚Ç¨)' nastaven√Ω na 0");
                        } else {
                            addDebug("  üìã Existuj√∫ca '-pokuta (‚Ç¨)': " + pokuta + " ‚Ç¨");
                        }
                        atributSuccess++;
                    } catch (attrError5) {
                        addError("Spracovanie '-pokuta (‚Ç¨)' zlyhalo: " + attrError5.toString(), "processEmployees_attr5_" + i);
                    }
                    
                    // 7. Vypoƒç√≠taj a nastav "denn√° mzda" podƒæa vzorca
                    // ("odpracovan√©" * "hodinovka") + ("odpracovan√©" * "+pr√≠platok (‚Ç¨/h)") + "+pr√©mia (‚Ç¨)" - "-pokuta (‚Ç¨)" = "denn√° mzda"
                    try {
                        var zakladnaMzda = pracovnaDobaHodiny * aktualnaHodinovka;
                        var priplatokCelkom = pracovnaDobaHodiny * priplatokHodinovka;
                        var dennaMzda = zakladnaMzda + priplatokCelkom + premia - pokuta;
                        
                        addDebug("  üßÆ V√ùPOƒåET DENNEJ MZDY:");
                        addDebug("    Z√°kladn√° mzda: " + pracovnaDobaHodiny + " h √ó " + aktualnaHodinovka + " ‚Ç¨/h = " + zakladnaMzda.toFixed(2) + " ‚Ç¨");
                        addDebug("    Pr√≠platok: " + pracovnaDobaHodiny + " h √ó " + priplatokHodinovka + " ‚Ç¨/h = " + priplatokCelkom.toFixed(2) + " ‚Ç¨");
                        addDebug("    Pr√©mia: +" + premia.toFixed(2) + " ‚Ç¨");
                        addDebug("    Pokuta: -" + pokuta.toFixed(2) + " ‚Ç¨");
                        addDebug("    CELKOM: " + zakladnaMzda.toFixed(2) + " + " + priplatokCelkom.toFixed(2) + " + " + premia.toFixed(2) + " - " + pokuta.toFixed(2) + " = " + dennaMzda.toFixed(2) + " ‚Ç¨");
                        
                        // Zaokr√∫hli denn√∫ mzdu na 2 desatinn√© miesta
                        var dennaMzdaRounded = Math.round(dennaMzda * 100) / 100;
                        
                        zamestnanec.setAttr("denn√° mzda", dennaMzdaRounded);
                        addDebug("  üíæ Atrib√∫t 'denn√° mzda' nastaven√Ω: " + dennaMzdaRounded + " ‚Ç¨");
                        atributSuccess++;
                        
                        // Pou≈æi≈• denn√∫ mzdu namiesto z√°kladnej mzdy pre celkov√© mzdy
                        celkoveMzdy += dennaMzdaRounded;
                        
                    } catch (attrError6) {
                        addError("V√Ωpoƒçet 'denn√° mzda' zlyhal: " + attrError6.toString(), "processEmployees_attr6_" + i);
                        
                        // Fallback na z√°kladn√∫ mzdu
                        var fallbackMzda = aktualnaHodinovka * pracovnaDobaHodiny;
                        celkoveMzdy += fallbackMzda;
                        addDebug("  üîÑ Pou≈æit√° fallback mzda: " + fallbackMzda.toFixed(2) + " ‚Ç¨");
                    }
                    
                    addDebug("  üìä Atrib√∫ty nastaven√©: " + atributSuccess + "/" + atributTotal);
                    
                    // Overenie nastavenia kƒæ√∫ƒçov√Ωch atrib√∫tov
                    try {
                        var kontrolaOdpracovane = zamestnanec.attr("odpracovan√©");
                        var kontrolaHodinovka = zamestnanec.attr("hodinovka");
                        var kontrolaDennaMzda = zamestnanec.attr("denn√° mzda");
                        
                        addDebug("  ‚úÖ Overenie atrib√∫tov:");
                        addDebug("    odpracovan√©: " + (kontrolaOdpracovane || "null"));
                        addDebug("    hodinovka: " + (kontrolaHodinovka || "null"));
                        addDebug("    denn√° mzda: " + (kontrolaDennaMzda || "null"));
                    } catch (checkError) {
                        addDebug("  ‚ö†Ô∏è Nepodarilo sa overi≈• atrib√∫ty: " + checkError.toString());
                    }
                    
                    uspesneSpracovani++;
                } else {
                    chyby++;
                }
                
            } catch (zamestnanecError) {
                addError("Chyba pri spracovan√≠ zamestnanca " + (i + 1) + ": " + zamestnanecError.toString(), "processEmployees_general_zamestnanec_" + i);
                chyby++;
            }
        }
    }
    
    addDebug("\nüìä V√ùSLEDKY SPRACOVANIA ZAMESTNANCOV S ATRIB√öTMI:");
    addDebug("  ‚úÖ √öspe≈°ne spracovan√Ωch: " + uspesneSpracovani + "/" + zamestnanci.length);
    addDebug("  ‚ùå Ch√Ωb: " + chyby);
    addDebug("  üí∞ Celkov√© mzdy (s atrib√∫tmi): " + celkoveMzdy.toFixed(2) + " ‚Ç¨");
    addDebug("  üìã Hodinovky lok√°lne: [" + hodinovkyZamestnancov.join(", ") + "] ‚Ç¨/h");
    
    return {
        success: uspesneSpracovani > 0,
        celkoveMzdy: celkoveMzdy,
        uspesneSpracovani: uspesneSpracovani,
        chyby: chyby,
        hodinovkyZamestnancov: hodinovkyZamestnancov
    };
}

// ==============================================
// HLAVN√Å FUNKCIA - SUCCESS FLAG WORKFLOW
// ==============================================

function hlavnaFunkcia() {
    addDebug("üöÄ === ≈†TART PREPOƒåTU DOCH√ÅDZKY (REFAKTOROVAN√ù) ===");
    
    var currentEntry = entry();
    var globalSuccess = false;
    
    // Vyma≈æ predch√°dzaj√∫ce logy hneƒè na zaƒçiatku
    currentEntry.set(CONFIG.debugFieldName, "");
    currentEntry.set(CONFIG.errorFieldName, "");
    addDebug("üßπ Vymazan√© predch√°dzaj√∫ce logy");
    
    var step1Success = false; // Valid√°cia z√°kladn√Ωch √∫dajov
    var step2Success = false; // Zaokr√∫hƒæovanie ƒçasov
    var step3Success = false; // V√Ωpoƒçet pracovnej doby
    var step4Success = false; // Spracovanie zamestnancov
    var step5Success = false; // Finaliz√°cia
    
    // KROK 1: Z√≠skaj a validuj z√°kladn√© √∫daje
    addDebug("üìã KROK 1: Z√≠skavam z√°kladn√© √∫daje...");
    
    var datum = currentEntry.field(CONFIG.fields.datum);
    var prichod = currentEntry.field(CONFIG.fields.prichod);
    var odchod = currentEntry.field(CONFIG.fields.odchod);
    var zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
    
    addDebug("  üìÖ D√°tum: " + (datum ? moment(datum).format("DD.MM.YYYY") : "CH√ùBA"));
    addDebug("  üïê Pr√≠chod: " + (prichod ? formatTimeDisplay(prichod) : "CH√ùBA"));
    addDebug("  üïê Odchod: " + (odchod ? formatTimeDisplay(odchod) : "CH√ùBA"));
    addDebug("  üë• Zamestnanci: " + (zamestnanci && zamestnanci.length > 0 ? zamestnanci.length + " zamestnancov" : "CH√ùBA"));
    
    // Z√°kladn√° valid√°cia
    if (!datum) {
        addError("D√°tum nie je vyplnen√Ω", "krok1");
    } else if (!prichod) {
        addError("Pr√≠chod nie je vyplnen√Ω", "krok1");
    } else if (!odchod) {
        addError("Odchod nie je vyplnen√Ω", "krok1");
    } else if (!zamestnanci || zamestnanci.length === 0) {
        addError("Zamestnanci nie s√∫ vyplnen√≠", "krok1");
    } else {
        addDebug("‚úÖ Z√°kladn√© √∫daje s√∫ v poriadku - " + zamestnanci.length + " zamestnancov");
        step1Success = true;
    }
    
    if (step1Success) {
        // KROK 2: Zaokr√∫hli ƒçasy na 15 min√∫t
        addDebug("\nüîÑ KROK 2: Zaokr√∫hƒæujem ƒçasy na 15 min√∫t...");
        
        var roundedTimes = validateAndRoundTimes(currentEntry);
        if (roundedTimes) {
            addDebug("‚úÖ ƒåasy √∫spe≈°ne zaokr√∫hlen√© a ulo≈æen√©");
            step2Success = true;
        } else {
            addDebug("‚ùå Zaokr√∫hƒæovanie ƒçasov zlyhalo");
        }
    }
    
    if (step1Success && step2Success) {
        // KROK 3: Vypoƒç√≠taj pracovn√∫ dobu z zaokr√∫hlen√Ωch ƒçasov
        addDebug("\n‚è∞ KROK 3: Poƒç√≠tam pracovn√∫ dobu z zaokr√∫hlen√Ωch ƒçasov...");
        
        var pracovnaDobaHodiny = calculateWorkHours(roundedTimes.prichod, roundedTimes.odchod);
        
        if (pracovnaDobaHodiny) {
            try {
                currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
                addDebug("  üíæ Pracovn√° doba ulo≈æen√°: " + pracovnaDobaHodiny + " h");
                step3Success = true;
            } catch (saveError) {
                addError("Nepodarilo sa ulo≈æi≈• pracovn√∫ dobu: " + saveError.toString(), "krok3");
            }
        } else {
            addDebug("‚ùå V√Ωpoƒçet pracovnej doby zlyhal");
        }
    }
    
    if (step1Success && step2Success && step3Success) {
        // KROK 4: Vypoƒç√≠taj odpracovan√© hodiny a poƒçet pracovn√≠kov
        addDebug("\nüìä KROK 4: Poƒç√≠tam odpracovan√© hodiny...");
        
        var pocetZamestnancov = zamestnanci.length;
        var odpracovaneHodiny = pracovnaDobaHodiny * pocetZamestnancov;
        
        // Zaokr√∫hli odpracovan√© hodiny na 1 desatinn√© miesto
        var odpracovaneRounded = roundToOneDecimal(odpracovaneHodiny);
        
        addDebug("  üìä Odpracovan√©: " + pracovnaDobaHodiny + " h √ó " + pocetZamestnancov + " = " + odpracovaneRounded + " h");
        
        // Ulo≈æ poƒçet pracovn√≠kov
        try {
            currentEntry.set(CONFIG.fields.pocetPracovnikov, pocetZamestnancov);
            addDebug("  üíæ Poƒçet pracovn√≠kov ulo≈æen√Ω: " + pocetZamestnancov);
        } catch (error) {
            addError("Nepodarilo sa ulo≈æi≈• poƒçet pracovn√≠kov: " + error.toString(), "krok4_pocet");
        }
        
        // Ulo≈æ odpracovan√© hodiny
        try {
            currentEntry.set(CONFIG.fields.odpracovane, odpracovaneRounded);
            addDebug("  üíæ Odpracovan√© ulo≈æen√©: " + odpracovaneRounded + " h");
            step4Success = true;
        } catch (error) {
            addError("Nepodarilo sa ulo≈æi≈• odpracovan√© hodiny: " + error.toString(), "krok4_odpracovane");
        }
    }
    
    if (step1Success && step2Success && step3Success && step4Success) {
        // KROK 5: Spracuj zamestnancov a vypoƒç√≠taj mzdy
        addDebug("\nüí∞ KROK 5: Sprac√∫vam zamestnancov a poƒç√≠tam mzdy...");
        
        var employeeResult = processEmployees(currentEntry, zamestnanci, datum, pracovnaDobaHodiny);
        
        if (employeeResult && employeeResult.success) {
            // Ulo≈æ celkov√© mzdy
            try {
                var finalMzdy = Math.round(employeeResult.celkoveMzdy * 100) / 100;
                currentEntry.set(CONFIG.fields.mzdy, finalMzdy);
                addDebug("  üíæ Mzdov√© n√°klady ulo≈æen√©: " + finalMzdy + " ‚Ç¨");
                step5Success = true;
                globalSuccess = true;
            } catch (saveError) {
                addError("Nepodarilo sa ulo≈æi≈• mzdov√© n√°klady: " + saveError.toString(), "krok5");
            }
        } else {
            addDebug("‚ùå Spracovanie zamestnancov zlyhalo");
        }
    }
    
    // Finaliz√°cia a spr√°va pou≈æ√≠vateƒæovi
    addDebug("\nüèÅ === KONIEC PREPOƒåTU DOCH√ÅDZKY ===");
    
    saveLogs();
    
    if (globalSuccess) {
        var sprava = "‚úÖ Prepoƒçet doch√°dzky dokonƒçen√Ω! (s atrib√∫tmi)\n\n";
        sprava += "‚è∞ ƒåasy (zaokr√∫hlen√© na 15 min):\n";
        sprava += "  üïê Pr√≠chod: " + formatTimeDisplay(roundedTimes.prichod) + "\n";
        sprava += "  üïê Odchod: " + formatTimeDisplay(roundedTimes.odchod) + "\n\n";
        sprava += "üìä V√Ωsledky (1 des. miesto):\n";
        sprava += "  ‚è±Ô∏è Pracovn√° doba: " + pracovnaDobaHodiny + " h\n";
        sprava += "  üìä Odpracovan√©: " + odpracovaneRounded + " h\n";
        sprava += "  üë• Poƒçet pracovn√≠kov: " + pocetZamestnancov + "\n\n";
        sprava += "üí∞ Mzdov√© n√°klady (s atrib√∫tmi): " + employeeResult.celkoveMzdy.toFixed(2) + " ‚Ç¨\n";
        sprava += "üèóÔ∏è Spracovan√Ωch: " + employeeResult.uspesneSpracovani + "/" + zamestnanci.length + "\n";
        sprava += "üè∑Ô∏è Atrib√∫ty: odpracovan√©, hodinovka, pr√≠platok, pr√©mia, pokuta, denn√° mzda";
        
        if (employeeResult.chyby > 0) {
            sprava += "\n‚ö†Ô∏è Chyby: " + employeeResult.chyby + " (pozrite Error_Log)";
        }
        
        message(sprava);
    } else {
        var chybovaSprava = "‚ùå Prepoƒçet doch√°dzky sa nepodaril!\n";
        if (errorLog.length > 0) {
            chybovaSprava += "Pozrite Error_Log pre detaily.";
        }
        message(chybovaSprava);
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

addDebug("=== INICIALIZ√ÅCIA DOCH√ÅDZKA SCRIPTU (S ATRIB√öTMI) ===");
addDebug("Nov√© funkcie: Zaokr√∫hƒæovanie na 15min + 1 des. miesto + Atrib√∫ty zamestnancov");
addDebug("Atrib√∫ty: odpracovan√©, hodinovka, +pr√≠platok (‚Ç¨/h), +pr√©mia (‚Ç¨), -pokuta (‚Ç¨), denn√° mzda");
addDebug("Vzorec dennej mzdy: (odpracovan√© √ó hodinovka) + (odpracovan√© √ó pr√≠platok) + pr√©mia - pokuta");
addDebug("API: Spr√°vne setAttr() pou≈æitie");
addDebug("Timestamp: " + moment().format("DD.MM.YY HH:mm:ss"));

try {
    hlavnaFunkcia();
} catch (kritickachyba) {
    addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "main");
    saveLogs();
    message("‚ùå KRITICK√Å CHYBA! Pozrite Error_Log.");
}