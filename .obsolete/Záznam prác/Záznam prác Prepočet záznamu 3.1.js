// ==============================================
// MEMENTO DATABASE - Z√ÅZNAM PR√ÅC - PREPOƒåET
// Verzia: 1.0 | D√°tum: 12.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Z√°znam pr√°c | Trigger: After Save
// ==============================================
// ‚úÖ IMPLEMENT√ÅCIA PODƒΩA KNOWLEDGE BASE
//    - Zaokr√∫hƒæovanie ƒçasov Od/Do na 15 min√∫t
//    - V√Ωpoƒçet pracovnej doby a odpracovan√Ωch hod√≠n
//    - Nastavenie atrib√∫tov zamestnancov (odpracovan√©, hodinovka, mzdov√© n√°klady)
//    - V√Ωpoƒçet s√∫hrnn√Ωch pol√≠ (Poƒçet pracovn√≠kov, Mzdov√© n√°klady, Suma HZS)
//    - Prepojenie / vytvorenie "V√Ωkaz pr√°c"
//    - Robustn√© debug a error logovanie
// ==============================================

var CONFIG = {
    debug: true,
    version: "1.0",
    fields: {
        datum: "D√°tum",
        zakazka: "Z√°kazka",
        od: "Od",
        do: "Do",
        zamestnanci: "Zamestnanci",
        hzs: "Hodinov√° z√∫ƒçtovacia sadzba",
        vykonanePrace: "Vykonan√© pr√°ce",
        pracovnaDoba: "Pracovn√° doba",
        odpracovane: "Odpracovan√©",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        mzdoveNaklady: "Mzdov√© n√°klady",
        sumaHZS: "Suma HZS",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        mzdoveNaklady: "mzdov√© n√°klady",
        cena: "cena"
    },
    libraries: {
        sadzbyZam: "sadzby zamestnancov",
        vykazPrac: "V√Ωkaz pr√°c",
        cenyPrac: "ceny pr√°c"
    },
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    }
};

// Lok√°lne logy
var debugLog = [];
var errorLog = [];
var e = entry();

// ======================================================
//  LOGOVACIE FUNKCIE
// ======================================================

function logDebug(msg) {
    if (CONFIG.debug) {
        var ts = moment().format("DD.MM.YY HH:mm:ss");
        debugLog.push("[" + ts + "] " + msg);
    }
}
function logError(msg, loc) {
    var ts = moment().format("DD.MM.YY HH:mm:ss");
    errorLog.push("[" + ts + "] ‚ùå " + msg + (loc ? " (Loc: " + loc + ")" : ""));
}
function saveLogs() {
    try {
        e.set(CONFIG.fields.debugLog, debugLog.join("\n"));
        e.set(CONFIG.fields.errorLog, errorLog.join("\n"));
    } catch (_) {}
}

// ======================================================
//  UTILITY FUNKCIE
// ======================================================

function safeVal(val, defVal) {
    return (val !== null && val !== undefined) ? val : defVal;
}
function roundToQuarter(ms) {
    if (!ms) return null;
    var q = 15 * 60 * 1000;
    return Math.round(ms / q) * q;
}
function calcHours(msStart, msEnd) {
    if (!msStart || !msEnd) return 0;
    if (msEnd < msStart) { // cez polnoc
        msEnd += 24*60*60*1000;
        logDebug("‚è∞ Pr√°ca cez polnoc");
    }
    return Math.round(((msEnd - msStart) / 3600000) * 100) / 100;
}

// ======================================================
//  DOM√ÅCANIE HODINOVKY
// ======================================================

function findValidSalary(zamEntry, workDate) {
    try {
        var sadzby = zamEntry.linksFrom(CONFIG.libraries.sadzbyZam, CONFIG.sadzbyFields.zamestnanec) || [];
        if (!sadzby.length) {
            logDebug("‚ö†Ô∏è ≈Ωiadne sadzby pre zamestnanca: " + zamEntry.field("Nick"));
            return 0;
        }
        var sel = 0, latest = null;
        for (var i=0;i<sadzby.length;i++) {
            var platOd = sadzby[i].field(CONFIG.sadzbyFields.platnostOd);
            var sadzba = parseFloat(sadzby[i].field(CONFIG.sadzbyFields.sadzba) || 0);
            if (platOd && sadzba && platOd <= workDate) {
                if (!latest || platOd > latest) {
                    latest = platOd;
                    sel = sadzba;
                }
            }
        }
        logDebug("‚úÖ Hodinovka: " + sel);
        return sel;
    } catch(err) {
        logError("Chyba pri hƒæadan√≠ hodnoty hodinovky: " + err, "findValidSalary");
        return 0;
    }
}

// ======================================================
//  SPRACOVANIE ZAMESTNANCOV
// ======================================================

function processEmployee(zam, idx, workHours, datum) {
    try {
        var n = zam.field("Nick") || "Nezn√°my";
        logDebug("üë§ Zamestnanec #" + (idx+1) + ": " + n);

        var hodinovka = findValidSalary(zam, datum);
        var naklady = workHours * hodinovka;
        
        zam.setAttr(CONFIG.attributes.odpracovane, workHours);
        zam.setAttr(CONFIG.attributes.hodinovka, hodinovka);
        zam.setAttr(CONFIG.attributes.mzdoveNaklady, naklady);

        logDebug("  odpracovan√©=" + workHours + " h, hodinovka=" + hodinovka + " ‚Ç¨, mzdov√© n√°klady=" + naklady);
        return naklady;
    } catch(ex) {
        logError("Chyba spracovania zamestnanca idx=" + idx + ": " + ex, "processEmployee");
        return 0;
    }
}

// ==============================================
// FUNKCIA NA ZAPOJENIE/VYTOVRENIE V√ùKAZU PR√ÅC
// ==============================================

// ==============================================
// OPRAVEN√Å FUNKCIA syncV√ΩkazPrac() s linksFrom
// ==============================================

function syncV√ΩkazPrac(currentEntry) {
    try {
        var zakazka = currentEntry.field(CONFIG.fields.zakazka);
        if (!zakazka) {
            logError("Ch√Ωba pole Z√°kazka, nem√¥≈æem synchronizova≈• V√Ωkaz pr√°c", "syncV√ΩkazPrac");
            return false;
        }

        logDebug("üîç Kontrolujem existenciu V√Ωkazu pr√°c pre z√°kazku...");

        // ‚úÖ SPR√ÅVNE - pou≈æi≈• linksFrom na z√°kazke samotnej
        var existujuceVyroky = zakazka.linksFrom("V√Ωkaz pr√°c", "Z√°kazka") || [];
        var vykazPrac = existujuceVyroky.length > 0 ? existujuceVyroky[0] : null;

        if (!vykazPrac) {
            // Vytvor nov√Ω v√Ωkaz pr√°c
            logDebug("üí° Vytv√°r√°m nov√Ω V√Ωkaz pr√°c pre z√°kazku...");
            
            var vykazLib = libByName("V√Ωkaz pr√°c");
            if (!vykazLib) {
                logError("Kni≈ænica 'V√Ωkaz pr√°c' neexistuje", "syncV√ΩkazPrac");
                return false;
            }

            vykazPrac = vykazLib.create();

            // Vyplnenie z√°kladn√Ωch pol√≠ podƒæa dokument√°cie
            vykazPrac.set("D√°tum", currentEntry.field(CONFIG.fields.datum) || null);
            vykazPrac.set("Identifik√°tor", generateIdentifikator(zakazka)); // Helper funkcia
            vykazPrac.set("Popis", generatePopis(zakazka)); // Helper funkcia
            
            // Typ v√Ωkazu zo z√°kazky
            var typVykazu = safeVal(zakazka.field("Typ v√Ωkazu"), "Hodinovka");
            vykazPrac.set("Typ v√Ωkazu", typVykazu);
            vykazPrac.set("Ceny poƒç√≠ta≈•", "Z cenovej ponuky");
            
            // Cenov√° ponuka zo z√°kazky
            var cenovaPonuka = zakazka.field("Cenov√° ponuka");
            if (cenovaPonuka) {
                vykazPrac.set("Cenov√° ponuka", cenovaPonuka);
            }
            
            vykazPrac.set("Vydan√©", "Z√°kazka");
            vykazPrac.set("Z√°kazka", zakazka);

            logDebug("‚úÖ Nov√Ω V√Ωkaz pr√°c vytvoren√Ω a vyplnen√Ω");
        } else {
            logDebug("‚ÑπÔ∏è Existuj√∫ci V√Ωkaz pr√°c n√°jden√Ω pre z√°kazku");
        }

        // Pridanie sp√§tn√©ho linku do poƒæa "Pr√°ce HZS"
        var praceHZS = vykazPrac.field("Pr√°ce HZS") || [];
        
        // Kontrola ƒçi u≈æ link na currentEntry neexistuje
        var linkExists = false;
        for (var i = 0; i < praceHZS.length; i++) {
            if (praceHZS[i].id === currentEntry.id) {
                linkExists = true;
                break;
            }
        }

        if (!linkExists) {
            // Pridaj currentEntry do poƒæa Pr√°ce HZS
            praceHZS.push(currentEntry);
            vykazPrac.set("Pr√°ce HZS", praceHZS);

            var lastIndex = praceHZS.length - 1;

            // Nastav atrib√∫ty sp√§tn√©ho linku podƒæa pravidiel z dokument√°cie
            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "vykonan√© pr√°ce", 
                safeVal(currentEntry.field(CONFIG.fields.vykonanePrace), ""));
            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "poƒçet hod√≠n", 
                safeVal(currentEntry.field(CONFIG.fields.odpracovane), 0));
            
            // √öƒçtovan√° sadzba z HZS
            var cenaUc = 0;
            var hzsLink = currentEntry.field(CONFIG.fields.hzs);
            if (hzsLink) {
                cenaUc = parseFloat(hzsLink.attr("cena") || 0);
            }
            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "√∫ƒçtovan√° sadzba", cenaUc);
            
            // Cena celkom = poƒçet hod√≠n √ó √∫ƒçtovan√° sadzba
            var cenaCelk = safeVal(currentEntry.field(CONFIG.fields.odpracovane), 0) * cenaUc;
            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "cena celkom", Math.round(cenaCelk * 100) / 100);

            logDebug("üîó Sp√§tn√Ω link pridan√Ω do V√Ωkazu pr√°c s atrib√∫tmi:");
            logDebug("   ‚Ä¢ vykonan√© pr√°ce: " + safeVal(currentEntry.field(CONFIG.fields.vykonanePrace), ""));
            logDebug("   ‚Ä¢ poƒçet hod√≠n: " + safeVal(currentEntry.field(CONFIG.fields.odpracovane), 0));
            logDebug("   ‚Ä¢ √∫ƒçtovan√° sadzba: " + cenaUc);
            logDebug("   ‚Ä¢ cena celkom: " + cenaCelk.toFixed(2) + " ‚Ç¨");
        } else {
            logDebug("‚ÑπÔ∏è Sp√§tn√Ω link u≈æ existuje vo V√Ωkaze pr√°c");
        }

        return true;

    } catch (e) {
        logError("Chyba pri synchroniz√°cii V√Ωkazu pr√°c: " + e.toString(), "syncV√ΩkazPrac");
        return false;
    }
}

// ==============================================
// HELPER FUNKCIE PRE GENEROVANIE POL√ç
// ==============================================

function generateIdentifikator(zakazka) {
    try {
        var zakazkaID = zakazka.field("ID") || "XXX";
        var datum = moment().format("YYYYMM");
        return "VYK-" + zakazkaID + "-" + datum;
    } catch (e) {
        return "VYK-" + moment().format("YYYYMMDD");
    }
}

function generatePopis(zakazka) {
    try {
        var zakazkaNazov = zakazka.field("N√°zov") || "Nezn√°ma z√°kazka";
        var mesiac = moment().format("MMMM YYYY");
        return "V√Ωkaz pr√°c pre z√°kazku " + zakazkaNazov + " - " + mesiac;
    } catch (e) {
        return "V√Ωkaz pr√°c - " + moment().format("MMMM YYYY");
    }
}


// ======================================================
//  HLAVN√ù WORKFLOW
// ======================================================

function hlavnyPrepoƒçet() {
    logDebug("üöÄ ≈†tart prepoƒçtu Z√°znamu pr√°c v" + CONFIG.version);

    // 1 - Z√≠skanie hodn√¥t
    var datum = safeVal(e.field(CONFIG.fields.datum), null);
    var odRaw = e.field(CONFIG.fields.od);
    var doRaw = e.field(CONFIG.fields.do);
    var zam = safeVal(e.field(CONFIG.fields.zamestnanci), []);
    if (!datum || !odRaw || !doRaw || zam.length === 0) {
        logError("Ch√Ωbaj√∫ povinn√© vstupn√© √∫daje", "input");
        return false;
    }

    // 2 - Zaokr√∫hlenie ƒçasov
    var odMs = roundToQuarter(new Date(odRaw).getTime());
    var doMs = roundToQuarter(new Date(doRaw).getTime());
    e.set(CONFIG.fields.od, new Date(odMs));
    e.set(CONFIG.fields.do, new Date(doMs));
    logDebug("‚è∞ Zaokr√∫hlen√© ƒçasy: Od=" + moment(odMs).format("HH:mm") + ", Do=" + moment(doMs).format("HH:mm"));

    // 3 - Pracovn√° doba
    var workHrs = calcHours(odMs, doMs);
    e.set(CONFIG.fields.pracovnaDoba, workHrs);
    logDebug("üïí Pracovn√° doba: " + workHrs + " h");

    // 4 - Poƒçet pracovn√≠kov, Odpracovan√©
    var pocet = zam.length;
    var odpracovaneCelk = workHrs * pocet;
    e.set(CONFIG.fields.pocetPracovnikov, pocet);
    e.set(CONFIG.fields.odpracovane, odpracovaneCelk);
    logDebug("üë• Poƒçet pracovn√≠kov: " + pocet);
    logDebug("üî¢ Odpracovan√© spolu: " + odpracovaneCelk + " h");

    // 5 - Mzdov√© n√°klady
    var nakladyTotal = 0;
    for (var i=0;i<zam.length;i++) {
        nakladyTotal += processEmployee(zam[i], i, workHrs, datum);
    }
    e.set(CONFIG.fields.mzdoveNaklady, nakladyTotal);
    logDebug("üí∞ Mzdov√© n√°klady = " + nakladyTotal + " ‚Ç¨");

    // 6 - Hodinov√° z√∫ƒçtovacia sadzba a Suma HZS
    var hzs = e.field(CONFIG.fields.hzs);
    var cenaHZS = 0;
    if (hzs) {
        var ceny = hzs.linksFrom(CONFIG.libraries.cenyPrac, "Cenn√≠k pr√°c") || [];
        if (ceny.length > 0) {
            cenaHZS = parseFloat(ceny[ceny.length-1].field("Cena") || 0);
        } else {
            cenaHZS = parseFloat(hzs.field("Cena") || 0);
        }
        hzs.setAttr(CONFIG.attributes.cena, cenaHZS);
        logDebug("üìè Hodinov√° z√∫ƒçtovacia sadzba: " + cenaHZS + " ‚Ç¨");
    }

   
    var suma = odpracovaneCelk * cenaHZS;
    e.set(CONFIG.fields.sumaHZS, suma);
    logDebug("Œ£ Suma HZS = " + suma + " ‚Ç¨");

    
    // 7 - Synchroniz√°cia s V√Ωkazom pr√°c  
    try {
        logDebug("üîó Synchronizujem s V√Ωkazom pr√°c...");
        var vykazSuccess = syncV√ΩkazPrac(e);
        if (vykazSuccess) {
            logDebug("‚úÖ V√Ωkaz pr√°c √∫spe≈°ne synchronizovan√Ω");
        } else {
            logError("‚ùå Synchroniz√°cia s V√Ωkazom pr√°c zlyhala", "main");
        }
    } catch (syncError) {
        logError("Chyba pri synchroniz√°cii V√Ωkazu pr√°c: " + syncError.toString(), "main");
    }
    
    return true;
}

// ======================================================
//  SPUSTENIE
// ======================================================

try {
    var ok = hlavnyPrepoƒçet();
    saveLogs();
    if (ok) {
        message("‚úÖ Prepoƒçet z√°znamu pr√°c dokonƒçen√Ω");
    } else {
        message("‚ùå Prepoƒçet z√°znamu pr√°c zlyhal ‚Äì pozri Error_Log");
    }
} catch(err) {
    logError("KRITICK√Å CHYBA: " + err, "main");
    saveLogs();
    message("üí• Kritick√° chyba! Pozri Error_Log");
}
