// ==============================================
// MEMENTO DATABASE - POKLAD≈áA √öHRADA Z√ÅV√ÑZKOV  
// Verzia: 15.2 | D√°tum: 9.8.25 | Autor: JavaScript Expert  
// Trigger: Before Save | Kni≈ænica: Poklad≈àa
// ==============================================
// ‚úÖ PRIDAN√â v15.2: Pri vytvoren√≠ pohƒæad√°vky z preplatku sa vytvor√≠ aj pokladniƒçn√Ω z√°znam pre z√°lohu
//    - Nov√Ω pokladniƒçn√Ω z√°znam typu "V√Ωdavok" s √∫ƒçelom "Mzda z√°loha"
//    - Automatick√© linkovanie s pohƒæad√°vkou
//    - Synchroniz√°cia v≈°etk√Ωch potrebn√Ωch pol√≠
//    - Info z√°znamy pre audit trail
// ‚úÖ REFAKTOROVAN√â v15.1: Kompletn√Ω refaktoring a optimaliz√°cia k√≥du
// ‚úÖ Odstr√°nen√© duplicity a testovacie funkcie
// ‚úÖ Spr√°vne poradie funkci√≠ - v≈°etky definovan√© pred pou≈æit√≠m
// ‚úÖ Kompletn√° √∫hrada z√°v√§zkov pomocou pohƒæad√°vok
// ‚úÖ Valid√°cia vlastn√≠kov, chronologick√© uhradzovanie
// ‚úÖ Spracovanie preplatkov (Pohƒæad√°vka/Pr√©mia)
// ‚úÖ Info z√°znamy pre audit trail
// ‚úÖ Kompatibiln√© s Rhino JS engine Mementa
// ==============================================

var CONFIG = {
    debug: true,
    version: "15.2",
    scriptName: "Poklad≈àa √∫hrada z√°v√§zkov",
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        pokladna: "Poklad≈àa",
        zavazky: "Z√°v√§zky", 
        pohladavky: "Pohƒæad√°vky",
        zamestnanci: "Zamestnanci",
        dodavatelia: "Dod√°vatelia",
        partneri: "Partneri",
        klienti: "Klienti"
    },
    
    // Emoji pre info polia
    icons: {
        uplnaUhrada: "‚úÖ",
        ciastocnaUhrada: "üîÑ", 
        uhradaDokoncena: "üèÜ",
        pohladavkaVytvorena: "üéÅ",
        premiaVytvorena: "üíé",
        systemAction: "‚ÑπÔ∏è",
        error: "üí•",
        warning: "‚ö†Ô∏è",
        start: "üöÄ",
        step: "üìã",
        money: "üí∞"
    },
    
    // Stavy
    stavy: {
        neuhradene: "Neuhraden√©",
        ciastocneUhradene: "ƒåiastoƒçne uhraden√©", 
        uhradene: "Uhraden√©"
    },
    
    // Typy preplatkov
    typyPreplatku: {
        pohladavka: "Pohƒæad√°vku",
        premia: "Pr√©miu",
        zaloha: "Z√°loha"
    },
   
    // Typy preplatkov - m√¥≈æe by≈• doplnen√Ω postupne
    typyZavazkov: {
        mzda: "Mzdy",
        faktura: "Fakt√∫ry",
        najomne: "N√°jomn√©",
        leasing: "Leasing",

    },
    
    // √öƒçel v√Ωdaja
    ucelVydajaOptions: {
        mzda: "Mzda",
        mzdaPremia: "Mzda pr√©mia",
        mzdaZaloha: "Mzda z√°loha",
        fakturyDodavatelov: "Fakt√∫ry dod√°vateƒæov",
        ostatneVydavky: "Ostatn√© v√Ωdavky"
    },
    
    // Polia Poklad≈àa
    pokladnaFields: {
        uhradaZavazku: "√öhrada z√°v√§zku",
        typZavazku: "Typ z√°v√§zku",
        zapocitatPohladavku: "Zapoƒç√≠ta≈• pohƒæad√°vku",
        zavazky: "Z√°v√§zky",
        pohladavky: "Pohƒæad√°vky",
        zamestnanec: "Zamestnanec",
        dodavatel: "Dod√°vateƒæ",
        partner: "Partner",
        klient: "Klient",
        zPokladne: "Z pokladne",
        suma: "Suma",
        opisPlatby: "Popis platby",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log",
        zPreplatkuVytvori≈•: "Z preplatku vytvori≈•",
        ucelVydaja: "√öƒçel v√Ωdaja",
        pohyb: "Pohyb",
        datum: "D√°tum",
        id: "ID"
    },
    
    // Polia Z√°v√§zky
    zavazkyFields: {
        zamestnanec: "Zamestnanec",
        dodavatel: "Dod√°vateƒæ",
        partner: "Partner",
        klient: "Klient",
        suma: "Suma",
        zostatok: "Zostatok",
        zaplatene: "Zaplaten√©",
        stav: "Stav",
        datum: "D√°tum",
        info: "info",
        infoUhrada: "info √∫hrada",
        id: "ID"
    },
    
    // Polia Pohƒæad√°vky
    pohladavkyFields: {
        zamestnanec: "Zamestnanec",
        dodavatel: "Dod√°vateƒæ",
        partner: "Partner",
        klient: "Klient",
        suma: "Suma",
        zostatok: "Zostatok",
        zaplatene: "Zaplaten√©",
        stav: "Stav",
        typ: "Typ",
        dlznik: "Dl≈æn√≠k",
        datum: "D√°tum",
        info: "info",
        id: "ID"
    },
    
    // Polia Zamestnanci
    zamestnanciFields: {
        nick: "Nick",
        meno: "Meno",
        priezvisko: "Priezvisko",
        id: "ID"

    },
    // Polia Dod√°vatelia
    dodavateliaFields: {
        nazov: "N√°zov",
        id: "ID"
    },
    
    // Polia Partneri
    partneriFields: {
        nazov: "N√°zov",
        id: "ID"
    },

    
    // Polia Klienti
    klientiFields: {
        nazov: "N√°zov",
        id: "ID"
    },
    // Kon≈°tanty
    typyPohladavok: {
        preplatok: "Preplatok"
    },
    
    pohybTypy: {
        vydavok: "V√Ωdavok"
    }
};

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function getCurrentLine() {
    try {
        throw new Error();
    } catch (e) {
        var stack = e.stack || "";
        var lines = stack.split("\n");
        if (lines.length > 2) {
            var match = lines[2].match(/:(\d+)/);
            return match ? match[1] : "unknown";
        }
    }
    return "unknown";
}

function parseAmount(value) {
    if (value === null || value === undefined || value === "") {
        return 0;
    }
    
    if (typeof value === "number" && !isNaN(value)) {
        return value;
    }
    
    if (typeof value === "string") {
        var cleanValue = value.toString().trim().replace(/[‚Ç¨\s]/g, "").replace(",", ".");
        var parsed = parseFloat(cleanValue);
        return isNaN(parsed) ? 0 : parsed;
    }
    
    var converted = parseFloat(value);
    return isNaN(converted) ? 0 : converted;
}

function formatAmount(value) {
    var parsed = parseAmount(value);
    return Number(parsed.toFixed(2));
}

// ==============================================
// LOGGING FUNKCIE
// ==============================================

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        var debugMessage = "[" + timestamp + "] v" + CONFIG.version + " - " + message;
        
        var existingDebug = entry().field(CONFIG.pokladnaFields.debugLog) || "";
        entry().set(CONFIG.pokladnaFields.debugLog, existingDebug + debugMessage + "\n");
    }
}

function addError(errorMessage, solution) {
    var timestamp = moment().format("DD.MM.YY HH:mm");
    var errorLog = "[" + timestamp + "] " + CONFIG.icons.error + " CHYBA v" + CONFIG.version + " - " + errorMessage;
    errorLog += " | Line: " + getCurrentLine();
    
    if (solution) {
        errorLog += " | Rie≈°enie: " + solution;
    }
    
    var existingError = entry().field(CONFIG.pokladnaFields.errorLog) || "";
    entry().set(CONFIG.pokladnaFields.errorLog, existingError + errorLog + "\n");
}

function addInfoRecord(targetEntry, iconType, actionDescription, details) {
    try {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        var icon = CONFIG.icons[iconType] || CONFIG.icons.systemAction;
        
        var infoText = "[" + timestamp + "] " + icon + " " + actionDescription;
        
        if (details.suma !== undefined) {
            infoText += " | Suma: " + formatAmount(details.suma) + "‚Ç¨";
        }
        if (details.zostatok !== undefined) {
            infoText += " | Zostatok: " + formatAmount(details.zostatok) + "‚Ç¨";
        }
        if (details.vlastnik) {
            infoText += " | Vlastn√≠k: " + details.vlastnik;
        }
        
        if (details.autoGenerated) {
            infoText += "\n" + CONFIG.icons.systemAction + " Automaticky generovan√©:";
            infoText += "\n  Kedy: " + timestamp;
            infoText += "\n  Preƒço: " + (details.dovod || "Spracovanie preplatku");
            infoText += "\n  Ako: Script v" + CONFIG.version;
            infoText += "\n  Z ƒçoho: " + (details.zdrojZaznam || "Poklad≈àa #" + entry().field("ID"));
            infoText += "\n  Kni≈ænica: " + (details.zdrojKniznica || CONFIG.libraries.pokladna);
        }
        
        infoText += " | Script: v" + CONFIG.version;
        
        var targetField = details.fieldType === "uhrada" ? CONFIG.zavazkyFields.infoUhrada : "info";
        var existingInfo = targetEntry.field(targetField) || "";
        targetEntry.set(targetField, existingInfo + infoText + "\n");
        
        addDebug("Info z√°znam pridan√Ω do '" + targetField + "': " + actionDescription);
        
    } catch (error) {
        addError("Zlyhalo pridanie info z√°znamu: " + error.toString(), "Skontrolujte existenciu info pol√≠");
    }
}

// ==============================================
// DETEKCIA VLASTN√çKOV
// ==============================================

function detectOwnerFromZavazok(zavazok) {
    var ownerFields = [
        {field: CONFIG.zavazkyFields.zamestnanec, type: "employee"},
        {field: CONFIG.zavazkyFields.dodavatel, type: "supplier"}, 
        {field: CONFIG.zavazkyFields.partner, type: "partner"},
        {field: CONFIG.zavazkyFields.klient, type: "client"}
    ];
    
    for (var i = 0; i < ownerFields.length; i++) {
        var fieldInfo = ownerFields[i];
        
        try {
            var ownerField = zavazok.field(fieldInfo.field);
            
            if (ownerField && ownerField !== null && ownerField.length > 0) {
                var owner = ownerField[0];
                var displayName = "Nezn√°my vlastn√≠k";
                
                try {
                    if (fieldInfo.type === "employee") {
                        var nick = owner.field(CONFIG.zamestnanciFields.nick);
                        var meno = owner.field(CONFIG.zamestnanciFields.meno) || "";
                        var priezvisko = owner.field(CONFIG.zamestnanciFields.priezvisko) || "";
                        
                        if (nick) {
                            displayName = priezvisko ? nick + " (" + priezvisko + ")" : nick;
                        } else {
                            displayName = (meno + " " + priezvisko).trim() || "Zamestnanec bez Nick";
                        }
                        
                        addDebug("  üìã Zamestnanec - Nick: " + (nick || "N/A") + ", Priezvisko: " + priezvisko);
                        
                    } else {
                        displayName = owner.field("N√°zov") || owner.field("Meno") || "Nezn√°my " + fieldInfo.type;
                    }
                } catch (nameError) {
                    addDebug("‚ö†Ô∏è Chyba pri z√≠skavan√≠ mena vlastn√≠ka: " + nameError.toString());
                    displayName = "Chyba mena (" + fieldInfo.type + ")";
                }
                
                addDebug("‚úÖ Vlastn√≠k identifikovan√Ω: " + displayName + " (typ: " + fieldInfo.type + ")");
                
                return {
                    owner: owner,
                    ownerArray: ownerField,
                    displayName: displayName,
                    type: fieldInfo.type,
                    fieldName: fieldInfo.field
                };
            }
        } catch (fieldError) {
            addDebug("  ‚ö†Ô∏è Pole '" + fieldInfo.field + "' nie je dostupn√©");
            continue;
        }
    }
    
    addDebug("‚ùå ≈Ωiadny vlastn√≠k nen√°jden√Ω v ≈æiadnom poli");
    return null;
}

function detectOwnerFromPohladavka(pohladavka) {
    var ownerFields = [
        {field: CONFIG.pohladavkyFields.zamestnanec, type: "employee"},
        {field: CONFIG.pohladavkyFields.dodavatel, type: "supplier"}, 
        {field: CONFIG.pohladavkyFields.partner, type: "partner"},
        {field: CONFIG.pohladavkyFields.klient, type: "client"}
    ];
    
    for (var i = 0; i < ownerFields.length; i++) {
        var fieldInfo = ownerFields[i];
        
        try {
            var ownerField = pohladavka.field(fieldInfo.field);
            
            if (ownerField && ownerField !== null && ownerField.length > 0) {
                var owner = ownerField[0];
                var displayName = "Nezn√°my vlastn√≠k";
                
                try {
                    if (fieldInfo.type === "employee") {
                        var nick = owner.field(CONFIG.zamestnanciFields.nick);
                        var meno = owner.field(CONFIG.zamestnanciFields.meno) || "";
                        var priezvisko = owner.field(CONFIG.zamestnanciFields.priezvisko) || "";
                        
                        if (nick) {
                            displayName = priezvisko ? nick + " (" + priezvisko + ")" : nick;
                        } else {
                            displayName = (meno + " " + priezvisko).trim() || "Zamestnanec bez Nick";
                        }
                    } else {
                        displayName = owner.field("N√°zov") || owner.field("Meno") || "Nezn√°my " + fieldInfo.type;
                    }
                } catch (nameError) {
                    displayName = "Chyba mena (" + fieldInfo.type + ")";
                }
                
                return {
                    owner: owner,
                    ownerArray: ownerField,
                    displayName: displayName,
                    type: fieldInfo.type,
                    fieldName: fieldInfo.field
                };
            }
        } catch (fieldError) {
            continue;
        }
    }
    
    return null;
}

// ==============================================
// VALID√ÅCIA
// ==============================================

function validateOwnership(zavazkyArray) {
    addDebug("Validujem vlastn√≠kov " + zavazkyArray.length + " z√°v√§zkov...");
    
    if (zavazkyArray.length === 0) {
        return { isValid: true };
    }
    
    var firstOwnerInfo = detectOwnerFromZavazok(zavazkyArray[0]);
    if (!firstOwnerInfo) {
        return { 
            isValid: false, 
            error: "Prv√Ω z√°v√§zok nem√° nastaven√©ho vlastn√≠ka" 
        };
    }
    
    addDebug("Prv√Ω vlastn√≠k: " + firstOwnerInfo.displayName + " (" + firstOwnerInfo.type + ")");
    
    for (var i = 1; i < zavazkyArray.length; i++) {
        var currentOwnerInfo = detectOwnerFromZavazok(zavazkyArray[i]);
        
        if (!currentOwnerInfo) {
            return { 
                isValid: false, 
                error: "Z√°v√§zok " + (i+1) + " nem√° nastaven√©ho vlastn√≠ka" 
            };
        }
        
        var firstOwnerId = firstOwnerInfo.owner.field("ID") || firstOwnerInfo.owner.field("id");
        var currentOwnerId = currentOwnerInfo.owner.field("ID") || currentOwnerInfo.owner.field("id");
        
        if (firstOwnerId !== currentOwnerId || firstOwnerInfo.type !== currentOwnerInfo.type) {
            return { 
                isValid: false, 
                error: "R√¥zni vlastn√≠ci z√°v√§zkov: '" + firstOwnerInfo.displayName + "' vs '" + currentOwnerInfo.displayName + "'" 
            };
        }
    }
    
    addDebug("Valid√°cia vlastn√≠kov √∫spe≈°n√° - v≈°etky z√°v√§zky patria: " + firstOwnerInfo.displayName);
    
    return {
        isValid: true,
        ownerInfo: firstOwnerInfo
    };
}

function filterValidZavazky(zavazkyArray) {
    addDebug("Filtruje platn√© z√°v√§zky z " + zavazkyArray.length + " z√°znamov...");
    
    var validZavazky = [];
    var validStates = [CONFIG.stavy.neuhradene, CONFIG.stavy.ciastocneUhradene];
    
    for (var i = 0; i < zavazkyArray.length; i++) {
        var zavazok = zavazkyArray[i];
        
        if (!zavazok) {
            addError("Z√°v√§zok na poz√≠cii " + (i+1) + " je null", "Odstr√°≈àte pr√°zdne z√°v√§zky zo zoznamu");
            continue;
        }
        
        try {
            var zostatkField = zavazok.field(CONFIG.zavazkyFields.zostatok);
            var zostatok = formatAmount(zostatkField);
            var stav = zavazok.field(CONFIG.zavazkyFields.stav) || "";
            
            addDebug("Z√°v√§zok " + (i+1) + ": zostatok=" + zostatok + "‚Ç¨ (raw: '" + zostatkField + "'), stav='" + stav + "'");
            
            if (validStates.indexOf(stav) !== -1 && zostatok > 0) {
                validZavazky.push(zavazok);
                addDebug("  ‚úÖ Z√°v√§zok zaraden√Ω do √∫hrady");
            } else {
                addDebug("  ‚ö†Ô∏è Z√°v√§zok preskoƒçen√Ω (stav: '" + stav + "', zostatok: " + zostatok + "‚Ç¨)");
            }
        } catch (error) {
            addError("Chyba pri ƒç√≠tan√≠ z√°v√§zku " + (i+1) + ": " + error.toString(), "Skontrolujte ≈°trukt√∫ru z√°v√§zku");
        }
    }
    
    addDebug("Filtrovanie dokonƒçen√©: " + validZavazky.length + " platn√Ωch z√°v√§zkov");
    return validZavazky;
}

function validatePohladavky(pohladavkyArray, ownerInfo) {
    addDebug("Validujem pohƒæad√°vky pre zapoƒç√≠tanie...");
    
    var validPohladavky = [];
    var validStates = [CONFIG.stavy.neuhradene, CONFIG.stavy.ciastocneUhradene];
    
    for (var i = 0; i < pohladavkyArray.length; i++) {
        var pohladavka = pohladavkyArray[i];
        
        if (!pohladavka) {
            addError("Pohƒæad√°vka na poz√≠cii " + (i+1) + " je null", "Odstr√°≈àte pr√°zdne pohƒæad√°vky");
            continue;
        }
        
        try {
            var zostatkField = pohladavka.field(CONFIG.pohladavkyFields.zostatok);
            var zostatok = formatAmount(zostatkField);
            var stav = pohladavka.field(CONFIG.pohladavkyFields.stav) || "";
            
            if (validStates.indexOf(stav) === -1 || zostatok <= 0) {
                addDebug("  ‚ö†Ô∏è Pohƒæad√°vka " + (i+1) + " preskoƒçen√° (stav: '" + stav + "', zostatok: " + zostatok + "‚Ç¨)");
                continue;
            }
            
            var pohladavkaOwnerInfo = detectOwnerFromPohladavka(pohladavka);
            
            if (!pohladavkaOwnerInfo) {
                addError("Pohƒæad√°vka " + (i+1) + " nem√° vlastn√≠ka", "Nastavte vlastn√≠ka pohƒæad√°vky");
                continue;
            }
            
            var zavazokOwnerId = ownerInfo.owner.field("ID") || ownerInfo.owner.field("id");
            var pohladavkaOwnerId = pohladavkaOwnerInfo.owner.field("ID") || pohladavkaOwnerInfo.owner.field("id");
            
            if (zavazokOwnerId !== pohladavkaOwnerId || ownerInfo.type !== pohladavkaOwnerInfo.type) {
                addError("Pohƒæad√°vka " + (i+1) + " m√° in√©ho vlastn√≠ka: " + pohladavkaOwnerInfo.displayName + 
                        " (oƒçak√°van√Ω: " + ownerInfo.displayName + ")", 
                        "Pou≈æite len pohƒæad√°vky rovnak√©ho vlastn√≠ka");
                continue;
            }
            
            validPohladavky.push({
                entry: pohladavka,
                zostatok: zostatok,
                ownerInfo: pohladavkaOwnerInfo
            });
            
            addDebug("  ‚úÖ Pohƒæad√°vka " + (i+1) + " validn√°: " + zostatok + "‚Ç¨");
            
        } catch (error) {
            addError("Chyba pri valid√°cii pohƒæad√°vky " + (i+1) + ": " + error.toString());
        }
    }
    
    addDebug("Valid√°cia pohƒæad√°vok dokonƒçen√°: " + validPohladavky.length + " platn√Ωch");
    return validPohladavky;
}

// ==============================================
// V√ùPOƒåET SUMY
// ==============================================

function calculateAvailableAmount(ownerInfo) {
    addDebug("Poƒç√≠tam dostupn√∫ sumu na √∫hrady...");
    
    var sumaField = entry().field(CONFIG.pokladnaFields.suma);
    addDebug("üîç Hodnota z poƒæa 'Suma': '" + sumaField + "' (typ: " + typeof sumaField + ")");
    
    var sumaPole = formatAmount(sumaField);
    addDebug("Z√°kladn√° suma z poƒæa 'Suma': " + sumaPole + "‚Ç¨");
    
    var dostupnaSuma = sumaPole;
    var pohladavkyInfo = {
        pouzite: [],
        celkovaSuma: 0
    };
    
    var zapocitatPohladavku = entry().field(CONFIG.pokladnaFields.zapocitatPohladavku) || false;
    addDebug("Zapoƒç√≠ta≈• pohƒæad√°vky: " + zapocitatPohladavku);
    
    if (zapocitatPohladavku) {
        var pohladavkyArray = entry().field(CONFIG.pokladnaFields.pohladavky) || [];
        
        if (pohladavkyArray.length > 0) {
            addDebug("Validujem " + pohladavkyArray.length + " pohƒæad√°vok...");
            
            var validPohladavky = validatePohladavky(pohladavkyArray, ownerInfo);
            
            if (validPohladavky.length > 0) {
                var pohladavkySuma = 0;
                for (var i = 0; i < validPohladavky.length; i++) {
                    pohladavkySuma = formatAmount(pohladavkySuma + validPohladavky[i].zostatok);
                    addDebug("  Pohƒæad√°vka " + (i+1) + ": " + validPohladavky[i].zostatok + "‚Ç¨");
                }
                
                dostupnaSuma = formatAmount(dostupnaSuma + pohladavkySuma);
                addDebug("Celkov√° suma z pohƒæad√°vok: " + pohladavkySuma + "‚Ç¨");
                
                pohladavkyInfo = {
                    pouzite: validPohladavky,
                    celkovaSuma: pohladavkySuma
                };
            } else {
                addError("≈Ωiadne platn√© pohƒæad√°vky na zapoƒç√≠tanie", "Skontrolujte vlastn√≠kov a stavy pohƒæad√°vok");
            }
        } else {
            addDebug("≈Ωiadne pohƒæad√°vky na zapoƒç√≠tanie");
        }
    }
    
    if (dostupnaSuma === 0) {
        addDebug("Suma nie je zadan√° - poƒç√≠tam zo zostatkov z√°v√§zkov...");
        var zavazkyArray = entry().field(CONFIG.pokladnaFields.zavazky) || [];
        var celkovyZostatok = 0;
        
        for (var i = 0; i < zavazkyArray.length; i++) {
            var zavazok = zavazkyArray[i];
            
            if (zavazok) {
                try {
                    var zostatkField = zavazok.field(CONFIG.zavazkyFields.zostatok);
                    var zostatok = formatAmount(zostatkField);
                    celkovyZostatok = formatAmount(celkovyZostatok + zostatok);
                    addDebug("  Z√°v√§zok " + (i+1) + ": " + zostatok + "‚Ç¨ (raw: '" + zostatkField + "')");
                } catch (error) {
                    addError("Chyba pri ƒç√≠tan√≠ z√°v√§zku pri v√Ωpoƒçte sumy: " + error.toString());
                }
            }
        }
        
        dostupnaSuma = celkovyZostatok;
        addDebug("Automaticky vypoƒç√≠tan√° suma: " + dostupnaSuma + "‚Ç¨");
    }
    
    addDebug("üéØ FIN√ÅLNA dostupn√° suma: " + dostupnaSuma + "‚Ç¨");
    
    return {
        dostupnaSuma: dostupnaSuma,
        pohladavkyInfo: pohladavkyInfo,
        zakladnaSuma: sumaPole
    };
}

// ==============================================
// SPRACOVANIE PLATIEB
// ==============================================

function processPayments(validZavazky, dostupnaSuma, ownerInfo) {
    addDebug("Sp√∫≈°≈•am proces √∫hrad z√°v√§zkov...");
    addDebug("Dostupn√° suma: " + dostupnaSuma + "‚Ç¨, Z√°v√§zky: " + validZavazky.length);
    
    var uhradeneZavazky = [];
    var datumyZavazkov = [];
    var zbyvajucaSuma = dostupnaSuma;
    
    validZavazky.sort(function(a, b) {
        var dateA = a.field(CONFIG.zavazkyFields.datum) || new Date(0);
        var dateB = b.field(CONFIG.zavazkyFields.datum) || new Date(0);
        return new Date(dateA) - new Date(dateB);
    });
    
    addDebug("Z√°v√§zky zoraden√© chronologicky");
    
    for (var i = 0; i < validZavazky.length && zbyvajucaSuma > 0; i++) {
        var zavazok = validZavazky[i];
        var zostatkField = zavazok.field(CONFIG.zavazkyFields.zostatok);
        var zostatok = formatAmount(zostatkField);
        var datum = zavazok.field(CONFIG.zavazkyFields.datum);
        
        addDebug("KROK " + (i+1) + ": Z√°v√§zok " + zostatok + "‚Ç¨ (raw: '" + zostatkField + "'), dostupn√©: " + zbyvajucaSuma + "‚Ç¨");
        
        if (zbyvajucaSuma >= zostatok) {
            var pvodneZaplateneField = zavazok.field(CONFIG.zavazkyFields.zaplatene);
            var pvodneZaplatene = formatAmount(pvodneZaplateneField);
            var noveZaplatene = formatAmount(pvodneZaplatene + zostatok);
            
            addDebug("  üìä √öpln√° √∫hrada: p√¥vodne zaplaten√©=" + pvodneZaplatene + "‚Ç¨, nov√©=" + noveZaplatene + "‚Ç¨");
            
            zavazok.set(CONFIG.zavazkyFields.zaplatene, noveZaplatene);
            zavazok.set(CONFIG.zavazkyFields.zostatok, 0);
            zavazok.set(CONFIG.zavazkyFields.stav, CONFIG.stavy.uhradene);
            
            addInfoRecord(zavazok, "uplnaUhrada", "√öPLN√Å √öHRADA Z√ÅV√ÑZKU", {
                suma: zostatok,
                zostatok: 0,
                vlastnik: ownerInfo.displayName,
                fieldType: "uhrada"
            });
            
            uhradeneZavazky.push({amount: zostatok, type: "√∫pln√°"});
            zbyvajucaSuma = formatAmount(zbyvajucaSuma - zostatok);
            
            addDebug("  ‚úÖ √öpln√° √∫hrada: " + zostatok + "‚Ç¨, zost√°va: " + zbyvajucaSuma + "‚Ç¨");
            
        } else if (zbyvajucaSuma > 0) {
            var pvodneZaplateneField = zavazok.field(CONFIG.zavazkyFields.zaplatene);
            var pvodneZaplatene = formatAmount(pvodneZaplateneField);
            var noveZaplatene = formatAmount(pvodneZaplatene + zbyvajucaSuma);
            var novyZostatok = formatAmount(zostatok - zbyvajucaSuma);
            
            addDebug("  üìä ƒåiastoƒçn√° √∫hrada: p√¥vodne zaplaten√©=" + pvodneZaplatene + "‚Ç¨, nov√©=" + noveZaplatene + "‚Ç¨, nov√Ω zostatok=" + novyZostatok + "‚Ç¨");
            
            zavazok.set(CONFIG.zavazkyFields.zaplatene, noveZaplatene);
            zavazok.set(CONFIG.zavazkyFields.zostatok, novyZostatok);
            zavazok.set(CONFIG.zavazkyFields.stav, CONFIG.stavy.ciastocneUhradene);
            
            addInfoRecord(zavazok, "ciastocnaUhrada", "ƒåIASTOƒåN√Å √öHRADA Z√ÅV√ÑZKU", {
                suma: zbyvajucaSuma,
                zostatok: novyZostatok,
                vlastnik: ownerInfo.displayName,
                fieldType: "uhrada"
            });
            
            uhradeneZavazky.push({amount: zbyvajucaSuma, type: "ƒçiastoƒçn√°"});
            
            addDebug("  üîÑ ƒåiastoƒçn√° √∫hrada: " + zbyvajucaSuma + "‚Ç¨, zost√°va na z√°v√§zku: " + novyZostatok + "‚Ç¨");
            zbyvajucaSuma = 0;
        }
        
        if (datum) {
            try {
                datumyZavazkov.push(moment(datum).format("DD.MM.YY"));
            } catch (dateError) {
                datumyZavazkov.push("N/A");
            }
        }
    }
    
    addDebug("Proces √∫hrad dokonƒçen√Ω:");
    addDebug("  Uhraden√© z√°v√§zky: " + uhradeneZavazky.length);
    addDebug("  Preplatok: " + zbyvajucaSuma + "‚Ç¨");
    
    return {
        uhradeneZavazky: uhradeneZavazky,
        datumyZavazkov: datumyZavazkov,
        preplatokSuma: zbyvajucaSuma
    };
}

function processPohladavkyPayments(validPohladavky, potrebnaSuma) {
    addDebug("Spracov√°vam √∫hradu pohƒæad√°vkami...");
    addDebug("  Potrebn√° suma: " + potrebnaSuma + "‚Ç¨");
    addDebug("  Dostupn√© pohƒæad√°vky: " + validPohladavky.length);
    
    var pouzitePohladavky = [];
    var zostavajtePouzit = potrebnaSuma;
    var celkovoPouzite = 0;
    
    validPohladavky.sort(function(a, b) {
        var dateA = a.entry.field(CONFIG.pohladavkyFields.datum) || new Date(0);
        var dateB = b.entry.field(CONFIG.pohladavkyFields.datum) || new Date(0);
        return new Date(dateA) - new Date(dateB);
    });
    
    for (var i = 0; i < validPohladavky.length && zostavajtePouzit > 0; i++) {
        var pohladavkaData = validPohladavky[i];
        var pohladavka = pohladavkaData.entry;
        var zostatok = pohladavkaData.zostatok;
        
        var suma = formatAmount(pohladavka.field(CONFIG.pohladavkyFields.suma));
        var pvodneZaplatene = formatAmount(pohladavka.field(CONFIG.pohladavkyFields.zaplatene) || 0);
        
        addDebug("  Pohƒæad√°vka " + (i+1) + ": suma=" + suma + "‚Ç¨, zaplaten√©=" + pvodneZaplatene + "‚Ç¨, zostatok=" + zostatok + "‚Ç¨");
        
        if (zostavajtePouzit >= zostatok) {
            var pouzitieSuma = zostatok;
            var noveZaplatene = formatAmount(pvodneZaplatene + pouzitieSuma);
            var novyZostatok = formatAmount(suma - noveZaplatene);
            
            pohladavka.set(CONFIG.pohladavkyFields.zaplatene, noveZaplatene);
            pohladavka.set(CONFIG.pohladavkyFields.zostatok, novyZostatok);
            pohladavka.set(CONFIG.pohladavkyFields.stav, CONFIG.stavy.uhradene);
            
            addDebug("    ‚úÖ √öplne pou≈æit√°: zaplaten√© " + pvodneZaplatene + "‚Ç¨ ‚Üí " + noveZaplatene + "‚Ç¨, zostatok " + zostatok + "‚Ç¨ ‚Üí " + novyZostatok + "‚Ç¨");
            
            addInfoRecord(pohladavka, "uplnaUhrada", "POHƒΩAD√ÅVKA POU≈ΩIT√Å NA √öHRADU Z√ÅV√ÑZKOV", {
                suma: pouzitieSuma,
                zostatok: novyZostatok,
                vlastnik: pohladavkaData.ownerInfo.displayName,
                fieldType: "info"
            });
            
            pouzitePohladavky.push({
                entry: pohladavka,
                suma: pouzitieSuma,
                typ: "√∫pln√°"
            });
            
            celkovoPouzite = formatAmount(celkovoPouzite + pouzitieSuma);
            zostavajtePouzit = formatAmount(zostavajtePouzit - pouzitieSuma);
            
        } else if (zostavajtePouzit > 0) {
            var pouzitieSuma = zostavajtePouzit;
            var noveZaplatene = formatAmount(pvodneZaplatene + pouzitieSuma);
            var novyZostatok = formatAmount(suma - noveZaplatene);
            
            pohladavka.set(CONFIG.pohladavkyFields.zaplatene, noveZaplatene);
            pohladavka.set(CONFIG.pohladavkyFields.zostatok, novyZostatok);
            pohladavka.set(CONFIG.pohladavkyFields.stav, CONFIG.stavy.ciastocneUhradene);
            
            addDebug("    üîÑ ƒåiastoƒçne pou≈æit√°: zaplaten√© " + pvodneZaplatene + "‚Ç¨ ‚Üí " + noveZaplatene + "‚Ç¨, zostatok " + zostatok + "‚Ç¨ ‚Üí " + novyZostatok + "‚Ç¨");
            
            addInfoRecord(pohladavka, "ciastocnaUhrada", "POHƒΩAD√ÅVKA ƒåIASTOƒåNE POU≈ΩIT√Å NA √öHRADU Z√ÅV√ÑZKOV", {
                suma: pouzitieSuma,
                zostatok: novyZostatok,
                vlastnik: pohladavkaData.ownerInfo.displayName,
                fieldType: "info"
            });
            
            pouzitePohladavky.push({
                entry: pohladavka,
                suma: pouzitieSuma,
                typ: "ƒçiastoƒçn√°"
            });
            
            celkovoPouzite = formatAmount(celkovoPouzite + pouzitieSuma);
            zostavajtePouzit = 0;
        }
    }
    
    addDebug("Spracovanie pohƒæad√°vok dokonƒçen√©:");
    addDebug("  Pou≈æit√© pohƒæad√°vky: " + pouzitePohladavky.length);
    addDebug("  Celkovo pou≈æit√©: " + celkovoPouzite + "‚Ç¨");
    
    return {
        pouzitePohladavky: pouzitePohladavky,
        celkovoPouzite: celkovoPouzite
    };
}

// ==============================================
// SPRACOVANIE PREPLATKU
// ==============================================

function processPreplatok(preplatokSuma, ownerInfo) {
    if (preplatokSuma <= 0) {
        addDebug("≈Ωiadny preplatok na spracovanie");
        return;
    }
    
    addDebug("Spracov√°vam preplatok: " + preplatokSuma + "‚Ç¨");
    
    var typPreplatku = entry().field(CONFIG.pokladnaFields.zPreplatkuVytvori≈•);
    
    if (!typPreplatku) {
        addError("Typ preplatku nie je vybran√Ω", "Vyberte 'Z√°lohu' alebo 'Pr√©miu' v poli 'Z preplatku vytvori≈•'");
        return;
    }
    
    try {
        if (typPreplatku === CONFIG.typyPreplatku.zaloha) {
            createPohladavka(preplatokSuma, ownerInfo);
        } else if (typPreplatku === CONFIG.typyPreplatku.premia) {
            createPremiovaPokladna(preplatokSuma, ownerInfo);
        } else {
            addError("Nezn√°my typ preplatku: '" + typPreplatku + "'", "Podporovan√© typy: 'Z√°lohu', 'Pr√©miu'");
        }
    } catch (error) {
        addError("Kritick√° chyba pri spracovan√≠ preplatku: " + error.toString(), "Skontrolujte dostupnos≈• cieƒæov√Ωch kni≈æn√≠c");
        throw error;
    }
}

function createPohladavka(suma, ownerInfo) {
    addDebug("Vytv√°ram pohƒæad√°vku zo sumy: " + suma + "‚Ç¨");
    
    try {
        var pohladavkyLib = libByName(CONFIG.libraries.pohladavky);
        
        if (!pohladavkyLib) {
            throw new Error("Kni≈ænica '" + CONFIG.libraries.pohladavky + "' nen√°jden√°");
        }
        
        // 1. VYTVOR POHƒΩAD√ÅVKU
        var initData = {};
        initData[ownerInfo.fieldName] = [ownerInfo.owner];
        initData[CONFIG.pohladavkyFields.suma] = formatAmount(suma);
        initData[CONFIG.pohladavkyFields.zostatok] = formatAmount(suma);
        initData[CONFIG.pohladavkyFields.zaplatene] = 0;
        initData[CONFIG.pohladavkyFields.stav] = CONFIG.stavy.neuhradene;
        initData[CONFIG.pohladavkyFields.datum] = moment().toDate();
        initData[CONFIG.pohladavkyFields.typ] = CONFIG.typyPohladavok.preplatok;
        
        var dlznikTyp = "";
        if (ownerInfo.type === "employee") dlznikTyp = "Zamestnanec";
        else if (ownerInfo.type === "supplier") dlznikTyp = "Dod√°vateƒæ";
        else if (ownerInfo.type === "partner") dlznikTyp = "Partner";
        else if (ownerInfo.type === "client") dlznikTyp = "Klient";
        
        if (dlznikTyp) {
            initData[CONFIG.pohladavkyFields.dlznik] = dlznikTyp;
        }
        
        var novaPohladavka = pohladavkyLib.create(initData);
        
        if (!novaPohladavka) {
            throw new Error("create() vr√°tilo null pre pohƒæad√°vku");
        }
        
        addInfoRecord(novaPohladavka, "pohladavkaVytvorena", "POHƒΩAD√ÅVKA VYTVOREN√Å Z PREPLATKU", {
            suma: suma,
            zostatok: suma,
            vlastnik: ownerInfo.displayName,
            autoGenerated: true,
            dovod: "Preplatok pri √∫hrade z√°v√§zkov",
            zdrojZaznam: "Poklad≈àa #" + entry().field(CONFIG.pokladnaFields.id),
            zdrojKniznica: CONFIG.libraries.pokladna
        });
        
        addDebug("‚úÖ Pohƒæad√°vka √∫spe≈°ne vytvoren√° pre " + ownerInfo.displayName);
        
        // 2. VYTVOR POKLADNIƒåN√ù Z√ÅZNAM PRE Z√ÅLOHU
        addDebug("Vytv√°ram pokladniƒçn√Ω z√°znam pre z√°lohu na mzdu...");
        
        var pokladnaLib = libByName(CONFIG.libraries.pokladna);
        
        if (!pokladnaLib) {
            throw new Error("Kni≈ænica '" + CONFIG.libraries.pokladna + "' nen√°jden√°");
        }
        
        // Priprav popis s Nick pre zamestnancov
        var popisZalohy = "";
        if (ownerInfo.type === "employee") {
            try {
                var nick = ownerInfo.owner.field(CONFIG.zamestnanciFields.nick);
                if (nick) {
                    popisZalohy = "Z√°loha na mzdu pre " + nick + " z preplatku";
                } else {
                    popisZalohy = "Z√°loha na mzdu pre " + ownerInfo.displayName + " z preplatku";
                }
            } catch (nickError) {
                popisZalohy = "Z√°loha na mzdu pre " + ownerInfo.displayName + " z preplatku";
            }
        } else {
            popisZalohy = "Z√°loha pre " + ownerInfo.displayName + " z preplatku";
        }
        
        // Priprav d√°ta pre nov√Ω pokladniƒçn√Ω z√°znam
        var pokladnaData = {};
        pokladnaData[CONFIG.pokladnaFields.suma] = formatAmount(suma);
        pokladnaData[CONFIG.pokladnaFields.pohyb] = CONFIG.pohybTypy.vydavok;
        pokladnaData[CONFIG.pokladnaFields.opisPlatby] = popisZalohy;
        pokladnaData[CONFIG.pokladnaFields.datum] = moment().toDate();
        
        // Nastav √∫ƒçel v√Ωdaja podƒæa typu vlastn√≠ka
        if (ownerInfo.type === "employee") {
            pokladnaData[CONFIG.pokladnaFields.ucelVydaja] = CONFIG.ucelVydajaOptions.mzdaZaloha;
        } else {
            pokladnaData[CONFIG.pokladnaFields.ucelVydaja] = CONFIG.ucelVydajaOptions.ostatneVydavky;
        }
        
        // Skop√≠ruj poklad≈àu z p√¥vodn√©ho z√°znamu
        var povodnaPokladna = entry().field(CONFIG.pokladnaFields.zPokladne);
        if (povodnaPokladna) {
            pokladnaData[CONFIG.pokladnaFields.zPokladne] = povodnaPokladna;
        }
        
        // Nastav vlastn√≠ka
        if (ownerInfo.fieldName) {
            pokladnaData[ownerInfo.fieldName] = [ownerInfo.owner];
        }
        
        // Linkuj na pohƒæad√°vku
        pokladnaData[CONFIG.pokladnaFields.pohladavky] = [novaPohladavka];
        
        var novyPokladnicnyZaznam = pokladnaLib.create(pokladnaData);
        
        if (!novyPokladnicnyZaznam) {
            throw new Error("create() vr√°tilo null pre pokladniƒçn√Ω z√°znam z√°lohy");
        }
        
        // Info z√°znam do nov√©ho pokladniƒçn√©ho z√°znamu
        addInfoRecord(novyPokladnicnyZaznam, "systemAction", "Z√ÅLOHA NA MZDU VYTVOREN√Å Z PREPLATKU", {
            suma: suma,
            vlastnik: ownerInfo.displayName,
            autoGenerated: true,
            dovod: "Preplatok pri √∫hrade z√°v√§zkov - vytvoren√° z√°loha",
            zdrojZaznam: "Poklad≈àa #" + entry().field("ID"),
            zdrojKniznica: CONFIG.libraries.pokladna
        });
        
        // Pridaj info o linknutej pohƒæad√°vke
        var pohladavkaId = novaPohladavka.field("ID") || novaPohladavka.field("id");
        if (pohladavkaId) {
            var existingInfo = novyPokladnicnyZaznam.field(CONFIG.pokladnaFields.info) || "";
            var additionalInfo = "üìé Linknut√° pohƒæad√°vka #" + pohladavkaId;
            novyPokladnicnyZaznam.set(CONFIG.pokladnaFields.info, existingInfo + additionalInfo + "\n");
        }
        
        // Pridaj info do pohƒæad√°vky o vytvoren√≠ pokladniƒçn√©ho z√°znamu
        var pokladnaId = novyPokladnicnyZaznam.field("ID") || novyPokladnicnyZaznam.field("id");
        if (pokladnaId) {
            var existingPohladavkaInfo = novaPohladavka.field(CONFIG.pohladavkyFields.info) || "";
            var additionalPohladavkaInfo = "üí∞ Vytvoren√Ω pokladniƒçn√Ω z√°znam pre z√°lohu #" + pokladnaId;
            novaPohladavka.set(CONFIG.pohladavkyFields.info, existingPohladavkaInfo + additionalPohladavkaInfo + "\n");
        }
        
        addDebug("‚úÖ Pokladniƒçn√Ω z√°znam pre z√°lohu √∫spe≈°ne vytvoren√Ω");
        addDebug("  üí∞ Suma z√°lohy: " + suma + "‚Ç¨");
        addDebug("  üìù Popis: " + popisZalohy);
        addDebug("  üéØ √öƒçel v√Ωdaja: " + (ownerInfo.type === "employee" ? CONFIG.ucelVydajaOptions.mzdaZaloha : CONFIG.ucelVydajaOptions.ostatneVydavky));
        addDebug("  üìé Linknut√° pohƒæad√°vka ID: " + (pohladavkaId || "N/A"));
        addDebug("  üìã Pokladniƒçn√Ω z√°znam ID: " + (pokladnaId || "N/A"));
        
    } catch (error) {
        addError("Vytvorenie pohƒæad√°vky/z√°lohy zlyhalo: " + error.toString(), "Skontrolujte dostupnos≈• kni≈æn√≠c a ich polia");
        throw error;
    }
}

function createPremiovaPokladna(suma, ownerInfo) {
    addDebug("Vytv√°ram pr√©miov√Ω pokladniƒçn√Ω z√°znam so sumou: " + suma + "‚Ç¨");
    
    try {
        var pokladnaLib = libByName(CONFIG.libraries.pokladna);
        
        if (!pokladnaLib) {
            throw new Error("Kni≈ænica '" + CONFIG.libraries.pokladna + "' nen√°jden√°");
        }
        
        var popis = "";
        if (ownerInfo.type === "employee") {
            try {
                var nick = ownerInfo.owner.field(CONFIG.zamestnanciFields.nick);
                if (nick) {
                    popis = "Pr√©mia pre " + nick + " (z preplatku pri √∫hrade z√°v√§zkov)";
                } else {
                    popis = "Pr√©mia pre " + ownerInfo.displayName + " (z preplatku pri √∫hrade z√°v√§zkov)";
                }
            } catch (nickError) {
                popis = "Pr√©mia pre " + ownerInfo.displayName + " (z preplatku pri √∫hrade z√°v√§zkov)";
            }
        } else {
            popis = "Pr√©mia pre " + ownerInfo.displayName + " (z preplatku pri √∫hrade z√°v√§zkov)";
        }
        
        var initData = {};
        initData[CONFIG.pokladnaFields.suma] = formatAmount(suma);
        initData[CONFIG.pokladnaFields.pohyb] = CONFIG.pohybTypy.vydavok;
        initData[CONFIG.pokladnaFields.ucelVydaja] = CONFIG.ucelVydajaOptions.mzdaPremia;
        initData[CONFIG.pokladnaFields.opisPlatby] = popis;
        initData[CONFIG.pokladnaFields.datum] = moment().toDate();
        initData[CONFIG.pokladnaFields.zPokladne] = entry().field(CONFIG.pokladnaFields.zPokladne);
        initData[CONFIG.pokladnaFields.id] = entry().field(CONFIG.pokladnaFields.id) + 1;
        
        if (ownerInfo.fieldName) {
            initData[ownerInfo.fieldName] = [ownerInfo.owner];
        }
        
        var novaPlatba = pokladnaLib.create(initData);
        
        if (!novaPlatba) {
            throw new Error("create() vr√°tilo null pre z√°znam pr√©mie");
        }
        
        addInfoRecord(novaPlatba, "premiaVytvorena", "PLATBA PR√âMIE VYTVOREN√Å", {
            suma: suma,
            vlastnik: ownerInfo.displayName,
            autoGenerated: true,
            dovod: "Preplatok pri √∫hrade z√°v√§zkov",
            zdrojZaznam: "Poklad≈àa #" + entry().field("ID"),
            zdrojKniznica: CONFIG.libraries.pokladna
        });
        
        addDebug("‚úÖ Platba pr√©mie √∫spe≈°ne vytvoren√° pre " + ownerInfo.displayName);
        
    } catch (error) {
        addError("Vytvorenie z√°znamu pr√©mie zlyhalo: " + error.toString(), "Skontrolujte dostupnos≈• kni≈ænice 'Poklad≈àa' a jej polia");
        throw error;
    }
}

// ==============================================
// FINALIZ√ÅCIA
// ==============================================

function finalizeTransaction(originalAmount, preplatokSuma, paymentResult, ownerInfo) {
    addDebug("Finalizujem transakciu...");
    addDebug("  üîç P√¥vodn√° suma: " + originalAmount + "‚Ç¨, preplatok: " + preplatokSuma + "‚Ç¨");
    
    var finalAmount = formatAmount(originalAmount - preplatokSuma);
    addDebug("  " + CONFIG.icons.money + " Fin√°lna suma na z√°pis: " + finalAmount + "‚Ç¨");
    
    entry().set(CONFIG.pokladnaFields.suma, finalAmount);
    
    try {
        entry().set(CONFIG.pokladnaFields.zamestnanec, []);
        entry().set(CONFIG.pokladnaFields.dodavatel, []);
        entry().set(CONFIG.pokladnaFields.partner, []);
        entry().set(CONFIG.pokladnaFields.klient, []);
        addDebug("  üßπ Vymazan√© predch√°dzaj√∫ce vlastn√≠ctvo");
    } catch (clearError) {
        addDebug("  ‚ö†Ô∏è Niektor√© polia vlastn√≠kov sa nepodarilo vymaza≈•: " + clearError.toString());
    }
    
    if (ownerInfo.type === "employee" && CONFIG.pokladnaFields.zamestnanec) {
        entry().set(CONFIG.pokladnaFields.zamestnanec, [ownerInfo.owner]);
        addDebug("  üë§ Nastaven√Ω zamestnanec: " + ownerInfo.displayName);
    } else if (ownerInfo.type === "supplier" && CONFIG.pokladnaFields.dodavatel) {
        entry().set(CONFIG.pokladnaFields.dodavatel, [ownerInfo.owner]);
        addDebug("  üè≠ Nastaven√Ω dod√°vateƒæ: " + ownerInfo.displayName);
    } else if (ownerInfo.type === "partner" && CONFIG.pokladnaFields.partner) {
        entry().set(CONFIG.pokladnaFields.partner, [ownerInfo.owner]);
        addDebug("  ü§ù Nastaven√Ω partner: " + ownerInfo.displayName);
    } else if (ownerInfo.type === "client" && CONFIG.pokladnaFields.klient) {
        entry().set(CONFIG.pokladnaFields.klient, [ownerInfo.owner]);
        addDebug("  üë• Nastaven√Ω klient: " + ownerInfo.displayName);
    }
    
    var datumyStr = "";
    if (paymentResult.datumyZavazkov && paymentResult.datumyZavazkov.length > 0) {
        var uniqueDates = [];
        for (var i = 0; i < paymentResult.datumyZavazkov.length; i++) {
            if (uniqueDates.indexOf(paymentResult.datumyZavazkov[i]) === -1) {
                uniqueDates.push(paymentResult.datumyZavazkov[i]);
            }
        }
        uniqueDates.sort();
        datumyStr = uniqueDates.join(", ");
    }
    
    var popis;
    if (ownerInfo.type === "employee") {
        try {
            var nick = ownerInfo.owner.field(CONFIG.zamestnanciFields.nick);
            if (nick) {
                popis = "Mzda " + nick + ", √∫hrada z√°v√§zkov" + (datumyStr ? " zo " + datumyStr : "");
            } else {
                popis = ownerInfo.displayName + ", √∫hrada z√°v√§zkov" + (datumyStr ? " zo " + datumyStr : "");
            }
        } catch (error) {
            popis = ownerInfo.displayName + ", √∫hrada z√°v√§zkov" + (datumyStr ? " zo " + datumyStr : "");
        }
    
    } else if (ownerInfo.type === "supplier") {
        try {
            var nazov = ownerInfo.owner.field(CONFIG.zamestnanciFields.nazov);
            if (nazov) {
                popis = "Uhrada fakt√∫ry " + nazov + ", √∫hrada z√°v√§zkov" + (datumyStr ? " zo " + datumyStr : "");
            } else {
                popis = ownerInfo.displayName + ", √∫hrada z√°v√§zkov" + (datumyStr ? " zo " + datumyStr : "");
            }
        } catch (error) {
            popis = ownerInfo.displayName + ", √∫hrada z√°v√§zkov" + (datumyStr ? " zo " + datumyStr : "");
        }
    } else {
        popis = ownerInfo.displayName + ", √∫hrada z√°v√§zkov" + (datumyStr ? " zo " + datumyStr : "");
    }
    
    entry().set(CONFIG.pokladnaFields.opisPlatby, popis);
    addDebug("  üìù Popis platby: " + popis);
    
    var ucelVydaja = CONFIG.ucelVydajaOptions.ostatneVydavky;
    if (ownerInfo.type === "employee") {
        ucelVydaja = CONFIG.ucelVydajaOptions.mzda;
    } else if (ownerInfo.type === "supplier") {
        ucelVydaja = CONFIG.ucelVydajaOptions.fakturyDodavatelov;
    }
    
    entry().set(CONFIG.pokladnaFields.ucelVydaja, ucelVydaja);
    addDebug("  üéØ √öƒçel v√Ωdaja: " + ucelVydaja);
    
    addInfoRecord(entry(), "uhradaDokoncena", "√öHRADA Z√ÅV√ÑZKOV DOKONƒåEN√Å", {
        suma: finalAmount,
        vlastnik: ownerInfo.displayName
    });
    
    addDebug("‚úÖ Transakcia finalizovan√° - fin√°lna suma: " + finalAmount + "‚Ç¨");
}

function generateFinalReport(originalAmount, preplatokSuma, paymentResult, ownerInfo, typPreplatku, pohladavkyUse) {
    addDebug("Generujem fin√°lny report...");
    
    var finalUsedAmount = formatAmount(originalAmount - preplatokSuma);
    
    var report = CONFIG.icons.uhradaDokoncena + " √öHRADA Z√ÅV√ÑZKOV DOKONƒåEN√Å (v" + CONFIG.version + ")\n\n";
    report += "üë§ Veriteƒæ: " + ownerInfo.displayName + "\n";
    
    if (pohladavkyUse && pohladavkyUse > 0) {
        report += CONFIG.icons.money + " Pou≈æit√© pohƒæad√°vky: " + pohladavkyUse + "‚Ç¨\n";
        report += CONFIG.icons.money + " Zadan√° suma: " + (originalAmount - pohladavkyUse) + "‚Ç¨\n";
        report += CONFIG.icons.money + " Celkov√° suma na √∫hrady: " + originalAmount + "‚Ç¨\n";
    } else {
        report += CONFIG.icons.money + " P√¥vodn√° suma: " + originalAmount + "‚Ç¨\n";
    }
    
    report += "üìã Uhraden√© z√°v√§zky: " + paymentResult.uhradeneZavazky.length + "\n";
    report += "üíµ Pou≈æit√° suma na √∫hrady: " + finalUsedAmount + "‚Ç¨\n";
    
    if (preplatokSuma > 0) {
        report += "\n" + CONFIG.icons.pohladavkaVytvorena + " Preplatok: " + preplatokSuma + "‚Ç¨\n";
        if (typPreplatku === CONFIG.typyPreplatku.zaloha) {
            report += "üìù Vytvoren√©:\n";
            report += "  ‚Ä¢ Pohƒæad√°vka: " + preplatokSuma + "‚Ç¨\n";
            report += "  ‚Ä¢ Poklad≈àa - z√°loha na mzdu: " + preplatokSuma + "‚Ç¨\n";
        } else if (typPreplatku === CONFIG.typyPreplatku.premia) {
            report += "üìù Vytvoren√©: Poklad≈àa - pr√©mia " + preplatokSuma + "‚Ç¨\n";
        } else if (typPreplatku) {
            report += "üìù Vytvoren√©: " + typPreplatku + "\n";
        }
    } else {
        report += "\n‚úÖ Bez preplatku - presn√° suma\n";
    }
    
    report += "\nüìä Detaily v Debug_Log a info poliach";
    
    addDebug("üìã Report vygenerovan√Ω - pou≈æit√° suma: " + finalUsedAmount + "‚Ç¨, preplatok: " + preplatokSuma + "‚Ç¨");
    
    return report;
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        addDebug(CONFIG.icons.start + " " + CONFIG.scriptName + " SPUSTEN√ù - v" + CONFIG.version);
        
        // KROK 1: Kontrola sp√∫≈°≈•ac√≠ch podmienok
        addDebug(CONFIG.icons.step + " KROK 1: Kontrola sp√∫≈°≈•ac√≠ch podmienok...");
        
        var uhradaZavazku = entry().field(CONFIG.pokladnaFields.uhradaZavazku) || false;
        var typZavazku = entry().field(CONFIG.pokladnaFields.typZavazku) || false;
        
        if (!uhradaZavazku) {
            addDebug("‚ùå Script ukonƒçen√Ω - '√öhrada z√°v√§zku' nie je za≈°krtnut√°");
            return;
        }
        if(!typZavazku){
            addDebug("‚ùå Script ukonƒçen√Ω - 'Typ z√°v√§zku' nie je vybran√Ω");
            return;
        }

        var infoContent = entry().field(CONFIG.pokladnaFields.info) || "";
        if (infoContent.indexOf("√öHRADA Z√ÅV√ÑZKOV DOKONƒåEN√Å") !== -1) {
            addDebug("‚úÖ √öhrada u≈æ bola spracovan√° - preskakujem");
            return;
        }
        
        addDebug("‚úÖ Sp√∫≈°≈•acie podmienky splnen√©");
        
        // KROK 2: Valid√°cia a filtrovanie z√°v√§zkov
        addDebug(CONFIG.icons.step + " KROK 2: Valid√°cia z√°v√§zkov...");
        
        var zavazkyArray = entry().field(CONFIG.pokladnaFields.zavazky) || [];
        
        if (zavazkyArray.length === 0) {
            throw new Error("≈Ωiadne z√°v√§zky na spracovanie");
        }
        
        var validZavazky = filterValidZavazky(zavazkyArray);
        
        if (validZavazky.length === 0) {
            throw new Error("≈Ωiadne platn√© z√°v√§zky na √∫hradu (skontrolujte stavy a zostatky)");
        }
        
        var ownershipValidation = validateOwnership(validZavazky);
        if (!ownershipValidation.isValid) {
            throw new Error("Valid√°cia vlastn√≠ctva zlyhala: " + ownershipValidation.error);
        }
        
        var ownerInfo = ownershipValidation.ownerInfo;
        addDebug("‚úÖ Vlastn√≠k validovan√Ω: " + ownerInfo.displayName + " (" + ownerInfo.type + ")");
        
        var skutocnePouzitePohladavky = 0;
        
        // KROK 3: V√Ωpoƒçet dostupnej sumy
        addDebug(CONFIG.icons.step + " KROK 3: V√Ωpoƒçet dostupnej sumy...");
        
        var amountResult = calculateAvailableAmount(ownerInfo);
        var dostupnaSuma = amountResult.dostupnaSuma;
        var pohladavkyInfo = amountResult.pohladavkyInfo;
        var zakladnaSuma = amountResult.zakladnaSuma;
        
        if (dostupnaSuma <= 0) {
            throw new Error("Dostupn√° suma mus√≠ by≈• v√§ƒç≈°ia ako 0‚Ç¨ (aktu√°lne: " + dostupnaSuma + "‚Ç¨)");
        }
        
        addDebug("‚úÖ Dostupn√° suma: " + dostupnaSuma + "‚Ç¨ (z√°klad: " + zakladnaSuma + "‚Ç¨, pohƒæad√°vky: " + pohladavkyInfo.celkovaSuma + "‚Ç¨)");
        
        // KROK 3.5: Spracuj pohƒæad√°vky ak s√∫ pou≈æit√©
        if (pohladavkyInfo.pouzite.length > 0 && pohladavkyInfo.celkovaSuma > 0) {
            addDebug(CONFIG.icons.step + " KROK 3.5: Spracovanie pohƒæad√°vok na √∫hradu...");
            
            var sumaZavazkov = 0;
            for (var i = 0; i < validZavazky.length; i++) {
                sumaZavazkov = formatAmount(sumaZavazkov + formatAmount(validZavazky[i].field(CONFIG.zavazkyFields.zostatok)));
            }
            addDebug("  Celkov√° suma z√°v√§zkov: " + sumaZavazkov + "‚Ç¨");
            
            var potrebnaSumaZPohladavok = 0;
            if (zakladnaSuma < sumaZavazkov) {
                potrebnaSumaZPohladavok = formatAmount(Math.min(pohladavkyInfo.celkovaSuma, sumaZavazkov - zakladnaSuma));
            }
            
            if (potrebnaSumaZPohladavok > 0) {
                var pohladavkyResult = processPohladavkyPayments(pohladavkyInfo.pouzite, potrebnaSumaZPohladavok);
                skutocnePouzitePohladavky = pohladavkyResult.celkovoPouzite;
                addDebug("‚úÖ Pohƒæad√°vky spracovan√© - pou≈æit√©: " + skutocnePouzitePohladavky + "‚Ç¨ z " + pohladavkyInfo.celkovaSuma + "‚Ç¨");
                
                dostupnaSuma = formatAmount(zakladnaSuma + skutocnePouzitePohladavky);
                addDebug("  üìä Upraven√° dostupn√° suma: " + dostupnaSuma + "‚Ç¨");
            } else {
                addDebug("‚ÑπÔ∏è Pohƒæad√°vky neboli potrebn√© - z√°v√§zky pokryt√© z√°kladnou sumou");
                dostupnaSuma = zakladnaSuma;
            }
        } else if (entry().field(CONFIG.pokladnaFields.zapocitatPohladavku)) {
            addDebug("‚ö†Ô∏è Zapoƒç√≠tanie pohƒæad√°vok po≈æadovan√©, ale ≈æiadne platn√© pohƒæad√°vky nen√°jden√©");
            dostupnaSuma = zakladnaSuma;
        }
        
        // KROK 4: Proces √∫hrad z√°v√§zkov
        addDebug(CONFIG.icons.step + " KROK 4: Proces √∫hrady z√°v√§zkov...");
        
        var paymentResult = processPayments(validZavazky, dostupnaSuma, ownerInfo);
        var preplatokSuma = paymentResult.preplatokSuma;
        
        addDebug("‚úÖ √öhrady spracovan√© - preplatok: " + preplatokSuma + "‚Ç¨");
        
        // KROK 5: Spracovanie preplatku
        addDebug(CONFIG.icons.step + " KROK 5: Spracovanie preplatku...");
        
        var typPreplatku = null;
        if (preplatokSuma > 0) {
            typPreplatku = entry().field(CONFIG.pokladnaFields.zPreplatkuVytvori≈•);
            processPreplatok(preplatokSuma, ownerInfo);
            addDebug("‚úÖ Preplatok spracovan√Ω ako: " + (typPreplatku || "neurƒçen√Ω typ"));
        } else {
            addDebug("‚úÖ ≈Ωiadny preplatok na spracovanie");
        }
        
        // KROK 6: Finaliz√°cia transakcie
        addDebug(CONFIG.icons.step + " KROK 6: Finaliz√°cia transakcie...");
        
        finalizeTransaction(dostupnaSuma, preplatokSuma, paymentResult, ownerInfo);
        
        addDebug("‚úÖ Transakcia finalizovan√°");
        
        // KROK 7: Z√°vereƒçn√Ω report
        addDebug(CONFIG.icons.step + " KROK 7: Generovanie z√°vereƒçn√©ho reportu...");
        
        var finalReport = generateFinalReport(dostupnaSuma, preplatokSuma, paymentResult, ownerInfo, typPreplatku, skutocnePouzitePohladavky);
        
        addDebug(CONFIG.icons.uhradaDokoncena + " " + CONFIG.scriptName + " √öSPE≈†NE DOKONƒåEN√ù");
        
        message(finalReport);
        
    } catch (error) {
        addError(CONFIG.icons.error + " KRITICK√Å CHYBA: " + error.toString(), "Skontrolujte ≈°trukt√∫ru d√°t a opakujte oper√°ciu");
        addDebug("‚ùå Script ukonƒçen√Ω s chybou: " + error.toString());
        
        var errorReport = "‚ùå CHYBA PRI √öHRADE Z√ÅV√ÑZKOV (v" + CONFIG.version + ")\n\n";
        errorReport += CONFIG.icons.error + " " + error.toString() + "\n\n";
        errorReport += "üîç Odpor√∫ƒçan√© kontroly:\n";
        errorReport += "‚Ä¢ Je za≈°krtnut√° '√öhrada z√°v√§zku'?\n";
        errorReport += "‚Ä¢ Maj√∫ v≈°etky z√°v√§zky rovnak√©ho vlastn√≠ka?\n";
        errorReport += "‚Ä¢ S√∫ z√°v√§zky v stave 'Neuhraden√©' alebo 'ƒåiastoƒçne uhraden√©'?\n";
        errorReport += "‚Ä¢ Je zadan√° suma > 0‚Ç¨?\n";
        errorReport += "‚Ä¢ Existuj√∫ potrebn√© kni≈ænice (Z√°v√§zky, Pohƒæad√°vky)?\n\n";
        errorReport += "üìã Detaily chyby v Debug_Log a Error_Log";
        
        message(errorReport);
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();