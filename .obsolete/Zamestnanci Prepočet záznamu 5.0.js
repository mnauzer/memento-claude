// ==============================================
// MEMENTO DATABASE - KOMPLEXN√ù PREPOƒåET ZAMESTNANCA
// Verzia: 5.0 | D√°tum: 11.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Zamestnanci | Trigger: Before Save
// ==============================================
// ‚úÖ NOV√â v5.0: KRITICK√â OPRAVY
//    - PRIDAN√â: Vynulovanie v≈°etk√Ωch pol√≠ pred v√Ωpoƒçtom
//    - OPRAVEN√â: Poklad≈àa linksFrom s debug kontrolou
//    - VYLEP≈†EN√â: Filter debug s detailnou anal√Ωzou
//    - ZAOKR√öHLEN√â: Odpracovan√© total na 2 desatinn√© miesta
// ‚úÖ v4.9: Poklad≈àa Vyplaten√©/Pr√©mie, debug filtrov
// ==============================================

var CONFIG = {
    debug: true,
    version: "5.0",
    scriptName: "Zamestnanci Prepoƒçet zamestnanca",
    
    // N√°zvy kni≈æn√≠c
    libraries: {
        zamestnanci: "Zamestnanci",
        sadzby: "sadzby zamestnancov",
        dochadzka: "Doch√°dzka", 
        zaznamPrac: "Z√°znam pr√°c",
        knihaJazd: "Kniha j√°zd",
        pohladavky: "Pohƒæad√°vky",
        zavazky: "Z√°v√§zky",
        pokladna: "Poklad≈àa"
    },
    
    // N√°zvy filtrov - pre ƒæah≈°ie testovanie
    filterNames: {
        tentoRok: "tento rok",
        tentoTyzden: "tento t√Ω≈æde≈à",
        tentoMesiac: "tento mesiac",
        minulyRok: "minul√Ω rok", 
        minulyMesiac: "minul√Ω mesiac",
        total: "total",
        vsetko: "v≈°etko"
    },
    
    // Emoji pre debug log
    icons: {
        start: "üöÄ",
        step: "üìã",
        success: "‚úÖ",
        warning: "‚ö†Ô∏è",
        error: "üí•",
        money: "üí∞",
        time: "‚è±Ô∏è",
        person: "üë§",
        info: "‚ÑπÔ∏è",
        calculation: "üßÆ",
        database: "üóÉÔ∏è",
        filter: "üîç",
        summary: "üìä",
        clear: "üóëÔ∏è"
    },
    
    // Polia v kni≈ænici Zamestnanci
    fields: {
        nick: "Nick",
        meno: "Meno",
        priezvisko: "Priezvisko",
        vyberObdobia: "v√Ωber obdobia",
        obdobieTotal: "obdobie total",
        
        // Doch√°dzka
        odpracovane: "Odpracovan√©",
        odpracovaneTotal: "Odpracovan√© total",
        
        // Z√°znam pr√°c
        naZakazkach: "Na z√°kazk√°ch", 
        naZakazkachTotal: "Na z√°kazk√°ch total",
        
        // Kniha j√°zd
        jazdy: "Jazdy",
        jazdyTotal: "Jazdy total",
        
        // Mzdy
        aktualnaHodinovka: "Aktu√°lna hodinovka",
        zarobene: "Zaroben√©",
        zarobeneTotal: "Zaroben√© total",
        vyplatene: "Vyplaten√©",
        vyplateneTotal: "Vyplaten√© total",
        premie: "Pr√©mie",
        premieTotal: "Pr√©mie total",
        preplatokNedoplatok: "Preplatok/Nedoplatok",
        
        // Pohƒæad√°vky a Z√°v√§zky
        pohladavky: "Pohƒæad√°vky",
        zavazky: "Z√°v√§zky", 
        saldo: "Saldo",
        
        // Debug fields
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    
    // LinksFrom polia
    linksFromFields: {
        dochadzkaZamestnanci: "Zamestnanci",
        zaznamPracZamestnanci: "Zamestnanci",
        knihaJazdVodic: "Vodiƒç",
        pohladavkyZamestnanec: "Zamestnanec",
        zavazkyZamestnanec: "Zamestnanec",
        pokladnaZamestnanec: "Zamestnanec"
    },
    
    // Polia v s√∫visiacich kni≈æniciach
    recordFields: {
        datum: "D√°tum",
        pracovnaDoba: "Pracovn√° doba",
        mzdoveNaklady: "Mzdov√© n√°klady",
        casOd: "ƒåas od",
        casDo: "ƒåas do",
        zostatok: "Zostatok",
        stav: "Stav",
        suma: "Suma",
        ucelVydaja: "√öƒçel v√Ωdaja"
    },
    
    // Validn√© stavy pre poƒç√≠tanie
    validneStavy: ["Neuhraden√©", "ƒåiastoƒçne uhraden√©"]
};

// Glob√°lne premenn√© pre logy
var debugMessages = [];
var errorMessages = [];
var currentEntry = entry();

// ==============================================
// HELPER FUNKCIE
// ==============================================

function addDebug(message, type) {
    if (!CONFIG.debug) return;
    
    type = type || "info";
    var timestamp = moment().format("HH:mm:ss");
    var icon = CONFIG.icons[type] || "";
    var formattedMessage = "[" + timestamp + "] " + icon + " " + message;
    debugMessages.push(formattedMessage);
}

function addError(message, context) {
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var errorMsg = "[" + timestamp + "] " + CONFIG.icons.error + " " + message;
    if (context) {
        errorMsg += " | Context: " + context;
    }
    errorMessages.push(errorMsg);
    addDebug("ERROR: " + message, "error");
}

function safeFieldAccess(entry, fieldName, defaultValue) {
    try {
        var value = entry.field(fieldName);
        return value !== null && value !== undefined ? value : (defaultValue || null);
    } catch (error) {
        addError("Field access failed for '" + fieldName + "': " + error, "safeFieldAccess");
        return defaultValue || null;
    }
}

function formatAmount(value) {
    if (value === null || value === undefined || isNaN(value)) return 0;
    return Math.round(value * 100) / 100;
}

function saveLogsToEntry() {
    if (debugMessages.length > 0) {
        currentEntry.set(CONFIG.fields.debugLog, debugMessages.join("\n"));
    }
    if (errorMessages.length > 0) {
        currentEntry.set(CONFIG.fields.errorLog, errorMessages.join("\n"));
    }
}

// ==============================================
// VYNULOVANIE POL√ç - NOV√Å FUNKCIA
// ==============================================

function clearAllFields() {
    addDebug("=== VYNULOVANIE V≈†ETK√ùCH POL√ç ===", "clear");
    
    var fieldsToReset = [
        // Doch√°dzka
        CONFIG.fields.odpracovane,
        CONFIG.fields.odpracovaneTotal,
        
        // Z√°znam pr√°c
        CONFIG.fields.naZakazkach,
        CONFIG.fields.naZakazkachTotal,
        
        // Kniha j√°zd
        CONFIG.fields.jazdy,
        CONFIG.fields.jazdyTotal,
        
        // Mzdy
        CONFIG.fields.zarobene,
        CONFIG.fields.zarobeneTotal,
        CONFIG.fields.vyplatene,
        CONFIG.fields.vyplateneTotal,
        CONFIG.fields.premie,
        CONFIG.fields.premieTotal,
        CONFIG.fields.preplatokNedoplatok,
        
        // Pohƒæad√°vky a Z√°v√§zky
        CONFIG.fields.pohladavky,
        CONFIG.fields.zavazky,
        CONFIG.fields.saldo
    ];
    
    for (var i = 0; i < fieldsToReset.length; i++) {
        currentEntry.set(fieldsToReset[i], 0);
        addDebug("  Vynulovan√©: " + fieldsToReset[i], "clear");
    }
    
    addDebug("‚úÖ V≈°etky polia vynulovan√©", "success");
}

// ==============================================
// D√ÅTUMOV√â FUNKCIE S DEBUG ANAL√ùZOU
// ==============================================

function parseFilterDateRange(filterText) {
    addDebug("=== ANAL√ùZA FILTRA ===", "filter");
    addDebug("Vstupn√Ω text: '" + filterText + "'", "filter");
    addDebug("Dƒ∫≈æka textu: " + filterText.length + " znakov", "filter");
    
    if (!filterText || filterText === "") {
        addDebug("‚ùå Filter je pr√°zdny", "warning");
        return {
            isValid: false,
            reason: "Filter je pr√°zdny",
            popis: "Pr√°zdny filter"
        };
    }
    
    var normalizedText = filterText.trim().toLowerCase();
    addDebug("Normalizovan√Ω text: '" + normalizedText + "'", "filter");
    var now = moment();
    addDebug("Aktu√°lny d√°tum: " + now.format("DD.MM.YYYY"), "info");
    
    // Tento rok
    if (normalizedText === "tento rok" || normalizedText === "rok") {
        var result = {
            isValid: true,
            startDate: moment().startOf('year').toDate(),
            endDate: moment().endOf('year').toDate(),
            popis: "Tento rok (" + now.year() + ")",
            type: "year"
        };
        addDebug("‚úÖ Rozpoznan√Ω filter: " + result.popis, "success");
        addDebug("  Od: " + moment(result.startDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        addDebug("  Do: " + moment(result.endDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        return result;
    }
    
    // Minul√Ω rok
    if (normalizedText === "minul√Ω rok" || normalizedText === "minuly rok") {
        var result = {
            isValid: true,
            startDate: moment().subtract(1, 'year').startOf('year').toDate(),
            endDate: moment().subtract(1, 'year').endOf('year').toDate(),
            popis: "Minul√Ω rok (" + (now.year() - 1) + ")",
            type: "year"
        };
        addDebug("‚úÖ Rozpoznan√Ω filter: " + result.popis, "success");
        addDebug("  Od: " + moment(result.startDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        addDebug("  Do: " + moment(result.endDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        return result;
    }
    
    // Tento mesiac
    if (normalizedText === "tento mesiac" || normalizedText === "mesiac") {
        var result = {
            isValid: true,
            startDate: moment().startOf('month').toDate(),
            endDate: moment().endOf('month').toDate(),
            popis: "Tento mesiac (" + now.format('MM/YYYY') + ")",
            type: "month"
        };
        addDebug("‚úÖ Rozpoznan√Ω filter: " + result.popis, "success");
        addDebug("  Od: " + moment(result.startDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        addDebug("  Do: " + moment(result.endDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        return result;
    }
    
    // Total/V≈°etko
    if (normalizedText === "total" || normalizedText === "v≈°etko" || normalizedText === "all") {
        var result = {
            isValid: true,
            startDate: new Date(2000, 0, 1),
            endDate: new Date(2100, 0, 1),
            popis: "V≈°etky z√°znamy",
            type: "all"
        };
        addDebug("‚úÖ Rozpoznan√Ω filter: " + result.popis, "success");
        return result;
    }
    
    // Tento t√Ω≈æde≈à
    if (normalizedText === "tento t√Ω≈æde≈à" || normalizedText === "t√Ω≈æde≈à" || 
        normalizedText === "tento tyzden" || normalizedText === "tyzden") {
        var result = {
            isValid: true,
            startDate: moment().startOf('isoWeek').toDate(),
            endDate: moment().endOf('isoWeek').toDate(),
            popis: "Tento t√Ω≈æde≈à",
            type: "week"
        };
        addDebug("‚úÖ Rozpoznan√Ω filter: " + result.popis, "success");
        addDebug("  Od: " + moment(result.startDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        addDebug("  Do: " + moment(result.endDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        return result;
    }
    
    // MM/YYYY form√°t
    var monthYearMatch = filterText.match(/^(\d{1,2})\/(\d{4})$/);
    if (monthYearMatch) {
        var month = parseInt(monthYearMatch[1]) - 1;
        var year = parseInt(monthYearMatch[2]);
        
        if (month >= 0 && month <= 11) {
            var startDate = new Date(year, month, 1);
            var endDate = new Date(year, month + 1, 0, 23, 59, 59);
            
            var result = {
                isValid: true,
                startDate: startDate,
                endDate: endDate,
                popis: (month + 1) + "/" + year,
                type: "month"
            };
            addDebug("‚úÖ Rozpoznan√Ω filter MM/YYYY: " + result.popis, "success");
            addDebug("  Od: " + moment(result.startDate).format("DD.MM.YYYY HH:mm:ss"), "info");
            addDebug("  Do: " + moment(result.endDate).format("DD.MM.YYYY HH:mm:ss"), "info");
            return result;
        }
    }
    
    // YYYY form√°t
    var yearMatch = filterText.match(/^(\d{4})$/);
    if (yearMatch) {
        var year = parseInt(yearMatch[1]);
        var result = {
            isValid: true,
            startDate: new Date(year, 0, 1),
            endDate: new Date(year, 11, 31, 23, 59, 59),
            popis: "Rok " + year,
            type: "year"
        };
        addDebug("‚úÖ Rozpoznan√Ω filter YYYY: " + result.popis, "success");
        addDebug("  Od: " + moment(result.startDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        addDebug("  Do: " + moment(result.endDate).format("DD.MM.YYYY HH:mm:ss"), "info");
        return result;
    }
    
    addDebug("‚ùå Nerozpoznan√Ω form√°t filtra: '" + filterText + "'", "error");
    return {
        isValid: false,
        reason: "Nerozpoznan√Ω form√°t filtra: '" + filterText + "'",
        popis: "Neplatn√Ω filter"
    };
}

function dateMatchesFilter(date, filter) {
    if (!filter.isValid) return false;
    if (!date) return false;
    
    try {
        var testDate = new Date(date);
        if (isNaN(testDate.getTime())) return false;
        
        var matches = testDate >= filter.startDate && testDate <= filter.endDate;
        return matches;
    } catch (error) {
        addError("Date parsing error: " + error, "dateMatchesFilter");
        return false;
    }
}

// ==============================================
// POHƒΩAD√ÅVKY SPRACOVANIE
// ==============================================

function spracujPohladavky(zamestnanecEntry, filter, isTotal) {
    addDebug("=== POHƒΩAD√ÅVKY SPRACOVANIE ===", "database");
    addDebug("Filter: " + filter.popis, "filter");
    
    var rezultat = {
        pohladavkyFiltrovane: 0,
        pohladavkyTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        vyluceneStav: 0,
        vyluceneDatum: 0,
        chybneZaznamy: 0
    };
    
    try {
        var pohladavkyZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.pohladavky, CONFIG.linksFromFields.pohladavkyZamestnanec);
        
        if (!pohladavkyZaznamy || pohladavkyZaznamy.length === 0) {
            addDebug("≈Ωiadne pohƒæad√°vky z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = pohladavkyZaznamy.length;
        addDebug("Naƒç√≠tan√Ωch " + stats.celkoveZaznamy + " pohƒæad√°vky z√°znamov", "database");
        
        for (var i = 0; i < pohladavkyZaznamy.length; i++) {
            try {
                var zaznam = pohladavkyZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var zostatok = safeFieldAccess(zaznam, CONFIG.recordFields.zostatok, 0);
                var stav = safeFieldAccess(zaznam, CONFIG.recordFields.stav, "");
                
                // Kontrola stavu
                var platnyStav = false;
                for (var j = 0; j < CONFIG.validneStavy.length; j++) {
                    if (stav === CONFIG.validneStavy[j]) {
                        platnyStav = true;
                        break;
                    }
                }
                
                if (!platnyStav) {
                    stats.vyluceneStav++;
                    continue;
                }
                
                // Kontrola d√°tumu
                if (!dateMatchesFilter(datum, filter)) {
                    stats.vyluceneDatum++;
                    continue;
                }
                
                // Zapoƒç√≠tanie
                if (isTotal) {
                    rezultat.pohladavkyTotal += zostatok;
                } else {
                    rezultat.pohladavkyFiltrovane += zostatok;
                }
                stats.zahrnuteZaznamy++;
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba pohƒæad√°vky z√°znam " + i + ": " + zaznamError.toString(), "spracujPohladavky");
            }
        }
        
        addDebug("üìä Pohƒæad√°vky v√Ωsledky:", "summary");
        addDebug("  Zahrnut√©: " + stats.zahrnuteZaznamy + "/" + stats.celkoveZaznamy, "info");
        addDebug("  Vyl√∫ƒçen√© (stav): " + stats.vyluceneStav, "warning");
        addDebug("  Vyl√∫ƒçen√© (d√°tum): " + stats.vyluceneDatum, "warning");
        addDebug("  üí∞ Celkov√Ω zostatok: " + (isTotal ? rezultat.pohladavkyTotal : rezultat.pohladavkyFiltrovane).toFixed(2) + "‚Ç¨", "money");
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujPohladavky");
    }
    
    return rezultat;
}

// ==============================================
// Z√ÅV√ÑZKY SPRACOVANIE
// ==============================================

function spracujZavazky(zamestnanecEntry, filter, isTotal) {
    addDebug("=== Z√ÅV√ÑZKY SPRACOVANIE ===", "database");
    addDebug("Filter: " + filter.popis, "filter");
    
    var rezultat = {
        zavazkyFiltrovane: 0,
        zavazkyTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        zahrnuteZaznamy: 0,
        vyluceneStav: 0,
        vyluceneDatum: 0,
        chybneZaznamy: 0
    };
    
    try {
        var zavazkyZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.zavazky, CONFIG.linksFromFields.zavazkyZamestnanec);
        
        if (!zavazkyZaznamy || zavazkyZaznamy.length === 0) {
            addDebug("≈Ωiadne z√°v√§zky z√°znamy", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = zavazkyZaznamy.length;
        addDebug("Naƒç√≠tan√Ωch " + stats.celkoveZaznamy + " z√°v√§zky z√°znamov", "database");
        
        for (var i = 0; i < zavazkyZaznamy.length; i++) {
            try {
                var zaznam = zavazkyZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var zostatok = safeFieldAccess(zaznam, CONFIG.recordFields.zostatok, 0);
                var stav = safeFieldAccess(zaznam, CONFIG.recordFields.stav, "");
                
                // Kontrola stavu
                var platnyStav = false;
                for (var j = 0; j < CONFIG.validneStavy.length; j++) {
                    if (stav === CONFIG.validneStavy[j]) {
                        platnyStav = true;
                        break;
                    }
                }
                
                if (!platnyStav) {
                    stats.vyluceneStav++;
                    continue;
                }
                
                // Kontrola d√°tumu
                if (!dateMatchesFilter(datum, filter)) {
                    stats.vyluceneDatum++;
                    continue;
                }
                
                // Zapoƒç√≠tanie
                if (isTotal) {
                    rezultat.zavazkyTotal += zostatok;
                } else {
                    rezultat.zavazkyFiltrovane += zostatok;
                }
                stats.zahrnuteZaznamy++;
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba z√°v√§zky z√°znam " + i + ": " + zaznamError.toString(), "spracujZavazky");
            }
        }
        
        addDebug("üìä Z√°v√§zky v√Ωsledky:", "summary");
        addDebug("  Zahrnut√©: " + stats.zahrnuteZaznamy + "/" + stats.celkoveZaznamy, "info");
        addDebug("  Vyl√∫ƒçen√© (stav): " + stats.vyluceneStav, "warning");
        addDebug("  Vyl√∫ƒçen√© (d√°tum): " + stats.vyluceneDatum, "warning");
        addDebug("  üí∞ Celkov√Ω zostatok: " + (isTotal ? rezultat.zavazkyTotal : rezultat.zavazkyFiltrovane).toFixed(2) + "‚Ç¨", "money");
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujZavazky");
    }
    
    return rezultat;
}

// ==============================================
// DOCH√ÅDZKA SPRACOVANIE
// ==============================================

function spracujDochadzku(zamestnanecEntry, filter, isTotal) {
    addDebug("=== DOCH√ÅDZKA SPRACOVANIE ===", "database");
    addDebug("Filter: " + filter.popis, "filter");
    
    var rezultat = {
        odpracovaneFiltrovane: 0,
        odpracovaneTotal: 0,
        zarobeneFiltrovane: 0,
        zarobeneTotal: 0
    };
    
    try {
        var dochadzkaZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.dochadzka, CONFIG.linksFromFields.dochadzkaZamestnanci);
        
        if (!dochadzkaZaznamy || dochadzkaZaznamy.length === 0) {
            addDebug("≈Ωiadne doch√°dzka z√°znamy", "warning");
            return rezultat;
        }
        
        var stats = {
            celkom: dochadzkaZaznamy.length,
            zahrnutych: 0
        };
        
        for (var i = 0; i < dochadzkaZaznamy.length; i++) {
            var zaznam = dochadzkaZaznamy[i];
            var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
            var pracovnaDoba = safeFieldAccess(zaznam, CONFIG.recordFields.pracovnaDoba, 0);
            var mzdoveNaklady = safeFieldAccess(zaznam, CONFIG.recordFields.mzdoveNaklady, 0);
            
            if (dateMatchesFilter(datum, filter)) {
                if (isTotal) {
                    rezultat.odpracovaneTotal += pracovnaDoba;
                    rezultat.zarobeneTotal += mzdoveNaklady;
                } else {
                    rezultat.odpracovaneFiltrovane += pracovnaDoba;
                    rezultat.zarobeneFiltrovane += mzdoveNaklady;
                }
                stats.zahrnutych++;
            }
        }
        
        addDebug("üìä Doch√°dzka v√Ωsledky:", "summary");
        addDebug("  Zahrnut√©: " + stats.zahrnutych + "/" + stats.celkom, "info");
        addDebug("  ‚è∞ Odpracovan√©: " + (isTotal ? rezultat.odpracovaneTotal.toFixed(2) : rezultat.odpracovaneFiltrovane.toFixed(2)) + "h", "time");
        addDebug("  üí∞ Zaroben√©: " + (isTotal ? rezultat.zarobeneTotal.toFixed(2) : rezultat.zarobeneFiltrovane.toFixed(2)) + "‚Ç¨", "money");
        
    } catch (error) {
        addError("Chyba pri spracovan√≠ doch√°dzky: " + error.toString(), "spracujDochadzku");
    }
    
    return rezultat;
}

// ==============================================
// POKLAD≈áA SPRACOVANIE - OPRAVEN√Å
// ==============================================

function spracujPokladna(zamestnanecEntry, filter, isTotal) {
    addDebug("=== POKLAD≈áA SPRACOVANIE ===", "database");
    addDebug("Filter: " + filter.popis, "filter");
    addDebug("Hƒæad√°m z√°znamy pre zamestnanca...", "database");
    
    var rezultat = {
        vyplateneFiltrovane: 0,
        vyplateneTotal: 0,
        premieFiltrovane: 0,
        premieTotal: 0,
        celkoveZaznamy: 0
    };
    
    var stats = {
        celkoveZaznamy: 0,
        mzdaZaznamy: 0,
        mzdaZalohaZaznamy: 0,
        premiaZaznamy: 0,
        ineZaznamy: 0,
        zahrnuteDatum: 0,
        vyluceneDatum: 0,
        chybneZaznamy: 0
    };
    
    try {
        // Debug LinksFrom volanie
        addDebug("LinksFrom: kni≈ænica='" + CONFIG.libraries.pokladna + "', pole='" + CONFIG.linksFromFields.pokladnaZamestnanec + "'", "database");
        
        var pokladnaZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.pokladna, CONFIG.linksFromFields.pokladnaZamestnanec);
        
        if (!pokladnaZaznamy) {
            addDebug("LinksFrom vr√°tilo null", "error");
            return rezultat;
        }
        
        if (pokladnaZaznamy.length === 0) {
            addDebug("≈Ωiadne poklad≈àa z√°znamy nen√°jden√©", "warning");
            return rezultat;
        }
        
        stats.celkoveZaznamy = pokladnaZaznamy.length;
        rezultat.celkoveZaznamy = stats.celkoveZaznamy;
        addDebug("‚úÖ Naƒç√≠tan√Ωch " + stats.celkoveZaznamy + " poklad≈àa z√°znamov", "success");
        
        for (var i = 0; i < pokladnaZaznamy.length; i++) {
            try {
                var zaznam = pokladnaZaznamy[i];
                var datum = safeFieldAccess(zaznam, CONFIG.recordFields.datum);
                var suma = safeFieldAccess(zaznam, CONFIG.recordFields.suma, 0);
                var ucelVydaja = safeFieldAccess(zaznam, CONFIG.recordFields.ucelVydaja, "");
                
                addDebug("  Z√°znam " + (i+1) + ":", "info");
                addDebug("    D√°tum: " + (datum ? moment(datum).format("DD.MM.YYYY") : "N/A"), "info");
                addDebug("    √öƒçel: '" + ucelVydaja + "'", "info");
                addDebug("    Suma: " + suma + "‚Ç¨", "info");
                
                // Kontrola d√°tumu
                if (!dateMatchesFilter(datum, filter)) {
                    stats.vyluceneDatum++;
                    addDebug("    ‚Üí Mimo d√°tumov√©ho rozsahu", "filter");
                    continue;
                }
                
                stats.zahrnuteDatum++;
                
                // Roztriedenie podƒæa √∫ƒçelu v√Ωdaja
                if (ucelVydaja === "Mzda") {
                    stats.mzdaZaznamy++;
                    if (isTotal) {
                        rezultat.vyplateneTotal += suma;
                    } else {
                        rezultat.vyplateneFiltrovane += suma;
                    }
                    addDebug("    ‚Üí MZDA: +" + suma + "‚Ç¨", "money");
                    
                } else if (ucelVydaja === "Mzda z√°loha") {
                    stats.mzdaZalohaZaznamy++;
                    if (isTotal) {
                        rezultat.vyplateneTotal += suma;
                    } else {
                        rezultat.vyplateneFiltrovane += suma;
                    }
                    addDebug("    ‚Üí Z√ÅLOHA: +" + suma + "‚Ç¨", "money");
                    
                } else if (ucelVydaja === "Mzda pr√©mia") {
                    stats.premiaZaznamy++;
                    if (isTotal) {
                        rezultat.premieTotal += suma;
                    } else {
                        rezultat.premieFiltrovane += suma;
                    }
                    addDebug("    ‚Üí PR√âMIA: +" + suma + "‚Ç¨", "money");
                    
                } else {
                    stats.ineZaznamy++;
                    addDebug("    ‚Üí IN√â ('" + ucelVydaja + "') - nezapoƒç√≠tan√©", "warning");
                }
                
            } catch (zaznamError) {
                stats.chybneZaznamy++;
                addError("Chyba poklad≈àa z√°znam " + i + ": " + zaznamError.toString(), "spracujPokladna");
            }
        }
        
        // SUMMARY REPORT
        addDebug("üìä Poklad≈àa s√∫hrn:", "summary");
        addDebug("  Z√°znamy celkom: " + stats.celkoveZaznamy, "info");
        addDebug("  Zahrnut√© (d√°tum OK): " + stats.zahrnuteDatum, "info");
        addDebug("  Vyl√∫ƒçen√© (d√°tum): " + stats.vyluceneDatum, "warning");
        addDebug("  ‚Ä¢ Mzda: " + stats.mzdaZaznamy, "info");
        addDebug("  ‚Ä¢ Mzda z√°loha: " + stats.mzdaZalohaZaznamy, "info");
        addDebug("  ‚Ä¢ Mzda pr√©mia: " + stats.premiaZaznamy, "info");
        addDebug("  ‚Ä¢ In√©: " + stats.ineZaznamy, "info");
        
        if (isTotal) {
            addDebug("üí∞ TOTAL Vyplaten√© (Mzda+Z√°loha): " + rezultat.vyplateneTotal.toFixed(2) + "‚Ç¨", "money");
            addDebug("üíé TOTAL Pr√©mie: " + rezultat.premieTotal.toFixed(2) + "‚Ç¨", "money");
        } else {
            addDebug("üí∞ Vyplaten√© (Mzda+Z√°loha): " + rezultat.vyplateneFiltrovane.toFixed(2) + "‚Ç¨", "money");
            addDebug("üíé Pr√©mie: " + rezultat.premieFiltrovane.toFixed(2) + "‚Ç¨", "money");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo: " + linksFromError.toString(), "spracujPokladna");
        addDebug("Detaily chyby: " + linksFromError.stack, "error");
    }
    
    return rezultat;
}

// ==============================================
// AKTU√ÅLNA HODINOVKA
// ==============================================

function getAktualnaHodinovka(zamestnanecEntry) {
    try {
        var sadzbyZaznamy = zamestnanecEntry.linksFrom(CONFIG.libraries.sadzby, "Zamestnanec");
        
        if (!sadzbyZaznamy || sadzbyZaznamy.length === 0) {
            addDebug("≈Ωiadne sadzby nen√°jden√©", "warning");
            return 0;
        }
        
        // N√°jdi najnov≈°iu sadzbu
        var najnovsiaSadzba = null;
        var najnovsiDatum = null;
        
        for (var i = 0; i < sadzbyZaznamy.length; i++) {
            var zaznam = sadzbyZaznamy[i];
            var platnostOd = safeFieldAccess(zaznam, "Platnos≈• od");
            var sadzba = safeFieldAccess(zaznam, "Sadzba", 0);
            
            if (platnostOd) {
                var datum = new Date(platnostOd);
                if (!najnovsiDatum || datum > najnovsiDatum) {
                    najnovsiDatum = datum;
                    najnovsiaSadzba = sadzba;
                }
            }
        }
        
        addDebug("Aktu√°lna hodinovka: " + (najnovsiaSadzba || 0) + "‚Ç¨/h", "money");
        return najnovsiaSadzba || 0;
        
    } catch (error) {
        addError("Chyba pri z√≠skavan√≠ hodinovky: " + error.toString(), "getAktualnaHodinovka");
        return 0;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        addDebug("=== ≈†TART PREPOƒåTU v" + CONFIG.version + " ===", "start");
        
        // KROK 0: Vynulovanie v≈°etk√Ωch pol√≠
        clearAllFields();
        
        // KROK 1: Valid√°cia z√°kladn√Ωch pol√≠
        addDebug("KROK 1: Valid√°cia z√°kladn√Ωch pol√≠...", "step");
        
        var nick = safeFieldAccess(currentEntry, CONFIG.fields.nick);
        var vyberObdobia = safeFieldAccess(currentEntry, CONFIG.fields.vyberObdobia, "");
        var obdobieTotal = safeFieldAccess(currentEntry, CONFIG.fields.obdobieTotal, "");
        
        if (!nick) {
            addError("Nick je povinn√Ω identifik√°tor", "validation");
            saveLogsToEntry();
            return false;
        }
        
        addDebug("üë§ Zamestnanec: " + nick, "person");
        addDebug("üîç Filter v√Ωber obdobia: '" + vyberObdobia + "'", "filter");
        addDebug("üîç Filter obdobie total: '" + obdobieTotal + "'", "filter");
        
        // KROK 2: Parsovanie filtrov
        addDebug("KROK 2: Parsovanie filtrov...", "step");
        
        var filter = parseFilterDateRange(vyberObdobia);
        var filterTotal = parseFilterDateRange(obdobieTotal);
        
        if (!filter.isValid) {
            addError("Neplatn√Ω filter v√Ωber obdobia: " + filter.reason, "filter");
            saveLogsToEntry();
            return false;
        }
        
        if (!filterTotal.isValid) {
            addError("Neplatn√Ω filter obdobie total: " + filterTotal.reason, "filter");
            saveLogsToEntry();
            return false;
        }
        
        // KROK 3: Spracovanie v≈°etk√Ωch kni≈æn√≠c
        addDebug("KROK 3: Spracovanie v≈°etk√Ωch kni≈æn√≠c...", "step");
        
        // Filtrovan√© √∫daje (pou≈æ√≠va vyberObdobia filter)
        var pohladavkyData = spracujPohladavky(currentEntry, filter, false);
        var zavazkyData = spracujZavazky(currentEntry, filter, false);
        var dochadzkaData = spracujDochadzku(currentEntry, filter, false);
        var pokladnaData = spracujPokladna(currentEntry, filter, false);
        
        // Total √∫daje (pou≈æ√≠va obdobieTotal filter)
        var dochadzkaDataTotal = spracujDochadzku(currentEntry, filterTotal, true);
        var pokladnaDataTotal = spracujPokladna(currentEntry, filterTotal, true);
        
        // KROK 4: V√Ωpoƒçty
        addDebug("KROK 4: V√Ωpoƒçty...", "step");
        
        // Saldo = Z√°v√§zky - Pohƒæad√°vky
        var saldo = formatAmount(zavazkyData.zavazkyFiltrovane - pohladavkyData.pohladavkyFiltrovane);
        
        addDebug("=== V√ùPOƒåET SALDA ===", "calculation");
        addDebug("üìâ Z√°v√§zky: " + zavazkyData.zavazkyFiltrovane.toFixed(2) + "‚Ç¨", "money");
        addDebug("üìà Pohƒæad√°vky: " + pohladavkyData.pohladavkyFiltrovane.toFixed(2) + "‚Ç¨", "money");
        addDebug("‚ÑπÔ∏è Vzorec: Saldo = Z√°v√§zky - Pohƒæad√°vky", "info");
        addDebug("üßÆ V√Ωpoƒçet: " + zavazkyData.zavazkyFiltrovane.toFixed(2) + " - " + 
                pohladavkyData.pohladavkyFiltrovane.toFixed(2) + " = " + saldo.toFixed(2) + "‚Ç¨", "calculation");
        
        // Preplatok/Nedoplatok = Zaroben√© - Vyplaten√©
        var preplatokNedoplatok = formatAmount(dochadzkaData.zarobeneFiltrovane - pokladnaData.vyplateneFiltrovane);
        
        addDebug("=== V√ùPOƒåET PREPLATOK/NEDOPLATOK ===", "calculation");
        addDebug("üíµ Zaroben√©: " + dochadzkaData.zarobeneFiltrovane.toFixed(2) + "‚Ç¨", "money");
        addDebug("üí∏ Vyplaten√© (Mzda+Z√°loha): " + pokladnaData.vyplateneFiltrovane.toFixed(2) + "‚Ç¨", "money");
        addDebug("‚ÑπÔ∏è Vzorec: Preplatok/Nedoplatok = Zaroben√© - Vyplaten√©", "info");
        addDebug("üßÆ V√Ωpoƒçet: " + dochadzkaData.zarobeneFiltrovane.toFixed(2) + " - " +
                pokladnaData.vyplateneFiltrovane.toFixed(2) + " = " + preplatokNedoplatok.toFixed(2) + "‚Ç¨", "calculation");
        
        // Aktu√°lna hodinovka
        var aktualnaHodinovka = getAktualnaHodinovka(currentEntry);
        
        // KROK 5: Ulo≈æenie v√Ωsledkov
        addDebug("KROK 5: Ulo≈æenie v√Ωsledkov...", "step");
        
        // Pohƒæad√°vky a z√°v√§zky
        currentEntry.set(CONFIG.fields.pohladavky, formatAmount(pohladavkyData.pohladavkyFiltrovane));
        currentEntry.set(CONFIG.fields.zavazky, formatAmount(zavazkyData.zavazkyFiltrovane));
        currentEntry.set(CONFIG.fields.saldo, saldo);
        
        // Doch√°dzka - filtrovan√©
        currentEntry.set(CONFIG.fields.odpracovane, formatAmount(dochadzkaData.odpracovaneFiltrovane));
        currentEntry.set(CONFIG.fields.zarobene, formatAmount(dochadzkaData.zarobeneFiltrovane));
        
        // Doch√°dzka - total (zaokr√∫hlen√© na 2 desatinn√© miesta)
        currentEntry.set(CONFIG.fields.odpracovaneTotal, formatAmount(dochadzkaDataTotal.odpracovaneTotal));
        currentEntry.set(CONFIG.fields.zarobeneTotal, formatAmount(dochadzkaDataTotal.zarobeneTotal));
        
        // Poklad≈àa - filtrovan√©
        currentEntry.set(CONFIG.fields.vyplatene, formatAmount(pokladnaData.vyplateneFiltrovane));
        currentEntry.set(CONFIG.fields.premie, formatAmount(pokladnaData.premieFiltrovane));
        
        // Poklad≈àa - total
        currentEntry.set(CONFIG.fields.vyplateneTotal, formatAmount(pokladnaDataTotal.vyplateneTotal));
        currentEntry.set(CONFIG.fields.premieTotal, formatAmount(pokladnaDataTotal.premieTotal));
        
        // Ostatn√©
        currentEntry.set(CONFIG.fields.preplatokNedoplatok, preplatokNedoplatok);
        currentEntry.set(CONFIG.fields.aktualnaHodinovka, formatAmount(aktualnaHodinovka));
        
        // Fin√°lny s√∫hrn
        addDebug("=== üèÅ FIN√ÅLNY S√öHRN ===", "summary");
        addDebug("üìà Pohƒæad√°vky: " + pohladavkyData.pohladavkyFiltrovane.toFixed(2) + "‚Ç¨", "money");
        addDebug("üìâ Z√°v√§zky: " + zavazkyData.zavazkyFiltrovane.toFixed(2) + "‚Ç¨", "money");
        addDebug("üíπ Saldo (Z√°v√§zky-Pohƒæad√°vky): " + saldo.toFixed(2) + "‚Ç¨", "money");
        addDebug("‚è∞ Odpracovan√©: " + dochadzkaData.odpracovaneFiltrovane.toFixed(2) + "h / Total: " + 
                dochadzkaDataTotal.odpracovaneTotal.toFixed(2) + "h", "time");
        addDebug("üíµ Zaroben√©: " + dochadzkaData.zarobeneFiltrovane.toFixed(2) + "‚Ç¨ / Total: " + 
                dochadzkaDataTotal.zarobeneTotal.toFixed(2) + "‚Ç¨", "money");
        addDebug("üí∏ Vyplaten√©: " + pokladnaData.vyplateneFiltrovane.toFixed(2) + "‚Ç¨ / Total: " + 
                pokladnaDataTotal.vyplateneTotal.toFixed(2) + "‚Ç¨", "money");
        addDebug("üíé Pr√©mie: " + pokladnaData.premieFiltrovane.toFixed(2) + "‚Ç¨ / Total: " + 
                pokladnaDataTotal.premieTotal.toFixed(2) + "‚Ç¨", "money");
        addDebug("üìä Preplatok/Nedoplatok: " + preplatokNedoplatok.toFixed(2) + "‚Ç¨", "money");
        addDebug("üí∞ Aktu√°lna hodinovka: " + aktualnaHodinovka.toFixed(2) + "‚Ç¨/h", "money");
        
        addDebug("‚úÖ Prepoƒçet √∫spe≈°ne dokonƒçen√Ω", "success");
        saveLogsToEntry();
        
        return true;
        
    } catch (error) {
        addError("Kritick√° chyba: " + error.toString(), "main");
        addDebug("Stack trace: " + error.stack, "error");
        saveLogsToEntry();
        return false;
    }
}

// Spustenie hlavnej funkcie
main();