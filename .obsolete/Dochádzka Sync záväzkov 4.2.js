// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA SYNC Z√ÅV√ÑZKOV
// Verzia: 4.2 | D√°tum: 11.08.2025 | Autor: JavaScript Expert
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// ‚úÖ OPRAVEN√â v4.1:
//    - Spr√°vne vytvorenie z√°znamu pre JavaScript 1.7
//    - Odstr√°nen√© ES6 computed property names
//    - Kompatibiln√© s Mozilla Rhino engine
// ‚úÖ KOMPLETNE REFAKTOROVAN√â v4.0:
//    - ≈†trukt√∫ra podƒæa vzoru Doch√°dzka Prepoƒçet 3.1
//    - Jednotn√© debug/error logy s DD.MM.YY HH:mm
//    - Pekne form√°tovan√© info pole
//    - Spr√°vne pou≈æitie attr (2 parametre)
//    - Robustn√© null kontroly
//    - ƒåist√Ω a organizovan√Ω k√≥d
// ==============================================
// FUNKCIE:
//    - Vytvorenie nov√Ωch z√°v√§zkov pre zamestnancov
//    - Aktualiz√°cia existuj√∫cich z√°v√§zkov
//    - Nastavenie finanƒçn√Ωch pol√≠ (Suma, Zostatok)
//    - Oznaƒçenie checkboxu Z√°v√§zky
//    - Info z√°znamy pre audit trail
// ==============================================

// ==============================================
// CONFIG INITIALIZATION
// ==============================================

var CONFIG = (function() {
    // Try centralized config first
    if (typeof MementoConfigAdapter !== 'undefined') {
        try {
            var adapter = MementoConfigAdapter.getAdapter('attendance');
            // Merge with script-specific config
            adapter.scriptName = "Doch√°dzka Group Summary";
            adapter.version = "5.0";
            return adapter;
        } catch (e) {
            // Fallback
        }
    }
    
    // Original config as fallback
    return {
        debug: true,
        version: "4.2",
        scriptName: "Doch√°dzka Sync z√°v√§zkov",
        
        // N√°zvy kni≈æn√≠c
        libraries: {
            zavazky: "Z√°v√§zky",
            zamestnanci: "Zamestnanci",
            dochadzka: "Doch√°dzka"
        },
        
        // N√°zvy pol√≠ - Doch√°dzka
        fields: {
            zamestnanci: "Zamestnanci",
            datum: "D√°tum",
            zavazkyCheckbox: "Z√°v√§zky",
            info: "info",
            debugLog: "Debug_Log",
            errorLog: "Error_Log"
        },
        
        // N√°zvy pol√≠ - Z√°v√§zky
        zavazkyFields: {
            stav: "Stav",
            datum: "D√°tum",
            typ: "Typ",
            zamestnanec: "Zamestnanec",
            veritiel: "Veriteƒæ",
            dochadzka: "Doch√°dzka",
            popis: "Popis",
            suma: "Suma",
            zaplatene: "Zaplaten√©",
            zostatok: "Zostatok",
            info: "info"
        },
        
        // N√°zvy pol√≠ - Zamestnanci
        zamestnanciFields: {
            nick: "Nick",
            priezvisko: "Priezvisko"
        },
        
        // N√°zvy atrib√∫tov
        attributes: {
            dennaMzda: "denn√° mzda"
        },
        
        // Stavy z√°v√§zkov
        stavy: {
            neuhradene: "Neuhraden√©",
            ciastocneUhradene: "ƒåiastoƒçne uhraden√©",
            uhradene: "Uhraden√©"
        },
        
        // Emoji pre debug a info
        icons: {
            start: "üöÄ",
            step: "üìã",
            success: "‚úÖ",
            error: "üí•",
            warning: "‚ö†Ô∏è",
            money: "üí∞",
            person: "üë§",
            info: "‚ÑπÔ∏è",
            update: "üîÑ",
            create: "‚ûï",
            checkmark: "‚òëÔ∏è"
        }
    };
})();

var CONFIG = {
    
};

// Glob√°lne premenn√© pre logy
var debugLog = [];
var errorLog = [];
var currentEntry = entry();

// ==============================================
// DEBUG A ERROR SYST√âM
// ==============================================

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm");
    var errorText = "[" + timestamp + "] ‚ùå ERROR: " + message;
    if (location) {
        errorText += " (Loc: " + location + ")";
    }
    errorLog.push(errorText);
}

function saveLogs() {
    try {
        // Vyma≈æ star√© logy pred z√°pisom nov√Ωch
       // currentEntry.set(CONFIG.fields.debugLog, "");
        currentEntry.set(CONFIG.fields.errorLog, "");
        
        // Ulo≈æ nov√© logy
        if (debugLog.length > 0) {
            currentEntry.set(CONFIG.fields.debugLog, debugLog.join("\n"));
        }
        if (errorLog.length > 0) {
            currentEntry.set(CONFIG.fields.errorLog, errorLog.join("\n"));
        }
    } catch (saveError) {
        // Nem√¥≈æeme logova≈• chybu logovania
    }
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function safeFieldAccess(entry, fieldName, defaultValue) {
    try {
        var value = entry.field(fieldName);
        return value !== null && value !== undefined ? value : (defaultValue || null);
    } catch (error) {
        addError("Pr√≠stup k poƒæu '" + fieldName + "' zlyhal: " + error, "safeFieldAccess");
        return defaultValue || null;
    }
}

function formatDate(date) {
    if (!date) return "N/A";
    try {
        return moment(date).format("DD.MM.YYYY");
    } catch (e) {
        return "N/A";
    }
}

function formatCurrency(amount) {
    if (amount === null || amount === undefined) return "0.00 ‚Ç¨";
    try {
        return parseFloat(amount).toFixed(2) + " ‚Ç¨";
    } catch (e) {
        return "0.00 ‚Ç¨";
    }
}

// ==============================================
// FUNKCIE PRE PR√ÅCU SO ZAMESTNANCAMI
// ==============================================

function getZamestnanecIdentifikator(zamestnanec) {
    if (!zamestnanec) return "Nezn√°my";
    
    var nick = safeFieldAccess(zamestnanec, CONFIG.zamestnanciFields.nick, "");
    var priezvisko = safeFieldAccess(zamestnanec, CONFIG.zamestnanciFields.priezvisko, "");
    
    // Vr√°≈• form√°t "Nick (Priezvisko)" alebo ƒço je dostupn√©
    if (nick && priezvisko) {
        return nick + " (" + priezvisko + ")";
    } else if (nick) {
        return nick;
    } else if (priezvisko) {
        return priezvisko;
    } else {
        return "Nezn√°my zamestnanec";
    }
}

function getDennaMzdaZamestnanca(zamestnanec, index) {
    if (!zamestnanec) return 0;
    
    try {
        // Z√≠skaj denn√∫ mzdu z atrib√∫tu cez currentEntry
        var dennaMzda = zamestnanec.attr(CONFIG.attributes.dennaMzda);
        if (dennaMzda !== null && dennaMzda !== undefined && dennaMzda > 0) {
            addDebug("  üí∞ Denn√° mzda z atrib√∫tu: " + formatCurrency(dennaMzda));
            return parseFloat(dennaMzda);
        } else {
            addDebug("  ‚ö†Ô∏è Denn√° mzda nie je nastaven√° alebo je 0");
            return 0;
        }
    } catch (attrError) {
        addError("Chyba pri z√≠skavan√≠ dennej mzdy: " + attrError.toString(), "getDennaMzda_" + index);
        return 0;
    }
}

// ==============================================
// FUNKCIE PRE PR√ÅCU SO Z√ÅV√ÑZKAMI
// ==============================================

function najdiExistujuceZavazky(dochadzkaNtry) {
    addDebug("üîç Hƒæad√°m existuj√∫ce z√°v√§zky pre t√∫to doch√°dzku...");
    
    try {
        var zavazkyLib = libByName(CONFIG.libraries.zavazky);
        if (!zavazkyLib) {
            addError("Kni≈ænica Z√°v√§zky neexistuje", "najdiExistujuceZavazky");
            return [];
        }
        
        // Hƒæadaj z√°v√§zky linknut√© na t√∫to doch√°dzku
        var vsetkyZavazky = zavazkyLib.entries();
        var linknuteZavazky = [];
        
        for (var i = 0; i < vsetkyZavazky.length; i++) {
            var zavazok = vsetkyZavazky[i];
            var dochadzkaField = safeFieldAccess(zavazok, CONFIG.zavazkyFields.dochadzka, []);
            
            // Skontroluj ƒçi obsahuje na≈°u doch√°dzku
            if (dochadzkaField && dochadzkaField.length > 0) {
                for (var j = 0; j < dochadzkaField.length; j++) {
                    if (dochadzkaField[j] && dochadzkaField[j].id === dochadzkaNtry.id) {
                        linknuteZavazky.push(zavazok);
                        break;
                    }
                }
            }
        }
        
        addDebug("  üìä Na≈°iel som " + linknuteZavazky.length + " existuj√∫cich z√°v√§zkov");
        return linknuteZavazky;
        
    } catch (error) {
        addError("Chyba pri hƒæadan√≠ z√°v√§zkov: " + error.toString(), "najdiExistujuceZavazky");
        return [];
    }
}

function najdiZavazokPreZamestnanca(existujuceZavazky, zamestnanec) {
    if (!existujuceZavazky || !zamestnanec) return null;
    
    for (var i = 0; i < existujuceZavazky.length; i++) {
        var zavazok = existujuceZavazky[i];
        var zamestnanecField = safeFieldAccess(zavazok, CONFIG.zavazkyFields.zamestnanec, []);
        
        if (zamestnanecField && zamestnanecField.length > 0) {
            for (var j = 0; j < zamestnanecField.length; j++) {
                if (zamestnanecField[j] && zamestnanecField[j].id === zamestnanec.id) {
                    return zavazok;
                }
            }
        }
    }
    
    return null;
}

function vypocitajStavZavazku(zostatok) {
    if (zostatok === null || zostatok === undefined) {
        return CONFIG.stavy.neuhradene;
    } else if (zostatok <= 0) {
        return CONFIG.stavy.uhradene;
    } else if (zostatok > 0) {
        return CONFIG.stavy.ciastocneUhradene;
    } else {
        return CONFIG.stavy.neuhradene;
    }
}

// ==============================================
// HLAVN√â SPRACOVANIE Z√ÅV√ÑZKOV
// ==============================================

function vytvorNovyZavazok(zavazkyLib, zamestnanec, datum, suma, identifikator) {
    addDebug("  ‚ûï Vytv√°ranie nov√©ho z√°v√§zku...");
    
    try {
        // Priprav popis
        var popis = "Mzda zamestnanca " + identifikator + " za de≈à " + formatDate(datum);
        
        // Info text pre z√°v√§zok
        var infoText = "üìã AUTOMATICKY VYTVOREN√ù Z√ÅV√ÑZOK\n";
        infoText += "=====================================\n\n";
        infoText += "üìÖ D√°tum: " + formatDate(datum) + "\n";
        infoText += "üë§ Zamestnanec: " + identifikator + "\n";
        infoText += "üí∞ Suma: " + formatCurrency(suma) + "\n\n";
        infoText += "‚è∞ Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        infoText += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoText += "üìÇ Zdroj: Kni≈ænica Doch√°dzka\n\n";
        infoText += "‚úÖ Z√ÅV√ÑZOK VYTVOREN√ù √öSPE≈†NE";
        
        // Vytvor objekt pre nov√Ω z√°v√§zok - SPR√ÅVNY SP√îSOB pre JavaScript 1.7
        var dataZaznamu = {};
        dataZaznamu[CONFIG.zavazkyFields.stav] = CONFIG.stavy.neuhradene;
        dataZaznamu[CONFIG.zavazkyFields.datum] = datum;
        dataZaznamu[CONFIG.zavazkyFields.typ] = "Mzda";
        dataZaznamu[CONFIG.zavazkyFields.zamestnanec] = [zamestnanec];
        dataZaznamu[CONFIG.zavazkyFields.veritiel] = "Zamestnanec";
        dataZaznamu[CONFIG.zavazkyFields.dochadzka] = [currentEntry];
        dataZaznamu[CONFIG.zavazkyFields.popis] = popis;
        dataZaznamu[CONFIG.zavazkyFields.suma] = suma;
        dataZaznamu[CONFIG.zavazkyFields.zaplatene] = 0;
        dataZaznamu[CONFIG.zavazkyFields.zostatok] = suma;
        dataZaznamu[CONFIG.zavazkyFields.info] = infoText;
        
        // Vytvor nov√Ω z√°znam pomocou Memento API
        var vytvorenyZavazok = zavazkyLib.create(dataZaznamu);
        
        if (vytvorenyZavazok) {
            addDebug("  ‚úÖ Z√°v√§zok vytvoren√Ω √∫spe≈°ne");
            
            // Pok√∫s sa z√≠ska≈• ID nov√©ho z√°znamu
            try {
                var zavazokID = vytvorenyZavazok.field("ID");
                if (zavazokID) {
                    addDebug("    üÜî ID z√°v√§zku: #" + zavazokID);
                }
            } catch (idError) {
                // Ignoruj chybu z√≠skania ID
            }
            
            return true;
        } else {
            addError("Vytvorenie z√°v√§zku zlyhalo", "vytvorNovyZavazok");
            return false;
        }
        
    } catch (error) {
        addError("Chyba pri vytv√°ran√≠ z√°v√§zku: " + error.toString(), "vytvorNovyZavazok");
        return false;
    }
}

function aktualizujExistujuciZavazok(zavazok, suma, identifikator, datum) {
    addDebug("  üîÑ Aktualiz√°cia existuj√∫ceho z√°v√§zku...");
    
    try {
        var staraZaplatene = safeFieldAccess(zavazok, CONFIG.zavazkyFields.zaplatene, 0);
        var novyZostatok = suma - staraZaplatene;
        var novyStav = vypocitajStavZavazku(novyZostatok);
        
        // Aktualizuj polia
        zavazok.set(CONFIG.zavazkyFields.suma, suma);
        zavazok.set(CONFIG.zavazkyFields.zostatok, novyZostatok);
        zavazok.set(CONFIG.zavazkyFields.stav, novyStav);
        
        // Aktualizuj info
        var existujuceInfo = safeFieldAccess(zavazok, CONFIG.zavazkyFields.info, "");
        var updateInfo = "\n\nüîÑ AKTUALIZOVAN√â: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        updateInfo += "‚Ä¢ Nov√° suma: " + formatCurrency(suma) + "\n";
        updateInfo += "‚Ä¢ Zaplaten√©: " + formatCurrency(staraZaplatene) + " (zachovan√©)\n";
        updateInfo += "‚Ä¢ Zostatok: " + formatCurrency(novyZostatok) + "\n";
        updateInfo += "‚Ä¢ Stav: " + novyStav + "\n";
        updateInfo += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version;
        
        zavazok.set(CONFIG.zavazkyFields.info, existujuceInfo + updateInfo);
        
        addDebug("  ‚úÖ Z√°v√§zok aktualizovan√Ω");
        addDebug("    üí∞ Suma: " + formatCurrency(suma));
        addDebug("    üíµ Zostatok: " + formatCurrency(novyZostatok));
        addDebug("    üìä Stav: " + novyStav);
        
        return true;
        
    } catch (error) {
        addError("Chyba pri aktualiz√°cii z√°v√§zku: " + error.toString(), "aktualizujExistujuciZavazok");
        return false;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function hlavnaFunkcia() {
    addDebug("üöÄ === ≈†TART SYNC Z√ÅV√ÑZKOV ===");
    addDebug("üìã Script: " + CONFIG.scriptName + " v" + CONFIG.version);
    addDebug("‚è∞ ƒåas: " + moment().format("DD.MM.YYYY HH:mm:ss"));
    
    // KROK 1: Valid√°cia vstupn√Ωch d√°t
    addDebug("\nüìã KROK 1: Z√≠skavam z√°kladn√© √∫daje...");
    
    var datum = safeFieldAccess(currentEntry, CONFIG.fields.datum, null);
    var zamestnanci = safeFieldAccess(currentEntry, CONFIG.fields.zamestnanci, []);
    
    addDebug("  üìÖ D√°tum: " + formatDate(datum));
    addDebug("  üë• Zamestnanci: " + zamestnanci.length + " os√¥b");
    
    if (!datum) {
        addError("D√°tum nie je vyplnen√Ω", "validacia");
        saveLogs();
        message("‚ùå Chyba: D√°tum doch√°dzky nie je vyplnen√Ω!");
        return false;
    }
    
    if (!zamestnanci || zamestnanci.length === 0) {
        addDebug("‚ö†Ô∏è ≈Ωiadni zamestnanci - ukonƒçujem");
        saveLogs();
        message("‚ÑπÔ∏è ≈Ωiadni zamestnanci na spracovanie");
        return false;
    }
    
    // KROK 2: Z√≠skanie kni≈ænice Z√°v√§zky
    addDebug("\nüìã KROK 2: Naƒç√≠tavam kni≈ænicu Z√°v√§zky...");
    
    var zavazkyLib = null;
    try {
        zavazkyLib = libByName(CONFIG.libraries.zavazky);
        if (!zavazkyLib) {
            addError("Kni≈ænica Z√°v√§zky neexistuje", "library");
            saveLogs();
            message("‚ùå Chyba: Kni≈ænica Z√°v√§zky neexistuje!");
            return false;
        }
        addDebug("  ‚úÖ Kni≈ænica naƒç√≠tan√°");
    } catch (error) {
        addError("Chyba pri naƒç√≠tan√≠ kni≈ænice: " + error.toString(), "library");
        saveLogs();
        message("‚ùå Chyba: Nepodarilo sa naƒç√≠ta≈• kni≈ænicu Z√°v√§zky!");
        return false;
    }
    
    // KROK 3: N√°jdenie existuj√∫cich z√°v√§zkov
    addDebug("\nüìã KROK 3: Hƒæad√°m existuj√∫ce z√°v√§zky...");
    var existujuceZavazky = najdiExistujuceZavazky(currentEntry);
    
    // KROK 4: Spracovanie ka≈æd√©ho zamestnanca
    addDebug("\nüìã KROK 4: Spracov√°vam zamestnancov...");
    
    var uspesneVytvorene = 0;
    var uspesneAktualizovane = 0;
    var chyby = 0;
    var celkovaSuma = 0;
    
    for (var i = 0; i < zamestnanci.length; i++) {
        var zamestnanec = zamestnanci[i];
        
        addDebug("\n--- Zamestnanec " + (i + 1) + "/" + zamestnanci.length + " ---");
        
        if (!zamestnanec) {
            addError("Zamestnanec na poz√≠cii " + i + " je null", "zamestnanec_" + i);
            chyby++;
            continue;
        }
        
        try {
            // Z√≠skaj identifik√°tor a sumu
            var identifikator = getZamestnanecIdentifikator(zamestnanec);
            var dennaMzda = getDennaMzdaZamestnanca(zamestnanec, i);
            
            addDebug("  üë§ " + identifikator);
            addDebug("  üí∞ Suma: " + formatCurrency(dennaMzda));
            
            if (dennaMzda <= 0) {
                addDebug("  ‚ö†Ô∏è Denn√° mzda je 0 alebo z√°porn√° - preskakujem");
                continue;
            }
            
            celkovaSuma += dennaMzda;
            
            // Skontroluj existuj√∫ci z√°v√§zok
            var existujuciZavazok = najdiZavazokPreZamestnanca(existujuceZavazky, zamestnanec);
            
            if (existujuciZavazok) {
                // Aktualizuj existuj√∫ci
                if (aktualizujExistujuciZavazok(existujuciZavazok, dennaMzda, identifikator, datum)) {
                    uspesneAktualizovane++;
                } else {
                    chyby++;
                }
            } else {
                // Vytvor nov√Ω
                if (vytvorNovyZavazok(zavazkyLib, zamestnanec, datum, dennaMzda, identifikator)) {
                    uspesneVytvorene++;
                } else {
                    chyby++;
                }
            }
            
        } catch (error) {
            addError("Chyba pri spracovan√≠ zamestnanca: " + error.toString(), "process_" + i);
            chyby++;
        }
    }
    
    // KROK 5: Oznaƒçenie checkboxu a vytvorenie info z√°znamu
    addDebug("\nüìã KROK 5: Finaliz√°cia...");
    
    var totalUspesnych = uspesneVytvorene + uspesneAktualizovane;
    
    if (totalUspesnych > 0) {
        // Oznaƒç checkbox
        try {
            currentEntry.set(CONFIG.fields.zavazkyCheckbox, true);
            addDebug("  ‚òëÔ∏è Checkbox 'Z√°v√§zky' oznaƒçen√Ω");
        } catch (error) {
            addError("Chyba pri oznaƒçovan√≠ checkboxu: " + error.toString(), "checkbox");
        }
        
        // Vytvor info z√°znam
        var infoMessage = "üìã SYNCHRONIZ√ÅCIA Z√ÅV√ÑZKOV\n";
        infoMessage += "=====================================\n\n";
        infoMessage += "üìÖ D√°tum: " + formatDate(datum) + "\n";
        infoMessage += "‚è∞ ƒåas sync: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n\n";
        infoMessage += "üìä V√ùSLEDKY:\n";
        infoMessage += "‚Ä¢ ‚ûï Nov√© z√°v√§zky: " + uspesneVytvorene + "\n";
        infoMessage += "‚Ä¢ üîÑ Aktualizovan√©: " + uspesneAktualizovane + "\n";
        infoMessage += "‚Ä¢ üë• Zamestnancov: " + zamestnanci.length + "\n";
        infoMessage += "‚Ä¢ üí∞ Celkov√° suma: " + formatCurrency(celkovaSuma) + "\n";
        
        if (chyby > 0) {
            infoMessage += "‚Ä¢ ‚ö†Ô∏è Chyby: " + chyby + "\n";
        }
        
        infoMessage += "\nüîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script verzia: " + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ Trigger: After Save\n";
        infoMessage += "‚Ä¢ Kni≈ænica: Doch√°dzka\n";
        infoMessage += "‚Ä¢ JavaScript: 1.7 (Rhino)\n\n";
        
        if (totalUspesnych === zamestnanci.length) {
            infoMessage += "‚úÖ V≈†ETKY Z√ÅV√ÑZKY √öSPE≈†NE SYNCHRONIZOVAN√â";
        } else {
            infoMessage += "‚ö†Ô∏è ƒåIASTOƒåN√Å SYNCHRONIZ√ÅCIA\n";
            infoMessage += "Pre detaily pozri Debug_Log";
        }
        
        try {
            currentEntry.set(CONFIG.fields.info, infoMessage);
            addDebug("  ‚úÖ Info z√°znam vytvoren√Ω");
        } catch (error) {
            addError("Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString(), "info");
        }
    }
    
    // Z√°vereƒçn√© ≈°tatistiky
    addDebug("\nüìä === V√ùSLEDKY SYNCHRONIZ√ÅCIE ===");
    addDebug("‚úÖ Nov√© z√°v√§zky: " + uspesneVytvorene);
    addDebug("üîÑ Aktualizovan√©: " + uspesneAktualizovane);
    addDebug("‚ùå Chyby: " + chyby);
    addDebug("üí∞ Celkov√° suma: " + formatCurrency(celkovaSuma));
    
    if (totalUspesnych === zamestnanci.length && chyby === 0) {
        addDebug("üéâ === SYNC DOKONƒåEN√ù √öSPE≈†NE! ===");
        return true;
    } else if (totalUspesnych > 0) {
        addDebug("‚ö†Ô∏è === ƒåIASTOƒåN√ù √öSPECH ===");
        return true;
    } else {
        addDebug("‚ùå === SYNC ZLYHAL ===");
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

try {
    addDebug("üé¨ Inicializ√°cia " + CONFIG.scriptName + " v" + CONFIG.version);
    
    // Kontrola existencie currentEntry
    if (!currentEntry) {
        addError("KRITICK√Å CHYBA: currentEntry neexistuje", "startup");
        message("üí• KRITICK√Å CHYBA!\n\nScript nem√¥≈æe be≈æa≈• bez aktu√°lneho z√°znamu.");
    } else {
        // Spustenie hlavnej funkcie
        var result = hlavnaFunkcia();
        
        // Ulo≈æ logy
        saveLogs();
        
        // Informuj pou≈æ√≠vateƒæa
        if (result) {
           // var info = safeFieldAccess(currentEntry, CONFIG.fields.info, "");
            var info = "";
            var shortInfo = info.split("\n").slice(0, 10).join("\n");
            
            message("‚úÖ Z√°v√§zky √∫spe≈°ne synchronizovan√©!\n\n" + shortInfo + "\n\n" + 
                   "‚ÑπÔ∏è Detaily v poli 'info'");
        } else {
            message("‚ùå Synchroniz√°cia z√°v√§zkov zlyhala!\n\n" +
                   "üîç Skontroluj Error_Log pre detaily\n" +
                   "üìã Over vstupn√© d√°ta a sk√∫s znovu");
        }
    }
    
} catch (kritickachyba) {
    // Posledn√° z√°chrana
    try {
        addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "critical");
        saveLogs();
        message("üí• KRITICK√Å CHYBA!\n\nScript zlyhal. Pozri Error_Log.");
    } catch (finalError) {
        message("üí• FAT√ÅLNA CHYBA!\n\n" + kritickachyba.toString());
    }
}