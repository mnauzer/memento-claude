// ==============================================
// MEMENTO DATABASE - MINIM√ÅLNY TEST SCRIPT
// Verzia: 1.0 | D√°tum: 12.08.2025
// √öƒçel: Z√°kladn√Ω test bez komplexn√Ωch API vol√°n√≠
// ==============================================

try {
    // Vyƒçisti Debug_Log
    currentEntry.set("Debug_Log", "");
    
    // Basic timestamp
    var timestamp = moment().format("HH:mm:ss");
    var log = "";
    
    function addLog(message) {
        log += "[" + timestamp + "] " + message + "\n";
        currentEntry.set("Debug_Log", log);
    }
    
    addLog("üöÄ === MINIM√ÅLNY TEST SCRIPT ===");
    
    // TEST 1: currentEntry
    addLog("TEST 1: currentEntry check...");
    if (currentEntry) {
        addLog("‚úÖ currentEntry OK");
        
        try {
            var entryId = currentEntry.field("ID") || "N/A";
            addLog("   Entry ID: " + entryId);
        } catch (idError) {
            addLog("   ‚ö†Ô∏è ID field error: " + idError.toString());
        }
    } else {
        addLog("‚ùå currentEntry NEDOSTUPN√ù!");
        throw new Error("currentEntry not available");
    }
    
    // TEST 2: lib() function
    addLog("TEST 2: lib() function check...");
    if (typeof lib === 'function') {
        addLog("‚úÖ lib() function exists");
        
        try {
            var currentLib = lib();
            if (currentLib) {
                addLog("‚úÖ lib() returns object");
                
                // Test entries() method
                try {
                    var entries = currentLib.entries();
                    addLog("‚úÖ entries() works: " + entries.length + " z√°znamov");
                } catch (entriesError) {
                    addLog("‚ö†Ô∏è entries() error: " + entriesError.toString());
                }
                
            } else {
                addLog("‚ùå lib() returns null");
            }
        } catch (libError) {
            addLog("‚ùå lib() call error: " + libError.toString());
        }
    } else {
        addLog("‚ùå lib() function neexistuje!");
    }
    
    // TEST 3: MementoUtils check  
    addLog("TEST 3: MementoUtils check...");
    if (typeof MementoUtils === 'undefined') {
        addLog("‚ùå MementoUtils NEDOSTUPN√Å!");
        addLog("   Rie≈°enie: Nahraj MementoUtils.js do JavaScript kni≈æn√≠c");
    } else {
        addLog("‚úÖ MementoUtils dostupn√°");
        addLog("   Verzia: " + (MementoUtils.version || "nezn√°ma"));
        
        // Test basic function
        if (typeof MementoUtils.addDebug === 'function') {
            addLog("‚úÖ MementoUtils.addDebug() dostupn√°");
        } else {
            addLog("‚ö†Ô∏è MementoUtils.addDebug() ch√Ωba");
        }
        
        if (typeof MementoUtils.safeGet === 'function') {
            addLog("‚úÖ MementoUtils.safeGet() dostupn√°");
        } else {
            addLog("‚ö†Ô∏è MementoUtils.safeGet() ch√Ωba");
        }
    }
    
    // TEST 4: Basic field access
    addLog("TEST 4: Field access test...");
    var basicFields = ["D√°tum", "Od", "Do", "Dp", "Zamestnanci"];
    var existingFields = [];
    var missingFields = [];
    
    for (var i = 0; i < basicFields.length; i++) {
        var fieldName = basicFields[i];
        try {
            var fieldValue = currentEntry.field(fieldName);
            existingFields.push(fieldName);
            addLog("‚úÖ Pole '" + fieldName + "': " + (fieldValue ? "HAS_VALUE" : "EMPTY"));
        } catch (fieldError) {
            missingFields.push(fieldName);
            addLog("‚ùå Pole '" + fieldName + "': NEEXISTUJE");
        }
    }
    
    // TEST 5: libByName test
    addLog("TEST 5: libByName() test...");
    var testLibraries = ["Zamestnanci", "sadzby zamestnancov"];
    
    for (var j = 0; j < testLibraries.length; j++) {
        var libName = testLibraries[j];
        try {
            var testLib = libByName(libName);
            if (testLib) {
                addLog("‚úÖ Kni≈ænica '" + libName + "': EXISTS");
            } else {
                addLog("‚ùå Kni≈ænica '" + libName + "': NULL");
            }
        } catch (libByNameError) {
            addLog("‚ùå Kni≈ænica '" + libName + "': ERROR - " + libByNameError.toString());
        }
    }
    
    // FINAL SUMMARY
    addLog("üìä === S√öHRN TESTU ===");
    addLog("‚úÖ Existuj√∫ce polia: " + existingFields.length + " (" + existingFields.join(", ") + ")");
    addLog("‚ùå Ch√Ωbaj√∫ce polia: " + missingFields.length + " (" + missingFields.join(", ") + ")");
    
    if (existingFields.length === 0) {
        addLog("üö® PROBL√âM: ≈Ωiadne testovan√© polia neexistuj√∫!");
        addLog("üí° RIE≈†ENIE: Skontroluj n√°zvy pol√≠ v Z√°znam pr√°c kni≈ænici");
        
        if (missingFields.indexOf("Do") >= 0 && missingFields.indexOf("Dp") >= 0) {
            addLog("üí° TIP: Mo≈æno m√°≈° pole 'Koniec' alebo in√Ω n√°zov namiesto 'Do'/'Dp'");
        }
    }
    
    if (typeof MementoUtils === 'undefined') {
        addLog("üö® HLAVN√ù PROBL√âM: MementoUtils kni≈ænica ch√Ωba!");
        addLog("üí° RIE≈†ENIE:");
        addLog("   1. Choƒè do JavaScript kni≈æn√≠c");
        addLog("   2. Vytvor nov√Ω z√°znam s n√°zvom 'MementoUtils'");
        addLog("   3. Vlo≈æ MementoUtils v2.1 k√≥d");
        addLog("   4. Ulo≈æ a sk√∫s znovu");
    }
    
    addLog("‚úÖ === TEST DOKONƒåEN√ù ===");
    
    // Success message
    message("‚úÖ Minim√°lny test dokonƒçen√Ω!\nüìã V≈°etky v√Ωsledky v Debug_Log\nüîç Pozri Debug_Log pre detaily");
    
} catch (fatalError) {
    // Emergency error handling
    var errorMsg = "üí• FAT√ÅLNA CHYBA: " + fatalError.toString();
    
    try {
        currentEntry.set("Debug_Log", log + errorMsg + "\n");
        currentEntry.set("Error_Log", "[" + moment().format("YYYY-MM-DD HH:mm:ss") + "] " + errorMsg + "\n");
    } catch (logError) {
        // Last resort
        message("üí• FAT√ÅLNA CHYBA!\n\n" + fatalError.toString() + "\n\nCannot write to logs: " + logError.toString());
    }
    
    message("‚ùå Test zlyhal!\nüí• " + fatalError.toString() + "\n\nüìã Pozri Debug_Log a Error_Log");
}