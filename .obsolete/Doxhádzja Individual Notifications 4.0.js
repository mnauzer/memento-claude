// ==============================================
// DOCH√ÅDZKA INDIVIDUAL NOTIFICATIONS
// Verzia: 4.0 | D√°tum: 20.08.2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// üìã FUNKCIA:
//    - Po ulo≈æen√≠ doch√°dzky vytvor√≠ individu√°lne notifik√°cie
//    - Pre ka≈æd√©ho zamestnanca v z√°zname
//    - Vyu≈æ√≠va ASISTANTO Notifications Helper
//    - Neodosiela priamo - len vytv√°ra z√°znamy
// ‚úÖ v4.0 REFAKTORING:
//    - Integr√°cia s poƒæom "Notifik√°cie" v doch√°dzke
//    - Cleanup star√Ωch notifik√°ci√≠ pri update
//    - Konzistentn√© s Group Summary v4.1
//    - Optimalizovan√Ω k√≥d a lep≈°ie form√°tovanie ƒçasu
//    - Odstr√°nen√© duplicity, vyu≈æitie MementoUtils
// ==============================================

// Import kni≈æn√≠c
var utils = MementoUtils;
var notifHelper = ASISTANTONotifications;
var cleanupModule = DochadzkaNotifsCleanup;
var currentEntry = entry();

// Konfigur√°cia
var CONFIG = {
    debug: true,
    version: "4.0",
    scriptName: "Doch√°dzka Individual Notifications",
    
    // Kni≈ænice
    defaultsLibrary: "ASISTANTO Defaults",
    notificationsLibrary: "Notifications",
    
    // N√°zvy pol√≠ v Defaults
    defaultsFields: {
        dochadzkaIndividualEnabled: "Doch√°dzka individu√°lne notifik√°cie",
        notificationDelay: "Oneskorenie notifik√°cie (min)",
        nazovFirmy: "N√°zov firmy",
        includeFinancials: "Zahrn√∫≈• finanƒçn√© √∫daje",
        includeStats: "Zahrn√∫≈• ≈°tatistiky"
    },
    
    // N√°zvy pol√≠ v Doch√°dzke
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        prichod: "Pr√≠chod",
        odchod: "Odchod",
        pracovnaDoba: "Pracovn√° doba",
        mzdoveNaklady: "Mzdov√© n√°klady",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        odpracovane: "Odpracovan√©",
        poznamka: "Pozn√°mka",
        id: "ID",
        notifikacie: "Notifik√°cie"  // NOV√â pole pre linknut√© notifik√°cie
    },
    
    // N√°zvy atrib√∫tov
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        priplatokHodinovka: "+pr√≠platok (‚Ç¨/h)",
        premia: "+pr√©mia (‚Ç¨)",
        pokuta: "-pokuta (‚Ç¨)",
        dennaMzda: "denn√° mzda",
        poznamka: "pozn√°mka"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
        // 0. CLEANUP - Vyma≈æ star√© notifik√°cie ak existuj√∫
        if (cleanupModule && typeof cleanupModule.cleanupOldNotifications === 'function') {
            var cleanupResult = cleanupModule.cleanupOldNotifications(currentEntry);
            if (cleanupResult.deleted > 0) {
                utils.addDebug(currentEntry, "üßπ Vymazan√Ωch " + cleanupResult.deleted + " star√Ωch notifik√°ci√≠");
            }
        } else {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Cleanup modul nie je dostupn√Ω");
        }
        
        // 1. Kontrola ƒçi s√∫ povolen√© individu√°lne notifik√°cie
        var settings = loadAllSettings();
        
        var enabled = settings[CONFIG.defaultsFields.dochadzkaIndividualEnabled];
        utils.addDebug(currentEntry, "Individu√°lne notifik√°cie povolen√©: " + enabled);
        
        if (!enabled) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è Individu√°lne notifik√°cie s√∫ vypnut√©");
            return;
        }

        // 2. Z√≠skaj zamestnancov
        var zamestnanci = utils.safeGetLinks(currentEntry, CONFIG.fields.zamestnanci);
        if (!zamestnanci || zamestnanci.length === 0) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è ≈Ωiadni zamestnanci v z√°zname");
            return;
        }
        
        utils.addDebug(currentEntry, "üë• Poƒçet zamestnancov: " + zamestnanci.length);
        
        // 3. Priprav z√°kladn√© d√°ta
        var baseData = prepareBaseData(settings);
        
        // 4. Vytvor notifik√°cie pre ka≈æd√©ho zamestnanca
        var createdCount = 0;
        var createdNotifications = [];
        
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            utils.addDebug(currentEntry, "üë§ Spracov√°vam: " + utils.formatEmployeeName(zamestnanec));
            
            var notification = createIndividualNotification(zamestnanec, baseData, settings);
            if (notification) {
                createdCount++;
                createdNotifications.push(notification);
            }
        }
        
        // 5. NOV√â - Linkuj notifik√°cie k doch√°dzke
        if (createdNotifications.length > 0 && cleanupModule && typeof cleanupModule.linkNotificationsToDochadzka === 'function') {
            cleanupModule.linkNotificationsToDochadzka(currentEntry, createdNotifications);
        }
        
        // 6. Z√°vereƒçn√© info
        utils.addInfo(currentEntry, "Vytvoren√© individu√°lne notifik√°cie", {
            celkom: createdCount,
            zamestnanci: zamestnanci.length,
            datum: utils.formatDate(currentEntry.field(CONFIG.fields.datum), "DD.MM.YYYY")
        });
        
        utils.addDebug(currentEntry, "‚úÖ === KONIEC - Vytvoren√Ωch " + createdCount + " notifik√°ci√≠ ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), CONFIG.scriptName, error);
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Naƒç√≠ta v≈°etky nastavenia z Defaults kni≈ænice
 */
function loadAllSettings() {
    var settings = {};
    
    for (var key in CONFIG.defaultsFields) {
        settings[CONFIG.defaultsFields[key]] = utils.getSettings(CONFIG.defaultsLibrary, CONFIG.defaultsFields[key]);
    }
    
    utils.addDebug(currentEntry, "üìã Nastavenia naƒç√≠tan√© z " + CONFIG.defaultsLibrary);
    
    return settings;
}

/**
 * Priprav√≠ z√°kladn√© d√°ta pre notifik√°ciu
 */
function prepareBaseData(settings) {
    var datum = currentEntry.field(CONFIG.fields.datum);
    var prichod = currentEntry.field(CONFIG.fields.prichod);
    var odchod = currentEntry.field(CONFIG.fields.odchod);
    var pracovnaDoba = currentEntry.field(CONFIG.fields.pracovnaDoba);
    
    var baseData = {
        typSpravy: "Doch√°dzka",
        zdrojSpravy: "Automatick√°",
        formatovanie: "Markdown",
        priorita: "Norm√°lna",
        status: "ƒåak√°",
        zdrojovaKniznica: "Doch√°dzka",
        zdrojovyId: currentEntry.field(CONFIG.fields.id),
        datum: datum,
        prichod: prichod,
        odchod: odchod,
        pracovnaDoba: pracovnaDoba
    };
    
    // Nastav ƒças odoslania ak je oneskorenie
    var delay = settings[CONFIG.defaultsFields.notificationDelay] || 0;
    if (delay > 0) {
        baseData.poslatO = moment().add(delay, 'minutes').toDate();
        utils.addDebug(currentEntry, "‚è∞ Notifik√°cie napl√°novan√© o " + delay + " min√∫t");
    }
    
    return baseData;
}

/**
 * Vytvor√≠ individu√°lnu notifik√°ciu pre zamestnanca
 */
function createIndividualNotification(zamestnanec, baseData, settings) {
    try {
        // Z√≠skaj √∫daje zamestnanca
        var zamestnanecInfo = utils.getEmployeeDetails(zamestnanec, currentEntry.field(CONFIG.fields.datum));
        if (!zamestnanecInfo) {
            utils.addDebug(currentEntry, "‚ö†Ô∏è Nepodarilo sa z√≠ska≈• info o zamestnancovi");
            return null;
        }
        
        // Kontrola ƒçi m√° Telegram
        if (!zamestnanecInfo.telegramEnabled || !zamestnanecInfo.telegramId) {
            utils.addDebug(currentEntry, "‚ÑπÔ∏è " + zamestnanecInfo.fullName + " nem√° povolen√Ω Telegram");
            return null;
        }
        
        // Priprav spr√°vu
        var message = prepareIndividualMessage(zamestnanec, zamestnanecInfo, settings);
        
        // Vytvor notifik√°ciu
        var notifData = Object.assign({}, baseData, {
            predmet: "Doch√°dzka " + utils.formatDate(baseData.datum, "DD.MM.YYYY"),
            sprava: message,
            adresat: "Zamestnanec",
            zamestnanec: [zamestnanec]
        });
        
        var notification = notifHelper.createNotification(notifData);
        
        if (notification) {
            utils.addDebug(currentEntry, "‚úÖ Notifik√°cia vytvoren√° pre " + zamestnanecInfo.fullName + " (ID: " + notification.field("ID") + ")");
            return notification;
        } else {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu pre " + zamestnanecInfo.fullName, "createIndividualNotification");
            return null;
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createIndividualNotification", error);
        return null;
    }
}

/**
 * Priprav√≠ personalizovan√∫ spr√°vu pre zamestnanca
 */
function prepareIndividualMessage(zamestnanec, zamestnanecInfo, settings) {
    var datum = currentEntry.field(CONFIG.fields.datum);
    var datumFormatted = utils.formatDate(datum, "D.M.YYYY");
    var dayName = moment(datum).format("dddd");
    
    // Header - ƒçist√Ω form√°t
    var message = "*Va≈°a doch√°dzka - " + datumFormatted + " (" + dayName + ")*\n";
    message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
    
    // Z√°kladn√© info
    message += "üë§ " + zamestnanecInfo.fullName + "\n";
    
    // ƒåasy - spr√°vne form√°tovan√©
    var prichod = currentEntry.field(CONFIG.fields.prichod);
    var odchod = currentEntry.field(CONFIG.fields.odchod);
    
    if (prichod || odchod) {
        var prichodFormatted = prichod ? utils.formatTime(prichod) : "‚Äî";
        var odchodFormatted = odchod ? utils.formatTime(odchod) : "‚Äî";
        message += "‚è∞ ƒåas: " + prichodFormatted + " - " + odchodFormatted + "\n";
    }
    
    // Odpracovan√© hodiny (z atrib√∫tu)
    var odpracovane = getEmployeeAttribute(zamestnanec, CONFIG.attributes.odpracovane);
    if (odpracovane && odpracovane > 0) {
        message += "‚è±Ô∏è Odpracovan√©: " + odpracovane.toFixed(1).replace('.0', '') + "h\n";
    }
    
    // Finanƒçn√© √∫daje ak s√∫ povolen√©
    if (settings[CONFIG.defaultsFields.includeFinancials]) {
        var dennaMzda = getEmployeeAttribute(zamestnanec, CONFIG.attributes.dennaMzda);
        if (dennaMzda && dennaMzda > 0) {
            message += "üí∞ Denn√° mzda: " + utils.formatMoney(dennaMzda) + "\n";
        }
        
        // Hodinovka
        if (zamestnanecInfo.hodinovka && zamestnanecInfo.hodinovka > 0) {
            message += "üíµ Hodinov√° sadzba: " + utils.formatMoney(zamestnanecInfo.hodinovka) + "/h\n";
        }
    }
    
    // ≈†tatistiky ak s√∫ povolen√©
    if (settings[CONFIG.defaultsFields.includeStats]) {
        message += "\n*Mesaƒçn√© ≈°tatistiky:*\n";
        
        var monthStats = getMonthlyStats(zamestnanec);
        if (monthStats && monthStats.days > 0) {
            message += "‚Ä¢ Odpracovan√© dni: " + monthStats.days + "\n";
            message += "‚Ä¢ Celkom hod√≠n: " + monthStats.hours.toFixed(1).replace('.0', '') + "h\n";
            
            if (settings[CONFIG.defaultsFields.includeFinancials] && monthStats.earned > 0) {
                message += "‚Ä¢ Zaroben√©: " + utils.formatMoney(monthStats.earned) + "\n";
            }
        } else {
            message += "‚Ä¢ Zatiaƒæ ≈æiadne √∫daje tento mesiac\n";
        }
    }
    
    // Pozn√°mka zamestnanca ak existuje
    var poznamkaZam = getEmployeeAttribute(zamestnanec, CONFIG.attributes.poznamka);
    if (poznamkaZam) {
        message += "\nüìù Va≈°a pozn√°mka: " + poznamkaZam + "\n";
    }
    
    // Pozn√°mka doch√°dzky ak existuje
    var poznamka = currentEntry.field(CONFIG.fields.poznamka);
    if (poznamka) {
        message += "\nüìå Pozn√°mka k doch√°dzke: " + poznamka;
    }
    
    return message;
}

/**
 * Z√≠ska atrib√∫t zamestnanca z poƒæa
 */
function getEmployeeAttribute(zamestnanec, attributeName) {
    try {
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        if (zamArray && zamArray.length > 0) {
            for (var i = 0; i < zamArray.length; i++) {
                if (zamArray[i].field("ID") === zamestnanec.field("ID")) {
                    return zamArray[i].attr(attributeName);
                }
            }
        }
        
        return null;
        
    } catch (error) {
        return null;
    }
}

/**
 * Z√≠ska mesaƒçn√© ≈°tatistiky pre zamestnanca
 */
function getMonthlyStats(zamestnanec) {
    try {
        var monthStart = moment(currentEntry.field(CONFIG.fields.datum)).startOf('month');
        var monthEnd = moment(currentEntry.field(CONFIG.fields.datum)).endOf('month');
        
        // N√°jdi v≈°etky doch√°dzky tohto mesiaca
        var dochadzkyLib = lib();
        var allDochadzky = dochadzkyLib.entries();
        
        var stats = {
            days: 0,
            hours: 0,
            earned: 0
        };
        
        for (var i = 0; i < allDochadzky.length; i++) {
            var dochadzka = allDochadzky[i];
            var datum = dochadzka.field(CONFIG.fields.datum);
            
            // Kontrola ƒçi je v spr√°vnom obdob√≠
            if (!datum || !moment(datum).isBetween(monthStart, monthEnd, 'day', '[]')) {
                continue;
            }
            
            // Kontrola ƒçi obsahuje tohto zamestnanca
            var zamestnanci = utils.safeGetLinks(dochadzka, CONFIG.fields.zamestnanci);
            var hasEmployee = false;
            
            for (var j = 0; j < zamestnanci.length; j++) {
                if (zamestnanci[j].field("ID") === zamestnanec.field("ID")) {
                    hasEmployee = true;
                    break;
                }
            }
            
            if (hasEmployee) {
                stats.days++;
                
                // Z√≠skaj odpracovan√© hodiny z atrib√∫tu
                var hodiny = 0;
                var zamArray = dochadzka.field(CONFIG.fields.zamestnanci);
                
                if (zamArray && zamArray.length > 0) {
                    for (var k = 0; k < zamArray.length; k++) {
                        if (zamArray[k].field("ID") === zamestnanec.field("ID")) {
                            hodiny = zamArray[k].attr(CONFIG.attributes.odpracovane) || 0;
                            break;
                        }
                    }
                }
                
                stats.hours += hodiny;
                
                // Vypoƒç√≠taj z√°robok
                var hodinovka = getEmployeeAttribute(zamestnanec, CONFIG.attributes.hodinovka) || 0;
                if (hodinovka > 0 && hodiny > 0) {
                    stats.earned += hodiny * hodinovka;
                }
            }
        }
        
        return stats;
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri v√Ωpoƒçte mesaƒçn√Ωch ≈°tatist√≠k: " + error.toString(), "getMonthlyStats", error);
        return null;
    }
}

// ==============================================
// SPUSTENIE
// ==============================================

main();

// ==============================================
// CLEANUP MODULE (inline pre jednoduchos≈•)
// ==============================================

var DochadzkaNotifsCleanup = (function() {
    'use strict';
    
    var CONFIG = {
        version: "1.0",
        fields: {
            notifikacie: "Notifik√°cie",
            messageId: "Message ID",
            chatId: "Chat ID",
            status: "Status"
        }
    };
    
    function cleanupOldNotifications(dochadzkaEntry) {
        var result = {
            deleted: 0,
            telegramDeleted: 0,
            errors: [],
            success: true
        };
        
        try {
            utils.addDebug(dochadzkaEntry, "üßπ === CLEANUP NOTIFIK√ÅCI√ç ===");
            
            var linkedNotifications = utils.safeGetLinks(dochadzkaEntry, CONFIG.fields.notifikacie);
            
            if (!linkedNotifications || linkedNotifications.length === 0) {
                utils.addDebug(dochadzkaEntry, "‚ÑπÔ∏è ≈Ωiadne linknut√© notifik√°cie na vymazanie");
                return result;
            }
            
            utils.addDebug(dochadzkaEntry, "üìã Na≈°iel som " + linkedNotifications.length + " notifik√°ci√≠ na vymazanie");
            
            for (var i = 0; i < linkedNotifications.length; i++) {
                var notif = linkedNotifications[i];
                var notifId = notif.field("ID");
                
                try {
                    // Pok√∫s sa vymaza≈• Telegram spr√°vu
                    if (typeof ASISTANTOTelegram !== 'undefined' && ASISTANTOTelegram.deleteTelegramMessage) {
                        var messageId = notif.field(CONFIG.fields.messageId);
                        var chatId = notif.field(CONFIG.fields.chatId);
                        
                        if (messageId && chatId) {
                            var deleteResult = ASISTANTOTelegram.deleteTelegramMessage(chatId, messageId);
                            if (deleteResult.success) {
                                result.telegramDeleted++;
                            }
                        }
                    }
                    
                    // Vyma≈æ notifik√°ciu
                    notif.remove();
                    result.deleted++;
                    
                    utils.addDebug(dochadzkaEntry, "‚úÖ Notifik√°cia #" + notifId + " vymazan√°");
                    
                } catch (error) {
                    result.errors.push("Notifik√°cia #" + notifId + ": " + error.toString());
                }
            }
            
            // Vyƒçisti pole
            dochadzkaEntry.set(CONFIG.fields.notifikacie, []);
            
            utils.addDebug(dochadzkaEntry, "üßπ Cleanup dokonƒçen√Ω: " + result.deleted + " vymazan√Ωch");
            
            return result;
            
        } catch (error) {
            utils.addError(dochadzkaEntry, "Chyba v cleanup: " + error.toString());
            result.success = false;
            return result;
        }
    }
    
    function linkNotificationsToDochadzka(dochadzkaEntry, notifications) {
        try {
            if (!notifications || notifications.length === 0) return true;
            
            var existingNotifs = dochadzkaEntry.field(CONFIG.fields.notifikacie) || [];
            var allNotifs = existingNotifs.concat(notifications);
            
            dochadzkaEntry.set(CONFIG.fields.notifikacie, allNotifs);
            
            utils.addDebug(dochadzkaEntry, "üîó Linknut√Ωch " + notifications.length + " notifik√°ci√≠");
            
            return true;
            
        } catch (error) {
            utils.addError(dochadzkaEntry, "Chyba pri linkovan√≠: " + error.toString());
            return false;
        }
    }
    
    return {
        version: CONFIG.version,
        cleanupOldNotifications: cleanupOldNotifications,
        linkNotificationsToDochadzka: linkNotificationsToDochadzka
    };
})();