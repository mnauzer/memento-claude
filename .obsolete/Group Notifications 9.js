// ==============================================
// DOCH√ÅDZKA GROUP NOTIFICATION - Vytvorenie notifik√°cie
// Verzia: 9.0 | D√°tum: December 2024 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: After Save
// ==============================================
// üìã FUNKCIA:
//    - Vytvor√≠ z√°znam v kni≈ænici Notifications
//    - Z√≠ska Chat ID a Thread ID z ASISTANTO Defaults
//    - Sform√°tuje spr√°vu podobn√∫ ako info pole v Doch√°dzka Prepoƒçet
//    - Skontroluje ƒçi s√∫ povolen√© skupinov√© notifik√°cie
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0+ (z√°kladn√© funkcie)
//    - MementoConfig v7.0+ (centr√°lny CONFIG)
//    - NEPOTREBUJE MementoTelegram!
// ==============================================
// ‚úÖ ZJEDNODU≈†EN√â v9.0:
//    - Odstr√°nen√© agreg√°cie a s√∫hrny
//    - Priame vytvorenie notifik√°cie
//    - Jednoduch√Ω line√°rny workflow
//    - ƒå√≠tanie nastaven√≠ z Defaults
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Doch√°dzka Group Notification",
    version: "9.0",
    
    // Referencie na centr√°lny config
    fields: centralConfig.fields,
    attributes: centralConfig.attributes,
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    
    // ≈†pecifick√© n√°zvy pol√≠ pre skupiny v Defaults
    telegramGroupFields: {
        attendance: "Telegram skupina doch√°dzky",
        workRecord: "Telegram skupina z√°znamu pr√°c",
        bookOfRides: "Telegram skupina knihy j√°zd"
    },
    
    // N√°zvy pol√≠ pre povolenia v Defaults
    permissionFields: {
        attendanceGroup: "Doch√°dzka skupinov√© notifik√°cie",
        workRecordGroup: "Z√°znam pr√°c skupinov√© notifik√°cie",
        bookOfRidesGroup: "Kniha j√°zd skupinov√© notifik√°cie"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, utils.getIcon("start") + " === DOCH√ÅDZKA GROUP NOTIFICATION v" + CONFIG.version + " ===");
        
        // 1. KONTROLA Z√ÅVISLOST√ç
        var depCheck = utils.checkDependencies(['config', 'core']);
        if (!depCheck.success) {
            utils.addError(currentEntry, "Ch√Ωbaj√∫ potrebn√© moduly: " + depCheck.missing.join(", "), "main");
            return false;
        }
        
        // 2. KONTROLA ƒåI S√ö POVOLEN√â SKUPINOV√â NOTIFIK√ÅCIE
        utils.addDebug(currentEntry, utils.getIcon("search") + " Kontrolujem povolenia");
        
        var groupNotificationsEnabled = checkGroupNotificationsEnabled();
        if (!groupNotificationsEnabled) {
            utils.addDebug(currentEntry, utils.getIcon("info") + " Skupinov√© notifik√°cie s√∫ vypnut√© - ukonƒçujem");
            return true; // Nie je to chyba, len s√∫ vypnut√©
        }
        
        // 3. Z√çSKANIE TELEGRAM SKUPINY
        utils.addDebug(currentEntry, utils.getIcon("search") + " Z√≠skavam Telegram skupinu");
        
        var telegramGroup = getTelegramGroup();
        if (!telegramGroup) {
            utils.addError(currentEntry, "Telegram skupina nen√°jden√° alebo neakt√≠vna", "main");
            return false;
        }
        
        // 4. PR√çPRAVA D√ÅT PRE NOTIFIK√ÅCIU
        utils.addDebug(currentEntry, utils.getIcon("document") + " Pripravujem d√°ta pre notifik√°ciu");
        
        var notificationData = prepareNotificationData(telegramGroup);
        if (!notificationData) {
            utils.addError(currentEntry, "Nepodarilo sa pripravi≈• d√°ta pre notifik√°ciu", "main");
            return false;
        }
        
        // 5. VYTVORENIE Z√ÅZNAMU V NOTIFICATIONS
        utils.addDebug(currentEntry, utils.getIcon("create") + " Vytv√°ram notifik√°ciu");
        
        var notification = createNotificationEntry(notificationData);
        if (!notification) {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "main");
            return false;
        }
        
        utils.addDebug(currentEntry, utils.getIcon("success") + " Notifik√°cia vytvoren√° (ID: " + notification.field("ID") + ")");
        utils.addDebug(currentEntry, utils.getIcon("success") + " === SCRIPT DOKONƒåEN√ù ===");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        return false;
    }
}

// ==============================================
// KONTROLA POVOLEN√ç
// ==============================================

function checkGroupNotificationsEnabled() {
    try {
        // Z√≠skaj nastavenia z ASISTANTO Defaults
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.libraries.defaults + " nen√°jden√°", "checkGroupNotificationsEnabled");
            return false;
        }
        
        var settings = defaultsLib.entries();
        if (!settings || settings.length === 0) {
            utils.addError(currentEntry, "≈Ωiadne nastavenia v Defaults", "checkGroupNotificationsEnabled");
            return false;
        }
        
        // Zoberieme posledn√Ω (najnov≈°√≠) z√°znam
        var defaultSettings = settings[settings.length - 1];
        
        // Skontroluj ƒçi s√∫ povolen√© skupinov√© notifik√°cie pre doch√°dzku
        var groupNotificationsField = CONFIG.permissionFields.attendanceGroup;
        var enabled = utils.safeGet(defaultSettings, groupNotificationsField, false);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ " + groupNotificationsField + ": " + (enabled ? "√ÅNO" : "NIE"));
        
        return enabled;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "checkGroupNotificationsEnabled", error);
        return false;
    }
}

// ==============================================
// Z√çSKANIE TELEGRAM SKUPINY
// ==============================================

function getTelegramGroup() {
    try {
        // Z√≠skaj nastavenia z ASISTANTO Defaults
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) {
            return null;
        }
        
        var settings = defaultsLib.entries();
        if (!settings || settings.length === 0) {
            return null;
        }
        
        var defaultSettings = settings[settings.length - 1];
        
        // Z√≠skaj odkaz na Telegram skupinu pre doch√°dzku
        var groupFieldName = CONFIG.telegramGroupFields.attendance;
        var telegramGroup = utils.safeGet(defaultSettings, groupFieldName);
        
        if (!telegramGroup) {
            utils.addError(currentEntry, "Telegram skupina nie je nastaven√° v poli '" + groupFieldName + "'", "getTelegramGroup");
            return null;
        }
        
        // Skontroluj ƒçi m√° skupina povolen√© notifik√°cie
        var notificationsEnabled = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.enableNotifications, false);
        if (!notificationsEnabled) {
            utils.addDebug(currentEntry, utils.getIcon("warning") + " Skupina '" + 
                          utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.groupName) + 
                          "' m√° vypnut√© notifik√°cie");
            return null;
        }
        
        // Skontroluj pracovn√Ω ƒças a v√≠kendy
        if (!checkTimeRestrictions(telegramGroup)) {
            utils.addDebug(currentEntry, utils.getIcon("warning") + " Mimo pracovn√©ho ƒçasu alebo v√≠kend");
            return null;
        }
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Skupina: " + utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.groupName));
        utils.addDebug(currentEntry, "  ‚Ä¢ Chat ID: " + utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.chatId));
        
        var threadId = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.threadId);
        if (threadId) {
            utils.addDebug(currentEntry, "  ‚Ä¢ Thread ID: " + threadId);
        }
        
        return telegramGroup;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "getTelegramGroup", error);
        return null;
    }
}

function checkTimeRestrictions(telegramGroup) {
    try {
        var now = moment();
        
        // Kontrola v√≠kendu
        if (utils.isWeekend(now)) {
            var weekendAllowed = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.weekendEnabled, false);
            if (!weekendAllowed) {
                return false;
            }
        }
        
        // Kontrola pracovn√©ho ƒçasu
        var workTimeFrom = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.workTimeFrom);
        var workTimeTo = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.workTimeTo);
        
        if (workTimeFrom && workTimeTo) {
            var currentTime = now.format("HH:mm");
            var fromTime = moment(workTimeFrom).format("HH:mm");
            var toTime = moment(workTimeTo).format("HH:mm");
            
            if (currentTime < fromTime || currentTime > toTime) {
                utils.addDebug(currentEntry, "  ‚Ä¢ Mimo pracovn√©ho ƒçasu (" + fromTime + " - " + toTime + ")");
                return false;
            }
        }
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "checkTimeRestrictions", error);
        return true; // V pr√≠pade chyby rad≈°ej povol√≠me
    }
}

// ==============================================
// PR√çPRAVA D√ÅT PRE NOTIFIK√ÅCIU
// ==============================================

function prepareNotificationData(telegramGroup) {
    try {
        // Z√≠skaj z√°kladn√© √∫daje zo z√°znamu
        var datum = utils.safeGet(currentEntry, CONFIG.fields.attendance.date);
        var prichod = utils.safeGet(currentEntry, CONFIG.fields.attendance.arrival);
        var odchod = utils.safeGet(currentEntry, CONFIG.fields.attendance.departure);
        var zamestnanci = utils.safeGet(currentEntry, CONFIG.fields.attendance.employees, []);
        var odpracovane = utils.safeGet(currentEntry, CONFIG.fields.attendance.workedHours, 0);
        var mzdoveNaklady = utils.safeGet(currentEntry, CONFIG.fields.attendance.wageCosts, 0);
        
        // Sform√°tuj spr√°vu podobn√∫ ako v info poli
        var message = formatNotificationMessage({
            datum: datum,
            prichod: prichod,
            odchod: odchod,
            zamestnanci: zamestnanci,
            odpracovane: odpracovane,
            mzdoveNaklady: mzdoveNaklady
        });
        
        // Priprav d√°ta pre notifik√°ciu
        var notificationData = {
            // Z√°kladn√© polia
            messageType: "Doch√°dzka",
            status: "ƒåak√°",
            priority: utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.messagePriority, "Norm√°lna"),
            formatting: "Markdown",
            messageSource: "Automatick√°",
            
            // Telegram polia
            chatId: utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.chatId),
            threadId: utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.threadId),
            silentMessage: utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.silentMessage, false),
            
            // Obsah
            message: message,
            
            // Prepojenia
            sourceEntry: currentEntry,
            sourceLibrary: CONFIG.libraries.attendance,
            telegramGroup: telegramGroup,
            
            // Metadata
            employeeCount: zamestnanci.length,
            totalHours: odpracovane,
            totalCosts: mzdoveNaklady,
            date: datum
        };
        
        return notificationData;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "prepareNotificationData", error);
        return null;
    }
}

function formatNotificationMessage(data) {
    var msg = "üìã *DOCH√ÅDZKA*\n";
    msg += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
    
    // D√°tum a de≈à
    msg += "üìÖ *D√°tum:* " + utils.formatDate(data.datum) + " (" + utils.getDayNameSK(moment(data.datum).day()) + ")\n";
    
    // ƒåas
    if (data.prichod && data.odchod) {
        msg += "‚è∞ *ƒåas:* " + utils.formatTime(data.prichod) + " - " + utils.formatTime(data.odchod) + "\n";
    }
    
    // Odpracovan√©
    msg += "‚è±Ô∏è *Odpracovan√©:* " + data.odpracovane.toFixed(2) + " hod√≠n\n";
    
    // Zamestnanci
    if (data.zamestnanci && data.zamestnanci.length > 0) {
        msg += "\nüë• *Zamestnanci* (" + data.zamestnanci.length + " " + utils.getPersonCountForm(data.zamestnanci.length) + "):\n";
        
        for (var i = 0; i < data.zamestnanci.length; i++) {
            var zam = data.zamestnanci[i];
            var meno = utils.formatEmployeeName(zam);
            
            // Z√≠skaj atrib√∫ty
            var odpracovaneZam = getEmployeeAttribute(i, CONFIG.attributes.employees.workedHours);
            var hodinovka = getEmployeeAttribute(i, CONFIG.attributes.employees.hourlyRate);
            var dennaMzda = getEmployeeAttribute(i, CONFIG.attributes.employees.dailyWage);
            
            msg += "‚Ä¢ " + escapeMarkdown(meno);
            
            if (odpracovaneZam) {
                msg += " - " + odpracovaneZam.toFixed(2) + "h";
            }
            
            if (dennaMzda) {
                msg += " (" + utils.formatMoney(dennaMzda) + ")";
            }
            
            msg += "\n";
        }
    }
    
    // Celkov√© n√°klady
    msg += "\nüí∞ *Mzdov√© n√°klady:* " + utils.formatMoney(data.mzdoveNaklady) + "\n";
    
    // Info o z√°zname
    msg += "\nüìù _Z√°znam #" + currentEntry.field("ID") + "_";
    
    return msg;
}

function getEmployeeAttribute(index, attrName) {
    try {
        var employees = currentEntry.field(CONFIG.fields.attendance.employees);
        if (employees && employees[index] && employees[index].attr) {
            return employees[index].attr(attrName);
        }
        return null;
    } catch (error) {
        return null;
    }
}

function escapeMarkdown(text) {
    if (!text) return "";
    
    return String(text)
        .replace(/\*/g, "\\*")
        .replace(/_/g, "\\_")
        .replace(/\[/g, "\\[")
        .replace(/\]/g, "\\]")
        .replace(/\(/g, "\\(")
        .replace(/\)/g, "\\)")
        .replace(/~/g, "\\~")
        .replace(/`/g, "\\`")
        .replace(/>/g, "\\>")
        .replace(/#/g, "\\#");
}

// ==============================================
// VYTVORENIE NOTIFIK√ÅCIE
// ==============================================

function createNotificationEntry(data) {
    try {
        var notifLib = libByName(CONFIG.libraries.notifications);
        if (!notifLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.libraries.notifications + " nen√°jden√°", "createNotificationEntry");
            return null;
        }
        
        // Vytvor nov√Ω z√°znam
        var notification = notifLib.create({});
        
        // Nastav z√°kladn√© polia
        notification.set(CONFIG.fields.notifications.status, data.status);
        notification.set(CONFIG.fields.notifications.priority, data.priority);
        notification.set(CONFIG.fields.notifications.messageType, data.messageType);
        notification.set(CONFIG.fields.notifications.messageSource, data.messageSource);
        notification.set(CONFIG.fields.notifications.formatting, data.formatting);
        
        // Nastav Telegram polia
        notification.set(CONFIG.fields.notifications.chatId, data.chatId);
        if (data.threadId) {
            notification.set(CONFIG.fields.notifications.threadId, data.threadId);
        }
        
        // Nastav obsah
        notification.set(CONFIG.fields.notifications.message, data.message);
        
        // Nastav prepojenia
        if (data.telegramGroup) {
            notification.set(CONFIG.fields.notifications.groupOrTopic, data.telegramGroup);
        }
        
        // Vytvor info z√°znam pre notifik√°ciu
        var infoMsg = "üìã NOTIFIK√ÅCIA DOCH√ÅDZKY\n";
        infoMsg += "Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        infoMsg += "Zdrojov√Ω z√°znam: Doch√°dzka #" + currentEntry.field("ID") + "\n";
        infoMsg += "D√°tum: " + utils.formatDate(data.date) + "\n";
        infoMsg += "Zamestnancov: " + data.employeeCount + "\n";
        infoMsg += "Hod√≠n: " + data.totalHours.toFixed(2) + "\n";
        infoMsg += "N√°klady: " + utils.formatMoney(data.totalCosts) + "\n";
        infoMsg += "Chat ID: " + data.chatId + "\n";
        if (data.threadId) {
            infoMsg += "Thread ID: " + data.threadId + "\n";
        }
        infoMsg += "Priorita: " + data.priority + "\n";
        infoMsg += "Tich√° spr√°va: " + (data.silentMessage ? "√ÅNO" : "NIE");
        
        notification.set(CONFIG.fields.common.info, infoMsg);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Notifik√°cia vytvoren√° √∫spe≈°ne");
        
        return notification;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createNotificationEntry", error);
        return null;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola z√°vislost√≠ pred spusten√≠m
var dependencyCheck = utils.checkDependencies(['config', 'core']);
if (!dependencyCheck.success) {
    message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly: " + dependencyCheck.missing.join(", "));
    cancel();
}

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zaloguj ale nepreru≈°uj ulo≈æenie (After Save)
if (!result) {
    utils.addError(currentEntry, "Script zlyhal ale z√°znam bol ulo≈æen√Ω", "main");
}