// ==============================================
// MEMENTO DATABASE - KNIHA J√ÅZD (ROUTE CALCULATION & PAYROLL)
// Verzia: 8.3 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Kniha j√°zd | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Automatick√Ω prepoƒçet vzdialenosti, ƒçasu jazdy a miezd pos√°dky s atrib√∫tmi zast√°vok
//    - V√Ωpoƒçet trasy pomocou OSRM API s fallback na vzdu≈°n√∫ vzdialenos≈•
//    - Automatick√© nastavenie default zdr≈æania na zast√°vkach
//    - V√Ωpoƒçet mzdov√Ωch n√°kladov pos√°dky
// ==============================================
// ‚úÖ KOMPLETN√ù STANDALONE SCRIPT bez z√°vislost√≠
// ==============================================

// ==============================================
// KONFIGUR√ÅCIA
// ==============================================

var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Kniha j√°zd Prepoƒçet",
    version: "8.3",
    
    // Debug nastavenia
    debug: true,
    debugFieldName: "Debug_Log",
    errorFieldName: "Error_Log",
    
    // N√°zvy kni≈æn√≠c
    sadzbyLibrary: "sadzby zamestnancov",
    miestalibrary: "Miesta", 
    zamestnancilibrary: "Zamestnanci",
    defaultsLibrary: "ASISTANTO Defaults",
    
    // N√°zvy pol√≠ - kni≈ænica "Kniha j√°zd"
    fields: {
        start: "≈†tart",
        zastavky: "Zast√°vky",
        ciel: "Cieƒæ", 
        km: "Km",
        casJazdy: "ƒåas jazdy",
        casNaZastavkach: "ƒåas na zast√°vkach",
        celkovyCas: "Celkov√Ω ƒças",
        posadka: "Pos√°dka",
        sofer: "≈†of√©r",
        datum: "D√°tum",
        mzdy: "Mzdov√© n√°klady",
        info: "info"
    },
    
    // N√°zvy atrib√∫tov
    attributes: {
        trvanie: "trvanie",
        zdrzanie: "zdr≈æanie",  
        km: "km",
        hodinovka: "hodinovka",
        dennaMzda: "denn√° mzda"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "Miesta"
    miestalFields: {
        gps: "GPS",
        nazov: "N√°zov"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "sadzby zamestnancov"
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    },
    
    // N√°zvy pol√≠ - kni≈ænica "Zamestnanci"
    zamestnancilFields: {
        meno: "Meno",
        nick: "Nick"
    },
    
    // OSRM API nastavenia
    osrm: {
        maxRetries: 3,
        baseUrl: "https://router.project-osrm.org/route/v1/driving/",
        requestTimeout: 5000,
        retryDelay: 1000
    }
};

// ==============================================
// GLOB√ÅLNE PREMENN√â
// ==============================================

var currentEntry = entry();

// ==============================================
// LOGGING FUNKCIE
// ==============================================

function addDebug(message) {
    if (!CONFIG.debug) return;
    
    try {
        var timestamp = moment().format("HH:mm:ss");
        var debugMessage = "[" + timestamp + "] " + message;
        var existingDebug = currentEntry.field(CONFIG.debugFieldName) || "";
        currentEntry.set(CONFIG.debugFieldName, existingDebug + debugMessage + "\n");
    } catch (e) {
        log("Debug error: " + e);
    }
}

function addError(message, source) {
    try {
        var timestamp = moment().format("DD.MM.YY HH:mm:ss");
        var errorMessage = "[" + timestamp + "] " + (source ? source + ": " : "") + message;
        var existingError = currentEntry.field(CONFIG.errorFieldName) || "";
        currentEntry.set(CONFIG.errorFieldName, existingError + errorMessage + "\n");
    } catch (e) {
        log("Error logging failed: " + e);
    }
}

function clearLogs() {
    currentEntry.set(CONFIG.debugFieldName, "");
    currentEntry.set(CONFIG.errorFieldName, "");
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function formatMoney(amount) {
    return amount.toFixed(2) + " ‚Ç¨";
}

function convertDurationToHours(duration) {
    if (!duration) return 0;
    
    // Ak je to Duration objekt
    if (typeof duration === 'object' && duration.valueOf) {
        var ms = duration.valueOf();
        return ms / (1000 * 60 * 60);
    }
    
    // Ak je to ƒç√≠slo
    return parseFloat(duration) || 0;
}

/**
 * Z√≠ska default zdr≈æanie z ASISTANTO Defaults
 */
function getDefaultZdrzanie() {
    try {
        var defaultsLib = libByName(CONFIG.defaultsLibrary);
        if (!defaultsLib) {
            addError("Kni≈ænica " + CONFIG.defaultsLibrary + " nen√°jden√°", "getDefaultZdrzanie");
            return 0.5;
        }
        
        var defaultsEntries = defaultsLib.entries();
        if (defaultsEntries.length > 0) {
            var defaultZdrz = defaultsEntries[0].field("Default zdr≈æanie");
            
            if (defaultZdrz !== null && defaultZdrz !== undefined) {
                return convertDurationToHours(defaultZdrz);
            }
        }
        
        return 0.5; // Default 30 min√∫t
        
    } catch (error) {
        addError(error.toString(), "getDefaultZdrzanie");
        return 0.5;
    }
}

/**
 * Extrahuje GPS s√∫radnice z poƒæa miesta
 */
function extractGPSFromPlace(place) {
    if (!place || place.length === 0) {
        return null;
    }
    
    var miesto = place[0];
    var nazov = "";
    
    try {
        nazov = miesto.field(CONFIG.miestalFields.nazov) || "Nezn√°me";
    } catch (e) {
        nazov = "Nezn√°me";
    }
    
    addDebug("  üìç Spracov√°vam miesto: " + nazov);
    
    // Z√≠skaj GPS pole - JSGeolocation objekt
    var gpsLocation = null;
    
    try {
        gpsLocation = miesto.field(CONFIG.miestalFields.gps);
    } catch (e) {
        addDebug("  ‚ö†Ô∏è Chyba pri z√≠skavan√≠ GPS poƒæa: " + e);
        return null;
    }
    
    if (!gpsLocation) {
        addDebug("  ‚ö†Ô∏è Miesto '" + nazov + "' nem√° GPS s√∫radnice");
        return null;
    }
    
    var lat = null;
    var lon = null;
    
    try {
        // JSGeolocation objekt m√° properties lat a lng
        lat = gpsLocation.lat;
        lon = gpsLocation.lng;
        
        // Debug inform√°cie
        if (gpsLocation.address) {
            addDebug("    Adresa: " + gpsLocation.address);
        }
        addDebug("    S√∫radnice: " + lat + ", " + lon);
        
    } catch (error) {
        addError("Chyba pri ƒç√≠tan√≠ GPS objektu: " + error.toString(), "extractGPSFromPlace");
        return null;
    }
    
    // Valid√°cia GPS s√∫radn√≠c
    if (lat !== null && lon !== null && !isNaN(lat) && !isNaN(lon)) {
        // Z√°kladn√° valid√°cia rozsahu
        if (lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180) {
            addDebug("  ‚úÖ GPS √∫spe≈°ne extrahovan√©: " + lat + ", " + lon);
            return { lat: lat, lon: lon };
        } else {
            addDebug("  ‚ùå GPS s√∫radnice mimo platn√©ho rozsahu: " + lat + ", " + lon);
        }
    } else {
        addDebug("  ‚ùå Neplatn√© GPS s√∫radnice");
    }
    
    return null;
}

/**
 * Vypoƒç√≠ta vzdu≈°n√∫ vzdialenos≈• medzi dvoma bodmi (Haversine formula)
 */
function calculateAirDistance(point1, point2) {
    var R = 6371; // Polomer Zeme v km
    var dLat = toRadians(point2.lat - point1.lat);
    var dLon = toRadians(point2.lon - point1.lon);
    var lat1 = toRadians(point1.lat);
    var lat2 = toRadians(point2.lat);

    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    
    return R * c;
}

function toRadians(degrees) {
    return degrees * (Math.PI / 180);
}

/**
 * Vol√° OSRM API pre v√Ωpoƒçet trasy
 */
function callOSRMRoute(points) {
    try {
        if (!points || points.length < 2) {
            return null;
        }
        
        // Vytvor URL s koordin√°tmi
        var coordinates = "";
        for (var i = 0; i < points.length; i++) {
            if (i > 0) coordinates += ";";
            coordinates += points[i].lon + "," + points[i].lat;
        }
        
        var url = CONFIG.osrm.baseUrl + coordinates + "?overview=false&steps=false";
        
        addDebug("  üåê OSRM API volanie pre " + points.length + " bodov");
        
        var httpObj = http();
        var response = httpObj.get(url);
        
        if (response.code === 200) {
            var data = JSON.parse(response.body);
            if (data.routes && data.routes.length > 0) {
                var route = data.routes[0];
                return {
                    distance: route.distance / 1000, // prevod na km
                    duration: route.duration / 3600, // prevod na hodiny
                    success: true
                };
            }
        }
        
        addDebug("  ‚ö†Ô∏è OSRM API nevr√°tilo trasu (k√≥d: " + response.code + ")");
        return null;
        
    } catch (error) {
        addError("OSRM API chyba: " + error.toString(), "callOSRMRoute");
        return null;
    }
}

/**
 * Vypoƒç√≠ta vzdialenos≈• a ƒças pre √∫sek trasy
 */
function calculateSegment(fromPoint, toPoint, segmentName) {
    var result = {
        km: 0,
        trvanie: 0,
        success: false,
        method: "none"
    };
    
    addDebug("  üìè Poƒç√≠tam " + segmentName);
    
    // 1. Sk√∫s OSRM API
    var osrmResult = callOSRMRoute([fromPoint, toPoint]);
    
    if (osrmResult && osrmResult.success) {
        result.km = osrmResult.distance;
        result.trvanie = osrmResult.duration;
        result.success = true;
        result.method = "OSRM";
        addDebug("    ‚úÖ OSRM: " + result.km.toFixed(2) + " km, " + result.trvanie.toFixed(2) + " h");
    } else {
        // 2. Fallback na vzdu≈°n√∫ vzdialenos≈•
        var airDistance = calculateAirDistance(fromPoint, toPoint);
        result.km = airDistance * 1.3; // koeficient pre cestn√∫ vzdialenos≈•
        result.trvanie = result.km / 50; // priemern√° r√Ωchlos≈• 50 km/h
        result.success = true;
        result.method = "Vzdu≈°n√°";
        addDebug("    üìê Vzdu≈°n√°: " + result.km.toFixed(2) + " km, " + result.trvanie.toFixed(2) + " h");
    }
    
    return result;
}

// ==============================================
// HLAVN√â FUNKCIE V√ùPOƒåTU
// ==============================================

/**
 * KROK 1: V√Ωpoƒçet trasy s atrib√∫tmi
 */
function calculateRoute() {
    addDebug("üìè === KROK 1: V√ùPOƒåET TRASY ===");
    
    var result = {
        success: false,
        totalKm: 0,
        casJazdy: 0,
        casNaZastavkach: 0,
        celkovyCas: 0
    };
    
    try {
        // Z√≠skaj polia trasy
        var start = currentEntry.field(CONFIG.fields.start);
        var zastavky = currentEntry.field(CONFIG.fields.zastavky);
        var ciel = currentEntry.field(CONFIG.fields.ciel);
        
        addDebug("  üéØ ≈†tart: " + (start && start.length > 0 ? "‚úì" : "‚úó"));
        addDebug("  üõë Zast√°vky: " + (zastavky ? zastavky.length : 0));
        addDebug("  üèÅ Cieƒæ: " + (ciel && ciel.length > 0 ? "‚úì" : "‚úó"));
        
        if (!start || start.length === 0 || !ciel || ciel.length === 0) {
            addError("Ch√Ωba ≈°tart alebo cieƒæ", "calculateRoute");
            return result;
        }
        
        // Extrahuj GPS s√∫radnice
        var startGPS = extractGPSFromPlace(start);
        var cielGPS = extractGPSFromPlace(ciel);
        
        if (!startGPS || !cielGPS) {
            addError("Ch√Ωbaj√∫ GPS s√∫radnice pre ≈°tart alebo cieƒæ", "calculateRoute");
            return result;
        }
        
        // Vypoƒç√≠taj jednotliv√© √∫seky
        var currentPoint = startGPS;
        var defaultZdrzanie = getDefaultZdrzanie();
        
        // √öseky cez zast√°vky
        if (zastavky && zastavky.length > 0) {
            for (var j = 0; j < zastavky.length; j++) {
                var gps = extractGPSFromPlace([zastavky[j]]);
                if (!gps) {
                    addDebug("  ‚ö†Ô∏è Zast√°vka " + (j+1) + " nem√° GPS");
                    continue;
                }
                
                var segment = calculateSegment(currentPoint, gps, "√ösek " + (j+1));
                
                if (segment.success) {
                    result.totalKm += segment.km;
                    result.casJazdy += segment.trvanie;
                    
                    // Nastav atrib√∫ty zast√°vky
                    try {
                        zastavky[j].setAttr(CONFIG.attributes.km, Math.round(segment.km * 10) / 10);
                        zastavky[j].setAttr(CONFIG.attributes.trvanie, segment.trvanie);
                        
                        // Nastav zdr≈æanie ak nie je nastaven√©
                        var existingZdrzanie = zastavky[j].attr(CONFIG.attributes.zdrzanie);
                        var zdrz = 0;
                        
                        if (!existingZdrzanie || existingZdrzanie === 0) {
                            zastavky[j].setAttr(CONFIG.attributes.zdrzanie, defaultZdrzanie);
                            zdrz = defaultZdrzanie;
                            addDebug("    ‚è±Ô∏è Nastaven√© default zdr≈æanie: " + defaultZdrzanie + " h");
                        } else {
                            zdrz = convertDurationToHours(existingZdrzanie);
                            addDebug("    ‚è±Ô∏è Existuj√∫ce zdr≈æanie: " + zdrz + " h");
                        }
                        
                        result.casNaZastavkach += zdrz;
                        
                    } catch (attrError) {
                        addError("Chyba pri nastavovan√≠ atrib√∫tov zast√°vky: " + attrError.toString(), "calculateRoute");
                    }
                    
                    currentPoint = gps;
                }
            }
        }
        
        // Posledn√Ω √∫sek do cieƒæa
        var lastSegment = calculateSegment(currentPoint, cielGPS, "√ösek do cieƒæa");
        
        if (lastSegment.success) {
            result.totalKm += lastSegment.km;
            result.casJazdy += lastSegment.trvanie;
            
            // Nastav atrib√∫ty cieƒæa
            try {
                ciel[0].setAttr(CONFIG.attributes.km, Math.round(lastSegment.km * 10) / 10);
                ciel[0].setAttr(CONFIG.attributes.trvanie, lastSegment.trvanie);
            } catch (attrError) {
                addError("Chyba pri nastavovan√≠ atrib√∫tov cieƒæa: " + attrError.toString(), "calculateRoute");
            }
        }
        
        // Vypoƒç√≠taj celkov√Ω ƒças
        result.celkovyCas = result.casJazdy + result.casNaZastavkach;
        
        // Zaokr√∫hli hodnoty
        result.totalKm = Math.round(result.totalKm * 10) / 10;
        result.casJazdy = Math.round(result.casJazdy * 100) / 100;
        result.casNaZastavkach = Math.round(result.casNaZastavkach * 100) / 100;
        result.celkovyCas = Math.round(result.celkovyCas * 100) / 100;
        
        // Ulo≈æ do pol√≠
        currentEntry.set(CONFIG.fields.km, result.totalKm);
        currentEntry.set(CONFIG.fields.casJazdy, result.casJazdy);
        currentEntry.set(CONFIG.fields.casNaZastavkach, result.casNaZastavkach);
        currentEntry.set(CONFIG.fields.celkovyCas, result.celkovyCas);
        
        addDebug("\n  üìä V√ùSLEDKY:");
        addDebug("  ‚Ä¢ Vzdialenos≈•: " + result.totalKm + " km");
        addDebug("  ‚Ä¢ ƒåas jazdy: " + result.casJazdy + " h");
        addDebug("  ‚Ä¢ ƒåas na zast√°vkach: " + result.casNaZastavkach + " h");
        addDebug("  ‚Ä¢ Celkov√Ω ƒças: " + result.celkovyCas + " h");
        
        result.success = true;
        
    } catch (error) {
        addError(error.toString(), "calculateRoute");
    }
    
    return result;
}

/**
 * KROK 2: Spracovanie ≈°of√©ra
 */
function processDriver() {
    addDebug("\nüöó === KROK 2: SPRACOVANIE ≈†OF√âRA ===");
    
    var result = {
        success: false,
        soferInPosadke: false
    };
    
    try {
        var sofer = currentEntry.field(CONFIG.fields.sofer);
        var posadka = currentEntry.field(CONFIG.fields.posadka) || [];
        
        if (!sofer || sofer.length === 0) {
            addDebug("  ‚ÑπÔ∏è ≈Ωiadny ≈°of√©r nebol zadan√Ω");
            result.success = true;
            return result;
        }
        
        var soferObj = sofer[0];
        var soferNick = "";
        
        try {
            soferNick = soferObj.field(CONFIG.zamestnancilFields.nick) || "";
        } catch (e) {
            soferNick = "Nezn√°my";
        }
        
        addDebug("  üë§ ≈†of√©r: " + soferNick);
        
        // Skontroluj ƒçi ≈°of√©r nie je u≈æ v pos√°dke
        for (var i = 0; i < posadka.length; i++) {
            var clenNick = "";
            try {
                clenNick = posadka[i].field(CONFIG.zamestnancilFields.nick) || "";
            } catch (e) {
                clenNick = "";
            }
            
            if (clenNick === soferNick) {
                result.soferInPosadke = true;
                addDebug("  ‚úÖ ≈†of√©r u≈æ je v pos√°dke");
                break;
            }
        }
        
        // Ak ≈°of√©r nie je v pos√°dke, pridaj ho
        if (!result.soferInPosadke) {
            posadka.push(soferObj);
            currentEntry.set(CONFIG.fields.posadka, posadka);
            addDebug("  ‚ûï ≈†of√©r pridan√Ω do pos√°dky");
        }
        
        result.success = true;
        
    } catch (error) {
        addError(error.toString(), "processDriver");
    }
    
    return result;
}

/**
 * KROK 3: V√Ωpoƒçet mzdov√Ωch n√°kladov
 */
function calculateWageCosts() {
    addDebug("\nüí∞ === KROK 3: V√ùPOƒåET MZDOV√ùCH N√ÅKLADOV ===");
    
    var result = {
        success: false,
        celkoveMzdy: 0,
        detaily: []
    };
    
    try {
        var posadka = currentEntry.field(CONFIG.fields.posadka) || [];
        var datum = currentEntry.field(CONFIG.fields.datum) || new Date();
        var celkovyCas = currentEntry.field(CONFIG.fields.celkovyCas) || 0;
        
        if (posadka.length === 0) {
            addDebug("  ‚ÑπÔ∏è ≈Ωiadna pos√°dka");
            result.success = true;
            return result;
        }
        
        if (celkovyCas === 0) {
            addDebug("  ‚ö†Ô∏è Celkov√Ω ƒças je 0");
            result.success = true;
            return result;
        }
        
        addDebug("  üë• Pos√°dka: " + posadka.length + " ƒçlenov");
        addDebug("  ‚è±Ô∏è Celkov√Ω ƒças: " + celkovyCas + " h");
        
        // Spracuj ka≈æd√©ho ƒçlena pos√°dky
        for (var i = 0; i < posadka.length; i++) {
            var zamestnanec = posadka[i];
            var meno = "";
            
            try {
                meno = zamestnanec.field(CONFIG.zamestnancilFields.meno) || 
                       zamestnanec.field(CONFIG.zamestnancilFields.nick) || 
                       "Zamestnanec " + (i+1);
            } catch (e) {
                meno = "Zamestnanec " + (i+1);
            }
            
            addDebug("\n  [" + (i+1) + "/" + posadka.length + "] " + meno);
            
            // Z√≠skaj hodinovku pre zamestnanca
            var hodinovka = 0;
            
            try {
                // Najprv sk√∫s n√°js≈• sadzby cez linksFrom
                var sadzbyZamestnanca = zamestnanec.linksFrom(CONFIG.sadzbyLibrary, CONFIG.sadzbyFields.zamestnanec);
                
                if (sadzbyZamestnanca && sadzbyZamestnanca.length > 0) {
                    // N√°jdi najnov≈°iu platn√∫ sadzbu
                    var najnovsiaSadzba = null;
                    var najnovsiDatum = null;
                    
                    for (var j = 0; j < sadzbyZamestnanca.length; j++) {
                        var sadzba = sadzbyZamestnanca[j];
                        var platnostOd = sadzba.field(CONFIG.sadzbyFields.platnostOd);
                        
                        if (platnostOd && platnostOd <= datum) {
                            if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                                najnovsiDatum = platnostOd;
                                najnovsiaSadzba = sadzba;
                            }
                        }
                    }
                    
                    if (najnovsiaSadzba) {
                        hodinovka = najnovsiaSadzba.field(CONFIG.sadzbyFields.sadzba) || 0;
                        var formattedDate = najnovsiDatum ? moment(najnovsiDatum).format("DD.MM.YYYY") : "?";
                        addDebug("    üíµ Hodinovka: " + hodinovka + " ‚Ç¨/h (platn√° od " + formattedDate + ")");
                    }
                } else {
                    addDebug("    ‚ö†Ô∏è Nena≈°iel som sadzby pre zamestnanca");
                }
                
            } catch (error) {
                addError("Chyba pri z√≠skavan√≠ sadzby: " + error.toString(), "calculateWageCosts");
            }
            
            if (!hodinovka || hodinovka <= 0) {
                addError("Zamestnanec " + meno + " nem√° platn√∫ sadzbu", "calculateWageCosts");
                continue;
            }
            
            var mzda = celkovyCas * hodinovka;
            
            // Nastav atrib√∫ty na zamestnancovi
            try {
                posadka[i].setAttr(CONFIG.attributes.hodinovka, hodinovka);
                posadka[i].setAttr(CONFIG.attributes.dennaMzda, Math.round(mzda * 100) / 100);
            } catch (attrError) {
                addDebug("    ‚ö†Ô∏è Nepodarilo sa nastavi≈• atrib√∫ty: " + attrError);
            }
            
            result.celkoveMzdy += mzda;
            result.detaily.push({
                meno: meno,
                hodinovka: hodinovka,
                mzda: mzda
            });
            
            addDebug("    üí∞ Mzda: " + formatMoney(mzda));
        }
        
        // Zaokr√∫hli a ulo≈æ celkov√© mzdy
        result.celkoveMzdy = Math.round(result.celkoveMzdy * 100) / 100;
        currentEntry.set(CONFIG.fields.mzdy, result.celkoveMzdy);
        
        addDebug("\n  üí∞ CELKOV√â MZDY: " + formatMoney(result.celkoveMzdy));
        
        result.success = true;
        
    } catch (error) {
        addError(error.toString(), "calculateWageCosts");
    }
    
    return result;
}

/**
 * Vytvor√≠ info z√°znam s detailmi o jazde
 */
function createInfoRecord(routeResult, wageResult) {
    try {
        var info = "";
        
        // ƒåasov√° znaƒçka
        info += "üöó KNIHA J√ÅZD - " + moment().format("DD.MM.YYYY HH:mm") + "\n";
        info += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        
        // Trasa
        if (routeResult.success) {
            info += "üìè TRASA:\n";
            info += "‚Ä¢ Vzdialenos≈•: " + routeResult.totalKm + " km\n";
            info += "‚Ä¢ ƒåas jazdy: " + routeResult.casJazdy + " h\n";
            info += "‚Ä¢ ƒåas na zast√°vkach: " + routeResult.casNaZastavkach + " h\n";
            info += "‚Ä¢ Celkov√Ω ƒças: " + routeResult.celkovyCas + " h\n\n";
        }
        
        // Pos√°dka a mzdy
        if (wageResult.success && wageResult.detaily.length > 0) {
            info += "üë• POS√ÅDKA A MZDY:\n";
            for (var i = 0; i < wageResult.detaily.length; i++) {
                var detail = wageResult.detaily[i];
                info += "‚Ä¢ " + detail.meno + ": " + detail.hodinovka + " ‚Ç¨/h = " + formatMoney(detail.mzda) + "\n";
            }
            info += "\nüí∞ CELKOV√â MZDOV√â N√ÅKLADY: " + formatMoney(wageResult.celkoveMzdy) + "\n";
        }
        
        info += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        info += "Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        info += "Vygenerovan√©: " + moment().format("DD.MM.YYYY HH:mm:ss");
        
        currentEntry.set(CONFIG.fields.info, info);
        addDebug("‚úÖ Info z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        addError(error.toString(), "createInfoRecord");
        return false;
    }
}

// ==============================================
// FIN√ÅLNY S√öHRN
// ==============================================

function logFinalSummary(steps) {
    try {
        addDebug("\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            addDebug(status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            addDebug("\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            addDebug("\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        addDebug("‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        addDebug("üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        addError(error.toString(), "logFinalSummary");
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Vyƒçisti logy
        clearLogs();
        
        addDebug("üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        addDebug("ƒåas spustenia: " + moment().format("DD.MM.YYYY HH:mm:ss"));
        
        // Test HTTP funkcionality
        try {
            var testHttp = http();
            if (testHttp) {
                addDebug("‚úÖ HTTP funkcia dostupn√° v Memento");
            } else {
                addDebug("‚ùå HTTP funkcia nedostupn√°");
            }
        } catch (httpError) {
            addDebug("‚ùå HTTP funkcia chyba: " + httpError);
        }
        
        // Kroky prepoƒçtu
        var steps = {
            step1: { success: false, name: "V√Ωpoƒçet trasy" },
            step2: { success: false, name: "Spracovanie ≈°of√©ra" },
            step3: { success: false, name: "V√Ωpoƒçet mzdov√Ωch n√°kladov" },
            step4: { success: false, name: "Vytvorenie info z√°znamu" }
        };
        
        // KROK 1: V√Ωpoƒçet trasy
        var routeResult = calculateRoute();
        steps.step1.success = routeResult.success;
        
        // KROK 2: Spracovanie ≈°of√©ra
        var driverResult = processDriver();
        steps.step2.success = driverResult.success;
        
        // KROK 3: V√Ωpoƒçet mzdov√Ωch n√°kladov
        var wageResult = calculateWageCosts();
        steps.step3.success = wageResult.success;
        
        // KROK 4: Vytvorenie info z√°znamu
        steps.step4.success = createInfoRecord(routeResult, wageResult);
        
        // Fin√°lny s√∫hrn
        logFinalSummary(steps);
        
        // Ak v≈°etko prebehlo v poriadku
        if (steps.step1.success) {
            var msg = "‚úÖ Prepoƒçet dokonƒçen√Ω\n\n";
            msg += "üìè Vzdialenos≈•: " + routeResult.totalKm + " km\n";
            msg += "‚è±Ô∏è Celkov√Ω ƒças: " + routeResult.celkovyCas + " h\n";
            if (wageResult.success && wageResult.celkoveMzdy > 0) {
                msg += "üí∞ Mzdov√© n√°klady: " + formatMoney(wageResult.celkoveMzdy);
            }
            message(msg);
        } else {
            message("‚ö†Ô∏è Prepoƒçet dokonƒçen√Ω s chybami\n\nPozrite Debug Log pre detaily.");
        }
        
        return true;
        
    } catch (error) {
        addError("Kritick√° chyba: " + error.toString(), "main");
        message("‚ùå Kritick√° chyba!\n\nPozrite Error Log pre detaily.");
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();