// ==============================================
// ACTION SCRIPT - DOCH√ÅDZKA NOTIFIK√ÅCIE
// Verzia: 1.5 | Typ: Action Script  
// Kni≈ænica: Doch√°dzka
// ==============================================
// ‚úÖ OPRAVEN√â v1.5:
//    - Fix pre n√°zvy pol√≠ s diakritikou a medzerami
//    - Bezpeƒçn√Ω pr√≠stup k v≈°etk√Ωm poliam
//    - Alternat√≠vne n√°zvy pol√≠ pre kompatibilitu
// ==============================================

var CONFIG = {
    firmaNazov: "Va≈°a firma s.r.o.",
    debug: true,
    version: "1.5",
    scriptType: "Action Script",
    
    apiLibrary: "ASISTANTO API",
    maxSMSLength: 160,
    telegramParseMode: "Markdown"
};

var currentEntry = entry();

// Glob√°lne premenn√©
var globalApiKeys = { success: false, telegramToken: null, botName: null, provider: null };
var globalResult = { success: false, uspesnePoslane: 0, celkovePokusy: 0 };
var globalSprava = "";

// ==============================================
// UTILITY FUNKCIE
// ==============================================

function logDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm:ss");
        var currentLog = currentEntry.field("Debug_Log") || "";
        var newLog = currentLog + "[" + timestamp + "] " + message + "\n";
        currentEntry.set("Debug_Log", newLog);
    }
}

function logError(error, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var errorMsg = "[" + timestamp + "] ‚ùå " + error.toString();
    if (location) errorMsg += " (Loc: " + location + ")";
    
    var currentLog = currentEntry.field("Error_Log") || "";
    currentEntry.set("Error_Log", currentLog + errorMsg + "\n");
}

function clearLogs() {
    try {
        currentEntry.set("Debug_Log", "");
        currentEntry.set("Error_Log", "");
        currentEntry.set("Notifik√°cie Log", "");
    } catch (e) {
        // Silent fail
    }
}

// ‚úÖ NOV√Å FUNKCIA - bezpeƒçn√Ω pr√≠stup k poliam
function safeFieldGet(entryObj, fieldName, defaultValue) {
    try {
        // Sk√∫s r√¥zne sp√¥soby pr√≠stupu
        var value = null;
        
        // Met√≥da 1: Priamy pr√≠stup
        try {
            value = entryObj.field(fieldName);
        } catch (e1) {
            // Met√≥da 2: Sk√∫s bez diakritiky
            try {
                var simpleName = fieldName
                    .replace(/√°/g, 'a').replace(/√©/g, 'e').replace(/√≠/g, 'i')
                    .replace(/√≥/g, 'o').replace(/√∫/g, 'u').replace(/√Ω/g, 'y')
                    .replace(/≈à/g, 'n').replace(/≈•/g, 't').replace(/ƒè/g, 'd')
                    .replace(/ƒæ/g, 'l').replace(/≈°/g, 's').replace(/ƒç/g, 'c')
                    .replace(/≈æ/g, 'z').replace(/√¥/g, 'o').replace(/√§/g, 'a')
                    .replace(/√Å/g, 'A').replace(/√â/g, 'E').replace(/√ç/g, 'I')
                    .replace(/√ì/g, 'O').replace(/√ö/g, 'U').replace(/√ù/g, 'Y')
                    .replace(/≈á/g, 'N').replace(/≈§/g, 'T').replace(/ƒé/g, 'D')
                    .replace(/ƒΩ/g, 'L').replace(/≈†/g, 'S').replace(/ƒå/g, 'C')
                    .replace(/≈Ω/g, 'Z').replace(/√î/g, 'O').replace(/√Ñ/g, 'A');
                value = entryObj.field(simpleName);
            } catch (e2) {
                // Met√≥da 3: Sk√∫s anglick√Ω n√°zov
                var englishNames = {
                    "Notifik√°cie S√∫hlas": "Notifications Consent",
                    "Telegram Notifik√°cie": "Telegram Notifications", 
                    "SMS Notifik√°cie": "SMS Notifications",
                    "Email Notifik√°cie": "Email Notifications",
                    "Telegram Chat ID": "Telegram Chat ID",
                    "Telef√≥n": "Phone",
                    "E-mail": "Email"
                };
                
                if (englishNames[fieldName]) {
                    try {
                        value = entryObj.field(englishNames[fieldName]);
                    } catch (e3) {
                        value = defaultValue;
                    }
                } else {
                    value = defaultValue;
                }
            }
        }
        
        if (value === null || value === undefined) {
            value = defaultValue;
        }
        
        return value;
        
    } catch (error) {
        logDebug("‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ poƒæa '" + fieldName + "': " + error);
        return defaultValue;
    }
}

function formatTime(timeValue) {
    if (!timeValue) {
        globalSprava = "N/A";
    } else {
        try {
            globalSprava = moment(timeValue).format("HH:mm");
        } catch (e) {
            globalSprava = "N/A";
        }
    }
}

function formatDate(dateValue) {
    if (!dateValue) {
        globalSprava = "N/A";
    } else {
        try {
            globalSprava = moment(dateValue).format("DD.MM.YYYY");
        } catch (e) {
            globalSprava = "N/A";
        }
    }
}

// ==============================================
// API FUNKCIE - FILTROVANIE TELEGRAM PROVIDER
// ==============================================

function getApiKeys() {
    globalApiKeys = { success: false, telegramToken: null, botName: null, provider: null };
    
    try {
        logDebug("üîë Naƒç√≠tavam API keys z " + CONFIG.apiLibrary + "...");
        
        var apiLib = libByName(CONFIG.apiLibrary);
        if (!apiLib) {
            logError("API kni≈ænica nen√°jden√°: " + CONFIG.apiLibrary, "getApiKeys");
        } else {
            var apiEntries = apiLib.entries();
            if (!apiEntries || apiEntries.length === 0) {
                logError("≈Ωiadne API z√°znamy", "getApiKeys");
            } else {
                logDebug("üìä Celkovo API z√°znamov: " + apiEntries.length);
                
                var telegramEntry = null;
                var foundProviders = [];
                
                for (var i = 0; i < apiEntries.length; i++) {
                    var entry = apiEntries[i];
                    
                    // ‚úÖ OPRAVEN√â - bezpeƒçn√Ω pr√≠stup k poliam
                    var provider = safeFieldGet(entry, "provider", "");
                    var nazov = safeFieldGet(entry, "n√°zov", "") || safeFieldGet(entry, "nazov", "");
                    
                    foundProviders.push(provider + " (" + nazov + ")");
                    
                    if (provider && provider.toLowerCase() === "telegram") {
                        telegramEntry = entry;
                        logDebug("‚úÖ N√°jden√Ω Telegram provider: " + nazov);
                        break;
                    }
                }
                
                logDebug("üìã Dostupn√≠ provideri: " + foundProviders.join(", "));
                
                if (telegramEntry) {
                    var telegramToken = safeFieldGet(telegramEntry, "api", "");
                    var botName = safeFieldGet(telegramEntry, "n√°zov", "") || safeFieldGet(telegramEntry, "nazov", "");
                    var provider = safeFieldGet(telegramEntry, "provider", "");
                    
                    logDebug("üìä Telegram API z√°znam detaily:");
                    logDebug("   ‚Ä¢ N√°zov bota: " + (botName || "N/A"));
                    logDebug("   ‚Ä¢ Provider: " + (provider || "N/A"));
                    logDebug("   ‚Ä¢ API token: " + (telegramToken ? "‚úÖ Naƒç√≠tan√Ω" : "‚ùå Ch√Ωba"));
                    
                    if (telegramToken) {
                        globalApiKeys.success = true;
                        globalApiKeys.telegramToken = telegramToken;
                        globalApiKeys.botName = botName;
                        globalApiKeys.provider = provider;
                        
                        logDebug("‚úÖ Telegram API √∫spe≈°ne naƒç√≠tan√©");
                        logDebug("   Bot: " + botName + " (" + provider + ")");
                    } else {
                        logError("API token nen√°jden√Ω v poli 'api' pre Telegram", "getApiKeys");
                    }
                } else {
                    logError("Nen√°jden√Ω provider 'Telegram' v API z√°znamoch", "getApiKeys");
                    logError("Dostupn√≠ provideri: " + foundProviders.join(", "), "getApiKeys");
                }
            }
        }
    } catch (error) {
        logError(error, "getApiKeys");
    }
}

// ==============================================
// HANDLING PRE ZAMESTNANCI POLE  
// ==============================================

function getZamestnanciArray() {
    var zamestnanci = [];
    
    try {
        // ‚úÖ OPRAVEN√â - bezpeƒçn√Ω pr√≠stup
        var zamestnanciField = safeFieldGet(currentEntry, "Zamestnanci", null);
        
        logDebug("üë• Zamestnanci field anal√Ωza:");
        logDebug("   ‚Ä¢ Typ: " + typeof zamestnanciField);
        logDebug("   ‚Ä¢ Je null: " + (zamestnanciField === null));
        logDebug("   ‚Ä¢ Je undefined: " + (zamestnanciField === undefined));
        logDebug("   ‚Ä¢ Je array: " + Array.isArray(zamestnanciField));
        
        if (!zamestnanciField) {
            logDebug("   ‚ùå Pole je pr√°zdne/null");
        } else if (Array.isArray(zamestnanciField)) {
            logDebug("   ‚úÖ Pole je array s dƒ∫≈ækou: " + zamestnanciField.length);
            zamestnanci = zamestnanciField;
        } else if (typeof zamestnanciField === "object") {
            logDebug("   üîÑ Pole je objekt - konvertujem na array");
            
            if (zamestnanciField.length !== undefined) {
                logDebug("   ‚Ä¢ M√° length property: " + zamestnanciField.length);
                for (var i = 0; i < zamestnanciField.length; i++) {
                    if (zamestnanciField[i]) {
                        zamestnanci.push(zamestnanciField[i]);
                    }
                }
                logDebug("   ‚úÖ Konvertovan√Ωch: " + zamestnanci.length + " zamestnancov");
            } else {
                logDebug("   ‚Ä¢ Single objekt - jeden zamestnanec");
                zamestnanci = [zamestnanciField];
                logDebug("   ‚úÖ Vytvoren√Ω array s 1 zamestnancom");
            }
        } else {
            logDebug("   ‚ùå Neoƒçak√°van√Ω typ: " + typeof zamestnanciField);
        }
        
    } catch (error) {
        logError("Chyba pri spracovan√≠ Zamestnanci poƒæa: " + error, "getZamestnanciArray");
    }
    
    return zamestnanci;
}

// ==============================================
// TELEGRAM/SMS/EMAIL FUNKCIE  
// ==============================================

function posliTelegramSpravu(chatId, sprava, botToken) {
    var success = false;
    
    try {
        logDebug("üì± Posielam Telegram spr√°vu...");
        logDebug("   ‚Ä¢ Bot: " + (globalApiKeys.botName || "Unknown"));
        logDebug("   ‚Ä¢ Provider: " + (globalApiKeys.provider || "Unknown"));
        logDebug("   ‚Ä¢ Chat ID: " + chatId);
        logDebug("   ‚Ä¢ Dƒ∫≈æka spr√°vy: " + sprava.length + " znakov");
        
        var telegramUrl = "https://api.telegram.org/bot" + botToken + "/sendMessage";
        var payload = {
            chat_id: chatId,
            text: sprava,
            parse_mode: CONFIG.telegramParseMode
        };
        
        logDebug("üåê URL: " + telegramUrl);
        logDebug("üì¶ Payload pripraven√Ω");
        
        // Simul√°cia - nahraƒè skutoƒçn√Ωm HTTP requestom
        success = Math.random() > 0.01; // 99% success rate
        
        if (success) {
            logDebug("‚úÖ Telegram spr√°va √∫spe≈°ne odoslan√° (simul√°cia)");
        } else {
            logDebug("‚ùå Telegram spr√°va zlyhala (simul√°cia)");
        }
        
    } catch (error) {
        logError(error, "posliTelegramSpravu");
        success = false;
    }
    
    globalResult.success = success;
}

function posliSMS(telefon, sprava) {
    var success = false;
    
    try {
        logDebug("üì≤ Posielam SMS na: " + telefon);
        
        if (sprava.length > CONFIG.maxSMSLength) {
            sprava = sprava.substring(0, CONFIG.maxSMSLength - 3) + "...";
            logDebug("‚úÇÔ∏è SMS skr√°ten√° na " + CONFIG.maxSMSLength + " znakov");
        }
        
        logDebug("üìù SMS pripraven√°: " + sprava);
        success = Math.random() > 0.05; // 95% success rate
        
        if (success) {
            logDebug("‚úÖ SMS √∫spe≈°ne odoslan√° (simul√°cia)");
        } else {
            logDebug("‚ùå SMS zlyhala (simul√°cia)");
        }
        
    } catch (error) {
        logError(error, "posliSMS");
        success = false;
    }
    
    globalResult.success = success;
}

function posliEmail(email, predmet, sprava) {
    var success = false;
    
    try {
        logDebug("üìß Posielam Email na: " + email);
        logDebug("üìã Predmet: " + predmet);
        
        success = Math.random() > 0.02; // 98% success rate
        
        if (success) {
            logDebug("‚úÖ Email √∫spe≈°ne odoslan√Ω (simul√°cia)");
        } else {
            logDebug("‚ùå Email zlyhal (simul√°cia)");
        }
        
    } catch (error) {
        logError(error, "posliEmail");
        success = false;
    }
    
    globalResult.success = success;
}

// ==============================================
// TEMPLATE FUNKCIE
// ==============================================

function getZamestnanecAtribut(zamestnanecEntry, parentEntry, index, atributName) {
    var hodnota = null;
    try {
        hodnota = parentEntry.getAttr("Zamestnanci", index, atributName);
        if (hodnota === null || hodnota === undefined) {
            hodnota = 0;
        }
    } catch (error) {
        logDebug("‚ö†Ô∏è Chyba pri z√≠skavan√≠ atrib√∫tu " + atributName + ": " + error);
        hodnota = 0;
    }
    globalSprava = hodnota;
}

function vytvorTelegramSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex) {
    // ‚úÖ OPRAVEN√â - bezpeƒçn√Ω pr√≠stup k poliam zamestnanca
    var meno = safeFieldGet(zamestnanec, "Meno", "");
    var priezvisko = safeFieldGet(zamestnanec, "Priezvisko", "");
    var nick = safeFieldGet(zamestnanec, "Nick", "");
    
    var celeMeno = nick || (meno + " " + priezvisko).trim() || "Zamestnanec";
    
    // Z√°kladn√© √∫daje z doch√°dzky
    var datum = safeFieldGet(dochadzkaZaznam, "D√°tum", null);
    var prichod = safeFieldGet(dochadzkaZaznam, "Pr√≠chod", null);
    var odchod = safeFieldGet(dochadzkaZaznam, "Odchod", null);
    var prestavka = safeFieldGet(dochadzkaZaznam, "Prest√°vka", 0);
    var poznamka = safeFieldGet(dochadzkaZaznam, "Pozn√°mka", "");
    
    // Atrib√∫ty zamestnanca
    getZamestnanecAtribut(zamestnanec, dochadzkaZaznam, zamestnanecIndex, "odpracovan√©");
    var odpracovane = globalSprava || 0;
    
    getZamestnanecAtribut(zamestnanec, dochadzkaZaznam, zamestnanecIndex, "hodinovka");
    var hodinovka = globalSprava || 0;
    
    getZamestnanecAtribut(zamestnanec, dochadzkaZaznam, zamestnanecIndex, "mzdov√© n√°klady");
    var mzdoveNaklady = globalSprava || 0;
    
    // Projekt/Z√°kazka
    var projekt = "";
    var projektField = safeFieldGet(dochadzkaZaznam, "Projekt/Z√°kazka", null);
    if (projektField && Array.isArray(projektField) && projektField.length > 0) {
        projekt = safeFieldGet(projektField[0], "N√°zov z√°znamu", "") || 
                 safeFieldGet(projektField[0], "ƒå√≠slo", "") || "Projekt";
    }
    
    // Vytvor rich Telegram spr√°vu
    var sprava = "üè¢ **Evidencia doch√°dzky**\n\n";
    sprava += "Dobr√Ω de≈à **" + celeMeno + "**!\n\n";
    
    sprava += "üìã **Doch√°dzka ";
    formatDate(datum);
    sprava += globalSprava + ":**\n";
    
    sprava += "üïê Pr√≠chod: **";
    formatTime(prichod);
    sprava += globalSprava + "**\n";
    
    if (odchod) {
        sprava += "üïê Odchod: **";
        formatTime(odchod);
        sprava += globalSprava + "**\n";
        sprava += "‚è±Ô∏è Odpracovan√©: **" + odpracovane + "h**\n";
        
        var nadcasy = Math.max(0, odpracovane - 8);
        if (nadcasy > 0) {
            sprava += "‚ö° Nadƒçasy: **" + nadcasy + "h**\n";
        }
    }
    
    if (prestavka > 0) {
        sprava += "‚òï Prest√°vka: " + prestavka + " min\n";
    }
    
    if (projekt) {
        sprava += "üì¶ Projekt: " + projekt + "\n";
    }
    
    sprava += "\nüí∞ **Mzdov√© √∫daje:**\n";
    sprava += "‚Ä¢ Hodinovka: " + hodinovka + " ‚Ç¨/h\n";
    sprava += "‚Ä¢ Dne≈°n√© n√°klady: **" + mzdoveNaklady + " ‚Ç¨**\n";
    
    if (poznamka) {
        sprava += "\nüìù **Pozn√°mka:** _" + poznamka + "_\n";
    }
    
    sprava += "\n---\n";
    sprava += CONFIG.firmaNazov + " | " + moment().format("DD.MM.YYYY HH:mm");
    
    globalSprava = sprava;
}

function vytvorSMSSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex) {
    var nick = safeFieldGet(zamestnanec, "Nick", "") || 
               safeFieldGet(zamestnanec, "Meno", "") || "Zamestnanec";
    var prichod = safeFieldGet(dochadzkaZaznam, "Pr√≠chod", null);
    var odchod = safeFieldGet(dochadzkaZaznam, "Odchod", null);
    
    getZamestnanecAtribut(zamestnanec, dochadzkaZaznam, zamestnanecIndex, "mzdov√© n√°klady");
    var mzdoveNaklady = globalSprava || 0;
    
    var sprava = nick + ", ";
    
    if (odchod) {
        getZamestnanecAtribut(zamestnanec, dochadzkaZaznam, zamestnanecIndex, "odpracovan√©");
        var odpracovane = globalSprava || 0;
        
        formatTime(prichod);
        var prichodStr = globalSprava;
        formatTime(odchod);
        var odchodStr = globalSprava;
        
        sprava += "doch√°dzka: " + prichodStr + "-" + odchodStr;
        sprava += " (" + odpracovane + "h)";
        if (mzdoveNaklady > 0) {
            sprava += ", n√°klady " + mzdoveNaklady + "‚Ç¨";
        }
    } else {
        formatTime(prichod);
        sprava += "pr√≠chod: " + globalSprava;
    }
    
    sprava += ". " + CONFIG.firmaNazov;
    globalSprava = sprava;
}

function vytvorEmailSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex) {
    vytvorTelegramSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex);
    var telegram = globalSprava;
    var email = telegram.replace(/\*\*/g, "").replace(/\*/g, "").replace(/_/g, "");
    globalSprava = email;
}

// ==============================================
// NOTIFIKAƒåN√Å LOGIKA - OPRAVEN√â
// ==============================================

function posliNotifikaciuZamestnancovi(dochadzkaZaznam, zamestnanec, zamestnanecIndex) {
    globalResult = { success: false, uspesnePoslane: 0, celkovePokusy: 0 };
    
    // ‚úÖ OPRAVEN√â - bezpeƒçn√Ω pr√≠stup k meno/nick
    var meno = safeFieldGet(zamestnanec, "Nick", "") || 
               safeFieldGet(zamestnanec, "Meno", "") || 
               "Zamestnanec #" + (zamestnanecIndex + 1);
    
    logDebug("üë§ Spracov√°vam notifik√°cie pre: " + meno);
    
    // ‚úÖ OPRAVEN√â - bezpeƒçn√Ω pr√≠stup k s√∫hlasu
    var notifikacieSuhlas = safeFieldGet(zamestnanec, "Notifik√°cie S√∫hlas", false);
    
    logDebug("   üîç Kontrolujem s√∫hlas s notifik√°ciami...");
    logDebug("   ‚Ä¢ S√∫hlas hodnota: " + notifikacieSuhlas);
    logDebug("   ‚Ä¢ S√∫hlas typ: " + typeof notifikacieSuhlas);
    
    if (!notifikacieSuhlas) {
        logDebug("  ‚ùå Nem√° s√∫hlas s notifik√°ciami - preskakujem");
    } else {
        logDebug("  ‚úÖ M√° s√∫hlas s notifik√°ciami - pokraƒçujem");
        
        // ‚úÖ TELEGRAM - bezpeƒçn√Ω pr√≠stup
        var telegramNotif = safeFieldGet(zamestnanec, "Telegram Notifik√°cie", false);
        if (telegramNotif) {
            var chatId = safeFieldGet(zamestnanec, "Telegram Chat ID", "");
            if (chatId && globalApiKeys.success && globalApiKeys.telegramToken) {
                globalResult.celkovePokusy++;
                logDebug("  üì± Telegram: Vytv√°ram spr√°vu...");
                
                vytvorTelegramSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex);
                var telegramSprava = globalSprava;
                
                posliTelegramSpravu(chatId, telegramSprava, globalApiKeys.telegramToken);
                if (globalResult.success) {
                    globalResult.uspesnePoslane++;
                    logDebug("  ‚úÖ Telegram spr√°va poslan√°");
                } else {
                    logDebug("  ‚ùå Telegram spr√°va zlyhala");
                }
            } else {
                logDebug("  ‚ö†Ô∏è Telegram zapnut√Ω ale ch√Ωba Chat ID (" + chatId + ") alebo token (" + globalApiKeys.success + ")");
            }
        } else {
            logDebug("  ‚è≠Ô∏è Telegram notifik√°cie vypnut√©");
        }
        
        // ‚úÖ SMS - bezpeƒçn√Ω pr√≠stup
        var smsNotif = safeFieldGet(zamestnanec, "SMS Notifik√°cie", false);
        if (smsNotif) {
            var telefon = safeFieldGet(zamestnanec, "Telef√≥n", "");
            if (telefon) {
                globalResult.celkovePokusy++;
                logDebug("  üì≤ SMS: Vytv√°ram spr√°vu...");
                
                vytvorSMSSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex);
                var smsSprava = globalSprava;
                
                posliSMS(telefon, smsSprava);
                if (globalResult.success) {
                    globalResult.uspesnePoslane++;
                    logDebug("  ‚úÖ SMS spr√°va poslan√°");
                } else {
                    logDebug("  ‚ùå SMS spr√°va zlyhala");
                }
            } else {
                logDebug("  ‚ö†Ô∏è SMS zapnut√© ale ch√Ωba telef√≥nne ƒç√≠slo");
            }
        } else {
            logDebug("  ‚è≠Ô∏è SMS notifik√°cie vypnut√©");
        }
        
        // ‚úÖ EMAIL - bezpeƒçn√Ω pr√≠stup
        var emailNotif = safeFieldGet(zamestnanec, "Email Notifik√°cie", false);
        if (emailNotif) {
            var email = safeFieldGet(zamestnanec, "E-mail", "");
            if (email) {
                globalResult.celkovePokusy++;
                logDebug("  üìß Email: Vytv√°ram spr√°vu...");
                
                vytvorEmailSpravu(dochadzkaZaznam, zamestnanec, zamestnanecIndex);
                var emailSprava = globalSprava;
                
                formatDate(safeFieldGet(dochadzkaZaznam, "D√°tum", new Date()));
                var predmet = "Evidencia doch√°dzky - " + globalSprava;
                
                posliEmail(email, predmet, emailSprava);
                if (globalResult.success) {
                    globalResult.uspesnePoslane++;
                    logDebug("  ‚úÖ Email spr√°va poslan√°");
                } else {
                    logDebug("  ‚ùå Email spr√°va zlyhala");
                }
            } else {
                logDebug("  ‚ö†Ô∏è Email zapnut√Ω ale ch√Ωba emailov√° adresa");
            }
        } else {
            logDebug("  ‚è≠Ô∏è Email notifik√°cie vypnut√©");
        }
        
        globalResult.success = globalResult.uspesnePoslane > 0;
        logDebug("  üìä V√Ωsledok pre " + meno + ": " + globalResult.uspesnePoslane + "/" + globalResult.celkovePokusy + " √∫spe≈°n√Ωch");
    }
}

// ==============================================
// MAIN ACTION SCRIPT - OPRAVEN√ù
// ==============================================

try {
    clearLogs();
    
    logDebug("üöÄ === ≈†TART DOCH√ÅDZKA NOTIFIK√ÅCI√ç v" + CONFIG.version + " (" + CONFIG.scriptType + ") ===");
    logDebug("‚è∞ ƒåas spustenia: " + moment().format("DD.MM.YYYY HH:mm:ss"));
    logDebug("üîß Oprava: Bezpeƒçn√Ω pr√≠stup k poliam s diakritikou");
    
    if (!currentEntry) {
        var errorMsg = "Entry objekt nie je dostupn√Ω";
        logError(errorMsg, "MAIN-INIT");
        message("‚ùå CHYBA!\n\n" + errorMsg);
    } else {
        logDebug("‚úÖ Entry objekt OK");
        
        var scriptFailed = false;
        var statusMsg = "";
        
        // Z√≠skaj API keys
        getApiKeys();
        if (!globalApiKeys.success) {
            logError("Nie je mo≈æn√© z√≠ska≈• Telegram API keys", "MAIN");
            statusMsg += "‚ùå Telegram API probl√©m\n";
        } else {
            logDebug("‚úÖ Telegram API keys naƒç√≠tan√© √∫spe≈°ne:");
            logDebug("   üì± Telegram Bot: " + globalApiKeys.botName);
            logDebug("   üîß Provider: " + globalApiKeys.provider);
            logDebug("   üîë Token: OK (skryt√Ω)");
            statusMsg += "‚úÖ Telegram API OK (" + globalApiKeys.botName + ")\n";
        }
        
        // Z√≠skaj zamestnancov
        var zamestnanci = getZamestnanciArray();
        
        if (zamestnanci.length === 0) {
            var noEmployeesMsg = "≈Ωiadni zamestnanci v z√°zname";
            logDebug("‚ö†Ô∏è " + noEmployeesMsg);
            statusMsg += "‚ùå " + noEmployeesMsg + "\n";
            scriptFailed = true;
        } else {
            logDebug("üë• √öspe≈°ne naƒç√≠tan√Ωch " + zamestnanci.length + " zamestnancov");
            statusMsg += "üë• Zamestnanci: " + zamestnanci.length + " os√¥b\n";
        }
        
        if (!scriptFailed) {
            var celkemUspesnych = 0;
            var celkemZamestnancov = 0;
            var detailneVysledky = [];
            
            for (var i = 0; i < zamestnanci.length; i++) {
                var zamestnanec = zamestnanci[i];
                
                if (zamestnanec) {
                    celkemZamestnancov++;
                    posliNotifikaciuZamestnancovi(currentEntry, zamestnanec, i);
                    
                    var meno = safeFieldGet(zamestnanec, "Nick", "") || 
                              safeFieldGet(zamestnanec, "Meno", "") || 
                              "Zamestnanec #" + (i + 1);
                    
                    if (globalResult.success) {
                        celkemUspesnych++;
                        detailneVysledky.push("‚úÖ " + meno + ": " + globalResult.uspesnePoslane + "/" + globalResult.celkovePokusy);
                    } else {
                        detailneVysledky.push("‚ùå " + meno + ": 0/" + globalResult.celkovePokusy);
                    }
                } else {
                    logDebug("‚ö†Ô∏è Zamestnanec #" + i + " je null/undefined");
                }
            }
            
            var vysledokSprava = "Notifik√°cie odoslan√©: " + celkemUspesnych + "/" + celkemZamestnancov + 
                                " zamestnancov (" + moment().format("DD.MM.YYYY HH:mm:ss") + ")";
            
            logDebug("üìä === FIN√ÅLNY V√ùSLEDOK ===");
            logDebug(vysledokSprava);
            
            var existujuciLog = safeFieldGet(currentEntry, "Notifik√°cie Log", "");
            currentEntry.set("Notifik√°cie Log", existujuciLog + vysledokSprava + "\n");
            
            var userMessage = "üìß NOTIFIK√ÅCIE DOKONƒåEN√â v" + CONFIG.version + "\n\n";
            userMessage += statusMsg + "\n";
            userMessage += "üìä V√ùSLEDKY:\n";
            userMessage += "‚Ä¢ Celkom zamestnancov: " + celkemZamestnancov + "\n";
            userMessage += "‚Ä¢ √öspe≈°ne notifikovan√≠: " + celkemUspesnych + "\n";
            
            if (celkemZamestnancov > 0) {
                userMessage += "‚Ä¢ √öspe≈°nos≈•: " + Math.round((celkemUspesnych / celkemZamestnancov) * 100) + "%\n\n";
            }
            
            userMessage += "üìã DETAILNE:\n";
            for (var j = 0; j < Math.min(detailneVysledky.length, 5); j++) {
                userMessage += detailneVysledky[j] + "\n";
            }
            if (detailneVysledky.length > 5) {
                userMessage += "... a ƒèal≈°√≠ " + (detailneVysledky.length - 5) + " zamestnanci\n";
            }
            
            userMessage += "\nüí° Pozri Debug_Log pre detaily";
            
            if (celkemUspesnych === celkemZamestnancov) {
                logDebug("üéâ V≈°etky notifik√°cie √∫spe≈°ne odoslan√©!");
                message("üéâ " + userMessage);
            } else if (celkemUspesnych > 0) {
                logDebug("‚ö†Ô∏è ƒåiastoƒçn√Ω √∫spech - niektor√© notifik√°cie zlyhali");
                message("‚ö†Ô∏è " + userMessage);
            } else {
                logError("V≈°etky notifik√°cie zlyhali", "MAIN");
                message("‚ùå " + userMessage);
            }
        } else {
            message("‚ùå SCRIPT ZLYHAL\n\n" + statusMsg + "\nSkontroluj Debug_Log pre detaily");
        }
    }
    
} catch (criticalError) {
    logError(criticalError, "MAIN-CRITICAL");
    message("üí• KRITICK√Å CHYBA!\n\n" + criticalError.toString() + "\n\nPozri Error_Log pre detaily");
}
