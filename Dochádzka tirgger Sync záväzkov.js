// ==============================================
// DOCH√ÅDZKA ‚Üí Z√ÅV√ÑZKY SYNC (S FINANƒåN√ùMI POƒΩAMI + INFO TRACKING)
// ==============================================
// Trigger: After save v kni≈ænici "Doch√°dzka"
// √öƒçel: Automatick√© vytvorenie/aktualiz√°cia z√°znamov z√°v√§zkov pre zamestnancov
// Funkcie: Anti-duplicity, Update/Create logika, Finanƒçn√© polia, Info tracking, Checkbox oznaƒçenie
// JavaScript 1.7 kompatibiln√Ω
// ==============================================

// Konfigur√°cia
var CONFIG = {
    debug: true,
    debugFieldName: "Debug_Log",
    errorFieldName: "Error_Log",
    
    // N√°zvy kni≈æn√≠c
    zavazkyLibrary: "Z√°v√§zky",
    zamestnancipLibrary: "Zamestnanci",
    
    // N√°zvy pol√≠ - Doch√°dzka
    fields: {
        zamestnanci: "Zamestnanci",
        datum: "D√°tum",
        zavazkyCheckbox: "Z√°v√§zky",  // Nov√© checkbox pole
        zavazkyInfo: "Z√°v√§zky_Info"  // Nov√© info pole (ak existuje)
    },
    
    // N√°zvy pol√≠ - Z√°v√§zky
    zavazkyFields: {
        stav: "Stav",
        datum: "D√°tum",
        typ: "Typ",
        zamestnanec: "Zamestnanec",
        dochadzka: "Doch√°dzka",
        popis: "Popis",
        suma: "Suma",
        zaplatene: "Zaplaten√©",
        zostatok: "Zostatok",
        info: "info"
    },
    
    // N√°zvy pol√≠ - Zamestnanci
    zamestnancilFields: {
        nick: "Nick",
        meno: "Meno"
    }
};

// Glob√°lne premenn√© pre logging a tracking
var debugLog = [];
var errorLog = [];
var vytvorenieZavazkyInfo = [];  // Tracking vytvoren√Ωch/aktualizovan√Ωch z√°v√§zkov

function addDebug(message) {
    if (CONFIG.debug) {
        var timestamp = moment().format("DD.MM.YY HH:mm:ss");
        debugLog.push("[" + timestamp + "] " + message);
    }
}

function addError(message, location) {
    var timestamp = moment().format("DD.MM.YY HH:mm:ss");
    var prefix = location ? "[" + location + "] " : "";
    errorLog.push("[" + timestamp + "] ‚ùå " + prefix + message);
}

function addZavazokInfo(typ, zamestnanec, suma, zavazokId) {
    var info = {
        typ: typ,  // "NOV√ù" alebo "AKTUALIZOVAN√ù"
        zamestnanec: zamestnanec,
        suma: suma,
        zavazokId: zavazokId || "nezn√°me",
        cas: moment().format("DD.MM.YY HH:mm:ss")
    };
    vytvorenieZavazkyInfo.push(info);
}

function saveLogs() {
    var currentEntry = entry();
    
    try {
        currentEntry.set(CONFIG.debugFieldName, debugLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania debug logu
    }
    
    try {
        currentEntry.set(CONFIG.errorFieldName, errorLog.join("\n"));
    } catch (e) {
        // Ignoruj chybu ukladania error logu  
    }
}

function getMenoZamestnanca(zamestnanec) {
    if (!zamestnanec) return "Nezn√°my";
    
    var nick = "";
    var meno = "";
    
    try {
        var tempNick = zamestnanec.field(CONFIG.zamestnancilFields.nick);
        if (tempNick) nick = tempNick;
    } catch (error) {
        // Ignoruj chybu
    }
    
    try {
        var tempMeno = zamestnanec.field(CONFIG.zamestnancilFields.meno);
        if (tempMeno) meno = tempMeno;
    } catch (error) {
        // Ignoruj chybu
    }
    
    // Vr√°≈• najlep≈°iu dostupn√∫ kombin√°ciu
    if (nick && meno) {
        return nick + " (" + meno + ")";
    } else if (nick) {
        return nick;
    } else if (meno) {
        return meno;
    } else {
        return "Nezn√°my";
    }
}

function getSumaZamestnanca(zamestnanec) {
    if (!zamestnanec) return 0;
    
    // Sk√∫s z√≠ska≈• sumu z atrib√∫tu "denn√° mzda"
    try {
        var dennaMzda = zamestnanec.attr("denn√° mzda");
        if (dennaMzda && dennaMzda > 0) {
            addDebug("    üí∞ Suma z atrib√∫tu 'denn√° mzda': " + dennaMzda + " ‚Ç¨");
            return parseFloat(dennaMzda);
        }
    } catch (attrError) {
        addDebug("    üîç Atrib√∫t 'denn√° mzda' nedostupn√Ω");
    }
    
    // Sk√∫s in√© atrib√∫ty
    var mozneAtributy = ["suma", "hodinovka", "mzda"];
    for (var a = 0; a < mozneAtributy.length; a++) {
        try {
            var atributSuma = zamestnanec.attr(mozneAtributy[a]);
            if (atributSuma && atributSuma > 0) {
                addDebug("    üí∞ Suma z atrib√∫tu '" + mozneAtributy[a] + "': " + atributSuma + " ‚Ç¨");
                return parseFloat(atributSuma);
            }
        } catch (attrError) {
            // Pokraƒçuj na ƒèal≈°√≠ atrib√∫t
        }
    }
    
    // Sk√∫s polia
    var moznePoliaSum = ["Suma", "Mzda", "Hodinovka", "Sadzba"];
    for (var i = 0; i < moznePoliaSum.length; i++) {
        try {
            var suma = zamestnanec.field(moznePoliaSum[i]);
            if (suma && suma > 0) {
                addDebug("    üí∞ Suma z poƒæa '" + moznePoliaSum[i] + "': " + suma + " ‚Ç¨");
                return parseFloat(suma);
            }
        } catch (fieldError) {
            // Pokraƒçuj na ƒèal≈°ie pole
        }
    }
    
    addDebug("    ‚ö†Ô∏è ≈Ωiadna suma nen√°jden√° - pou≈æ√≠vam 0");
    return 0; // Default suma
}

function findExistingZavazky(currentEntry) {
    addDebug("üîç === HƒΩADANIE EXISTUJ√öCICH Z√ÅV√ÑZKOV ===");
    
    var existujuceZavazky = [];
    
    try {
        // Pou≈æi≈• linksFrom na n√°jdenie z√°v√§zkov ktor√© odkazuj√∫ na tento z√°znam doch√°dzky
        existujuceZavazky = currentEntry.linksFrom(CONFIG.zavazkyLibrary, CONFIG.zavazkyFields.dochadzka);
        
        if (existujuceZavazky && existujuceZavazky.length > 0) {
            addDebug("‚úÖ Na≈°iel " + existujuceZavazky.length + " existuj√∫cich z√°v√§zkov");
            
            // Debug info o existuj√∫cich z√°v√§zkoch
            for (var i = 0; i < existujuceZavazky.length; i++) {
                var zavazok = existujuceZavazky[i];
                try {
                    var zamestnanciZavazku = zavazok.field(CONFIG.zavazkyFields.zamestnanec);
                    var zamestnanecMeno = "Nezn√°my";
                    
                    if (zamestnanciZavazku && zamestnanciZavazku.length > 0) {
                        zamestnanecMeno = getMenoZamestnanca(zamestnanciZavazku[0]);
                    }
                    
                    var suma = zavazok.field(CONFIG.zavazkyFields.suma) || 0;
                    var zaplatene = zavazok.field(CONFIG.zavazkyFields.zaplatene) || 0;
                    var zostatok = zavazok.field(CONFIG.zavazkyFields.zostatok) || 0;
                    var stav = zavazok.field(CONFIG.zavazkyFields.stav) || "Nezn√°my";
                    
                    addDebug("  üìã Z√°v√§zok " + (i + 1) + ": " + zamestnanecMeno + " - " + suma.toFixed(2) + " ‚Ç¨ (" + stav + ")");
                    addDebug("      üí≥ Zaplaten√©: " + zaplatene.toFixed(2) + " ‚Ç¨, Zostatok: " + zostatok.toFixed(2) + " ‚Ç¨");
                } catch (debugError) {
                    addDebug("  ‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ z√°v√§zku " + (i + 1) + ": " + debugError.toString());
                }
            }
        } else {
            addDebug("üìã ≈Ωiadne existuj√∫ce z√°v√§zky nen√°jden√©");
        }
        
    } catch (linksFromError) {
        addError("LinksFrom zlyhalo pri hƒæadan√≠ z√°v√§zkov: " + linksFromError.toString(), "findExistingZavazky");
        
        // Fallback: SQL query
        addDebug("üîÑ Sk√∫≈°am SQL fallback...");
        try {
            var dochadzkallID = currentEntry.field("ID");
            if (dochadzkallID) {
                var sqlQuery = "SELECT * FROM " + CONFIG.zavazkyLibrary + " WHERE Doch√°dzka = '" + dochadzkallID + "'";
                var sqlResult = sql(sqlQuery).asEntries();
                
                if (sqlResult && sqlResult.length > 0) {
                    existujuceZavazky = sqlResult;
                    addDebug("‚úÖ SQL fallback na≈°iel " + existujuceZavazky.length + " z√°v√§zkov");
                } else {
                    addDebug("üìã SQL fallback nena≈°iel ≈æiadne z√°v√§zky");
                }
            }
        } catch (sqlError) {
            addError("SQL fallback tie≈æ zlyhal: " + sqlError.toString(), "findExistingZavazky_sql");
        }
    }
    
    return existujuceZavazky;
}

function findZavazokForEmployee(existujuceZavazky, zamestnanec) {
    // N√°jdi z√°v√§zok pre konkr√©tneho zamestnanca
    for (var i = 0; i < existujuceZavazky.length; i++) {
        var zavazok = existujuceZavazky[i];
        
        try {
            var zamestnanciZavazku = zavazok.field(CONFIG.zavazkyFields.zamestnanec);
            
            if (zamestnanciZavazku && zamestnanciZavazku.length > 0) {
                var zamestnanecZavazku = zamestnanciZavazku[0];
                
                // Porovnaj zamestnancov - sk√∫s viacero met√≥d
                if (zamestnanecZavazku === zamestnanec) {
                    return zavazok;
                }
                
                // Fallback porovnanie cez meno
                var menoZavazku = getMenoZamestnanca(zamestnanecZavazku);
                var menoHladaneho = getMenoZamestnanca(zamestnanec);
                
                if (menoZavazku !== "Nezn√°my" && menoHladaneho !== "Nezn√°my" && menoZavazku === menoHladaneho) {
                    return zavazok;
                }
            }
        } catch (compareError) {
            // Pokraƒçuj na ƒèal≈°√≠ z√°v√§zok
        }
    }
    
    return null; // Nena≈°iel
}

function updateExistingZavazok(zavazok, zamestnanec, datumDochadzky, sumaZamestnanca, menoZamestnanca, currentEntry) {
    addDebug("  üîÑ Aktualizujem existuj√∫ci z√°v√§zok...");
    
    try {
        // Z√≠skaj existuj√∫cu hodnotu "Zaplaten√©"
        var existujuceZaplatene = 0;
        try {
            var tempZaplatene = zavazok.field(CONFIG.zavazkyFields.zaplatene);
            if (tempZaplatene && tempZaplatene >= 0) {
                existujuceZaplatene = parseFloat(tempZaplatene);
                addDebug("    üí∞ Existuj√∫ce Zaplaten√©: " + existujuceZaplatene.toFixed(2) + " ‚Ç¨");
            } else {
                addDebug("    üí∞ Existuj√∫ce Zaplaten√©: nedostupn√© - nastavujem na 0");
            }
        } catch (zaplatenemaError) {
            addDebug("    üí∞ Chyba pri ƒç√≠tan√≠ Zaplaten√© - nastavujem na 0");
        }
        
        // Vypoƒç√≠taj nov√Ω zostatok
        var novyZostatok = sumaZamestnanca - existujuceZaplatene;
        addDebug("    üßÆ V√Ωpoƒçet zostatok: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨ - " + existujuceZaplatene.toFixed(2) + " ‚Ç¨ = " + novyZostatok.toFixed(2) + " ‚Ç¨");
        
        // Aktualizuj v≈°etky relevantn√© polia
        zavazok.set(CONFIG.zavazkyFields.datum, datumDochadzky);
        zavazok.set(CONFIG.zavazkyFields.suma, sumaZamestnanca);
        zavazok.set(CONFIG.zavazkyFields.zostatok, novyZostatok);
        // Pozn√°mka: Zaplaten√© ponech√°vame ak√© je
        
        // Vytvor nov√Ω popis
        var popis = "Mzda zamestnanca " + menoZamestnanca + " za de≈à " + moment(datumDochadzky).format("DD.MM.YYYY");
        zavazok.set(CONFIG.zavazkyFields.popis, popis);
        
        // Aktualizuj info text - ROZ≈†√çREN√â INFO
        var infoText = "üîÑ Z√ÅV√ÑZOK AKTUALIZOVAN√ù AUTOMATICKY\n";
        infoText += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
        infoText += "üìã Z√ÅKLADN√â INFORM√ÅCIE:\n";
        infoText += "üìÖ D√°tum doch√°dzky: " + moment(datumDochadzky).format("DD.MM.YYYY") + "\n";
        infoText += "üë§ Zamestnanec: " + menoZamestnanca + "\n";
        infoText += "üîó Automaticky synchronizovan√© z kni≈ænice Doch√°dzka\n\n";
        
        infoText += "üí∞ FINANƒåN√â √öDAJE:\n";
        infoText += "üíµ Nov√° suma: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨\n";
        infoText += "üí≥ Zaplaten√© (zachovan√©): " + existujuceZaplatene.toFixed(2) + " ‚Ç¨\n";
        infoText += "üí∏ Nov√Ω zostatok: " + novyZostatok.toFixed(2) + " ‚Ç¨ (prepoƒç√≠tan√©)\n\n";
        
        infoText += "‚öôÔ∏è TECHNICK√â √öDAJE:\n";
        infoText += "‚è∞ ƒåas aktualiz√°cie: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        
        // Z√≠skaj ID doch√°dzky
        var dochadzkallID = "nezn√°me";
        try {
            var tempID = currentEntry.field("ID");
            if (tempID) dochadzkallID = tempID;
        } catch (idError) {
            // Ignoruj chybu
        }
        
        infoText += "üÜî Zdroj Doch√°dzka ID: #" + dochadzkallID + "\n";
        
        // Z√≠skaj ID z√°v√§zku
        var zavazokID = "nezn√°me";
        try {
            var tempZavazokID = zavazok.field("ID");
            if (tempZavazokID) zavazokID = tempZavazokID;
        } catch (zavazokIdError) {
            // Ignoruj chybu
        }
        
        infoText += "üÜî Z√°v√§zok ID: #" + zavazokID + "\n\n";
        
        infoText += "üìù AKTUALIZOVAN√â POLIA:\n";
        infoText += "‚Ä¢ ‚úÖ D√°tum: aktualizovan√Ω na " + moment(datumDochadzky).format("DD.MM.YYYY") + "\n";
        infoText += "‚Ä¢ ‚úÖ Suma: aktualizovan√° na " + sumaZamestnanca.toFixed(2) + " ‚Ç¨\n";
        infoText += "‚Ä¢ ‚úÖ Zostatok: prepoƒç√≠tan√Ω na " + novyZostatok.toFixed(2) + " ‚Ç¨\n";
        infoText += "‚Ä¢ ‚úÖ Popis: aktualizovan√Ω\n";
        infoText += "‚Ä¢ ‚úÖ Info: aktualizovan√©\n";
        infoText += "‚Ä¢ üìå Zaplaten√©: zachovan√© (" + existujuceZaplatene.toFixed(2) + " ‚Ç¨)\n";
        infoText += "‚Ä¢ üìå Stav: zachovan√Ω\n\n";
        
        infoText += "üîÑ AKTUALIZ√ÅCIA √öSPE≈†N√Å ‚úÖ";
        
        zavazok.set(CONFIG.zavazkyFields.info, infoText);
        
        // Pridaj do trackovania
        addZavazokInfo("AKTUALIZOVAN√ù", menoZamestnanca, sumaZamestnanca, zavazokID);
        
        addDebug("  ‚úÖ Existuj√∫ci z√°v√§zok aktualizovan√Ω");
        addDebug("    üÜî Z√°v√§zok ID: " + zavazokID);
        addDebug("    üí∞ Nov√° suma: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨");
        addDebug("    üí≥ Zaplaten√©: " + existujuceZaplatene.toFixed(2) + " ‚Ç¨ (zachovan√©)");
        addDebug("    üíµ Zostatok: " + novyZostatok.toFixed(2) + " ‚Ç¨ (prepoƒç√≠tan√©)");
        
        return true;
        
    } catch (updateError) {
        addError("Chyba pri aktualiz√°cii z√°v√§zku: " + updateError.toString(), "updateExistingZavazok");
        return false;
    }
}

function createNewZavazok(zavazkyLib, zamestnanec, datumDochadzky, sumaZamestnanca, menoZamestnanca, currentEntry) {
    addDebug("  ‚ûï Vytv√°rram nov√Ω z√°v√§zok...");
    
    try {
        // Pre nov√Ω z√°v√§zok: Zaplaten√© = 0, Zostatok = Suma
        var novyZaplatene = 0;
        var novyZostatok = sumaZamestnanca;
        
        addDebug("    üí∞ Nov√Ω z√°v√§zok - finanƒçn√© hodnoty:");
        addDebug("      Suma: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨");
        addDebug("      Zaplaten√©: " + novyZaplatene.toFixed(2) + " ‚Ç¨");
        addDebug("      Zostatok: " + novyZostatok.toFixed(2) + " ‚Ç¨");
        
        // Vytvor popis
        var popis = "Mzda zamestnanca " + menoZamestnanca + " za de≈à " + moment(datumDochadzky).format("DD.MM.YYYY");
        
        // Vytvor info text - ROZ≈†√çREN√â INFO
        var infoText = "üÜï NOV√ù Z√ÅV√ÑZOK VYTVOREN√ù AUTOMATICKY\n";
        infoText += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
        infoText += "üìã Z√ÅKLADN√â INFORM√ÅCIE:\n";
        infoText += "üìÖ D√°tum doch√°dzky: " + moment(datumDochadzky).format("DD.MM.YYYY") + "\n";
        infoText += "üë§ Zamestnanec: " + menoZamestnanca + "\n";
        infoText += "üîó Automaticky vygenerovan√© z kni≈ænice Doch√°dzka\n\n";
        
        infoText += "üí∞ FINANƒåN√â √öDAJE:\n";
        infoText += "üíµ Suma: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨\n";
        infoText += "üí≥ Zaplaten√©: " + novyZaplatene.toFixed(2) + " ‚Ç¨ (nov√Ω z√°v√§zok)\n";
        infoText += "üí∏ Zostatok: " + novyZostatok.toFixed(2) + " ‚Ç¨ (= suma)\n\n";
        
        infoText += "‚öôÔ∏è TECHNICK√â √öDAJE:\n";
        infoText += "‚è∞ ƒåas vytvorenia: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        
        // Z√≠skaj ID doch√°dzky
        var dochadzkallID = "nezn√°me";
        try {
            var tempID = currentEntry.field("ID");
            if (tempID) dochadzkallID = tempID;
        } catch (idError) {
            // Ignoruj chybu
        }
        
        infoText += "üÜî Zdroj Doch√°dzka ID: #" + dochadzkallID + "\n\n";
        
        infoText += "üìù AUTOMATICKY NASTAVEN√â HODNOTY:\n";
        infoText += "‚Ä¢ ‚úÖ Stav: Neuhraden√©\n";
        infoText += "‚Ä¢ ‚úÖ Typ: Mzda\n";
        infoText += "‚Ä¢ ‚úÖ D√°tum: " + moment(datumDochadzky).format("DD.MM.YYYY") + "\n";
        infoText += "‚Ä¢ ‚úÖ Suma: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨\n";
        infoText += "‚Ä¢ ‚úÖ Zaplaten√©: 0 ‚Ç¨ (nov√Ω z√°v√§zok)\n";
        infoText += "‚Ä¢ ‚úÖ Zostatok: " + novyZostatok.toFixed(2) + " ‚Ç¨ (= suma)\n";
        infoText += "‚Ä¢ ‚úÖ Zamestnanec: " + menoZamestnanca + "\n";
        infoText += "‚Ä¢ ‚úÖ Sp√§tn√Ω link na doch√°dzku: nastaven√Ω\n";
        infoText += "‚Ä¢ ‚úÖ Popis: automaticky generovan√Ω\n\n";
        
        infoText += "üîó PREPOJENIA:\n";
        infoText += "‚Ä¢ Doch√°dzka ‚Üí Z√°v√§zok: ‚úÖ Akt√≠vne\n";
        infoText += "‚Ä¢ Z√°v√§zok ‚Üí Doch√°dzka: ‚úÖ Akt√≠vne\n";
        infoText += "‚Ä¢ Anti-duplicita: ‚úÖ Kontrolovan√©\n\n";
        
        infoText += "üÜï VYTVORENIE √öSPE≈†N√â ‚úÖ";
        
        // Vytvor objekt pre nov√Ω z√°znam
        var dataZaznamu = {};
        dataZaznamu[CONFIG.zavazkyFields.stav] = "Neuhraden√©";
        dataZaznamu[CONFIG.zavazkyFields.datum] = datumDochadzky;
        dataZaznamu[CONFIG.zavazkyFields.typ] = "Mzda";
        dataZaznamu[CONFIG.zavazkyFields.zamestnanec] = [zamestnanec];
        dataZaznamu[CONFIG.zavazkyFields.dochadzka] = [currentEntry];
        dataZaznamu[CONFIG.zavazkyFields.popis] = popis;
        dataZaznamu[CONFIG.zavazkyFields.suma] = sumaZamestnanca;
        dataZaznamu[CONFIG.zavazkyFields.zaplatene] = novyZaplatene;  // 0 pre nov√Ω z√°v√§zok
        dataZaznamu[CONFIG.zavazkyFields.zostatok] = novyZostatok;    // = suma pre nov√Ω z√°v√§zok
        dataZaznamu[CONFIG.zavazkyFields.info] = infoText;
        
        // Vytvor nov√Ω z√°znam
        var novyZavazok = zavazkyLib.create(dataZaznamu);
        
        if (novyZavazok) {
            // Z√≠skaj ID nov√©ho z√°v√§zku
            var novyZavazokID = "nezn√°me";
            try {
                var id = novyZavazok.field("ID");
                if (id) {
                    novyZavazokID = id;
                    addDebug("    üÜî Nov√Ω z√°znam ID: " + id);
                    
                    // Aktualizuj info text s ID z√°v√§zku
                    var aktualizovanyInfoText = infoText.replace("üÜî Zdroj Doch√°dzka ID: #" + dochadzkallID + "\n\n", 
                                                              "üÜî Zdroj Doch√°dzka ID: #" + dochadzkallID + "\nüÜî Z√°v√§zok ID: #" + novyZavazokID + "\n\n");
                    novyZavazok.set(CONFIG.zavazkyFields.info, aktualizovanyInfoText);
                }
            } catch (idCheckError) {
                // Ignoruj chybu kontroly ID
            }
            
            // Pridaj do trackovania
            addZavazokInfo("NOV√ù", menoZamestnanca, sumaZamestnanca, novyZavazokID);
            
            addDebug("  ‚úÖ Nov√Ω z√°v√§zok vytvoren√Ω");
            addDebug("    üÜî Z√°v√§zok ID: " + novyZavazokID);
            addDebug("    üí∞ Suma: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨");
            addDebug("    üí≥ Zaplaten√©: " + novyZaplatene.toFixed(2) + " ‚Ç¨");
            addDebug("    üíµ Zostatok: " + novyZostatok.toFixed(2) + " ‚Ç¨");
            
            return true;
        } else {
            addError("Vytvorenie nov√©ho z√°v√§zku vr√°tilo null", "createNewZavazok");
            return false;
        }
        
    } catch (createError) {
        addError("Chyba pri vytv√°ran√≠ nov√©ho z√°v√§zku: " + createError.toString(), "createNewZavazok");
        return false;
    }
}

function createDochadzkallnfoText(datumDochadzky, vytvorenieZavazkyInfo, uspesneVytvorene, uspesneAktualizovane, celkovaSuma) {
    var infoText = "üìä AUTOMATICK√Å SYNCHRONIZ√ÅCIA Z√ÅV√ÑZKOV\n";
    infoText += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
    
    infoText += "üìÖ D√ÅTUM DOCH√ÅDZKY: " + moment(datumDochadzky).format("DD.MM.YYYY") + "\n";
    infoText += "‚è∞ ƒåAS SYNCHRONIZ√ÅCIE: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n\n";
    
    infoText += "üìà S√öHRN V√ùSLEDKOV:\n";
    infoText += "‚ûï Nov√Ωch z√°v√§zkov: " + uspesneVytvorene + "\n";
    infoText += "üîÑ Aktualizovan√Ωch z√°v√§zkov: " + uspesneAktualizovane + "\n";
    infoText += "üí∞ Celkov√° suma z√°v√§zkov: " + celkovaSuma.toFixed(2) + " ‚Ç¨\n";
    infoText += "üë• Spracovan√Ωch zamestnancov: " + vytvorenieZavazkyInfo.length + "\n\n";
    
    if (vytvorenieZavazkyInfo.length > 0) {
        infoText += "üìã DETAIL Z√ÅV√ÑZKOV:\n";
        infoText += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        for (var i = 0; i < vytvorenieZavazkyInfo.length; i++) {
            var info = vytvorenieZavazkyInfo[i];
            var ikona = (info.typ === "NOV√ù") ? "üÜï" : "üîÑ";
            infoText += ikona + " " + info.typ + " - " + info.zamestnanec + "\n";
            infoText += "   üí∞ Suma: " + info.suma.toFixed(2) + " ‚Ç¨\n";
            infoText += "   üÜî ID: #" + info.zavazokId + "\n";
            infoText += "   ‚è∞ ƒåas: " + info.cas + "\n";
            if (i < vytvorenieZavazkyInfo.length - 1) {
                infoText += "\n";
            }
        }
        
        infoText += "\n";
    }
    
    infoText += "‚öôÔ∏è AUTOMATICK√â FUNKCIE:\n";
    infoText += "‚Ä¢ ‚úÖ Anti-duplicita z√°v√§zkov\n";
    infoText += "‚Ä¢ ‚úÖ Aktualiz√°cia existuj√∫cich z√°znamov\n";
    infoText += "‚Ä¢ ‚úÖ Finanƒçn√© polia (Suma, Zaplaten√©, Zostatok)\n";
    infoText += "‚Ä¢ ‚úÖ Sp√§tn√© odkazy medzi kni≈ænicami\n";
    infoText += "‚Ä¢ ‚úÖ Automatick√© oznaƒçenie checkbox Z√°v√§zky\n\n";
    
    infoText += "üîó V≈°etky z√°v√§zky s√∫ prepojen√© s t√Ωmto z√°znamom doch√°dzky\n";
    infoText += "üìù Pre detaily pozrite z√°znamy v kni≈ænici Z√°v√§zky\n\n";
    
    infoText += "‚úÖ SYNCHRONIZ√ÅCIA DOKONƒåEN√Å √öSPE≈†NE";
    
    return infoText;
}

function setZavazkyCheckboxAndInfo(currentEntry, datumDochadzky, vytvorenieZavazkyInfo, uspesneVytvorene, uspesneAktualizovane, celkovaSuma) {
    addDebug("üìù === NASTAVOVANIE CHECKBOX A INFO ===");
    
    try {
        // Nastav checkbox Z√°v√§zky na true
        currentEntry.set(CONFIG.fields.zavazkyCheckbox, true);
        addDebug("‚úÖ Checkbox 'Z√°v√§zky' oznaƒçen√Ω ako true");
        
        // Vytvor a nastav info text o z√°v√§zkoch
        var dochadzkallnfoText = createDochadzkallnfoText(datumDochadzky, vytvorenieZavazkyInfo, uspesneVytvorene, uspesneAktualizovane, celkovaSuma);
        
        // Sk√∫s nastavi≈• do poƒæa Z√°v√§zky_Info ak existuje
        try {
            currentEntry.set(CONFIG.fields.zavazkyInfo, dochadzkallnfoText);
            addDebug("‚úÖ Info text ulo≈æen√Ω do poƒæa 'Z√°v√§zky_Info'");
        } catch (infoFieldError) {
            addDebug("‚ö†Ô∏è Pole 'Z√°v√§zky_Info' neexistuje - info text neulo≈æen√Ω");
        }
        
        return true;
        
    } catch (checkboxError) {
        addError("Chyba pri nastavovan√≠ checkbox/info: " + checkboxError.toString(), "setZavazkyCheckboxAndInfo");
        return false;
    }
}

// Hlavn√° funkcia - S PODPOROU UPDATE/CREATE LOGIKY + INFO TRACKING
function hlavnaFunkcia() {
    addDebug("üè¢ === ≈†TART DOCH√ÅDZKA ‚Üí Z√ÅV√ÑZKY SYNC (UPDATE/CREATE + INFO) ===");
    
    var currentEntry = entry();
    
    // Vyma≈æ predch√°dzaj√∫ce logy
    try {
        currentEntry.set(CONFIG.debugFieldName, "");
        currentEntry.set(CONFIG.errorFieldName, "");
    } catch (clearError) {
        // Ignoruj chybu vymaz√°vania
    }
    addDebug("üßπ Vymazan√© predch√°dzaj√∫ce logy");
    
    // Z√≠skaj z√°kladn√© √∫daje z Doch√°dzky
    var datumDochadzky = null;
    var zamestnanci = null;
    
    try {
        datumDochadzky = currentEntry.field(CONFIG.fields.datum);
        addDebug("üìÖ D√°tum doch√°dzky: " + (datumDochadzky ? moment(datumDochadzky).format("DD.MM.YYYY") : "CH√ùBA"));
    } catch (datumError) {
        addError("Chyba pri z√≠skavan√≠ d√°tumu: " + datumError.toString(), "datum");
    }
    
    try {
        zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci);
        addDebug("üë• Zamestnanci: " + (zamestnanci ? zamestnanci.length + " os√¥b" : "CH√ùBA"));
    } catch (zamestnancilError) {
        addError("Chyba pri z√≠skavan√≠ zamestnancov: " + zamestnancilError.toString(), "zamestnanci");
    }
    
    // Valid√°cia z√°kladn√Ωch √∫dajov
    if (!datumDochadzky) {
        addError("D√°tum doch√°dzky nie je vyplnen√Ω", "validacia");
        saveLogs();
        message("‚ùå Chyba: D√°tum doch√°dzky nie je vyplnen√Ω");
        return;
    }
    
    if (!zamestnanci || zamestnanci.length === 0) {
        addDebug("‚ö†Ô∏è ≈Ωiadni zamestnanci - ukonƒçujem");
        saveLogs();
        message("‚ÑπÔ∏è ≈Ωiadni zamestnanci na spracovanie");
        return;
    }
    
    // Z√≠skaj kni≈ænicu Z√°v√§zky
    var zavazkyLib = null;
    try {
        zavazkyLib = libByName(CONFIG.zavazkyLibrary);
        if (!zavazkyLib) {
            addError("Kni≈ænica '" + CONFIG.zavazkyLibrary + "' neexistuje", "library");
            saveLogs();
            message("‚ùå Chyba: Kni≈ænica Z√°v√§zky neexistuje");
            return;
        }
        addDebug("‚úÖ Kni≈ænica '" + CONFIG.zavazkyLibrary + "' naƒç√≠tan√°");
    } catch (libError) {
        addError("Chyba pri naƒç√≠tan√≠ kni≈ænice: " + libError.toString(), "library");
        saveLogs();
        message("‚ùå Chyba: Nepodarilo sa naƒç√≠ta≈• kni≈ænicu Z√°v√§zky");
        return;
    }
    
    // N√°jdi existuj√∫ce z√°v√§zky pre tento z√°znam doch√°dzky
    var existujuceZavazky = findExistingZavazky(currentEntry);
    
    // Spracuj ka≈æd√©ho zamestnanca - UPDATE alebo CREATE
    addDebug("\nüíº === SYNCHRONIZ√ÅCIA Z√ÅV√ÑZKOV (UPDATE/CREATE + INFO) ===");
    
    var uspesneVytvorene = 0;
    var uspesneAktualizovane = 0;
    var chyby = 0;
    var celkovaSuma = 0;
    
    for (var i = 0; i < zamestnanci.length; i++) {
        var zamestnanec = zamestnanci[i];
        addDebug("\n--- Zamestnanec " + (i + 1) + "/" + zamestnanci.length + " ---");
        
        if (!zamestnanec) {
            addError("Zamestnanec na poz√≠cii " + i + " je null", "zamestnanec_" + i);
            chyby++;
            continue;
        }
        
        try {
            // Z√≠skaj inform√°cie o zamestnancovi
            var menoZamestnanca = getMenoZamestnanca(zamestnanec);
            var sumaZamestnanca = getSumaZamestnanca(zamestnanec);
            
            addDebug("üë§ " + menoZamestnanca);
            addDebug("üí∞ Suma: " + sumaZamestnanca.toFixed(2) + " ‚Ç¨");
            
            // N√°jdi existuj√∫ci z√°v√§zok pre tohto zamestnanca
            var existujuciZavazok = findZavazokForEmployee(existujuceZavazky, zamestnanec);
            
            if (existujuciZavazok) {
                // === AKTUALIZUJ EXISTUJ√öCI Z√ÅV√ÑZOK ===
                addDebug("üîÑ Existuj√∫ci z√°v√§zok n√°jden√Ω - aktualizujem");
                
                var updateSuccess = updateExistingZavazok(
                    existujuciZavazok,
                    zamestnanec,
                    datumDochadzky,
                    sumaZamestnanca,
                    menoZamestnanca,
                    currentEntry
                );
                
                if (updateSuccess) {
                    uspesneAktualizovane++;
                    celkovaSuma += sumaZamestnanca;
                } else {
                    chyby++;
                }
                
            } else {
                // === VYTVOR NOV√ù Z√ÅV√ÑZOK ===
                addDebug("‚ûï Existuj√∫ci z√°v√§zok nen√°jden√Ω - vytv√°rram nov√Ω");
                
                var createSuccess = createNewZavazok(
                    zavazkyLib,
                    zamestnanec,
                    datumDochadzky,
                    sumaZamestnanca,
                    menoZamestnanca,
                    currentEntry
                );
                
                if (createSuccess) {
                    uspesneVytvorene++;
                    celkovaSuma += sumaZamestnanca;
                } else {
                    chyby++;
                }
            }
            
        } catch (processError) {
            addError("Chyba pri spracovan√≠ zamestnanca " + getMenoZamestnanca(zamestnanec) + ": " + processError.toString(), "process_zamestnanec_" + i);
            chyby++;
        }
    }
    
    // Nastav checkbox a info ak bola synchroniz√°cia √∫spe≈°n√°
    var totalUspesnych = uspesneVytvorene + uspesneAktualizovane;
    if (totalUspesnych > 0) {
        addDebug("\nüìù === NASTAVOVANIE CHECKBOX A INFO ===");
        
        var checkboxSuccess = setZavazkyCheckboxAndInfo(
            currentEntry,
            datumDochadzky,
            vytvorenieZavazkyInfo,
            uspesneVytvorene,
            uspesneAktualizovane,
            celkovaSuma
        );
        
        if (checkboxSuccess) {
            addDebug("‚úÖ Checkbox a info √∫spe≈°ne nastaven√©");
        } else {
            addDebug("‚ö†Ô∏è Probl√©m pri nastavovan√≠ checkbox/info");
        }
    }
    
    // Finaliz√°cia a spr√°va
    addDebug("\nüìä === V√ùSLEDKY SYNCHRONIZ√ÅCIE ===");
    addDebug("‚úÖ Nov√Ωch z√°znamov: " + uspesneVytvorene);
    addDebug("üîÑ Aktualizovan√Ωch z√°znamov: " + uspesneAktualizovane);
    addDebug("‚ùå Ch√Ωb: " + chyby);
    addDebug("üë• Celkovo spracovan√Ωch: " + zamestnanci.length);
    addDebug("üí∞ Celkov√° suma z√°v√§zkov: " + celkovaSuma.toFixed(2) + " ‚Ç¨");
    addDebug("üìã Existuj√∫cich z√°v√§zkov na zaƒçiatku: " + existujuceZavazky.length);
    addDebug("üìù Vytvoren√Ωch info z√°znamov: " + vytvorenieZavazkyInfo.length);
    
    saveLogs();
    
    // User notification
    var finalMessage = "";
    
    if (totalUspesnych > 0) {
        finalMessage = "‚úÖ Z√ÅV√ÑZKY √öSPE≈†NE SYNCHRONIZOVAN√â!\n\n";
        finalMessage += "üìä V√ùSLEDKY:\n";
        finalMessage += "‚ûï Nov√Ωch z√°znamov: " + uspesneVytvorene + "\n";
        finalMessage += "üîÑ Aktualizovan√Ωch: " + uspesneAktualizovane + "\n";
        finalMessage += "üë• Z celkovo: " + zamestnanci.length + " zamestnancov\n";
        finalMessage += "üí∞ Celkov√° suma: " + celkovaSuma.toFixed(2) + " ‚Ç¨\n";
        finalMessage += "üìÖ D√°tum: " + moment(datumDochadzky).format("DD.MM.YYYY") + "\n\n";
        
        finalMessage += "‚úÖ CHECKBOX 'Z√ÅV√ÑZKY' OZNAƒåEN√ù\n";
        finalMessage += "üìù INFO O Z√ÅV√ÑZKOCH ULO≈ΩEN√â\n\n";
        
        if (chyby > 0) {
            finalMessage += "‚ö†Ô∏è Chyby: " + chyby + " (pozrite Error_Log)\n\n";
        }
        
        finalMessage += "üîó AKT√çVNE FUNKCIE:\n";
        finalMessage += "‚Ä¢ ‚úÖ Automatick√° detekcia duplicitov\n";
        finalMessage += "‚Ä¢ ‚úÖ Podpora √∫prav z√°znamov\n";
        finalMessage += "‚Ä¢ ‚úÖ Finanƒçn√© polia (Suma, Zaplaten√©, Zostatok)\n";
        finalMessage += "‚Ä¢ ‚úÖ Info tracking v oboch kni≈æniciach\n";
        finalMessage += "‚Ä¢ ‚úÖ Checkbox oznaƒçenie\n\n";
        
        if (uspesneVytvorene > 0) {
            finalMessage += "üí∞ NOV√â Z√ÅV√ÑZKY:\n";
            finalMessage += "‚Ä¢ Zaplaten√©: 0 ‚Ç¨ (nov√© z√°v√§zky)\n";
            finalMessage += "‚Ä¢ Zostatok: = Suma (nepreplaten√©)\n\n";
        }
        
        if (uspesneAktualizovane > 0) {
            finalMessage += "üîÑ AKTUALIZOVAN√â Z√ÅV√ÑZKY:\n";
            finalMessage += "‚Ä¢ Zaplaten√©: zachovan√©\n";
            finalMessage += "‚Ä¢ Zostatok: prepoƒç√≠tan√© (Suma - Zaplaten√©)\n\n";
        }
        
        finalMessage += "üìã Pre detailn√© inform√°cie o ka≈ædom z√°v√§zku\n";
        finalMessage += "pozrite z√°znamy v kni≈ænici Z√°v√§zky";
        
    } else {
        finalMessage = "‚ùå NEPODARILO SA VYTVORI≈§ ANI AKTUALIZOVA≈§ ≈ΩIADNE Z√ÅV√ÑZKY!\n\n";
        if (errorLog.length > 0) {
            finalMessage += "üîç Pozrite Error_Log pre detaily ch√Ωb.\n";
        }
        finalMessage += "üîÑ Sk√∫ste synchroniz√°ciu znovu alebo\n";
        finalMessage += "skontrolujte √∫daje zamestnancov.";
    }
    
    message(finalMessage);
    addDebug("üèÅ Synchroniz√°cia z√°v√§zkov dokonƒçen√°");
}

// Spustenie scriptu
addDebug("=== INICIALIZ√ÅCIA DOCH√ÅDZKA ‚Üí Z√ÅV√ÑZKY SYNC (S INFO TRACKING) ===");
addDebug("Verzia: JavaScript 1.7 kompatibiln√° s UPDATE/CREATE + finanƒçn√© polia + info tracking");
addDebug("Nov√© funkcie: Roz≈°√≠ren√© info texty, Checkbox oznaƒçenie, Tracking vytvoren√Ωch z√°v√§zkov");
addDebug("Trigger: After Save (podporuje aj √∫pravy z√°znamov)");
addDebug("Timestamp: " + moment().format("DD.MM.YY HH:mm:ss"));

try {
    hlavnaFunkcia();
} catch (kritickachyba) {
    addError("KRITICK√Å CHYBA: " + kritickachyba.toString(), "main");
    saveLogs();
    message("‚ùå KRITICK√Å CHYBA! Pozrite Error_Log.");
}