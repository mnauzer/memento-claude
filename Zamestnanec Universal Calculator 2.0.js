// ==============================================
// MEMENTO DATABASE - UNIVERZ√ÅLNY PREPOƒåET ZAMESTNANCA
// Verzia: 2.0 | D√°tum: 28.09.2025 | Autor: ASISTANTO
// Kni≈ænica: Zamestnanci | Trigger: Before Save
// ==============================================
// ‚úÖ NOV√â v2.0: KOMPLETN√Å REFAKTORIZ√ÅCIA
//    - Integr√°cia s MementoUtils frameworkom
//    - Opraven√© filtre v√Ωberu obdobia
//    - Centralizovan√© d√°tov√© objekty
//    - Optimalizovan√© spracovanie
//    - Konzistentn√° ≈°trukt√∫ra k√≥du
//    - Nov√© addInfo funkcie
// ==============================================

// ==============================================
// MODUL IMPORTS A INICIALIZ√ÅCIA
// ==============================================

// Jednoduch√© import v≈°etk√©ho cez MementoUtils (rovnako ako Doch√°dzka Prepoƒçet)
var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var core = MementoCore;
var business = MementoBusiness;
var currentEntry = entry();

// ==============================================
// SCRIPT KONFIGUR√ÅCIA
// ==============================================

var CONFIG = {
    // Script ≈°pecifick√© nastavenia
    scriptName: "Zamestnanec Universal Calculator",
    version: "2.0",

    // Referencie na centr√°lny config
    fields: centralConfig.fields,
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,

    debug: true
};

// ==============================================
// CENTRALIZOVAN√ù D√ÅTOV√ù OBJEKT
// ==============================================

var EmployeeCalculationData = {
    // Z√°kladn√© info o zamestnancovi
    employee: {
        entry: null,
        nick: "",
        fullName: "",
        currentHourlyRate: 0
    },

    // Filtre pre spracovanie
    filters: {
        selection: null,    // Filter pre filtrovan√© polia
        total: null        // Filter pre total polia
    },

    // V√Ωsledky spracovan√Ωch kni≈æn√≠c - FILTROVAN√â √∫daje
    filtered: {
        attendance: { worked: 0, earned: 0, records: 0 },
        workRecords: { worked: 0, records: 0 },
        drivingLog: { hours: 0, records: 0 },
        cashRegister: { paid: 0, premium: 0, records: 0 },
        receivables: { amount: 0, records: 0 },
        liabilities: { amount: 0, records: 0 }
    },

    // V√Ωsledky spracovan√Ωch kni≈æn√≠c - TOTAL √∫daje
    total: {
        attendance: { worked: 0, earned: 0, records: 0 },
        workRecords: { worked: 0, records: 0 },
        drivingLog: { hours: 0, records: 0 },
        cashRegister: { paid: 0, premium: 0, records: 0 }
    },

    // Fin√°lne vypoƒç√≠tan√© hodnoty
    calculated: {
        balance: 0,              // Saldo = Pohƒæad√°vky - Z√°v√§zky
        paymentDifference: 0     // Preplatok/Nedoplatok = Zaroben√© - Vyplaten√©
    },

    // ≈†tatistiky spracovania
    statistics: {
        totalLibraries: 0,
        processedLibraries: 0,
        savedFields: 0,
        errors: 0
    },

    // Met√≥dy pre pr√°cu s objektom
    addFilteredResult: function(libraryName, data) {
        if (this.filtered[libraryName]) {
            Object.assign(this.filtered[libraryName], data);
        }
    },

    addTotalResult: function(libraryName, data) {
        if (this.total[libraryName]) {
            Object.assign(this.total[libraryName], data);
        }
    },

    calculateFinalValues: function() {
        this.calculated.balance = this.filtered.receivables.amount - this.filtered.liabilities.amount;
        this.calculated.paymentDifference = this.filtered.attendance.earned - this.filtered.cashRegister.paid;
    },

    getSummary: function() {
        return {
            employee: this.employee.fullName,
            filters: {
                selection: this.filters.selection ? this.filters.selection.popis : "N/A",
                total: this.filters.total ? this.filters.total.popis : "N/A"
            },
            totals: {
                workedHours: this.filtered.attendance.worked,
                earnedAmount: this.filtered.attendance.earned,
                paidAmount: this.filtered.cashRegister.paid,
                balance: this.calculated.balance,
                paymentDifference: this.calculated.paymentDifference
            },
            statistics: this.statistics
        };
    }
};

// ==============================================
// FILTER SPRACOVANIE - OPRAVEN√â
// ==============================================

function parseFilterDateRange(filterText) {
    utils.addDebug(currentEntry, "üìÖ Parsovanie d√°tumov√©ho filtra: '" + filterText + "'", "filter");

    if (!filterText) {
        return { isValid: false, reason: "Pr√°zdny filter" };
    }

    var cleanFilter = filterText.trim().toLowerCase();
    var now = moment();

    // TEXTOV√â V√ùRAZY - roz≈°√≠ren√© o nov√© mo≈ænosti
    var textualPatterns = {
        // ROƒåN√â FILTRE
        "tento rok": {
            type: "yearly",
            year: now.year(),
            popis: "tento rok (" + now.year() + ")"
        },
        "minul√Ω rok": {
            type: "yearly",
            year: now.year() - 1,
            popis: "minul√Ω rok (" + (now.year() - 1) + ")"
        },

        // MESAƒåN√â FILTRE
        "tento mesiac": {
            type: "monthly",
            month: now.month() + 1,
            year: now.year(),
            popis: "tento mesiac (" + (now.month() + 1) + "/" + now.year() + ")"
        },
        "minul√Ω mesiac": {
            type: "monthly",
            month: now.month() === 0 ? 12 : now.month(),
            year: now.month() === 0 ? now.year() - 1 : now.year(),
            popis: "minul√Ω mesiac"
        },

        // T√ù≈ΩDENN√â FILTRE (pondelok ako zaƒçiatok)
        "tento t√Ω≈æde≈à": {
            type: "range",
            startDate: now.clone().startOf('isoWeek'),
            endDate: now.clone().endOf('isoWeek'),
            popis: "tento t√Ω≈æde≈à"
        },
        "minul√Ω t√Ω≈æde≈à": {
            type: "range",
            startDate: now.clone().subtract(1, 'week').startOf('isoWeek'),
            endDate: now.clone().subtract(1, 'week').endOf('isoWeek'),
            popis: "minul√Ω t√Ω≈æde≈à"
        },

        // ≈†PECI√ÅLNE FILTRE
        "total": {
            type: "all",
            popis: "v≈°etky z√°znamy (bez filtra)"
        },
        "v≈°etko": {
            type: "all",
            popis: "v≈°etky z√°znamy (bez filtra)"
        },
        "vsetko": {
            type: "all",
            popis: "v≈°etky z√°znamy (bez filtra)"
        }
    };

    // Skontroluj textov√© v√Ωrazy
    if (textualPatterns[cleanFilter]) {
        var pattern = textualPatterns[cleanFilter];
        utils.addDebug(currentEntry, "‚úÖ Rozpoznan√Ω textov√Ω filter: " + cleanFilter, "success");
        return {
            isValid: true,
            type: pattern.type,
            month: pattern.month,
            year: pattern.year,
            startDate: pattern.startDate,
            endDate: pattern.endDate,
            popis: pattern.popis
        };
    }

    // ƒå√çSELN√â FORM√ÅTY: MM/YYYY, YYYY, MM/YY
    var numericPatterns = [
        /^(\d{1,2})[\/\.](\d{4})$/, // MM/YYYY alebo MM.YYYY
        /^(\d{4})$/,                // YYYY
        /^(\d{1,2})[\/\.](\d{2})$/  // MM/YY
    ];

    for (var i = 0; i < numericPatterns.length; i++) {
        var match = filterText.trim().match(numericPatterns[i]);
        if (match) {
            if (i === 0) { // MM/YYYY
                return {
                    isValid: true,
                    month: parseInt(match[1]),
                    year: parseInt(match[2]),
                    type: "monthly",
                    popis: "mesiac " + match[1] + "/" + match[2]
                };
            } else if (i === 1) { // YYYY
                return {
                    isValid: true,
                    year: parseInt(match[1]),
                    type: "yearly",
                    popis: "rok " + match[1]
                };
            } else if (i === 2) { // MM/YY
                var fullYear = parseInt(match[2]) + 2000;
                return {
                    isValid: true,
                    month: parseInt(match[1]),
                    year: fullYear,
                    type: "monthly",
                    popis: "mesiac " + match[1] + "/" + fullYear
                };
            }
        }
    }

    return {
        isValid: false,
        reason: "Neplatn√Ω form√°t. Podporovan√©: 'Tento rok', 'Tento mesiac', 'Tento t√Ω≈æde≈à', 'Total', 'MM/YYYY', 'YYYY'"
    };
}

function dateMatchesFilter(datum, filter) {
    if (!datum || !filter || !filter.isValid) return false;

    // ≈†peci√°lny pr√≠pad pre "total" filter - zahrn√∫≈• v≈°etko
    if (filter.type === "all") return true;

    var recordDate = moment(datum);
    if (!recordDate.isValid()) return false;

    if (filter.type === "yearly") {
        return recordDate.year() === filter.year;
    } else if (filter.type === "monthly") {
        return recordDate.year() === filter.year && (recordDate.month() + 1) === filter.month;
    } else if (filter.type === "range") {
        return recordDate.isBetween(filter.startDate, filter.endDate, 'day', '[]');
    }

    return false;
}

// ==============================================
// UNIVERZ√ÅLNE SPRACOVANIE KNI≈ΩN√çC
// ==============================================

function processLibraryData(employeeEntry, libraryName, fieldMappings, filter, isTotal) {
    var result = {
        success: false,
        data: {},
        recordsProcessed: 0,
        recordsTotal: 0,
        errors: 0
    };

    try {
        utils.addDebug(employeeEntry, "üóÉÔ∏è Spracovanie kni≈ænice: " + libraryName + " (" + (isTotal ? "TOTAL" : "FILTERED") + ")", "database");

        // Z√≠skaj z√°znamy cez utils.safeGetLinksTo (opraven√° funkcia)
        var linksFromField = fieldMappings.linksFromField;
        var records = utils.safeGetLinksTo(employeeEntry, libraryName, linksFromField);

        if (!records || records.length === 0) {
            utils.addDebug(employeeEntry, "‚ö†Ô∏è ≈Ωiadne z√°znamy v kni≈ænici " + libraryName, "warning");
            result.success = true;
            return result;
        }

        result.recordsTotal = records.length;
        var processedData = {};

        // Inicializuj v≈°etky hodnoty na 0
        for (var key in fieldMappings.dataFields) {
            processedData[key] = 0;
        }

        // Spracuj ka≈æd√Ω z√°znam
        for (var i = 0; i < records.length; i++) {
            try {
                var record = records[i];
                var dateValue = utils.safeGet(record, fieldMappings.dateField);

                // OPRAVEN√â: Pou≈æ√≠vaj spr√°vny filter podƒæa typu
                var shouldInclude = dateMatchesFilter(dateValue, filter);

                if (shouldInclude) {
                    // Spracuj v≈°etky nakonfigurovan√© polia
                    for (var fieldKey in fieldMappings.dataFields) {
                        var fieldName = fieldMappings.dataFields[fieldKey];
                        var fieldValue = utils.safeGet(record, fieldName, 0);

                        // ≈†peci√°lne spracovanie pre poklad≈àa (v√Ωdavky)
                        if (libraryName === CONFIG.libraries.cashBook) {
                            var purpose = utils.safeGet(record, "√öƒçel v√Ωdaja", "");
                            var recordType = utils.safeGet(record, "Typ", ""); // Pr√≠jem/V√Ωdavok

                            // Spracov√°vaj len v√Ωdavky
                            if (recordType !== "V√Ωdavok") {
                                continue;
                            }

                            // Pre pole "paid" (vyplaten√©) - len Mzda a Mzda z√°loha
                            if (fieldKey === "paid") {
                                if (purpose !== "Mzda" && purpose !== "Mzda z√°loha") {
                                    continue; // Preskoƒçi≈• tento z√°znam pre vyplaten√©
                                }
                            }

                            // Pre pole "premium" (pr√©mie) - len Mzda pr√©mia
                            if (fieldKey === "premium") {
                                if (purpose !== "Mzda pr√©mia") {
                                    continue; // Preskoƒçi≈• tento z√°znam pre pr√©mie
                                }
                            }
                        }

                        processedData[fieldKey] += fieldValue;
                    }
                    result.recordsProcessed++;
                }
            } catch (recordError) {
                result.errors++;
                utils.addError(employeeEntry, "Chyba pri spracovan√≠ z√°znamu " + i + " v " + libraryName + ": " + recordError.toString(), "LibraryProcessor");
            }
        }

        result.data = processedData;
        result.success = true;

        utils.addDebug(employeeEntry, "üìä Spracovan√Ωch z√°znamov: " + result.recordsProcessed + "/" + result.recordsTotal, "calculation");

    } catch (error) {
        result.errors++;
        utils.addError(employeeEntry, "Chyba pri spracovan√≠ kni≈ænice " + libraryName + ": " + error.toString(), "LibraryProcessor");
    }

    return result;
}

// ==============================================
// KONFIGUR√ÅCIA KNI≈ΩN√çC A POL√ç
// ==============================================

function getLibraryMappings() {
    return {
        attendance: {
            linksFromField: CONFIG.fields.attendance.employees,
            dateField: CONFIG.fields.attendance.date,
            dataFields: {
                worked: CONFIG.fields.attendance.workTime,
                // earned sa poƒç√≠ta z atrib√∫tu "denn√° mzda"
            }
        },
        workRecords: {
            linksFromField: CONFIG.fields.workRecord.employees,
            dateField: CONFIG.fields.workRecord.date,
            dataFields: {
                worked: CONFIG.fields.workRecord.workTime
            }
        },
        drivingLog: {
            linksFromField: CONFIG.fields.rideLog.crew,
            dateField: CONFIG.fields.rideLog.date,
            dataFields: {
                hours: CONFIG.fields.rideLog.totalTime
            }
        },
        cashRegister: {
            linksFromField: "Zamestnanec", // Pole v kni≈ænici Poklad≈àa
            dateField: CONFIG.fields.cashBook.date,
            dataFields: {
                paid: CONFIG.fields.cashBook.amount,
                premium: CONFIG.fields.cashBook.amount
            }
        },
        receivables: {
            linksFromField: "Zamestnanec", // Pole v kni≈ænici Pohƒæad√°vky
            dateField: CONFIG.fields.receivables.date,
            dataFields: {
                amount: CONFIG.fields.receivables.balance // Zostatok namiesto remainingAmount
            }
        },
        liabilities: {
            linksFromField: "Zamestnanec", // Pole v kni≈ænici Z√°v√§zky
            dateField: CONFIG.fields.obligations.date,
            dataFields: {
                amount: CONFIG.fields.obligations.balance // Zostatok namiesto remainingAmount
            }
        }
    };
}

// ==============================================
// Z√çSKANIE AKTU√ÅLNEJ HODINOVKY
// ==============================================

function getCurrentHourlyRate(employeeEntry) {
    utils.addDebug(employeeEntry, "üí∞ V√Ωpoƒçet aktu√°lnej hodinovky", "money");

    try {
        // Pou≈æij utils.findValidHourlyRate (opraven√° funkcia)
        var hodinovka = utils.findValidHourlyRate(employeeEntry, new Date());

        if (!hodinovka || hodinovka <= 0) {
            utils.addDebug(employeeEntry, "‚ö†Ô∏è Nen√°jden√° platn√° sadzba pre zamestnanca", "warning");
            return 0;
        }

        utils.addDebug(employeeEntry, "‚úÖ Aktu√°lna hodinovka: " + hodinovka + " ‚Ç¨/h", "money");
        return parseFloat(hodinovka).toFixed(2);

    } catch (error) {
        utils.addError(employeeEntry, "Chyba pri z√≠skavan√≠ hodinovky: " + error.toString(), "getCurrentHourlyRate");
    }

    return 0;
}

// ==============================================
// HLAVN√Å FUNKCIONALITA
// ==============================================

function processAttendanceEarnings(employeeEntry, filter, isTotal) {
    var result = {
        worked: 0,
        earned: 0,
        recordsProcessed: 0,
        recordsTotal: 0,
        errors: 0
    };

    try {
        var attendanceRecords = utils.safeGetLinksTo(employeeEntry, CONFIG.libraries.attendance, CONFIG.fields.attendance.employees);

        if (!attendanceRecords || attendanceRecords.length === 0) {
            return result;
        }

        result.recordsTotal = attendanceRecords.length;

        for (var i = 0; i < attendanceRecords.length; i++) {
            try {
                var record = attendanceRecords[i];
                var dateValue = utils.safeGet(record, CONFIG.fields.attendance.date);
                var workedHours = utils.safeGet(record, CONFIG.fields.attendance.workTime, 0);

                if (dateMatchesFilter(dateValue, filter)) {
                    result.worked += workedHours;

                    // Z√≠skaj denn√∫ mzdu z atrib√∫tu
                    try {
                        var dailyWage = record.attr("denn√° mzda") || 0;
                        result.earned += dailyWage;
                    } catch (attrError) {
                        // Ak atrib√∫t nie je dostupn√Ω, pokraƒçuj bez neho
                    }

                    result.recordsProcessed++;
                }
            } catch (recordError) {
                result.errors++;
            }
        }

    } catch (error) {
        result.errors++;
        utils.addError(employeeEntry, "Chyba pri spracovan√≠ doch√°dzky: " + error.toString(), "AttendanceProcessor");
    }

    return result;
}

function processAllLibraries() {
    var mappings = getLibraryMappings();

    // Spracuj v≈°etky kni≈ænice pre filtrovan√© √∫daje
    var attendanceFiltered = processAttendanceEarnings(EmployeeCalculationData.employee.entry, EmployeeCalculationData.filters.selection, false);
    EmployeeCalculationData.addFilteredResult('attendance', attendanceFiltered);

    var workRecordsFiltered = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.workRecords,
        mappings.workRecords,
        EmployeeCalculationData.filters.selection,
        false
    );
    EmployeeCalculationData.addFilteredResult('workRecords', workRecordsFiltered.data);
    EmployeeCalculationData.filtered.workRecords.records = workRecordsFiltered.recordsTotal;

    var drivingLogFiltered = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.rideLog,
        mappings.drivingLog,
        EmployeeCalculationData.filters.selection,
        false
    );
    EmployeeCalculationData.addFilteredResult('drivingLog', drivingLogFiltered.data);
    EmployeeCalculationData.filtered.drivingLog.records = drivingLogFiltered.recordsTotal;

    var cashRegisterFiltered = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.cashBook,
        mappings.cashRegister,
        EmployeeCalculationData.filters.selection,
        false
    );
    EmployeeCalculationData.addFilteredResult('cashRegister', cashRegisterFiltered.data);
    EmployeeCalculationData.filtered.cashRegister.records = cashRegisterFiltered.recordsTotal;

    var receivablesFiltered = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.receivables,
        mappings.receivables,
        EmployeeCalculationData.filters.selection,
        false
    );
    EmployeeCalculationData.addFilteredResult('receivables', receivablesFiltered.data);
    EmployeeCalculationData.filtered.receivables.records = receivablesFiltered.recordsTotal;

    var liabilitiesFiltered = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.obligations,
        mappings.liabilities,
        EmployeeCalculationData.filters.selection,
        false
    );
    EmployeeCalculationData.addFilteredResult('liabilities', liabilitiesFiltered.data);
    EmployeeCalculationData.filtered.liabilities.records = liabilitiesFiltered.recordsTotal;

    // Spracuj kni≈ænice pre total √∫daje (pou≈æ√≠va total filter)
    var attendanceTotal = processAttendanceEarnings(EmployeeCalculationData.employee.entry, EmployeeCalculationData.filters.total, true);
    EmployeeCalculationData.addTotalResult('attendance', attendanceTotal);

    var workRecordsTotal = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.workRecords,
        mappings.workRecords,
        EmployeeCalculationData.filters.total,
        true
    );
    EmployeeCalculationData.addTotalResult('workRecords', workRecordsTotal.data);
    EmployeeCalculationData.total.workRecords.records = workRecordsTotal.recordsTotal;

    var drivingLogTotal = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.rideLog,
        mappings.drivingLog,
        EmployeeCalculationData.filters.total,
        true
    );
    EmployeeCalculationData.addTotalResult('drivingLog', drivingLogTotal.data);
    EmployeeCalculationData.total.drivingLog.records = drivingLogTotal.recordsTotal;

    var cashRegisterTotal = processLibraryData(
        EmployeeCalculationData.employee.entry,
        CONFIG.libraries.cashBook,
        mappings.cashRegister,
        EmployeeCalculationData.filters.total,
        true
    );
    EmployeeCalculationData.addTotalResult('cashRegister', cashRegisterTotal.data);
    EmployeeCalculationData.total.cashRegister.records = cashRegisterTotal.recordsTotal;
}

function updateEmployeeFields() {
    var employeeEntry = EmployeeCalculationData.employee.entry;

    // Definuj v≈°etky polia na aktualiz√°ciu s zaokr√∫hƒæovan√≠m
    var fieldsToUpdate = [
        // Filtrovan√© √∫daje (pou≈æ√≠va filter v√Ωber obdobia) - zaokr√∫hli≈• na 2 desatinn√© miesta
        ["Odpracovan√©", parseFloat(EmployeeCalculationData.filtered.attendance.worked).toFixed(2)],
        ["Na z√°kazk√°ch", parseFloat(EmployeeCalculationData.filtered.workRecords.worked).toFixed(2)],
        ["Jazdy", parseFloat(EmployeeCalculationData.filtered.drivingLog.hours).toFixed(2)],
        ["Zaroben√©", parseFloat(EmployeeCalculationData.filtered.attendance.earned).toFixed(2)],
        ["Vyplaten√©", parseFloat(EmployeeCalculationData.filtered.cashRegister.paid).toFixed(2)],
        ["Pr√©mie", parseFloat(EmployeeCalculationData.filtered.cashRegister.premium).toFixed(2)],

        // Total √∫daje (pou≈æ√≠va filter obdobie total) - zaokr√∫hli≈• na 2 desatinn√© miesta
        ["Odpracovan√© total", parseFloat(EmployeeCalculationData.total.attendance.worked).toFixed(2)],
        ["Na z√°kazk√°ch total", parseFloat(EmployeeCalculationData.total.workRecords.worked).toFixed(2)],
        ["Jazdy total", parseFloat(EmployeeCalculationData.total.drivingLog.hours).toFixed(2)],
        ["Zaroben√© total", parseFloat(EmployeeCalculationData.total.attendance.earned).toFixed(2)],
        ["Vyplaten√© total", parseFloat(EmployeeCalculationData.total.cashRegister.paid).toFixed(2)],
        ["Pr√©mie total", parseFloat(EmployeeCalculationData.total.cashRegister.premium).toFixed(2)],

        // Financie (pou≈æ√≠vaj√∫ filter v√Ωber obdobia) - zaokr√∫hli≈• na 2 desatinn√© miesta
        ["Pohƒæad√°vky", parseFloat(EmployeeCalculationData.filtered.receivables.amount).toFixed(2)],
        ["Z√°v√§zky", parseFloat(EmployeeCalculationData.filtered.liabilities.amount).toFixed(2)],
        ["Saldo", parseFloat(EmployeeCalculationData.calculated.balance).toFixed(2)],
        ["Preplatok/Nedoplatok", parseFloat(EmployeeCalculationData.calculated.paymentDifference).toFixed(2)],

        // Ostatn√© √∫daje
        ["Aktu√°lna hodinovka", EmployeeCalculationData.employee.currentHourlyRate]
    ];

    var savedFields = 0;
    for (var i = 0; i < fieldsToUpdate.length; i++) {
        try {
            utils.safeSet(employeeEntry, fieldsToUpdate[i][0], fieldsToUpdate[i][1]);
            savedFields++;
        } catch (saveError) {
            utils.addError(employeeEntry, "Chyba pri ulo≈æen√≠ poƒæa '" + fieldsToUpdate[i][0] + "': " + saveError.toString(), "FieldUpdater");
            EmployeeCalculationData.statistics.errors++;
        }
    }

    EmployeeCalculationData.statistics.savedFields = savedFields;

    utils.addDebug(employeeEntry, "üíæ Ulo≈æen√Ωch pol√≠: " + savedFields + "/" + fieldsToUpdate.length, "success");

    return savedFields === fieldsToUpdate.length;
}

function createInfoRecord() {
    try {
        var employeeEntry = EmployeeCalculationData.employee.entry;
        var summary = EmployeeCalculationData.getSummary();

        // ≈†t√Ωl ako Doch√°dzka Prepoƒçet - priamy form√°t
        var infoMessage = "üìã ZAMESTNANEC - PREPOƒåET DOKONƒåEN√ù\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

        infoMessage += "üë§ Zamestnanec: " + summary.employee + "\n";
        infoMessage += "üîç Filter (filtrovan√©): " + summary.filters.selection + "\n";
        infoMessage += "üîç Filter (total): " + summary.filters.total + "\n\n";

        infoMessage += "üìä ODPRACOVAN√ù ƒåAS:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Odpracovan√©: " + summary.totals.workedHours.toFixed(2) + "h\n";
        infoMessage += "‚Ä¢ Odpracovan√© total: " + EmployeeCalculationData.total.attendance.worked.toFixed(2) + "h\n";
        infoMessage += "‚Ä¢ Na z√°kazk√°ch: " + EmployeeCalculationData.filtered.workRecords.worked.toFixed(2) + "h\n";
        infoMessage += "‚Ä¢ Na z√°kazk√°ch total: " + EmployeeCalculationData.total.workRecords.worked.toFixed(2) + "h\n";
        infoMessage += "‚Ä¢ Jazdy: " + EmployeeCalculationData.filtered.drivingLog.hours.toFixed(2) + "h\n";
        infoMessage += "‚Ä¢ Jazdy total: " + EmployeeCalculationData.total.drivingLog.hours.toFixed(2) + "h\n\n";

        infoMessage += "üí∞ MZDY A FINANCIE:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Aktu√°lna hodinovka: " + parseFloat(EmployeeCalculationData.employee.currentHourlyRate).toFixed(2) + " ‚Ç¨/h\n";
        infoMessage += "‚Ä¢ Zaroben√©: " + parseFloat(summary.totals.earnedAmount).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Zaroben√© total: " + parseFloat(EmployeeCalculationData.total.attendance.earned).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Vyplaten√©: " + parseFloat(summary.totals.paidAmount).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Vyplaten√© total: " + parseFloat(EmployeeCalculationData.total.cashRegister.paid).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Pr√©mie: " + parseFloat(EmployeeCalculationData.filtered.cashRegister.premium).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Pr√©mie total: " + parseFloat(EmployeeCalculationData.total.cashRegister.premium).toFixed(2) + "‚Ç¨\n\n";

        infoMessage += "üìà POHƒΩAD√ÅVKY A Z√ÅV√ÑZKY (filter: v√Ωber obdobia):\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Pohƒæad√°vky (zostatok): " + parseFloat(EmployeeCalculationData.filtered.receivables.amount).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Z√°v√§zky (zostatok): " + parseFloat(EmployeeCalculationData.filtered.liabilities.amount).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Saldo = Pohƒæad√°vky - Z√°v√§zky: " + parseFloat(summary.totals.balance).toFixed(2) + "‚Ç¨\n\n";

        infoMessage += "üßÆ V√ùPOƒåTY:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Preplatok/Nedoplatok = Zaroben√© - Vyplaten√©\n";
        infoMessage += "‚Ä¢ " + parseFloat(summary.totals.earnedAmount).toFixed(2) + "‚Ç¨ - " + parseFloat(summary.totals.paidAmount).toFixed(2) + "‚Ç¨ = " + parseFloat(summary.totals.paymentDifference).toFixed(2) + "‚Ç¨\n";
        infoMessage += "‚Ä¢ Saldo = Pohƒæad√°vky - Z√°v√§zky (pou≈æ√≠va filter 'v√Ωber obdobia')\n";
        infoMessage += "‚Ä¢ " + parseFloat(EmployeeCalculationData.filtered.receivables.amount).toFixed(2) + "‚Ç¨ - " + parseFloat(EmployeeCalculationData.filtered.liabilities.amount).toFixed(2) + "‚Ç¨ = " + parseFloat(summary.totals.balance).toFixed(2) + "‚Ç¨\n\n";

        infoMessage += "üìä ≈†TATISTIKY Z√ÅZNAMOV:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Doch√°dzka: " + (EmployeeCalculationData.filtered.attendance.records || 0) + " z√°znamov\n";
        infoMessage += "‚Ä¢ Z√°znam pr√°c: " + (EmployeeCalculationData.filtered.workRecords.records || 0) + " z√°znamov\n";
        infoMessage += "‚Ä¢ Kniha j√°zd: " + (EmployeeCalculationData.filtered.drivingLog.records || 0) + " z√°znamov\n";
        infoMessage += "‚Ä¢ Pohƒæad√°vky: " + (EmployeeCalculationData.filtered.receivables.records || 0) + " z√°znamov\n";
        infoMessage += "‚Ä¢ Z√°v√§zky: " + (EmployeeCalculationData.filtered.liabilities.records || 0) + " z√°znamov\n";
        infoMessage += "‚Ä¢ Poklad≈àa (vyplaten√©): " + (EmployeeCalculationData.filtered.cashRegister.records || 0) + " z√°znamov (len Mzda + Mzda z√°loha)\n";
        infoMessage += "‚Ä¢ Poklad≈àa (pr√©mie): z√°znamy s 'Mzda pr√©mia'\n\n";

        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ ƒåas spracovania: " + moment().format("HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + (utils.version || "N/A") + "\n";

        if (typeof MementoConfig !== 'undefined') {
            infoMessage += "‚Ä¢ MementoConfig: v" + MementoConfig.version + "\n";
        }

        infoMessage += "\n‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE";

        utils.safeSet(employeeEntry, CONFIG.fields.common.info, infoMessage);

        utils.addDebug(employeeEntry, "‚úÖ Info z√°znam vytvoren√Ω", "success");

        return true;
    } catch (error) {
        utils.addError(employeeEntry, "Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString(), "createInfoRecord");
        return false;
    }
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Nastav z√°kladn√© √∫daje
        EmployeeCalculationData.employee.entry = currentEntry;

        utils.addDebug(currentEntry, "=== ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===", "start");
        utils.addDebug(currentEntry, "ƒåas spustenia: " + utils.formatDate(moment()), "calendar");

        // KROK 1: Z√≠skaj z√°kladn√© √∫daje zamestnanca
        utils.addDebug(currentEntry, " KROK 1: Naƒç√≠tanie z√°kladn√Ωch √∫dajov", "validation");

        var nick = utils.safeGet(currentEntry, "Nick");
        var firstName = utils.safeGet(currentEntry, "Meno", "");
        var lastName = utils.safeGet(currentEntry, "Priezvisko", "");
        var selectionPeriod = utils.safeGet(currentEntry, "v√Ωber obdobia", "");
        var totalPeriod = utils.safeGet(currentEntry, "obdobie total", "");

        if (!nick) {
            utils.addError(currentEntry, "Nick je povinn√Ω identifik√°tor", CONFIG.scriptName);
            return false;
        }

        EmployeeCalculationData.employee.nick = nick;
        EmployeeCalculationData.employee.fullName = nick + " (" + firstName + " " + lastName + ")";

        utils.addDebug(currentEntry, "üë§ Zamestnanec: " + EmployeeCalculationData.employee.fullName, "person");
        utils.addDebug(currentEntry, "üîç V√Ωber obdobia: '" + selectionPeriod + "'", "filter");
        utils.addDebug(currentEntry, "üîç Obdobie total: '" + totalPeriod + "'", "filter");

        // KROK 2: Spracuj filtre
        utils.addDebug(currentEntry, " KROK 2: Parsovanie d√°tumov√Ωch filtrov", "step");

        EmployeeCalculationData.filters.selection = parseFilterDateRange(selectionPeriod);
        EmployeeCalculationData.filters.total = parseFilterDateRange(totalPeriod);

        if (!EmployeeCalculationData.filters.selection.isValid) {
            utils.addError(currentEntry, "Neplatn√Ω filter 'v√Ωber obdobia': " + EmployeeCalculationData.filters.selection.reason, CONFIG.scriptName);
            return false;
        }

        if (!EmployeeCalculationData.filters.total.isValid) {
            utils.addError(currentEntry, "Neplatn√Ω filter 'obdobie total': " + EmployeeCalculationData.filters.total.reason, CONFIG.scriptName);
            return false;
        }

        utils.addDebug(currentEntry, "‚úÖ Filter pre filtrovan√© √∫spe≈°ne parsovan√Ω: " + EmployeeCalculationData.filters.selection.popis, "success");
        utils.addDebug(currentEntry, "‚úÖ Filter pre total √∫spe≈°ne parsovan√Ω: " + EmployeeCalculationData.filters.total.popis, "success");

        // KROK 3: Z√≠skaj aktu√°lnu hodinovku
        utils.addDebug(currentEntry, " KROK 3: V√Ωpoƒçet aktu√°lnej hodinovky", "step");
        EmployeeCalculationData.employee.currentHourlyRate = getCurrentHourlyRate(currentEntry);

        // KROK 4: Spracuj v≈°etky kni≈ænice
        utils.addDebug(currentEntry, " KROK 4: Spracovanie v≈°etk√Ωch kni≈æn√≠c", "step");
        processAllLibraries();

        // KROK 5: Vypoƒç√≠taj fin√°lne hodnoty
        utils.addDebug(currentEntry, " KROK 5: V√Ωpoƒçet fin√°lnych hodn√¥t", "step");
        EmployeeCalculationData.calculateFinalValues();

        // KROK 6: Aktualizuj polia zamestnanca
        utils.addDebug(currentEntry, " KROK 6: Aktualiz√°cia pol√≠ zamestnanca", "step");
        var updateSuccess = updateEmployeeFields();

        // KROK 7: Vytvor info z√°znam
        utils.addDebug(currentEntry, " KROK 7: Vytvorenie info z√°znamu", "step");
        var infoSuccess = createInfoRecord();

        // KROK 8: Fin√°lny debug
        utils.addDebug(currentEntry, "=== PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE ===", "success");
        utils.addDebug(currentEntry, "üìä Celkovo spracovan√Ωch kni≈æn√≠c: 6", "summary");
        var summary = EmployeeCalculationData.getSummary();
        utils.addDebug(currentEntry, "üí∞ Fin√°lne hodnoty: Saldo=" + summary.totals.balance.toFixed(2) + "‚Ç¨, Preplatok/Nedoplatok=" + summary.totals.paymentDifference.toFixed(2) + "‚Ç¨", "summary");

        return updateSuccess && infoSuccess;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v main(): " + error.toString(), CONFIG.scriptName);
        return false;
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();