// ==============================================
// MEMENTO DATABASE - DOCH√ÅDZKA PREPOƒå√çTA≈§ Z√ÅZNAM
// Verzia: 5.1 | D√°tum: August 2025 | Autor: ASISTANTO
// Kni≈ænica: Doch√°dzka | Trigger: Before Save
// ==============================================
// ‚úÖ OPRAVEN√â v5.1:
//    - Spr√°vne nastavovanie atrib√∫tov (2 parametre)
//    - Integr√°cia s MementoConfig v1.1
//    - Vylep≈°en√© lazy loading
//    - Konzistentn√© error handling
//    - Odstr√°nen√© duplicitn√© CONFIG sekcie
// ==============================================

// ==============================================
// MODULE LOADING A INICIALIZ√ÅCIA
// ==============================================

var utils = null;
var config = null;
var currentEntry = entry();

/**
 * Lazy loading pre MementoUtils
 */
function getUtils() {
    if (!utils) {
        if (typeof MementoUtils !== 'undefined') {
            utils = MementoUtils;
        } else {
            throw new Error("MementoUtils kni≈ænica nie je dostupn√°!");
        }
    }
    return utils;
}

/**
 * Lazy loading pre konfigur√°ciu
 */
function getConfig() {
    if (!config) {
        // Priorita 1: Centralizovan√Ω MementoConfig
        if (typeof MementoConfig !== 'undefined') {
            MementoConfig.init();
            var baseConfig = MementoConfig.getConfig('attendance');
            
            config = {
                debug: true,
                version: "5.1",
                scriptName: "Doch√°dzka Prepoƒçet",
                
                // Field mappings z centr√°lneho config
                fields: baseConfig.fieldMappings.attendance,
                attributes: baseConfig.fieldMappings.attendanceAttributes,
                
                // Library names
                libraries: {
                    sadzbyZamestnancov: baseConfig.libraries.business.rates
                },
                
                // Sadzby field names
                sadzbyFields: baseConfig.fieldMappings.employeeRates,
                
                // Business settings
                settings: {
                    roundToQuarterHour: true,
                    quarterHourMinutes: 15
                }
            };
        } else {
            // Fallback na lok√°lny config
            config = getLocalConfig();
        }
    }
    return config;
}

/**
 * Lok√°lny fallback config
 */
function getLocalConfig() {
    return {
        debug: true,
        version: "5.1",
        scriptName: "Doch√°dzka Prepoƒçet",
        
        fields: {
            zamestnanci: "Zamestnanci",
            datum: "D√°tum",
            prichod: "Pr√≠chod",
            odchod: "Odchod",
            pracovnaDoba: "Pracovn√° doba",
            pocetPracovnikov: "Poƒçet pracovn√≠kov",
            odpracovane: "Odpracovan√©",
            mzdoveNaklady: "Mzdov√© n√°klady",
            info: "info",
            debugLog: "Debug_Log",
            errorLog: "Error_Log"
        },
        
        attributes: {
            odpracovane: "odpracovan√©",
            hodinovka: "hodinovka",
            priplatok: "+pr√≠platok (‚Ç¨/h)",
            premia: "+pr√©mia (‚Ç¨)",
            pokuta: "-pokuta (‚Ç¨)",
            dennaMzda: "denn√° mzda"
        },
        
        libraries: {
            sadzbyZamestnancov: "sadzby zamestnancov"
        },
        
        sadzbyFields: {
            zamestnanec: "Zamestnanec",
            platnostOd: "Platnos≈• od",
            sadzba: "Sadzba"
        },
        
        settings: {
            roundToQuarterHour: true,
            quarterHourMinutes: 15
        }
    };
}

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        var utils = getUtils();
        var CONFIG = getConfig();
        
        // Vyƒçisti logy na zaƒçiatku
        utils.clearLogs(currentEntry, false);
        
        utils.addDebug(currentEntry, "üöÄ === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "üìÖ ƒåas spustenia: " + utils.formatDate(moment()));
        
        // Kroky prepoƒçtu
        var steps = {
            step1: { success: false, name: "Naƒç√≠tanie a valid√°cia d√°t" },
            step2: { success: false, name: "V√Ωpoƒçet pracovnej doby" },
            step3: { success: false, name: "Spracovanie zamestnancov" },
            step4: { success: false, name: "Celkov√© v√Ωpoƒçty" },
            step5: { success: false, name: "Vytvorenie info z√°znamu" }
        };
        
        // KROK 1: Naƒç√≠tanie a valid√°cia
        var validationResult = validateInputData();
        if (!validationResult.success) {
            utils.addError(currentEntry, "Valid√°cia zlyhala: " + validationResult.error, CONFIG.scriptName);
            return;
        }
        steps.step1.success = true;
        
        // KROK 2: V√Ωpoƒçet pracovnej doby
        var workTimeResult = calculateWorkTime(validationResult.datum, validationResult.prichod, validationResult.odchod);
        if (!workTimeResult.success) {
            utils.addError(currentEntry, "V√Ωpoƒçet ƒçasu zlyhal", CONFIG.scriptName);
            return;
        }
        steps.step2.success = true;
        
        // KROK 3: Spracovanie zamestnancov
        var employeeResult = processEmployees(validationResult.zamestnanci, workTimeResult.pracovnaDobaHodiny, validationResult.datum);
        steps.step3.success = employeeResult.success;
        
        // KROK 4: Celkov√© v√Ωpoƒçty
        if (employeeResult.success) {
            steps.step4.success = calculateTotals(employeeResult);
        }
        
        // KROK 5: Info z√°znam
        steps.step5.success = createInfoRecord(workTimeResult, employeeResult);
        
        // Fin√°lny log
        logFinalSummary(steps);
        
    } catch (error) {
        getUtils().addError(currentEntry, error.toString(), "main", error);
    }
}

// ==============================================
// KROK 1: VALID√ÅCIA VSTUPN√ùCH D√ÅT
// ==============================================

function validateInputData() {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        utils.addDebug(currentEntry, "\nüìã KROK 1: Valid√°cia vstupn√Ωch d√°t");
        
        var datum = currentEntry.field(CONFIG.fields.datum);
        var prichod = currentEntry.field(CONFIG.fields.prichod);
        var odchod = currentEntry.field(CONFIG.fields.odchod);
        var zamestnanci = currentEntry.field(CONFIG.fields.zamestnanci) || [];
        
        // Kontrola d√°tumu
        if (!datum) {
            return { success: false, error: "D√°tum nie je vyplnen√Ω" };
        }
        
        // Kontrola ƒçasu
        if (!prichod || !odchod) {
            return { success: false, error: "Pr√≠chod alebo odchod nie je vyplnen√Ω" };
        }
        
        // Kontrola zamestnancov
        if (zamestnanci.length === 0) {
            return { success: false, error: "≈Ωiadni zamestnanci v z√°zname" };
        }
        
        utils.addDebug(currentEntry, "‚úÖ Valid√°cia √∫spe≈°n√°");
        utils.addDebug(currentEntry, "  ‚Ä¢ D√°tum: " + utils.formatDate(datum, "DD.MM.YYYY"));
        utils.addDebug(currentEntry, "  ‚Ä¢ ƒåas: " + utils.formatTime(prichod) + " - " + utils.formatTime(odchod));
        utils.addDebug(currentEntry, "  ‚Ä¢ Poƒçet zamestnancov: " + zamestnanci.length);
        
        return {
            success: true,
            datum: datum,
            prichod: prichod,
            odchod: odchod,
            zamestnanci: zamestnanci
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "validateInputData", error);
        return { success: false, error: error.toString() };
    }
}

// ==============================================
// KROK 2: V√ùPOƒåET PRACOVNEJ DOBY
// ==============================================

function calculateWorkTime(datum, prichod, odchod) {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        utils.addDebug(currentEntry, "\n‚è±Ô∏è KROK 2: V√Ωpoƒçet pracovnej doby");
        
        // Zaokr√∫hlenie ƒçasov
        var prichodRounded = prichod;
        var odchodRounded = odchod;
        
        if (CONFIG.settings.roundToQuarterHour) {
            prichodRounded = utils.roundToQuarter(prichod, 'up');
            odchodRounded = utils.roundToQuarter(odchod, 'down');
            
            utils.addDebug(currentEntry, "  ‚Ä¢ Zaokr√∫hlen√© ƒçasy: " + 
                utils.formatTime(prichodRounded) + " - " + 
                utils.formatTime(odchodRounded));
        }
        
        // V√Ωpoƒçet hod√≠n
        var workHours = utils.calculateWorkHours(prichodRounded, odchodRounded);
        
        if (!workHours || workHours.error) {
            return { success: false, error: workHours ? workHours.error : "Nepodarilo sa vypoƒç√≠ta≈• hodiny" };
        }
        
        var pracovnaDobaHodiny = workHours.hours + (workHours.minutes / 60);
        pracovnaDobaHodiny = Math.round(pracovnaDobaHodiny * 100) / 100;
        
        // Ulo≈æ do poƒæa
        currentEntry.set(CONFIG.fields.pracovnaDoba, pracovnaDobaHodiny);
        
        utils.addDebug(currentEntry, "‚úÖ Pracovn√° doba: " + pracovnaDobaHodiny + " hod√≠n");
        
        return {
            success: true,
            prichodRounded: prichodRounded,
            odchodRounded: odchodRounded,
            pracovnaDobaHodiny: pracovnaDobaHodiny,
            workHours: workHours
        };
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateWorkTime", error);
        return { success: false, error: error.toString() };
    }
}

// ==============================================
// KROK 3: SPRACOVANIE ZAMESTNANCOV
// ==============================================

function processEmployees(zamestnanci, pracovnaDobaHodiny, datum) {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        utils.addDebug(currentEntry, "\nüë• KROK 3: Spracovanie zamestnancov");
        
        var result = {
            success: true,
            pocetPracovnikov: zamestnanci.length,
            odpracovaneTotal: 0,
            celkoveMzdy: 0,
            detaily: []
        };
        
        // Ulo≈æ poƒçet pracovn√≠kov
        currentEntry.set(CONFIG.fields.pocetPracovnikov, result.pocetPracovnikov);
        
        // Spracuj ka≈æd√©ho zamestnanca
        for (var i = 0; i < zamestnanci.length; i++) {
            var zamestnanec = zamestnanci[i];
            
            if (!zamestnanec) {
                utils.addDebug(currentEntry, "  ‚ö†Ô∏è Zamestnanec[" + i + "] je null - preskakujem");
                continue;
            }
            
            var employeeName = utils.formatEmployeeName(zamestnanec);
            utils.addDebug(currentEntry, "\nüë§ [" + (i+1) + "/" + result.pocetPracovnikov + "] " + employeeName);
            
            // Spracuj zamestnanca
            var empResult = processEmployee(zamestnanec, pracovnaDobaHodiny, datum, i);
            
            if (empResult.success) {
                result.odpracovaneTotal += pracovnaDobaHodiny;
                result.celkoveMzdy += empResult.dennaMzda;
                result.detaily.push(empResult);
            } else {
                result.success = false;
            }
        }
        
        return result;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployees", error);
        return { success: false };
    }
}

/**
 * Spracuje jedn√©ho zamestnanca - OPRAVEN√â NASTAVOVANIE ATRIB√öTOV
 */
function processEmployee(zamestnanec, pracovnaDobaHodiny, datum, index) {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        // N√°jdi platn√∫ hodinovku
        var hodinovka = findValidSalary(zamestnanec, datum);
        
        if (!hodinovka || hodinovka <= 0) {
            utils.addDebug(currentEntry, "  ‚ùå Preskakujem - nem√° platn√∫ sadzbu");
            return { success: false };
        }
        
        // SPR√ÅVNE NASTAVENIE ATRIB√öTOV - cez pole a index
        var zamArray = currentEntry.field(CONFIG.fields.zamestnanci);
        
        if (zamArray && zamArray.length > index) {
            // Nastav z√°kladn√© atrib√∫ty
            zamArray[index].attr(CONFIG.attributes.odpracovane, pracovnaDobaHodiny);
            zamArray[index].attr(CONFIG.attributes.hodinovka, hodinovka);
            
            // Z√≠skaj pr√≠platky a zr√°≈æky z existuj√∫cich atrib√∫tov
            var priplatok = zamArray[index].attr(CONFIG.attributes.priplatok) || 0;
            var premia = zamArray[index].attr(CONFIG.attributes.premia) || 0;
            var pokuta = zamArray[index].attr(CONFIG.attributes.pokuta) || 0;
            
            // Vypoƒç√≠taj denn√∫ mzdu
            var dennaMzda = (pracovnaDobaHodiny * (hodinovka + priplatok)) + premia - pokuta;
            dennaMzda = Math.round(dennaMzda * 100) / 100;
            
            // Nastav denn√∫ mzdu
            zamArray[index].attr(CONFIG.attributes.dennaMzda, dennaMzda);
            
            utils.addDebug(currentEntry, "  ‚úÖ Hodinovka: " + hodinovka + " ‚Ç¨/h");
            if (priplatok > 0) utils.addDebug(currentEntry, "  ‚úÖ Pr√≠platok: +" + priplatok + " ‚Ç¨/h");
            if (premia > 0) utils.addDebug(currentEntry, "  ‚úÖ Pr√©mia: +" + premia + " ‚Ç¨");
            if (pokuta > 0) utils.addDebug(currentEntry, "  ‚úÖ Pokuta: -" + pokuta + " ‚Ç¨");
            utils.addDebug(currentEntry, "  ‚úÖ Denn√° mzda: " + dennaMzda + " ‚Ç¨");
            
            return {
                success: true,
                hodinovka: hodinovka,
                dennaMzda: dennaMzda,
                priplatok: priplatok,
                premia: premia,
                pokuta: pokuta
            };
        } else {
            utils.addError(currentEntry, "Nepodarilo sa z√≠ska≈• pole zamestnancov pre index " + index, "processEmployee");
            return { success: false };
        }
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "processEmployee", error);
        return { success: false };
    }
}

/**
 * N√°jde platn√∫ sadzbu pre zamestnanca
 */
function findValidSalary(zamestnanec, datum) {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        var employeeName = utils.formatEmployeeName(zamestnanec);
        utils.addDebug(currentEntry, "üîç Hƒæad√°m platn√∫ sadzbu");
        
        // Z√≠skaj sadzby zamestnanca
        var sadzby = zamestnanec.linksFrom(CONFIG.libraries.sadzbyZamestnancov, CONFIG.sadzbyFields.zamestnanec);
        
        if (!sadzby || sadzby.length === 0) {
            utils.addError(currentEntry, "Zamestnanec " + employeeName + " nem√° ≈æiadne sadzby", "findValidSalary");
            return null;
        }
        
        utils.addDebug(currentEntry, "  ‚úÖ Na≈°iel " + sadzby.length + " sadzieb");
        
        var aktualnaHodinovka = null;
        var najnovsiDatum = null;
        
        // Analyzuj v≈°etky sadzby
        for (var i = 0; i < sadzby.length; i++) {
            var sadzba = sadzby[i];
            
            var platnostOd = sadzba.field(CONFIG.sadzbyFields.platnostOd);
            var hodinovka = sadzba.field(CONFIG.sadzbyFields.sadzba);
            
            // Kontrola platnosti k d√°tumu
            if (platnostOd && hodinovka && platnostOd <= datum) {
                if (!najnovsiDatum || platnostOd > najnovsiDatum) {
                    najnovsiDatum = platnostOd;
                    aktualnaHodinovka = hodinovka;
                }
            }
        }
        
        if (!aktualnaHodinovka || aktualnaHodinovka <= 0) {
            utils.addError(currentEntry, "Nena≈°la sa platn√° sadzba k d√°tumu", "findValidSalary");
            return null;
        }
        
        utils.addDebug(currentEntry, "  üí∂ Platn√° hodinovka: " + aktualnaHodinovka + " ‚Ç¨/h");
        return aktualnaHodinovka;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "findValidSalary", error);
        return null;
    }
}

// ==============================================
// KROK 4: CELKOV√â V√ùPOƒåTY
// ==============================================

function calculateTotals(employeeResult) {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        utils.addDebug(currentEntry, "\nüí∞ KROK 4: Celkov√© v√Ωpoƒçty");
        
        // Ulo≈æ celkov√© hodnoty
        currentEntry.set(CONFIG.fields.odpracovane, employeeResult.odpracovaneTotal);
        currentEntry.set(CONFIG.fields.mzdoveNaklady, employeeResult.celkoveMzdy);
        
        utils.addDebug(currentEntry, "‚úÖ Celkov√© v√Ωpoƒçty:");
        utils.addDebug(currentEntry, "  ‚Ä¢ Odpracovan√© spolu: " + employeeResult.odpracovaneTotal + " hod√≠n");
        utils.addDebug(currentEntry, "  ‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy));
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "calculateTotals", error);
        return false;
    }
}

// ==============================================
// KROK 5: VYTVORENIE INFO Z√ÅZNAMU
// ==============================================

function createInfoRecord(workTimeResult, employeeResult) {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        utils.addDebug(currentEntry, "\nüìù KROK 5: Vytvorenie info z√°znamu");
        
        var datum = currentEntry.field(CONFIG.fields.datum);
        var datumFormatted = utils.formatDate(datum, "DD.MM.YYYY");
        var dayName = moment(datum).format("dddd");
        
        var infoMessage = "üìã DOCH√ÅDZKA - AUTOMATICK√ù PREPOƒåET\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
        
        infoMessage += "üìÖ D√°tum: " + datumFormatted + " (" + dayName + ")\n";
        infoMessage += "‚è∞ Pracovn√Ω ƒças: " + utils.formatTime(workTimeResult.prichodRounded) + 
                       " - " + utils.formatTime(workTimeResult.odchodRounded) + "\n";
        infoMessage += "‚è±Ô∏è Pracovn√° doba: " + workTimeResult.pracovnaDobaHodiny + " hod√≠n\n\n";
        
        infoMessage += "üë• ZAMESTNANCI (" + employeeResult.pocetPracovnikov + " os√¥b):\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        
        for (var i = 0; i < employeeResult.detaily.length; i++) {
            var detail = employeeResult.detaily[i];
            infoMessage += "‚Ä¢ Hodinovka: " + detail.hodinovka + " ‚Ç¨/h\n";
            if (detail.priplatok > 0) infoMessage += "  + Pr√≠platok: " + detail.priplatok + " ‚Ç¨/h\n";
            if (detail.premia > 0) infoMessage += "  + Pr√©mia: " + detail.premia + " ‚Ç¨\n";
            if (detail.pokuta > 0) infoMessage += "  - Pokuta: " + detail.pokuta + " ‚Ç¨\n";
            infoMessage += "  = Denn√° mzda: " + detail.dennaMzda + " ‚Ç¨\n\n";
        }
        
        infoMessage += "üí∞ S√öHRN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Odpracovan√© celkom: " + employeeResult.odpracovaneTotal + " hod√≠n\n";
        infoMessage += "‚Ä¢ Mzdov√© n√°klady: " + utils.formatMoney(employeeResult.celkoveMzdy) + "\n\n";
        
        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ ƒåas spracovania: " + moment().format("HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + (utils.version || "N/A") + "\n";
        
        if (typeof MementoConfig !== 'undefined') {
            infoMessage += "‚Ä¢ MementoConfig: v" + MementoConfig.version + "\n";
        }
        
        infoMessage += "\n‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE";
        
        currentEntry.set(CONFIG.fields.info, infoMessage);
        
        utils.addDebug(currentEntry, "‚úÖ Info z√°znam vytvoren√Ω");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createInfoRecord", error);
        return false;
    }
}

// ==============================================
// FIN√ÅLNY S√öHRN
// ==============================================

function logFinalSummary(steps) {
    var utils = getUtils();
    var CONFIG = getConfig();
    
    try {
        utils.addDebug(currentEntry, "\nüìä === FIN√ÅLNY S√öHRN ===");
        
        var allSuccess = true;
        for (var step in steps) {
            var status = steps[step].success ? "‚úÖ" : "‚ùå";
            utils.addDebug(currentEntry, status + " " + steps[step].name);
            if (!steps[step].success) allSuccess = false;
        }
        
        if (allSuccess) {
            utils.addDebug(currentEntry, "\nüéâ === V≈†ETKY KROKY √öSPE≈†N√â ===");
        } else {
            utils.addDebug(currentEntry, "\n‚ö†Ô∏è === NIEKTOR√â KROKY ZLYHALI ===");
        }
        
        utils.addDebug(currentEntry, "‚è±Ô∏è ƒåas ukonƒçenia: " + moment().format("HH:mm:ss"));
        utils.addDebug(currentEntry, "üìã === KONIEC " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "logFinalSummary", error);
    }
}

// ==============================================
// SPUSTENIE HLAVNEJ FUNKCIE
// ==============================================

main();