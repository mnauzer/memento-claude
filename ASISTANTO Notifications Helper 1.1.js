// ==============================================
// MEMENTO DATABASE - ASISTANTO NOTIFICATIONS HELPER
// Verzia: 1.0 | D√°tum: 16.08.2025 | Autor: ASISTANTO
// Kni≈ænica: ASISTANTO Notifications | Typ: Helper Script
// ==============================================
// üìã FUNKCIE:
//    - Pomocn√© funkcie pre vytv√°ranie notifik√°ci√≠
//    - Automatick√© vyplnenie pol√≠ na z√°klade zdroja
//    - Spr√°va lifecycle notifik√°ci√≠
//    - Integr√°cia s Telegram API
// ‚úÖ VYU≈Ω√çVA:
//    - MementoUtils 3.0 centralizovan√© funkcie
//    - ≈†trukt√∫ru z paste.txt anal√Ωzy
//    - Best practices z Doch√°dzka Notifications
// ==============================================

// Import MementoUtils 3.0
var utils = MementoUtils;

// ==============================================
// KONFIGUR√ÅCIA
// ==============================================

var CONFIG = {
    debug: true,
    version: "1.1",
    scriptName: "ASISTANTO Notifications Helper",
    
    // Kni≈ænice
    notificationsLibrary: "ASISTANTO Notifications",
    telegramGroupsLibrary: "ASISTANTO Telegram Groups",
    apiLibrary: "ASISTANTO API",
    defaultsLibrary: "ASISTANTO Defaults",
    
    // N√°zvy pol√≠ v ASISTANTO Notifications
    fields: {
        // HLAVN√Å SEKCIA
        typSpravy: "Typ spr√°vy",
        zdrojSpravy: "Zdroj spr√°vy", 
        predmet: "Predmet",
        sprava: "Spr√°va",
        priloha: "Pr√≠loha",
        formatovanie: "Form√°tovanie",
        status: "Status",
        priorita: "Priorita",
        adresat: "Adres√°t",
        skupinaTema: "Skupina/T√©ma",
        zamestnanec: "Zamestnanec",
        klient: "Klient",
        partner: "Partner",
        zakazka: "Z√°kazka",
        info: "info",
        
        // CIELENIE SEKCIA
        telegramId: "Telegram ID",
        chatId: "Chat ID",
        temaId: "T√©ma ID",
        temaNazov: "T√©ma N√°zov",
        
        // ƒåASOVANIE SEKCIA
        poslatO: "Posla≈• o",
        vyprsat: "Vypr≈°a≈• o",
        opakovat: "Opakova≈•",
        
        // ZDROJOV√â INFORM√ÅCIE
        zdrojovaKniznica: "Zdrojov√° kni≈ænica",
        zdrojovyId: "Zdrojov√Ω ID",
        vytvoril: "Vytvoril",
        vytvorene: "Vytvoren√©",
        
        // RESPONSE DATA
        messageId: "Message ID",
        messageThreadId: "Message Thread ID", 
        messageUrl: "Message URL",
        odoslaneO: "Odoslan√© o",
        pokusovOdoslanie: "Pokusov o odoslanie",
        poslednaChyba: "Posledn√° chyba",
        responseData: "Response Data",

         // Statusy
        statusWaiting: "ƒåak√°",
        statusSent: "Odoslan√©",
        statusFailed: "Zlyhalo",
        
        // Max pokusov
        maxRetries: 3,
        
        // DEBUG SEKCIA
        errorLog: "Error_Log",
        debugLog: "Debug_Log"
    },
    
    // Mo≈ænosti dropdownov
    options: {
        typSpravy: ["Doch√°dzka", "Z√°znam pr√°c", "Kniha j√°zd", "ToDo", "Manu√°lna", "Syst√©mov√°"],
        zdrojSpravy: ["Automatick√°", "Manu√°lna", "Napl√°novan√°"],
        formatovanie: ["Obyƒçajn√Ω text", "Markdown", "HTML"],
        priorita: ["N√≠zka", "Norm√°lna", "Vysok√°", "Urgentn√°"],
        adresat: ["Zamestnanec", "Klient", "Partner", "Skupina", "Skupina-T√©ma", "Z√°kazka"],
        opakovat: ["Nie", "Ka≈æd√Ω de≈à", "Ka≈æd√Ω t√Ω≈æde≈à", "Ka≈æd√Ω mesiac"],
        status: ["ƒåak√°", "Odoslan√©", "Zlyhalo", "Zru≈°en√©", "Vypr≈°an√©"]
    }
};

// ==============================================
// HELPER FUNKCIE
// ==============================================

/**
 * Vytvor√≠ nov√Ω z√°znam notifik√°cie s predvyplnen√Ωmi √∫dajmi
 * @param {Object} data - D√°ta pre notifik√°ciu
 * @returns {Entry|null} - Vytvoren√Ω z√°znam alebo null
 */
function createNotification(data) {
    try {
        utils.addDebug(entry(), "üìù Vytv√°ranie novej notifik√°cie");
        
        var notifLib = libByName(CONFIG.notificationsLibrary);
        if (!notifLib) {
            utils.addError(entry(), "Kni≈ænica " + CONFIG.notificationsLibrary + " nen√°jden√°", "createNotification");
            return null;
        }
        
        // Predvolen√© hodnoty
        var notificationData = {
            // Povinn√© polia
            "Typ spr√°vy": data.typSpravy || "Syst√©mov√°",
            "Zdroj spr√°vy": data.zdrojSpravy || "Automatick√°",
            "Spr√°va": data.sprava || "",
            "Status": "ƒåak√°",
            "Form√°tovanie": data.formatovanie || "Markdown",
            "Priorita": data.priorita || "Norm√°lna",
            
            // Metadata
            "Vytvoril": user(),
            "Vytvoren√©": moment().toDate(),
            "Zdrojov√° kni≈ænica": data.zdrojovaKniznica || lib().name(),
            "Zdrojov√Ω ID": data.zdrojovyId || entry().field("ID"),
            
            // Info z√°znam
            "info": utils.formatDate(new Date()) + " | Vytvoren√© automaticky\n" +
                   "Zdroj: " + (data.zdrojovaKniznica || lib().name()) + " #" + (data.zdrojovyId || entry().field("ID")) + "\n" +
                   "Script: " + CONFIG.scriptName + " v" + CONFIG.version
        };
        
        // Voliteƒæn√© polia
        if (data.predmet) notificationData["Predmet"] = data.predmet;
        if (data.priloha) notificationData["Pr√≠loha"] = data.priloha;
        if (data.adresat) notificationData["Adres√°t"] = data.adresat;
        
        // Cielenie podƒæa typu adres√°ta
        switch (data.adresat) {
            case "Zamestnanec":
                if (data.zamestnanec) {
                    notificationData["Zamestnanec"] = data.zamestnanec;
                    // Automaticky z√≠skaj Telegram ID
                    var telegramId = getTelegramIdForEmployee(data.zamestnanec);
                    if (telegramId) notificationData["Telegram ID"] = telegramId;
                }
                break;
                
            case "Klient":
                if (data.klient) notificationData["Klient"] = data.klient;
                break;
                
            case "Partner":
                if (data.partner) notificationData["Partner"] = data.partner;
                break;
                
            case "Z√°kazka":
                if (data.zakazka) notificationData["Z√°kazka"] = data.zakazka;
                break;
                
            case "Skupina":
            case "Skupina-T√©ma":
                if (data.skupinaTema) {
                    notificationData["Skupina/T√©ma"] = data.skupinaTema;
                    // Automaticky z√≠skaj Chat ID a Thread ID
                    var groupInfo = getGroupInfo(data.skupinaTema);
                    if (groupInfo) {
                        notificationData["Chat ID"] = groupInfo.chatId;
                        if (groupInfo.threadId) notificationData["T√©ma ID"] = groupInfo.threadId;
                        notificationData["T√©ma N√°zov"] = groupInfo.name;
                    }
                }
                break;
        }
        
        // ƒåasovanie
        if (data.poslatO) notificationData["Posla≈• o"] = data.poslatO;
        if (data.vyprsat) notificationData["Vypr≈°a≈• o"] = data.vyprsat;
        if (data.opakovat) notificationData["Opakova≈•"] = data.opakovat;
        
        // Vytvor z√°znam
        var novyZaznam = notifLib.create(notificationData);
        
        if (novyZaznam) {
            utils.addDebug(entry(), "‚úÖ Notifik√°cia vytvoren√°: ID " + novyZaznam.field("ID"));
            
            // Ak je nastaven√© "Posla≈• o" v minulosti alebo pr√°ve teraz, po≈°li okam≈æite
            if (!data.poslatO || moment(data.poslatO).isSameOrBefore(moment())) {
                sendNotification(novyZaznam);
            }
            
            return novyZaznam;
        } else {
            utils.addError(entry(), "Nepodarilo sa vytvori≈• notifik√°ciu", "createNotification");
            return null;
        }
        
    } catch (error) {
        utils.addError(entry(), error, "createNotification");
        return null;
    }
}

/**
 * Vytvor√≠ nov√Ω z√°znam notifik√°cie BEZ automatick√©ho odoslania
 * @param {Object} data - D√°ta pre notifik√°ciu
 * @returns {Entry|null} - Vytvoren√Ω z√°znam alebo null
 */
function createNotificationOnly(data) {
    try {
        utils.addDebug(entry(), "üìù Vytv√°ranie novej notifik√°cie (bez odoslania)");
        
        var notifLib = libByName(CONFIG.notificationsLibrary);
        if (!notifLib) {
            utils.addError(entry(), "Kni≈ænica " + CONFIG.notificationsLibrary + " nen√°jden√°", "createNotificationOnly");
            return null;
        }
        
        // Predvolen√© hodnoty - POU≈Ω√çVAME EXISTUJ√öCI CONFIG.fields
        var notificationData = {};
        
        // Povinn√© polia
        notificationData[CONFIG.fields.typSpravy] = data.typSpravy || "Syst√©mov√°";
        notificationData[CONFIG.fields.zdrojSpravy] = data.zdrojSpravy || "Automatick√°";
        notificationData[CONFIG.fields.sprava] = data.sprava || "";
        notificationData[CONFIG.fields.status] = "ƒåak√°";
        notificationData[CONFIG.fields.formatovanie] = data.formatovanie || "Markdown";
        notificationData[CONFIG.fields.priorita] = data.priorita || "Norm√°lna";
        
        // Metadata
        notificationData[CONFIG.fields.vytvoril] = user();
        notificationData[CONFIG.fields.vytvorene] = moment().toDate();
        notificationData[CONFIG.fields.zdrojovaKniznica] = data.zdrojovaKniznica || lib().name();
        notificationData[CONFIG.fields.zdrojovyId] = data.zdrojovyId || entry().field("ID");
        
        // Info z√°znam
        notificationData[CONFIG.fields.info] = utils.formatDate(new Date()) + " | Vytvoren√© automaticky\n" +
               "Zdroj: " + (data.zdrojovaKniznica || lib().name()) + " #" + (data.zdrojovyId || entry().field("ID")) + "\n" +
               "Script: " + CONFIG.scriptName + " v" + CONFIG.version;
        
        // Voliteƒæn√© polia
        if (data.predmet) notificationData[CONFIG.fields.predmet] = data.predmet;
        if (data.priloha) notificationData[CONFIG.fields.priloha] = data.priloha;
        if (data.adresat) notificationData[CONFIG.fields.adresat] = data.adresat;
        if (data.poslatO) notificationData[CONFIG.fields.poslatO] = data.poslatO;
        if (data.vyprsat) notificationData[CONFIG.fields.vyprsat] = data.vyprsat;
        if (data.opakovat) notificationData[CONFIG.fields.opakovat] = data.opakovat;
        
        // Adres√°ti podƒæa typu
        if (data.zamestnanec) {
            notificationData[CONFIG.fields.zamestnanec] = data.zamestnanec;
            var telegramId = getTelegramIdForEmployee(data.zamestnanec);
            if (telegramId) {
                notificationData[CONFIG.fields.telegramId] = telegramId;
                notificationData[CONFIG.fields.chatId] = telegramId;
            }
        }
        
        if (data.skupinaTema) {
            notificationData[CONFIG.fields.skupinaTema] = data.skupinaTema;
            var groupInfo = getGroupInfo(data.skupinaTema);
            if (groupInfo) {
                notificationData[CONFIG.fields.chatId] = groupInfo.chatId;
                notificationData[CONFIG.fields.temaId] = groupInfo.threadId;
                notificationData[CONFIG.fields.temaNazov] = groupInfo.name;
            }
        }
        
        if (data.klient) notificationData[CONFIG.fields.klient] = data.klient;
        if (data.partner) notificationData[CONFIG.fields.partner] = data.partner;
        if (data.zakazka) notificationData[CONFIG.fields.zakazka] = data.zakazka;
        
        // Explicitn√© Chat ID (pre skupiny bez LinkToEntry)
        if (data.chatId) notificationData[CONFIG.fields.chatId] = data.chatId;
        if (data.temaId) notificationData[CONFIG.fields.temaId] = data.temaId;
        
        // Vytvor z√°znam
        var novyZaznam = notifLib.create(notificationData);
        
        if (novyZaznam) {
            utils.addDebug(entry(), "‚úÖ Z√°znam notifik√°cie vytvoren√Ω (ƒçak√° na trigger): ID " + novyZaznam.field("ID"));
            
            // Debug info
            utils.addDebug(novyZaznam, "üìã Notifik√°cia vytvoren√° pomocou createNotificationOnly()");
            utils.addDebug(novyZaznam, "‚è≥ Status: ƒåak√° na odoslanie");
            utils.addDebug(novyZaznam, "üîÑ Trigger sa spust√≠ automaticky");
            
            return novyZaznam;
        } else {
            utils.addError(entry(), "Nepodarilo sa vytvori≈• notifik√°ciu", "createNotificationOnly");
            return null;
        }
        
    } catch (error) {
        utils.addError(entry(), error, "createNotificationOnly");
        return null;
    }
}

/**
 * Z√≠ska Telegram ID pre zamestnanca
 * @param {Entry|Array} zamestnanec - Zamestnanec alebo pole zamestnancov
 * @returns {string} - Telegram ID alebo pr√°zdny string
 */
function getTelegramIdForEmployee(zamestnanec) {
    try {
        if (Array.isArray(zamestnanec) && zamestnanec.length > 0) {
            zamestnanec = zamestnanec[0];
        }
        
        if (!zamestnanec) return "";
        
        return utils.safeGet(zamestnanec, "Telegram ID", "");
        
    } catch (error) {
        utils.addError(entry(), error, "getTelegramIdForEmployee");
        return "";
    }
}

/**
 * Z√≠ska inform√°cie o Telegram skupine/t√©me
 * @param {Entry|Array} skupinaTema - Link na z√°znam v ASISTANTO Telegram Groups
 * @returns {Object|null} - Objekt s chatId, threadId a name
 */
function getGroupInfo(skupinaTema) {
    try {
        if (Array.isArray(skupinaTema) && skupinaTema.length > 0) {
            skupinaTema = skupinaTema[0];
        }
        
        if (!skupinaTema) return null;
        
        var chatId = utils.safeGet(skupinaTema, "Chat ID", "");
        var threadId = utils.safeGet(skupinaTema, "Thread ID", "");
        var name = utils.safeGet(skupinaTema, "N√°zov", "") || 
                  utils.safeGet(skupinaTema, "N√°zov z√°znamu", "");
        
        return {
            chatId: chatId,
            threadId: threadId,
            name: name
        };
        
    } catch (error) {
        utils.addError(entry(), error, "getGroupInfo");
        return null;
    }
}

/**
 * Odo≈°le notifik√°ciu podƒæa nastaven√≠
 * @param {Entry} notifikacia - Z√°znam notifik√°cie
 * @returns {boolean} - √öspe≈°nos≈• odoslania
 */
function sendNotification(notifikacia) {
    try {
        utils.addDebug(notifikacia, "üì§ Odosielanie notifik√°cie...");
        
        var adresat = utils.safeGet(notifikacia, CONFIG.fields.adresat, "");
        var sprava = utils.safeGet(notifikacia, CONFIG.fields.sprava, "");
        var formatovanie = utils.safeGet(notifikacia, CONFIG.fields.formatovanie, "Markdown");
        
        if (!sprava) {
            utils.addError(notifikacia, "Pr√°zdna spr√°va", "sendNotification");
            updateNotificationStatus(notifikacia, "Zlyhalo", "Pr√°zdna spr√°va");
            return false;
        }
        
        // Telegram notifik√°cia
        var chatId = utils.safeGet(notifikacia, CONFIG.fields.chatId, "") || 
                    utils.safeGet(notifikacia, CONFIG.fields.telegramId, "");
        
        if (chatId) {
            var threadId = utils.safeGet(notifikacia, CONFIG.fields.temaId, "");
            
            // Pou≈æitie MementoUtils 3.0 sendTelegramMessage
            var result = utils.sendTelegramMessage(chatId, sprava, {
                threadId: threadId,
                parseMode: formatovanie
            });
            
            if (result.success) {
                // Aktualizuj response data
                utils.safeSet(notifikacia, CONFIG.fields.messageId, result.messageId);
                if (result.threadId) {
                    utils.safeSet(notifikacia, CONFIG.fields.messageThreadId, result.threadId);
                }
                utils.safeSet(notifikacia, CONFIG.fields.odoslaneO, moment().toDate());
                utils.safeSet(notifikacia, CONFIG.fields.responseData, JSON.stringify(result.data));
                
                updateNotificationStatus(notifikacia, "Odoslan√©");
                utils.addDebug(notifikacia, "‚úÖ Notifik√°cia √∫spe≈°ne odoslan√°");
                return true;
            } else {
                updateNotificationStatus(notifikacia, "Zlyhalo", result.error);
                return false;
            }
        }
        
        // In√© typy notifik√°ci√≠ (SMS, Email) - placeholder pre bud√∫ce roz≈°√≠renie
        utils.addDebug(notifikacia, "‚ö†Ô∏è ≈Ωiadny podporovan√Ω komunikaƒçn√Ω kan√°l");
        updateNotificationStatus(notifikacia, "Zlyhalo", "≈Ωiadny komunikaƒçn√Ω kan√°l");
        return false;
        
    } catch (error) {
        utils.addError(notifikacia, error, "sendNotification");
        updateNotificationStatus(notifikacia, "Zlyhalo", error.toString());
        return false;
    }
}

/**
 * Aktualizuje status notifik√°cie
 * @param {Entry} notifikacia - Z√°znam notifik√°cie
 * @param {string} status - Nov√Ω status
 * @param {string} error - Chybov√° spr√°va (voliteƒæn√©)
 */
function updateNotificationStatus(notifikacia, status, error) {
    try {
        utils.safeSet(notifikacia, CONFIG.fields.status, status);
        
        if (error) {
            utils.safeSet(notifikacia, CONFIG.fields.poslednaChyba, error);
            utils.addError(notifikacia, error, "sendNotification");
        }
        
        // Increment pokusov
        var pokusy = utils.safeGet(notifikacia, CONFIG.fields.pokusovOdoslanie, 0);
        utils.safeSet(notifikacia, CONFIG.fields.pokusovOdoslanie, pokusy + 1);
        
    } catch (e) {
        utils.addError(notifikacia, e, "updateNotificationStatus");
    }
}

// ==============================================
// BULK OPER√ÅCIE
// ==============================================

/**
 * Vytvor√≠ notifik√°cie pre viacer√Ωch adres√°tov
 * @param {Object} baseData - Z√°kladn√© d√°ta pre v≈°etky notifik√°cie
 * @param {Array} recipients - Pole adres√°tov
 * @returns {Array} - Pole vytvoren√Ωch notifik√°ci√≠
 */
function createBulkNotifications(baseData, recipients) {
    var created = [];
    
    try {
        utils.addDebug(entry(), "üì¢ Vytv√°ranie bulk notifik√°ci√≠ pre " + recipients.length + " adres√°tov");
        
        for (var i = 0; i < recipients.length; i++) {
            var recipient = recipients[i];
            var notifData = Object.assign({}, baseData);
            
            // Prisp√¥sob podƒæa typu adres√°ta
            if (recipient.field && recipient.field("Nick")) {
                // Je to zamestnanec
                notifData.adresat = "Zamestnanec";
                notifData.zamestnanec = [recipient];
            } else if (typeof recipient === "string") {
                // Je to Chat ID
                notifData.chatId = recipient;
            }
            
            var notif = createNotification(notifData);
            if (notif) created.push(notif);
        }
        
        utils.addDebug(entry(), "‚úÖ Vytvoren√Ωch " + created.length + " notifik√°ci√≠");
        
    } catch (error) {
        utils.addError(entry(), error, "createBulkNotifications");
    }
    
    return created;
}

// ==============================================
// LIFECYCLE MANAGEMENT
// ==============================================

/**
 * Vyma≈æe notifik√°ciu a jej Telegram spr√°vu
 * @param {Entry} notifikacia - Z√°znam notifik√°cie
 * @returns {boolean} - √öspe≈°nos≈• vymazania
 */
function deleteNotificationWithMessage(notifikacia) {
    try {
        var messageId = utils.safeGet(notifikacia, CONFIG.fields.messageId, "");
        var chatId = utils.safeGet(notifikacia, CONFIG.fields.chatId, "") || 
                    utils.safeGet(notifikacia, CONFIG.fields.telegramId, "");
        
        // Vyma≈æ Telegram spr√°vu ak existuje
        if (messageId && chatId) {
            utils.deleteTelegramMessage(chatId, messageId);
        }
        
        // Vyma≈æ z√°znam
        notifikacia.trash();
        return true;
        
    } catch (error) {
        utils.addError(entry(), error, "deleteNotificationWithMessage");
        return false;
    }
}

/**
 * Spracuje vypr≈°an√© notifik√°cie
 */
function processExpiredNotifications() {
    try {
        var notifLib = libByName(CONFIG.notificationsLibrary);
        if (!notifLib) return;
        
        var now = moment();
        var expired = notifLib.find(CONFIG.fields.status, "ƒåak√°");
        
        for (var i = 0; i < expired.length; i++) {
            var notif = expired[i];
            var vyprsat = utils.safeGet(notif, CONFIG.fields.vyprsat, null);
            
            if (vyprsat && moment(vyprsat).isBefore(now)) {
                updateNotificationStatus(notif, "Vypr≈°an√©", "Vypr≈°ala platnos≈•");
                utils.addDebug(notif, "‚è∞ Notifik√°cia vypr≈°ala");
            }
        }
        
    } catch (error) {
        utils.addError(entry(), error, "processExpiredNotifications");
    }
}

// ==============================================
// TEMPLATE FUNKCIE
// ==============================================

/**
 * Vytvor√≠ template pre doch√°dzku notifik√°ciu
 * @param {Entry} dochadzkaEntry - Z√°znam doch√°dzky
 * @returns {Object} - Template d√°ta
 */
function createAttendanceNotificationTemplate(dochadzkaEntry) {
    var datum = utils.safeGet(dochadzkaEntry, "D√°tum", new Date());
    var zamestnanci = utils.safeGetLinks(dochadzkaEntry, "Zamestnanci");
    
    var template = {
        typSpravy: "Doch√°dzka",
        zdrojSpravy: "Automatick√°",
        predmet: "Doch√°dzka " + utils.formatDate(datum, "DD.MM.YYYY"),
        formatovanie: "Markdown",
        priorita: "Norm√°lna",
        zdrojovaKniznica: "Doch√°dzka",
        zdrojovyId: dochadzkaEntry.field("ID")
    };
    
    return template;
}

/**
 * Vytvor√≠ template pre syst√©mov√∫ notifik√°ciu
 * @param {string} message - Spr√°va
 * @param {string} priority - Priorita
 * @returns {Object} - Template d√°ta
 */
function createSystemNotificationTemplate(message, priority) {
    return {
        typSpravy: "Syst√©mov√°",
        zdrojSpravy: "Automatick√°",
        sprava: message,
        formatovanie: "Markdown",
        priorita: priority || "Norm√°lna",
        adresat: "Skupina"
    };
}

// ==============================================
// UTILITY FUNKCIE
// ==============================================

/**
 * Form√°tuje spr√°vu pre Telegram s Markdown
 * @param {string} title - Nadpis spr√°vy
 * @param {Object} data - D√°ta pre spr√°vu
 * @returns {string} - Naform√°tovan√° spr√°va
 */
function formatTelegramMessage(title, data) {
    var message = "*" + title + "*\n";
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
    
    for (var key in data) {
        if (data.hasOwnProperty(key) && data[key]) {
            message += "‚Ä¢ *" + key + ":* " + data[key] + "\n";
        }
    }
    
    message += "\n_" + utils.formatDate(new Date()) + "_";
    return message;
}

/**
 * Kontroluje ƒçi m√° pou≈æ√≠vateƒæ opr√°vnenie vytv√°ra≈• notifik√°cie
 * @returns {boolean}
 */
function canCreateNotifications() {
    // Tu m√¥≈æe≈° implementova≈• kontrolu opr√°vnen√≠
    return true;
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Aktualizuje status notifik√°cie
 * @param {Entry} entry - Z√°znam notifik√°cie
 * @param {string} newStatus - Nov√Ω status
 * @param {string} error - Chybov√° spr√°va (voliteƒæn√©)
 */
function updateStatus(entry, newStatus, error) {
    try {
        entry.set("Status", newStatus);
        
        if (error) {
            entry.set("Posledn√° chyba", error);
            
            // Pridaj do Error_Log
            var timestamp = moment().format("DD.MM.YY HH:mm:ss");
            var errorMsg = "[" + timestamp + "] Status ‚Üí " + newStatus + ": " + error;
            var existingError = entry.field("Error_Log") || "";
            entry.set("Error_Log", existingError + errorMsg + "\n");
        }
        
        // Info log
        var infoMsg = moment().format("YYYY-MM-DD HH:mm:ss") + " | Status zmenen√Ω na: " + newStatus;
        if (error) infoMsg += " | D√¥vod: " + error;
        var existingInfo = entry.field("info") || "";
        entry.set("info", existingInfo + "\n" + infoMsg);
        
    } catch (e) {
        if (utils) {
            utils.addError(entry, e, "updateStatus");
        }
    }
}

/**
 * Kontroluje ƒçi m√° by≈• notifik√°cia automaticky vymazan√° po odoslan√≠
 * @param {Entry} entry - Z√°znam notifik√°cie
 */
function checkAutoDelete(entry) {
    try {
        var typSpravy = entry.field("Typ spr√°vy");
        if (typSpravy === "Syst√©mov√°") {
            // Syst√©mov√© spr√°vy sa m√¥≈æu automaticky maza≈•
            // entry.trash();
            // utils.addDebug(entry, "üóëÔ∏è Syst√©mov√° spr√°va - automaticky vymazan√°");
        }
        
    } catch (error) {
        if (utils) {
            utils.addError(entry, error, "checkAutoDelete");
        }
    }
}

/**
 * Kontroluje ƒçi je spr√°va urgentn√° a potrebuje ≈°peci√°lne spracovanie
 * @param {Entry} entry - Z√°znam notifik√°cie
 * @returns {boolean}
 */
function isUrgent(entry) {
    var priorita = entry.field("Priorita");
    return priorita === "Urgentn√°";
}


// ==============================================
// EXPORT FUNKCI√ç (pre pou≈æitie v in√Ωch scriptoch)
// ==============================================

var ASISTANTONotifications = {
    // Konfigur√°cia
    CONFIG: CONFIG,
    
    // Hlavn√© funkcie
    createNotification: createNotification,
    createNotificationOnly: createNotificationOnly,
    sendNotification: sendNotification,
    deleteNotificationWithMessage: deleteNotificationWithMessage,
    
    // Bulk oper√°cie
    createBulkNotifications: createBulkNotifications,
    
    // Lifecycle
    processExpiredNotifications: processExpiredNotifications,
    updateNotificationStatus: updateNotificationStatus,
    
    // Templates
    createAttendanceNotificationTemplate: createAttendanceNotificationTemplate,
    createSystemNotificationTemplate: createSystemNotificationTemplate,
    
    // Utility
    formatTelegramMessage: formatTelegramMessage,
    getTelegramIdForEmployee: getTelegramIdForEmployee,
    getGroupInfo: getGroupInfo,
    canCreateNotifications: canCreateNotifications,
    isUrgent: isUrgent,
    checkAutoDelete: checkAutoDelete,
    updateStatus: updateStatus,
    sendToN8N: sendToN8N
};
// ==============================================
// PR√çKLAD POU≈ΩITIA
// ==============================================

/*
// 1. Vytvorenie jednoduchej notifik√°cie pre zamestnanca
var notifData = {
    typSpravy: "Doch√°dzka",
    sprava: "Va≈°a doch√°dzka bola zaznamenan√°",
    zamestnanec: [zamestnanecEntry],
    adresat: "Zamestnanec"
};
var notifikacia = ASISTANTONotifications.createNotification(notifData);

// 2. Vytvorenie notifik√°cie pre skupinu
var groupNotif = {
    typSpravy: "Syst√©mov√°",
    sprava: formatTelegramMessage("Denn√Ω report", {
        "Poƒçet zamestnancov": 15,
        "Odpracovan√© hodiny": 120,
        "Mzdov√© n√°klady": "1,234.56 ‚Ç¨"
    }),
    skupinaTema: [telegramGroupEntry],
    adresat: "Skupina-T√©ma"
};
ASISTANTONotifications.createNotification(groupNotif);

// 3. Bulk notifik√°cie
var baseData = {
    typSpravy: "ToDo",
    sprava: "Nezabudnite vyplni≈• mesaƒçn√Ω report",
    priorita: "Vysok√°"
};
var recipients = lib("Zamestnanci").entries();
ASISTANTONotifications.createBulkNotifications(baseData, recipients);

// 4. Napl√°novan√° notifik√°cia
var scheduledNotif = {
    sprava: "T√Ω≈ædenn√° porada o 10:00",
    poslatO: moment().add(1, 'week').hour(9).minute(0).toDate(),
    opakovat: "Ka≈æd√Ω t√Ω≈æde≈à",
    adresat: "Skupina"
};
ASISTANTONotifications.createNotification(scheduledNotif);
*/

// Vyp√≠≈° inform√°ciu o naƒç√≠tan√≠
utils.addDebug(entry(), "‚úÖ ASISTANTO Notifications Helper v" + CONFIG.version + " naƒç√≠tan√Ω");

// Pre kompatibilitu s require()
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ASISTANTONotifications;
}