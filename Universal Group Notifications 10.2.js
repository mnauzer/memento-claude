// ==============================================
// UNIVERSAL GROUP NOTIFICATION - Vytvorenie notifik√°cie
// Verzia: 10.2 | D√°tum: August 2025 | Autor: ASISTANTO
// Kni≈ænica: Univerz√°lna | Trigger: After Save
// ==============================================
// üìã FUNKCIA:
//    - Vytvor√≠/aktualizuje z√°znam v kni≈ænici Notifications
//    - Vyma≈æe star√© notifik√°cie pri edit√°cii
//    - Nalinkuje notifik√°ciu do poƒæa "Notifik√°cie"
//    - Pou≈æ√≠va info_telegram pole pre obsah spr√°vy
// ==============================================
// ‚úÖ ZMENY v10.2:
//    - Zjednodu≈°en√° logika - len vytvorenie z√°znamu
//    - Odstr√°nen√© v≈°etky format a extract funkcie
//    - Cleanup existuj√∫cich notifik√°ci√≠
//    - Bidirectional linking
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var centralConfig = utils.config;
var currentEntry = entry();
var currentLibrary = lib();

var CONFIG = {
    scriptName: "Universal Group Notification",
    version: "10.2",
    
    // Referencie na centr√°lny config
    fields: centralConfig.fields,
    libraries: centralConfig.libraries,
    icons: centralConfig.icons,
    
    // Mapovanie kni≈æn√≠c na ich konfigur√°cie
    libraryMapping: {
        "Doch√°dzka": {
            messageType: "Doch√°dzka",
            telegramGroupField: "Telegram skupina doch√°dzky",
            permissionField: "Doch√°dzka skupinov√© notifik√°cie"
        },
        "Z√°znam pr√°ce": {
            messageType: "Z√°znam pr√°c",
            telegramGroupField: "Telegram skupina z√°znamu pr√°c",
            permissionField: "Z√°znam pr√°c skupinov√© notifik√°cie"
        },
        "ASISTANTO API": {
            messageType: "Z√°znam pr√°c",
            telegramGroupField: "Telegram skupina z√°znamu pr√°c",
            permissionField: "Z√°znam pr√°c skupinov√© notifik√°cie"
        },
        "Kniha j√°zd": {
            messageType: "Kniha j√°zd",
            telegramGroupField: "Telegram skupina knihy j√°zd",
            permissionField: "Kniha j√°zd skupinov√© notifik√°cie"
        }
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        var libraryName = currentLibrary.title;
        utils.addDebug(currentEntry, utils.getIcon("start") + " === " + CONFIG.scriptName + " v" + CONFIG.version + " ===");
        utils.addDebug(currentEntry, "Kni≈ænica: " + libraryName);
        
        // 1. Kontrola ƒçi m√°me info_telegram pole
        var telegramMessage = utils.safeGet(currentEntry, "info_telegram");
        if (!telegramMessage) {
            utils.addDebug(currentEntry, utils.getIcon("info") + " Pole info_telegram je pr√°zdne - ≈æiadna notifik√°cia");
            return true;
        }
        
        // 2. Identifik√°cia kni≈ænice
        var libraryConfig = CONFIG.libraryMapping[libraryName];
        if (!libraryConfig) {
            utils.addDebug(currentEntry, utils.getIcon("info") + " Kni≈ænica '" + libraryName + "' nie je nakonfigurovan√° pre notifik√°cie");
            return true;
        }
        
        // 3. Kontrola povolen√≠
        if (!checkPermissions(libraryConfig.permissionField)) {
            utils.addDebug(currentEntry, utils.getIcon("info") + " Skupinov√© notifik√°cie s√∫ vypnut√©");
            return true;
        }
        
        // 4. Z√≠skanie Telegram skupiny
        var telegramGroup = getTelegramGroup(libraryConfig.telegramGroupField);
        if (!telegramGroup) {
            utils.addDebug(currentEntry, utils.getIcon("warning") + " Telegram skupina nen√°jden√° alebo neakt√≠vna");
            return true;
        }
        
        // 5. Cleanup star√Ωch notifik√°ci√≠
        var cleanupResult = cleanupOldNotifications();
        if (cleanupResult.deletedCount > 0) {
            utils.addDebug(currentEntry, utils.getIcon("delete") + " Vymazan√Ωch " + cleanupResult.deletedCount + " star√Ωch notifik√°ci√≠");
        }
        
        // 6. Vytvorenie novej notifik√°cie
        var notification = createNotification({
            message: telegramMessage,
            messageType: libraryConfig.messageType,
            telegramGroup: telegramGroup
        });
        
        if (!notification) {
            utils.addError(currentEntry, "Nepodarilo sa vytvori≈• notifik√°ciu", "main");
            return false;
        }
        
        // 7. Nalinkuj notifik√°ciu k z√°znamu
        linkNotification(notification);
        
        utils.addDebug(currentEntry, utils.getIcon("success") + " Notifik√°cia vytvoren√° (ID: " + notification.field("ID") + ")");
        utils.addDebug(currentEntry, utils.getIcon("success") + " === SCRIPT DOKONƒåEN√ù ===");
        
        return true;
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        return false;
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function checkPermissions(permissionField) {
    try {
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) return false;
        
        var settings = defaultsLib.entries();
        if (!settings || settings.length === 0) return false;
        
        var defaultSettings = settings[settings.length - 1];
        var enabled = utils.safeGet(defaultSettings, permissionField, false);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ " + permissionField + ": " + (enabled ? "√ÅNO" : "NIE"));
        
        return enabled;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "checkPermissions", error);
        return false;
    }
}

function getTelegramGroup(telegramGroupField) {
    try {
        var defaultsLib = libByName(CONFIG.libraries.defaults);
        if (!defaultsLib) return null;
        
        var settings = defaultsLib.entries();
        if (!settings || settings.length === 0) return null;
        
        var defaultSettings = settings[settings.length - 1];
        
        // Z√≠skaj pole telegram skup√≠n (je to array!)
        var telegramGroupEntries = utils.safeGet(defaultSettings, telegramGroupField);
        
        if (!telegramGroupEntries || telegramGroupEntries.length === 0) {
            utils.addError(currentEntry, "Telegram skupina nie je nastaven√° v poli '" + telegramGroupField + "'", "getTelegramGroup");
            return null;
        }
        
        // Vyber prv√∫ skupinu z array
        var telegramGroup = telegramGroupEntries[0];
        
        // Kontrola povolen√Ωch notifik√°ci√≠
        var notificationsEnabled = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.enableNotifications, false);
        if (!notificationsEnabled) {
            utils.addDebug(currentEntry, utils.getIcon("warning") + " Skupina m√° vypnut√© notifik√°cie");
            return null;
        }
        
        var groupName = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.groupName);
        var chatId = utils.safeGet(telegramGroup, CONFIG.fields.telegramGroups.chatId);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Skupina: " + groupName);
        utils.addDebug(currentEntry, "  ‚Ä¢ Chat ID: " + chatId);
        
        return telegramGroup;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "getTelegramGroup", error);
        return null;
    }
}

function cleanupOldNotifications() {
    try {
        var existingNotifications = utils.safeGet(currentEntry, "Notifik√°cie", []);
        var deletedCount = 0;
        
        for (var i = 0; i < existingNotifications.length; i++) {
            try {
                var notification = existingNotifications[i];
                if (notification && notification.trash) {
                    notification.trash();
                    deletedCount++;
                }
            } catch (deleteError) {
                utils.addError(currentEntry, "Chyba pri mazan√≠ notifik√°cie: " + deleteError.toString(), "cleanupOldNotifications");
            }
        }
        
        // Vyƒçisti pole
        currentEntry.set("Notifik√°cie", []);
        
        return {
            success: true,
            deletedCount: deletedCount
        };
        
    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba pri cleanup: " + error.toString(), "cleanupOldNotifications", error);
        return {
            success: false,
            deletedCount: 0
        };
    }
}

function createNotification(params) {
    try {
        var notifLib = libByName(CONFIG.libraries.notifications);
        if (!notifLib) {
            utils.addError(currentEntry, "Kni≈ænica " + CONFIG.libraries.notifications + " nen√°jden√°", "createNotification");
            return null;
        }
        
        var notification = notifLib.create({});
        
        // Z√°kladn√© polia
        notification.set(CONFIG.fields.notifications.status, "ƒåak√°");
        notification.set(CONFIG.fields.notifications.priority, 
            utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.messagePriority, "Norm√°lna"));
        notification.set(CONFIG.fields.notifications.messageType, params.messageType);
        notification.set(CONFIG.fields.notifications.messageSource, "Automatick√°");
        
        // Form√°tovanie - detekuj podƒæa obsahu spr√°vy
        var formatting = detectFormatting(params.message);
        notification.set(CONFIG.fields.notifications.formatting, formatting);
        
        // Telegram polia
        notification.set(CONFIG.fields.notifications.chatId, 
            utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.chatId));
        
        var threadId = utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.threadId);
        if (threadId) {
            notification.set(CONFIG.fields.notifications.threadId, threadId);
        }
        
        // Obsah spr√°vy
        notification.set(CONFIG.fields.notifications.message, params.message);
        
        // Prepojenia
        notification.set(CONFIG.fields.notifications.groupOrTopic, params.telegramGroup);
        
        // Info pole
        var infoMsg = "üìã NOTIFIK√ÅCIA - " + params.messageType.toUpperCase() + "\n";
        infoMsg += "Vytvoren√©: " + moment().format("DD.MM.YYYY HH:mm:ss") + "\n";
        infoMsg += "Zdrojov√° kni≈ænica: " + lib().title + "\n";
        infoMsg += "Zdrojov√Ω z√°znam: #" + currentEntry.field("ID") + "\n";
        infoMsg += "Skupina: " + utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.groupName) + "\n";
        infoMsg += "Chat ID: " + utils.safeGet(params.telegramGroup, CONFIG.fields.telegramGroups.chatId) + "\n";
        if (threadId) {
            infoMsg += "Thread ID: " + threadId + "\n";
        }
        infoMsg += "Form√°tovanie: " + formatting;
        
        notification.set(CONFIG.fields.common.info, infoMsg);
        
        return notification;
        
    } catch (error) {
        utils.addError(currentEntry, error.toString(), "createNotification", error);
        return null;
    }
}

function detectFormatting(message) {
    // Detekuj HTML tagy
    if (message.match(/<[^>]+>/)) {
        return "HTML";
    }
    // Detekuj Markdown
    else if (message.match(/\*[^*]+\*|_[^_]+_|`[^`]+`|\[.+\]\(.+\)/)) {
        return "Markdown";
    }
    // Defaultne text
    return "Text";
}

function linkNotification(notification) {
    try {
        var existingNotifications = utils.safeGet(currentEntry, "Notifik√°cie", []);
        existingNotifications.push(notification);
        currentEntry.set("Notifik√°cie", existingNotifications);
        
        utils.addDebug(currentEntry, "  ‚Ä¢ Notifik√°cia nalinkovan√° k z√°znamu");
        
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri linkovan√≠ notifik√°cie: " + error.toString(), "linkNotification", error);
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

// Kontrola z√°vislost√≠
var dependencyCheck = utils.checkDependencies(['config', 'core']);
if (!dependencyCheck.success) {
    message("‚ùå Ch√Ωbaj√∫ potrebn√© moduly: " + dependencyCheck.missing.join(", "));
    cancel();
}

// Spustenie hlavnej funkcie
var result = main();

// Ak hlavn√° funkcia zlyhala, zaloguj ale nepreru≈°uj ulo≈æenie (After Save)
if (!result) {
    utils.addError(currentEntry, "Script zlyhal ale z√°znam bol ulo≈æen√Ω", "main");
}