// ==============================================
// MEMENTO DATABASE - Z√ÅZNAM PR√ÅC - AFTER SAVE TRIGGER
// Verzia: 1.0 | D√°tum: 12.08.2025
// ==============================================

var CONFIG = {
    debug: true,
    version: "1.0",
    fields: {
        datum: "D√°tum",
        zakazka: "Z√°kazka",
        od: "Od",
        do: "Do",
        zamestnanci: "Zamestnanci",
        hzs: "Hodinov√° z√∫ƒçtovacia sadzba",
        vykonanePrace: "Vykonan√© pr√°ce",
        pracovnaDoba: "Pracovn√° doba",
        odpracovane: "Odpracovan√©",
        pocetPracovnikov: "Poƒçet pracovn√≠kov",
        mzdoveNaklady: "Mzdov√© n√°klady",
        sumaHZS: "Suma HZS",
        info: "info",
        debugLog: "Debug_Log",
        errorLog: "Error_Log"
    },
    attributes: {
        odpracovane: "odpracovan√©",
        hodinovka: "hodinovka",
        mzdoveNaklady: "mzdov√© n√°klady",
        cena: "cena"
    },
    libraries: {
        sadzbyZam: "sadzby zamestnancov",
        vykazPrac: "V√Ωkaz pr√°c",
        cenyPrac: "ceny pr√°c"
    },
    sadzbyFields: {
        zamestnanec: "Zamestnanec",
        platnostOd: "Platnos≈• od",
        sadzba: "Sadzba"
    }
};

// Lok√°lne logy
var debugLog = [];
var errorLog = [];
var e = entry();

function logDebug(msg) {
    if (CONFIG.debug) {
        var ts = moment().format("DD.MM.YY HH:mm:ss");
        debugLog.push("[" + ts + "] " + msg);
    }
}

function logError(msg, loc) {
    var ts = moment().format("DD.MM.YY HH:mm:ss");
    errorLog.push("[" + ts + "] ‚ùå " + msg + (loc ? " (Loc: " + loc + ")" : ""));
}

function saveLogs() {
    try {
        e.set(CONFIG.fields.debugLog, debugLog.join("\n"));
        e.set(CONFIG.fields.errorLog, errorLog.join("\n"));
    } catch (_) {}
}

function safeVal(val, defVal) {
    return (val !== null && val !== undefined) ? val : defVal;
}

function roundToQuarter(ms) {
    if (!ms) return null;
    var q = 15 * 60 * 1000;
    return Math.round(ms / q) * q;
}

function calcHours(msStart, msEnd) {
    if (!msStart || !msEnd) return 0;
    if (msEnd < msStart) {
        msEnd += 24 * 60 * 60 * 1000;
        logDebug("‚è∞ Pr√°ca cez polnoc");
    }
    return Math.round(((msEnd - msStart) / 3600000) * 100) / 100;
}

function findValidSalary(zamEntry, workDate) {
    try {
        var sadzby = zamEntry.linksFrom(CONFIG.libraries.sadzbyZam, CONFIG.sadzbyFields.zamestnanec) || [];
        if (!sadzby.length) {
            logDebug("‚ö†Ô∏è ≈Ωiadne sadzby pre zamestnanca: " + zamEntry.field("Nick"));
            return 0;
        }
        var sel = 0, latest = null;
        for (var i=0; i<sadzby.length; i++) {
            var platOd = sadzby[i].field(CONFIG.sadzbyFields.platnostOd);
            var sadzba = parseFloat(sadzby[i].field(CONFIG.sadzbyFields.sadzba) || 0);
            if (platOd && sadzba && platOd <= workDate) {
                if (!latest || platOd > latest) {
                    latest = platOd;
                    sel = sadzba;
                }
            }
        }
        logDebug("‚úÖ Hodinovka: " + sel);
        return sel;
    } catch(err) {
        logError("Chyba pri hƒæadan√≠ hodnoty hodinovky: " + err, "findValidSalary");
        return 0;
    }
}

function processEmployee(zam, idx, workHours, datum) {
    try {
        var n = zam.field("Nick") || "Nezn√°my";
        logDebug("üë§ Zamestnanec #" + (idx+1) + ": " + n);

        var hodinovka = findValidSalary(zam, datum);
        var naklady = workHours * hodinovka;
        
        zam.setAttr(CONFIG.attributes.odpracovane, workHours);
        zam.setAttr(CONFIG.attributes.hodinovka, hodinovka);
        zam.setAttr(CONFIG.attributes.mzdoveNaklady, naklady);

        logDebug("  odpracovan√©=" + workHours + " h, hodinovka=" + hodinovka + " ‚Ç¨, mzdov√© n√°klady=" + naklady);
        return naklady;
    } catch(ex) {
        logError("Chyba spracovania zamestnanca idx=" + idx + ": " + ex, "processEmployee");
        return 0;
    }
}

function generateIdentifikator(zakazka) {
    try {
        var zakazkaID = zakazka.field("ID") || "XXX";
        var datum = moment().format("YYYYMM");
        return "VYK-" + zakazkaID + "-" + datum;
    } catch (e) {
        return "VYK-" + moment().format("YYYYMMDD");
    }
}

function generatePopis(zakazka) {
    try {
        var zakazkaNazov = zakazka.field("N√°zov") || "Nezn√°ma z√°kazka";
        var mesiac = moment().format("MMMM YYYY");
        return "V√Ωkaz pr√°c pre z√°kazku " + zakazkaNazov + " - " + mesiac;
    } catch (e) {
        return "V√Ωkaz pr√°c - " + moment().format("MMMM YYYY");
    }
}

function syncVykazPrac(currentEntry) {
    try {
        var zakazka = currentEntry.field(CONFIG.fields.zakazka);
        if (!zakazka) {
            logError("Ch√Ωba pole Z√°kazka, nem√¥≈æem synchronizova≈• V√Ωkaz pr√°c", "syncVykazPrac");
            return false;
        }

        logDebug("üîç Kontrolujem existenciu V√Ωkazu pr√°c pre z√°kazku...");

        var existujuceVyroky = zakazka.linksFrom("V√Ωkaz pr√°c", "Z√°kazka") || [];
        var vykazPrac = existujuceVyroky.length > 0 ? existujuceVyroky[0] : null;

        if (!vykazPrac) {
            logDebug("üí° Vytv√°ram nov√Ω V√Ωkaz pr√°c pre z√°kazku...");
            
            var vykazLib = libByName("V√Ωkaz pr√°c");
            if (!vykazLib) {
                logError("Kni≈ænica 'V√Ωkaz pr√°c' neexistuje", "syncVykazPrac");
                return false;
            }

            vykazPrac = vykazLib.create();

            vykazPrac.set("D√°tum", currentEntry.field(CONFIG.fields.datum) || null);
            vykazPrac.set("Identifik√°tor", generateIdentifikator(zakazka));
            vykazPrac.set("Popis", generatePopis(zakazka));
            
            var typVykazu = safeVal(zakazka.field("Typ v√Ωkazu"), "Hodinovka");
            vykazPrac.set("Typ v√Ωkazu", typVykazu);
            vykazPrac.set("Ceny poƒç√≠ta≈•", "Z cenovej ponuky");
            
            var cenovaPonuka = zakazka.field("Cenov√° ponuka");
            if (cenovaPonuka) {
                vykazPrac.set("Cenov√° ponuka", cenovaPonuka);
            }
            
            vykazPrac.set("Vydan√©", "Z√°kazka");
            vykazPrac.set(CONFIG.fields.zakazka, zakazka);

            logDebug("‚úÖ Nov√Ω V√Ωkaz pr√°c vytvoren√Ω a vyplnen√Ω");
        } else {
            logDebug("‚ÑπÔ∏è Existuj√∫ci V√Ωkaz pr√°c n√°jden√Ω pre z√°kazku");
        }

        var praceHZS = vykazPrac.field("Pr√°ce HZS") || [];
        if (!praceHZS) praceHZS = [];

        var linkExists = praceHZS.some(function(linkedEntry) {
            return linkedEntry.id === currentEntry.id;
        });

        if (!linkExists) {
            praceHZS.push(currentEntry);
            vykazPrac.set("Pr√°ce HZS", praceHZS);

            var lastIndex = praceHZS.length - 1;

            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "vykonan√© pr√°ce", safeVal(currentEntry.field(CONFIG.fields.vykonanePrace), ""));
            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "poƒçet hod√≠n", safeVal(currentEntry.field(CONFIG.fields.odpracovane), 0));
            
            var cenaUc = 0;
            var hzsLink = currentEntry.field(CONFIG.fields.hzs);
            if (hzsLink && hzsLink.attr) {
                cenaUc = parseFloat(hzsLink.attr("cena") || 0);
            }
            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "√∫ƒçtovan√° sadzba", cenaUc);
            
            var cenaCelk = safeVal(currentEntry.field(CONFIG.fields.odpracovane), 0) * cenaUc;
            vykazPrac.setAttr("Pr√°ce HZS", lastIndex, "cena celkom", Math.round(cenaCelk * 100) / 100);

            logDebug("üîó Sp√§tn√Ω link pridan√Ω do V√Ωkazu pr√°c s atrib√∫tmi");
        } else {
            logDebug("‚ÑπÔ∏è Sp√§tn√Ω link u≈æ existuje vo V√Ωkaze pr√°c");
        }

        return true;

    } catch (e) {
        logError("Chyba pri synchroniz√°cii V√Ωkazu pr√°c: " + e.toString(), "syncVykazPrac");
        return false;
    }
}

function safeVal(val, def) {
    return (val !== undefined && val !== null) ? val : def;
}

function main() {
    logDebug("üöÄ ≈†tart spracovania Z√°znamu pr√°c v verzii " + CONFIG.version);
    try {
        var datum = safeVal(e.field(CONFIG.fields.datum), null);
        var odRaw = e.field(CONFIG.fields.od);
        var doRaw = e.field(CONFIG.fields.do);
        var zam = safeVal(e.field(CONFIG.fields.zamestnanci), []);

        if (!datum || !odRaw || !doRaw || zam.length === 0) {
            logError("Ch√Ωbaj√∫ povinn√© polia: D√°tum, Od, Do alebo Zamestnanci");
            return false;
        }

        var odMs = roundToQuarter(new Date(odRaw).getTime());
        var doMs = roundToQuarter(new Date(doRaw).getTime());
        e.set(CONFIG.fields.od, new Date(odMs));
        e.set(CONFIG.fields.do, new Date(doMs));
        logDebug("‚è∞ ƒåasy zaokr√∫hlen√© na 15 min: Od=" + moment(odMs).format("HH:mm") + ", Do=" + moment(doMs).format("HH:mm"));

        var pracovnadoba = calcHours(odMs, doMs);
        e.set(CONFIG.fields.pracovnaDoba, pracovnadoba);
        logDebug("üïí Pracovn√° doba: " + pracovnadoba + " h");

        var pocetPracovnikov = zam.length;
        e.set(CONFIG.fields.pocetPracovnikov, pocetPracovnikov);

        var odpracovaneTotal = pracovnadoba * pocetPracovnikov;
        e.set(CONFIG.fields.odpracovane, odpracovaneTotal);
        logDebug("üë• Poƒçet pracovn√≠kov: " + pocetPracovnikov);
        logDebug("üî¢ Odpracovan√© spolu: " + odpracovaneTotal + " h");

        var mzdoveNakladyTotal = 0;
        var uspechCount = 0;
        for (var i=0; i<pocetPracovnikov; i++) {
            var mzda = processEmployee(zam[i], i, pracovnadoba, datum);
            if(mzda>0) {
                mzdoveNakladyTotal += mzda;
                uspechCount++;
            } else {
                logDebug("‚ö†Ô∏è Zamestnanec #" + (i+1) + " m√° nulov√© mzdov√© n√°klady");
            }
        }
        e.set(CONFIG.fields.mzdoveNaklady, mzdoveNakladyTotal);
        logDebug("üí∞ Mzdov√© n√°klady spolu: " + mzdoveNakladyTotal.toFixed(2) + " ‚Ç¨");
        logDebug("üìà Spracovan√Ωch zamestnancov: " + uspechCount + "/" + pocetPracovnikov);

        var hzsEntry = e.field(CONFIG.fields.hzs);
        var cenaHZS = 0;
        if (hzsEntry) {
            var cenyPracEntries = hzsEntry.linksFrom(CONFIG.libraries.cenyPrac, "Cenn√≠k pr√°c") || [];
            if (cenyPracEntries.length > 0) {
                cenaHZS = parseFloat(cenyPracEntries[cenyPracEntries.length-1].field("Cena") || 0);
            } else {
                cenaHZS = parseFloat(hzsEntry.field("Cena") || 0);
            }
            hzsEntry.setAttr(CONFIG.attributes.cena, cenaHZS);
            logDebug("üìè Hodinov√° z√∫ƒçtovacia sadzba: " + cenaHZS.toFixed(2) + " ‚Ç¨");
        }
        var sumaHZS = odpracovaneTotal * cenaHZS;
        e.set(CONFIG.fields.sumaHZS, sumaHZS);
        logDebug("Œ£ Suma HZS: " + sumaHZS.toFixed(2) + " ‚Ç¨");

        var syncResult = syncVykazPrac(e);
        if (syncResult) {
            logDebug("‚úÖ V√Ωkaz pr√°c synchronizovan√Ω √∫spe≈°ne");
        } else {
            logError("‚ùå Synchroniz√°cia V√Ωkazu pr√°c zlyhala");
        }

        return true;
    } catch (ex) {
        logError("V√Ωnimka poƒças spracovania: " + ex.toString());
        return false;
    }
}

// Spustenie skriptu a ulo≈æenie logov
try {
    var success = main();
    saveLogs();
    if (success) {
        message("‚úÖ Z√°znam pr√°c bol √∫spe≈°ne prepoƒç√≠tan√Ω");
    } else {
        message("‚ùå Pri prepoƒçte Z√°znamu pr√°c do≈°lo k chybe, skontrolujte Error_Log");
    }
} catch (fatalErr) {
    logError("Kritick√° chyba skriptu: " + fatalErr.toString());
    saveLogs();
    message("üí• Kritick√° chyba poƒças spracovania z√°znamu pr√°c");
}
