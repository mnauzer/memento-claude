// After Save trigger script for "Z√°znam pr√°c"
var utils = MementoUtils;

try {
    // Vyƒçisti debug log pre nov√Ω z√°pis
    utils.clearLogs(entry(), false);
    utils.addDebug(entry(), "üöÄ Sp√∫≈°≈•am spracovanie z√°znamu pr√°ce");

    var e = entry();

    // 1. Zaokr√∫hlenie ƒçasu Od a Do na 15 min√∫t
    var odRaw = utils.safeFieldAccess(e, "Od");
    var doRaw = utils.safeFieldAccess(e, "Do");

    var odMoment = odRaw ? moment(odRaw) : null;
    var doMoment = doRaw ? moment(doRaw) : null;

    if (odMoment && doMoment) {
        var odRounded = utils.roundToQuarter(odMoment);
        var doRounded = utils.roundToQuarter(doMoment);

        e.set("Od", odRounded.toDate());
        e.set("Do", doRounded.toDate());

        utils.addDebug(e, "‚è∞ ƒåasy zaokr√∫hlen√© na 15 min√∫t (Od: " + odRounded.format("HH:mm") + ", Do: " + doRounded.format("HH:mm") + ")");
    } else {
        utils.addError(e, "‚ö†Ô∏è Ch√Ωba platn√Ω ƒças v Od alebo Do");
    }

    // 2. V√Ωpoƒçet pracovnej doby v hodin√°ch
    var pracovnadoba = (odRounded && doRounded) ? doRounded.diff(odRounded, "minutes") / 60 : 0;
    pracovnadoba = pracovnadoba > 0 ? Math.round(pracovnadoba * 100) / 100 : 0;
    e.set("Pracovn√° doba", pracovnadoba);
    utils.addDebug(e, "üïí Pracovn√° doba vypoƒç√≠tan√°: " + pracovnadoba + " hod√≠n");

    // 3. Spracovanie poƒæa Zamestnanci
    var zamestnanci = utils.safeGetLinks(e, "Zamestnanci");
    var pocetPracovnikov = zamestnanci.length;
    e.set("Poƒçet pracovn√≠kov", pocetPracovnikov);
    utils.addDebug(e, "üë• Poƒçet zamestnancov: " + pocetPracovnikov);

    var odpracovaneCelkom = 0;
    var mzdoveNakladyCelkom = 0;

    for (var i = 0; i < pocetPracovnikov; i++) {
        var zam = zamestnanci[i];

        // Atrib√∫t odpracovan√© - pracovn√° doba (v hodin√°ch)
        zam.setAttr("odpracovan√©", pracovnadoba);

        // Zistenie hodinovej sadzby k d√°tumu D√°tum
        var sadzby = zam.linksFrom("sadzby zamestnancov", "Zamestnanec") || [];
        var datum = utils.safeFieldAccess(e, "D√°tum", null);
        var hodinovka = 0;

        // Vyber posledn√∫ platn√∫ sadzbu podƒæa d√°tumu
        var validSadzba = null;
        for (var j = 0; j < sadzby.length; j++) {
            var s = sadzby[j];
            var platnostOd = moment(utils.safeFieldAccess(s, "Platnos≈• od"));
            if (datum && platnostOd.isValid() && datum >= platnostOd.toDate()) {
                if (!validSadzba || platnostOd.isAfter(moment(utils.safeFieldAccess(validSadzba, "Platnos≈• od")))) {
                    validSadzba = s;
                }
            }
        }
        if (validSadzba) {
            hodinovka = parseFloat(utils.safeFieldAccess(validSadzba, "Sadzba hodinov√°", 0)) || 0;
        }
        zam.setAttr("hodinovka", hodinovka);

        // V√Ωpoƒçet mzdov√Ωch n√°kladov = odpracovan√© * hodinovka
        var mzdoveNaklady = pracovnadoba * hodinovka;
        zam.setAttr("mzdov√© n√°klady", mzdoveNaklady);

        odpracovaneCelkom += pracovnadoba;
        mzdoveNakladyCelkom += mzdoveNaklady;

        utils.addDebug(e, "üßë Zamestnanec #" + (i+1) + ": hodinovka=" + hodinovka + ", mzdov√© n√°klady=" + mzdoveNaklady.toFixed(2));
    }

    // 4. V√Ωpoƒçet Odpracovan√© (Pracovn√° doba * poƒçet zamestnancov)
    var odpracovaneTotal = pracovnadoba * pocetPracovnikov;
    e.set("Odpracovan√©", odpracovaneTotal);
    utils.addDebug(e, "üî¢ Odpracovan√© celkom: " + odpracovaneTotal + " hod√≠n");

    // 5. V√Ωpoƒçet Mzdov√© n√°klady (s√∫ƒçet atrib√∫tov)
    e.set("Mzdov√© n√°klady", Math.round(mzdoveNakladyCelkom * 100) / 100);
    utils.addDebug(e, "üí∞ Mzdov√© n√°klady celkom: " + mzdoveNakladyCelkom.toFixed(2) + " ‚Ç¨");

    // 6. Spracovanie Hodinov√° z√∫ƒçtovacia sadzba
    var hzs = utils.safeGetFirstLink(e, "Hodinov√° z√∫ƒçtovacia sadzba");
    var cenaHZS = 0;
    if (hzs) {
        // Zis≈•ovanie ceny cez linksFrom "ceny pr√°c"
        var cenyPrac = hzs.linksFrom("ceny pr√°c", "Cenn√≠k pr√°c") || [];
        if (cenyPrac.length > 0) {
            var poslednaCena = cenyPrac[cenyPrac.length - 1];
            cenaHZS = parseFloat(utils.safeFieldAccess(poslednaCena, "Cena", 0));
            // Dopln√≠me cenu do HZS z√°znamu
            poslednaCena.set("Cena", cenaHZS);
        } else {
            // ≈Ωiadne ceny pr√°c - pou≈æije sa Cena v HZS
            cenaHZS = parseFloat(utils.safeFieldAccess(hzs, "Cena", 0));
        }
        // Zap√≠≈° cenu ako atrib√∫t "cena"
        hzs.setAttr("cena", cenaHZS);
    }
    utils.addDebug(e, "üíµ Hodinov√° z√∫ƒçtovacia sadzba (cena): " + cenaHZS);

    // 7. V√Ωpoƒçet Suma HZS
    var sumaHZS = odpracovaneTotal * cenaHZS;
    e.set("Suma HZS", Math.round(sumaHZS * 100) / 100);
    utils.addDebug(e, "üí∏ Suma HZS vypoƒç√≠tan√°: " + sumaHZS.toFixed(2) + " ‚Ç¨");

    // 8. Automatick√© prepojenie s V√Ωkaz pr√°c
    var zakazka = utils.safeGetFirstLink(e, "Z√°kazka");
    var vymazanyVyrokPrac = null;

    if (zakazka) {
        // Skontrolujeme existuj√∫ci V√Ωkaz pr√°c pre t√∫to z√°kazku
        var vyzPracLib = libByName("V√Ωkaz pr√°c");
        var existujuceVyroky = vyzPracLib ? vyzPracLib.find("Z√°kazka", zakazka) : [];
        if (neexistujuceVyroky && existujuceVyroky.length > 0) {
            vymazanyVyrokPrac = existujuceVyroky[0]; // Prv√Ω existuj√∫ci v√Ωkaz
        } else {
            vymazanyVyrokPrac = null;
        }
    }

    if (!vymazanyVyrokPrac) {
        // Vytvor√≠me nov√Ω V√Ωkaz pr√°c
        var vyzPracLib = libByName("V√Ωkaz pr√°c");
        if (vyzPracLib) {
            var newVyrok = vyzPracLib.create();
            newVyrok.set("D√°tum", e.field("D√°tum") || null);
            // Nastav ostatn√© polia podƒæa popisu (pou≈æ√≠vaj default hodnoty ak treba)
            newVyrok.set("Identifik√°tor", ""); // uprav podƒæa pravidiel
            newVyrok.set("Popis", "");
            var typVykazu = utils.safeFieldAccess(zakazka, "Typ v√Ωkazu", "Hodinovka");
            newVyrok.set("Typ v√Ωkazu", typVykazu);
            newVyrok.set("Ceny poƒç√≠ta≈•", "Z cenovej ponuky");
            var cenPonuka = utils.safeGetFirstLink(zakazka, "Cenov√° ponuka");
            if (cenPonuka) {
                newVyrok.set("Cenov√° ponuka", cenPonuka);
            }
            newVyrok.set("Vydan√©", "Z√°kazka");
            newVyrok.set("Z√°kazka", zakazka);
            vymazanyVyrokPrac = newVyrok;
            utils.addInfo(e, "üí° Vytvoren√Ω nov√Ω V√Ωkaz pr√°c");
        } else {
            utils.addError(e, "‚ùå Kni≈ænica V√Ωkaz pr√°c neexistuje");
        }
    }

    // Pridaj sp√§tn√Ω link do V√Ωkazu pr√°c v poli "Pr√°ce HZS"
    if (vymazanyVyrokPrac) {
        var praceHZS = vymazanyVyrokPrac.field("Pr√°ce HZS") || [];
        var existsLink = false;

        // Skontroluj, ƒçi u≈æ link na tento z√°znam existuje
        for (var k = 0; k < praceHZS.length; k++) {
            if (praceHZS[k].id === e.id) {
                existsLink = true;
                break;
            }
        }
        if (!existsLink) {
            praceHZS.push(e);
            vymazanyVyrokPrac.set("Pr√°ce HZS", praceHZS);

            // Nastav atrib√∫ty linku
            vymazanyVyrokPrac.setAttr("Pr√°ce HZS", praceHZS.length -1, "vykonan√© pr√°ce", utils.safeFieldAccess(e, "Vykonan√© pr√°ce", ""));
            vymazanyVyrokPrac.setAttr("Pr√°ce HZS", praceHZS.length -1, "poƒçet hod√≠n", utils.safeFieldAccess(e, "Odpracovan√©", 0));
            
            var cenaUc = 0;
            if (hzs) {
                cenaUc = parseFloat(hzs.attr("cena")) || 0;
            }
            vymazanyVyrokPrac.setAttr("Pr√°ce HZS", praceHZS.length -1, "√∫ƒçtovan√° sadzba", cenaUc);
            var cenaCelk = (utils.safeFieldAccess(e, "Odpracovan√©", 0) * cenaUc);
            vymazanyVyrokPrac.setAttr("Pr√°ce HZS", praceHZS.length -1, "cena celkom", Math.round(cenaCelk * 100) / 100);

            utils.addInfo(e, "üîó Pridan√Ω sp√§tn√Ω link do V√Ωkazu pr√°c s atrib√∫tmi");
        } else {
            utils.addDebug(e, "‚ÑπÔ∏è Sp√§tn√Ω link u≈æ v existuj√∫com V√Ωkaze pr√°c");
        }
    }

    utils.addDebug(e, "üèÅ Spracovanie z√°znamu pr√°ce dokonƒçen√©");

} catch (ex) {
    utils.addError(entry(), "‚ùå V√Ωnimka v spracovan√≠ z√°znamu pr√°ce: " + ex.toString());
}
