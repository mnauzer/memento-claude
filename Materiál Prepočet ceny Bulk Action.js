// ==============================================
// MEMENTO DATABASE - MATERI√ÅL PREPOƒåET CENY BULK ACTION
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Materi√°l | Trigger: Bulk Action
// ==============================================
// üìã FUNKCIA:
//    - Hromadn√Ω prepoƒçet cien materi√°lov
//    - Argumenty: "n√°kupn√° cena" (ƒç√≠slo) + "dph" (s DPH/bez DPH)
//    - Automatick√Ω prepoƒçet ceny bez DPH ak je zadan√° s DPH
//    - Kontrola zmeny n√°kupnej ceny podƒæa nastaven√≠
//    - Automatick√Ω prepoƒçet predajn√Ωch cien
//    - Aktualiz√°cia ikon podƒæa zmeny ceny
//    - Automatick√© vytvorenie/aktualiz√°cia cenovej hist√≥rie
//    - Dialog so zhrnut√≠m len na konci oper√°cie
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoBusiness (business logika pre ceny materi√°lu)
// üìù ARGUMENTY:
//    - "n√°kupn√° cena" (Number): Nov√° n√°kupn√° cena materi√°lu (voliteƒæn√© - ak nie je zadan√°, pou≈æije sa cena z poƒæa)
//    - "dph" (Options: "s DPH", "bez DPH"): ƒåi je zadan√° cena s/bez DPH (voliteƒæn√© - ak nie je zadan√©, urƒç√≠ sa podƒæa sadzby DPH)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;

var CONFIG = {
    scriptName: "Materi√°l Prepoƒçet ceny Bulk Action",
    version: "1.0.0",

    // Kni≈ænice
    libraries: {
        inventory: (centralConfig.libraries && centralConfig.libraries.inventory) || "Materi√°l",
        vatRates: (centralConfig.libraries && centralConfig.libraries.vatRatesLib) || "sadzby DPH"
    },

    // Polia Materi√°l
    materialFields: {
        name: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.name) || "N√°zov",
        purchasePrice: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePrice) || "N√°kupn√° cena",
        purchasePriceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceWithVat) || "N√°kupn√° cena s DPH",
        price: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.price) || "Cena",
        priceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceWithVat) || "Cena s DPH",
        priceCalculation: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceCalculation) || "Prepoƒçet ceny",
        markupPercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.markupPercentage) || "Obchodn√° prir√°≈æka",
        priceRounding: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceRounding) || "Zaokr√∫hƒæovanie cien",
        roundingValue: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.roundingValue) || "Hodnota zaokr√∫henia",
        vatRate: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.vatRate) || "sadzba DPH",
        purchasePriceChange: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceChange) || "Zmena n√°kupnej ceny",
        changePercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.changePercentage) || "Percento zmeny",
        icons: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.icons) || "icons",

        // Spoloƒçn√© polia
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },

    // Ikony
    icons: (centralConfig.icons) || {
        start: "üöÄ",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è",
        money: "üí∞",
        calculation: "üßÆ",
        material: "üì¶",
        bulk: "üìã"
    }
};

// ==============================================
// GLOB√ÅLNE PREMENN√â PRE SLEDOVANIE V√ùSLEDKOV
// ==============================================

var bulkResults = {
    total: 0,
    processed: 0,
    successful: 0,
    failed: 0,
    skipped: 0,
    errors: [],
    details: [],
    startTime: new Date()
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        // Z√≠skanie argumentov
        var newPurchasePrice = null;
        var dphOption = null;

        // Bezpeƒçn√© z√≠skanie argumentov
        try {
            newPurchasePrice = arg("n√°kupn√° cena");
        } catch (e) {
            // Argument nie je definovan√Ω, pou≈æijeme null
            newPurchasePrice = null;
        }

        try {
            dphOption = arg("dph");
        } catch (e) {
            dphOption = null;
        }

        // Z√≠skanie v≈°etk√Ωch vybran√Ωch materi√°lov (Bulk Action API)
        var materialEntries = selectedEntries();
        bulkResults.total = materialEntries.length;

        // Ak nie je zadan√Ω DPH argument, urƒç√≠me ho podƒæa prv√©ho materi√°lu
        if (dphOption === null || dphOption === undefined || dphOption === "") {
            dphOption = determineDphOptionFromMaterials(materialEntries);
            if (!dphOption) {
                utils.showErrorDialog("‚ùå CHYBA ARGUMENTU\\n\\nArgument 'dph' nie je zadan√Ω a nie je mo≈æn√© ho urƒçi≈• automaticky!\\n\\nVyberte: 's DPH' alebo 'bez DPH' alebo nastavte sadzbu DPH v materi√°loch.");
                return false;
            }
        }

        // Valid√°cia hodnoty DPH argumentu
        if (dphOption !== "s DPH" && dphOption !== "bez DPH") {
            utils.showErrorDialog("‚ùå CHYBA ARGUMENTU\\n\\nArgument 'dph' m√° neplatn√∫ hodnotu: '" + dphOption + "'\\n\\nPovolen√© hodnoty: 's DPH', 'bez DPH'.");
            return false;
        }

        if (bulkResults.total === 0) {
            utils.showErrorDialog("‚ùå ≈ΩIADNE MATERI√ÅLY\\n\\nNie s√∫ vybran√© ≈æiadne materi√°ly na spracovanie!");
            return false;
        }

        // Spracovanie v≈°etk√Ωch vybran√Ωch materi√°lov
        for (var i = 0; i < materialEntries.length; i++) {
            var currentEntry = materialEntries[i];
            var materialName = utils.safeGet(currentEntry, CONFIG.materialFields.name, "Materi√°l #" + (i + 1));

            try {
                bulkResults.processed++;

                // Spracovanie materi√°lu
                var success = processMaterial(currentEntry, newPurchasePrice, dphOption, materialName, i + 1);

                if (success) {
                    bulkResults.successful++;
                } else {
                    bulkResults.failed++;
                }

            } catch (error) {
                bulkResults.failed++;
                bulkResults.errors.push({
                    material: materialName,
                    error: error.toString()
                });

                utils.addError(currentEntry, "Chyba pri spracovan√≠ materi√°lu: " + error.toString(), "main", error);
            }
        }

        // Zobrazenie fin√°lneho zhrnut√≠a
        showFinalSummary();

        return true;

    } catch (error) {
        utils.showErrorDialog("Kritick√° chyba v bulk akcii!\\n\\n" + error.toString());
        return false;
    }
}

// ==============================================
// SPRACOVANIE JEDN√âHO MATERI√ÅLU
// ==============================================

/**
 * Spracuje jeden materi√°l v r√°mci bulk akcie
 */
function processMaterial(currentEntry, inputPrice, dphOption, materialName, materialIndex) {
    try {
        // ƒåistenie logov pre aktu√°lny materi√°l
        utils.clearLogs(currentEntry, [CONFIG.materialFields.debugLog, CONFIG.materialFields.errorLog]);
        utils.addDebug(currentEntry, CONFIG.icons.bulk + " [" + materialIndex + "/" + bulkResults.total + "] " + CONFIG.scriptName + " v" + CONFIG.version);

        var currentPurchasePrice = parseFloat(utils.safeGet(currentEntry, CONFIG.materialFields.purchasePrice, 0));
        utils.addDebug(currentEntry, CONFIG.icons.material + " Materi√°l: " + materialName);
        utils.addDebug(currentEntry, CONFIG.icons.info + " Aktu√°lna n√°kupn√° cena: " + utils.formatMoney(currentPurchasePrice));

        // Spracovanie argumentov
        var finalPurchasePrice = processPurchasePriceFromArguments(currentEntry, inputPrice, dphOption, materialName, currentPurchasePrice);

        if (finalPurchasePrice === null) {
            bulkResults.skipped++;
            bulkResults.details.push({
                material: materialName,
                status: "preskoƒçen√Ω",
                reason: "neplatn√° n√°kupn√° cena alebo chyba argumentov"
            });
            return false;
        }

        // Vykonanie prepoƒçtu
        var result = executeCalculation(currentEntry, finalPurchasePrice, materialName);

        if (result && result.success) {
            bulkResults.details.push({
                material: materialName,
                status: "√∫spe≈°n√Ω",
                oldPrice: currentPurchasePrice,
                newPrice: finalPurchasePrice,
                sellingPrice: result.sellingPrice,
                priceWithVat: result.priceWithVat
            });
            return true;
        } else {
            bulkResults.details.push({
                material: materialName,
                status: "ne√∫spe≈°n√Ω",
                reason: result ? result.message : "nezn√°ma chyba"
            });
            return false;
        }

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ materi√°lu: " + error.toString(), "processMaterial", error);
        bulkResults.details.push({
            material: materialName,
            status: "chyba",
            reason: error.toString()
        });
        return false;
    }
}

// ==============================================
// SPRACOVANIE ARGUMENTOV
// ==============================================

/**
 * Spracuje n√°kupn√∫ cenu a DPH option z argumentov akcie
 */
function processPurchasePriceFromArguments(currentEntry, inputPrice, dphOption, materialName, currentPurchasePrice) {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.info + " Argumenty - n√°kupn√° cena: " + (inputPrice || "nie je zadan√°") + ", dph: " + dphOption);

        var inputPriceValue = null;

        // Logika pre urƒçenie fin√°lnej ceny:
        // 1. Ak je zadan√Ω argument a je platn√Ω, pou≈æi≈• ho
        // 2. Ak nie je zadan√Ω argument alebo je neplatn√Ω, pou≈æi≈• cenu z poƒæa
        // 3. Ak ani pole nem√° cenu, prida≈• varovn√∫ ikonu a preskoƒçi≈• materi√°l

        if (inputPrice !== null && inputPrice !== undefined && inputPrice !== "") {
            inputPriceValue = parseFloat(inputPrice);
            if (!isNaN(inputPriceValue) && inputPriceValue > 0) {
                utils.addDebug(currentEntry, CONFIG.icons.money + " Pou≈æit√° cena z argumentu: " + utils.formatMoney(inputPriceValue));
            } else {
                // Neplatn√Ω argument, pou≈æi≈• cenu z poƒæa
                inputPriceValue = null;
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Neplatn√Ω argument ceny, pou≈æijem cenu z poƒæa");
            }
        }

        // Ak nem√°me platn√∫ cenu z argumentu, pou≈æi≈• cenu z poƒæa
        if (inputPriceValue === null) {
            if (currentPurchasePrice > 0) {
                inputPriceValue = currentPurchasePrice;
                utils.addDebug(currentEntry, CONFIG.icons.info + " Pou≈æit√° n√°kupn√° cena z poƒæa materi√°lu: " + utils.formatMoney(inputPriceValue));
            } else {
                // Prida≈• varovn√∫ ikonu do poƒæa icons
                addWarningIcon(currentEntry, materialName);
                utils.addError(currentEntry, "Materi√°l " + materialName + " - nie je nastaven√° n√°kupn√° cena v poli ani argumente", "processPurchasePriceFromArguments");
                return null;
            }
        }

        // Fin√°lna valid√°cia
        if (isNaN(inputPriceValue) || inputPriceValue <= 0) {
            addWarningIcon(currentEntry, materialName);
            utils.addError(currentEntry, "Materi√°l " + materialName + " - neplatn√° n√°kupn√° cena: " + inputPriceValue, "processPurchasePriceFromArguments");
            return null;
        }

        var finalPurchasePrice = inputPriceValue;

        // Ak je zadan√° cena s DPH, prepoƒç√≠taj na cenu bez DPH
        if (dphOption === "s DPH") {
            // Z√≠skanie DPH sadzby pre materi√°l s fallback na "Z√°kladn√°"
            var vatRate = utils.safeGet(currentEntry, CONFIG.materialFields.vatRate, "");
            if (!vatRate || vatRate.trim() === "") {
                vatRate = "Z√°kladn√°";
                utils.addDebug(currentEntry, CONFIG.icons.info + " Pou≈æit√° default DPH sadzba: " + vatRate);
            }

            var vatRatePercentage = utils.getValidVatRate(vatRate, new Date());
            if (vatRatePercentage === null) {
                utils.addError(currentEntry, "Materi√°l " + materialName + " - nie je mo≈æn√© z√≠ska≈• DPH sadzbu pre: " + vatRate, "processPurchasePriceFromArguments");
                return null;
            }

            // Prepoƒçet ceny bez DPH: cena s DPH / (1 + sadzba DPH)
            var vatMultiplier = 1 + (vatRatePercentage / 100);
            finalPurchasePrice = inputPriceValue / vatMultiplier;

            utils.addDebug(currentEntry, CONFIG.icons.calculation + " Prepoƒçet z ceny s DPH:");
            utils.addDebug(currentEntry, "  ‚Ä¢ Zadan√° cena s DPH: " + utils.formatMoney(inputPriceValue));
            utils.addDebug(currentEntry, "  ‚Ä¢ DPH sadzba: " + vatRatePercentage + "%");
            utils.addDebug(currentEntry, "  ‚Ä¢ Prepoƒç√≠tan√° cena bez DPH: " + utils.formatMoney(finalPurchasePrice));
        } else {
            utils.addDebug(currentEntry, CONFIG.icons.money + " N√°kupn√° cena bez DPH (priamo zadan√°): " + utils.formatMoney(finalPurchasePrice));
        }

        return finalPurchasePrice;

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri spracovan√≠ argumentov pre materi√°l " + materialName + ": " + error.toString(), "processPurchasePriceFromArguments", error);
        return null;
    }
}

// ==============================================
// VYKONANIE PREPOƒåTU
// ==============================================

/**
 * Vykon√° skutoƒçn√Ω prepoƒçet cien
 */
function executeCalculation(currentEntry, purchasePrice, materialName) {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.calculation + " Sp√∫≈°≈•am prepoƒçet cien...");

        // Pou≈æitie funkcie z MementoBusiness modulu s vyn√∫ten√Ωm prepoƒçtom
        var result = utils.calculateAndUpdateMaterialPrices(
            currentEntry,
            purchasePrice,
            new Date(), // Pou≈æije aktu√°lny d√°tum
            true, // isManualAction = true (ide o manu√°lny prepoƒçet)
            { forceRecalculation: true } // Vyn√∫ti≈• prepoƒçet bez ohƒæadu na prahy
        );

        // Debug inform√°cie o v√Ωsledku
        utils.addDebug(currentEntry, "üîç DEBUG: V√Ωsledok calculateAndUpdateMaterialPrices:");
        utils.addDebug(currentEntry, "  ‚Ä¢ result: " + (result ? "existuje" : "null/undefined"));
        if (result) {
            utils.addDebug(currentEntry, "  ‚Ä¢ result.sellingPrice: " + result.sellingPrice);
            utils.addDebug(currentEntry, "  ‚Ä¢ result.priceWithVat: " + result.priceWithVat);
            utils.addDebug(currentEntry, "  ‚Ä¢ result.updated: " + result.updated);
            utils.addDebug(currentEntry, "  ‚Ä¢ result JSON: " + JSON.stringify(result));
        }

        if (result && result.sellingPrice !== undefined) {
            // √öspe≈°n√Ω prepoƒçet
            utils.addDebug(currentEntry, CONFIG.icons.success + " Prepoƒçet cien √∫spe≈°ne dokonƒçen√Ω");
            return {
                success: true,
                sellingPrice: result.sellingPrice,
                priceWithVat: result.priceWithVat,
                updated: result.updated
            };
        } else {
            // Prepoƒçet zlyhal
            utils.addError(currentEntry, "Prepoƒçet cien zlyhal pre materi√°l: " + materialName, "executeCalculation");
            utils.addError(currentEntry, "Result object: " + JSON.stringify(result), "executeCalculation");
            return {
                success: false,
                message: "Prepoƒçet cien sa nepodarilo dokonƒçi≈•"
            };
        }

    } catch (error) {
        utils.addError(currentEntry, "Chyba pri vykon√°van√≠ prepoƒçtu pre materi√°l " + materialName + ": " + error.toString(), "executeCalculation", error);
        return {
            success: false,
            message: error.toString()
        };
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

/**
 * Urƒç√≠ DPH option na z√°klade sadzby DPH z materi√°lov
 */
function determineDphOptionFromMaterials(materialEntries) {
    try {
        if (!materialEntries || materialEntries.length === 0) {
            return null;
        }

        // Prejdeme prv√Ωch niekoƒæko materi√°lov a pok√∫sime sa urƒçi≈• DPH
        for (var i = 0; i < Math.min(materialEntries.length, 3); i++) {
            var currentEntry = materialEntries[i];
            var materialName = utils.safeGet(currentEntry, CONFIG.materialFields.name, "Materi√°l #" + (i + 1));

            // Z√≠skanie sadzby DPH z materi√°lu
            var vatRate = utils.safeGet(currentEntry, CONFIG.materialFields.vatRate, "");

            // Ak nie je nastaven√° sadzba, pou≈æi≈• "Z√°kladn√°"
            if (!vatRate || vatRate.trim() === "") {
                vatRate = "Z√°kladn√°";
            }

            // Z√≠skanie percentu√°lnej hodnoty DPH
            var vatRatePercentage = utils.getValidVatRate(vatRate, new Date());

            if (vatRatePercentage !== null && vatRatePercentage > 0) {
                // Ak m√° materi√°l DPH > 0, predpoklad√°me ≈æe ceny s√∫ "bez DPH"
                return "bez DPH";
            } else if (vatRatePercentage === 0) {
                // Ak m√° materi√°l DPH = 0, ceny s√∫ tie≈æ "bez DPH"
                return "bez DPH";
            }
        }

        // Ak sa nepodarilo urƒçi≈• z materi√°lov, pou≈æi≈• default "bez DPH"
        return "bez DPH";

    } catch (error) {
        // Pri chybe vr√°time default hodnotu
        return "bez DPH";
    }
}

/**
 * Prid√° varovn√∫ ikonu do poƒæa icons materi√°lu
 */
function addWarningIcon(currentEntry, materialName) {
    try {
        var currentIcons = utils.safeGet(currentEntry, CONFIG.materialFields.icons, "");
        var warningIcon = CONFIG.icons.warning;

        // Prida≈• varovn√∫ ikonu len ak tam u≈æ nie je
        if (currentIcons.indexOf(warningIcon) === -1) {
            var newIcons = currentIcons ? currentIcons + " " + warningIcon : warningIcon;
            utils.safeSet(currentEntry, CONFIG.materialFields.icons, newIcons);
            utils.addDebug(currentEntry, CONFIG.icons.warning + " Pridan√° varovn√° ikona pre materi√°l: " + materialName);
        }
    } catch (error) {
        utils.addError(currentEntry, "Chyba pri prid√°van√≠ varovnej ikony: " + error.toString(), "addWarningIcon", error);
    }
}

// ==============================================
// FIN√ÅLNE ZHRNUTIE
// ==============================================

/**
 * Zobraz√≠ fin√°lne zhrnutie bulk oper√°cie
 */
function showFinalSummary() {
    var endTime = new Date();
    var duration = Math.round((endTime - bulkResults.startTime) / 1000);

    var summaryMessage = "üìã HROMADN√ù PREPOƒåET CIEN MATERI√ÅLOV\\n";
    summaryMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\\n\\n";

    summaryMessage += "‚è±Ô∏è ƒåas spracovania: " + duration + " sek√∫nd\\n";
    summaryMessage += "üìä Celkov√Ω poƒçet materi√°lov: " + bulkResults.total + "\\n\\n";

    summaryMessage += "‚úÖ √öspe≈°ne spracovan√©: " + bulkResults.successful + "\\n";
    summaryMessage += "‚ùå Ne√∫spe≈°n√©: " + bulkResults.failed + "\\n";
    summaryMessage += "‚è≠Ô∏è Preskoƒçen√©: " + bulkResults.skipped + "\\n\\n";

    // Percentu√°lny √∫spech
    var successRate = bulkResults.total > 0 ? Math.round((bulkResults.successful / bulkResults.total) * 100) : 0;
    summaryMessage += "üìà √öspe≈°nos≈•: " + successRate + "%\\n\\n";

    // Detaily √∫spe≈°n√Ωch materi√°lov
    if (bulkResults.successful > 0) {
        summaryMessage += "‚úÖ √öSPE≈†NE SPRACOVAN√â MATERI√ÅLY:\\n";
        summaryMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\\n";

        var successfulCount = 0;
        for (var i = 0; i < bulkResults.details.length && successfulCount < 10; i++) {
            var detail = bulkResults.details[i];
            if (detail.status === "√∫spe≈°n√Ω") {
                successfulCount++;
                summaryMessage += "‚Ä¢ " + detail.material + "\\n";
                summaryMessage += "  N√°kupn√°: " + utils.formatMoney(detail.newPrice) + "\\n";
                summaryMessage += "  Predajn√°: " + utils.formatMoney(detail.sellingPrice) + "\\n";
                if (successfulCount < 10 && successfulCount < bulkResults.successful) {
                    summaryMessage += "\\n";
                }
            }
        }

        if (bulkResults.successful > 10) {
            summaryMessage += "... a ƒèal≈°√≠ch " + (bulkResults.successful - 10) + " materi√°lov\\n";
        }
        summaryMessage += "\\n";
    }

    // Chyby a probl√©my
    if (bulkResults.failed > 0 || bulkResults.skipped > 0) {
        summaryMessage += "‚ö†Ô∏è PROBL√âMY:\\n";
        summaryMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\\n";

        var problemCount = 0;
        for (var i = 0; i < bulkResults.details.length && problemCount < 5; i++) {
            var detail = bulkResults.details[i];
            if (detail.status !== "√∫spe≈°n√Ω") {
                problemCount++;
                summaryMessage += "‚Ä¢ " + detail.material + ": " + detail.reason + "\\n";
            }
        }

        if ((bulkResults.failed + bulkResults.skipped) > 5) {
            summaryMessage += "... a ƒèal≈°√≠ch " + ((bulkResults.failed + bulkResults.skipped) - 5) + " probl√©mov\\n";
        }
        summaryMessage += "\\n";
    }

    summaryMessage += "üìù Detailn√© inform√°cie n√°jdete v Debug_Log poliach\\n";
    summaryMessage += "jednotliv√Ωch materi√°lov.";

    // Zobrazenie spr√°vneho dial√≥gu podƒæa v√Ωsledku
    if (bulkResults.successful === bulkResults.total) {
        utils.showSuccessDialog(summaryMessage);
    } else if (bulkResults.successful > 0) {
        utils.showInfoDialog(summaryMessage);
    } else {
        utils.showErrorDialog(summaryMessage);
    }
}

// ==============================================
// SPUSTENIE SCRIPTU
// ==============================================

main();