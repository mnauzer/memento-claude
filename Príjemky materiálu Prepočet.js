// ==============================================
// MEMENTO DATABASE - PR√çJEMKY MATERI√ÅLU PREPOƒåET
// Verzia: 1.0 | D√°tum: September 2025 | Autor: ASISTANTO
// Kni≈ænica: Pr√≠jemky materi√°lu | Trigger: Before Save
// ==============================================
// üìã FUNKCIA:
//    - Prepoƒçet polo≈æiek materi√°lu (mno≈æstvo * cena = cena celkom)
//    - Kontrola a prepoƒçet cien podƒæa nastaven√≠ materi√°lu
//    - V√Ωpoƒçet prir√°≈æok, zaokr√∫hƒæovania a DPH
//    - S√∫ƒçet cien polo≈æiek do poƒæa Suma
//    - V√Ωpoƒçet DPH a Sumy s DPH podƒæa platnej sadzby
//    - Aktualiz√°cia n√°kupn√Ωch cien v materi√°li
// ==============================================
// üîß POU≈Ω√çVA:
//    - MementoUtils v7.0 (agreg√°tor)
//    - MementoConfig (centr√°lna konfigur√°cia)
//    - MementoCore (z√°kladn√© funkcie)
//    - MementoBusiness (business logika a DPH funkcie)
// ==============================================

// ==============================================
// INICIALIZ√ÅCIA
// ==============================================

var utils = MementoUtils;
var config = utils.getConfig();
var centralConfig = utils.config;
var currentEntry = entry();

var CONFIG = {
    scriptName: "Pr√≠jemky materi√°lu Prepoƒçet",
    version: "1.0.0",

    // Kni≈ænice
    libraries: {
        materialIncomes: (centralConfig.libraries && centralConfig.libraries.materialIncomes) || "Pr√≠jemky materi√°lu",
        inventory: (centralConfig.libraries && centralConfig.libraries.inventory) || "Materi√°l",
        vatRates: (centralConfig.libraries && centralConfig.libraries.vatRatesLib) || "sadzby DPH"
    },

    // Polia Pr√≠jemky materi√°lu (podobn√© ako V√Ωdajky, ale s Dod√°vateƒæ namiesto Klient/Z√°kazka)
    fields: {
        date: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.date) || "D√°tum",
        items: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.items) || "Polo≈æky",
        supplier: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.supplier) || "Dod√°vateƒæ",
        partner: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.partner) || "Partner",
        sum: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.sum) || "Suma",
        vat: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.vat) || "DPH",
        sumWithVat: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.sumWithVat) || "Suma s DPH",
        transportPrice: (centralConfig.fields && centralConfig.fields.materialIncomes && centralConfig.fields.materialIncomes.transportPrice) || "Cena za prepravu",

        // Spoloƒçn√© polia
        debugLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.debugLog) || "Debug_Log",
        errorLog: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.errorLog) || "Error_Log",
        info: (centralConfig.fields && centralConfig.fields.common && centralConfig.fields.common.info) || "info"
    },

    // Polia Materi√°l (nov√© polia pre riadenie cien)
    materialFields: {
        name: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.name) || "N√°zov",
        priceCalculation: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceCalculation) || "Prepoƒçet ceny",
        markupPercentage: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.markupPercentage) || "Obchodn√° prir√°≈æka (%)",
        priceRounding: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceRounding) || "Zaokr√∫hƒæovanie cien",
        roundingValue: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.roundingValue) || "Hodnota zaokr√∫henia",
        vatRate: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.vatRate) || "sadzba DPH",
        price: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.price) || "Cena",
        priceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.priceWithVat) || "Cena s DPH",
        purchasePrice: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePrice) || "N√°kupn√° cena",
        purchasePriceWithVat: (centralConfig.fields && centralConfig.fields.items && centralConfig.fields.items.purchasePriceWithVat) || "N√°kupn√° cena s DPH"
    },

    // Atrib√∫ty polo≈æiek
    itemAttributes: {
        quantity: (centralConfig.attributes && centralConfig.attributes.materialIncomesItems && centralConfig.attributes.materialIncomesItems.quantity) || "mno≈æstvo",
        price: (centralConfig.attributes && centralConfig.attributes.materialIncomesItems && centralConfig.attributes.materialIncomesItems.price) || "cena",
        totalPrice: (centralConfig.attributes && centralConfig.attributes.materialIncomesItems && centralConfig.attributes.materialIncomesItems.totalPrice) || "cena celkom"
    },

    // Ikony
    icons: (centralConfig.icons) || {
        start: "üöÄ",
        success: "‚úÖ",
        error: "‚ùå",
        warning: "‚ö†Ô∏è",
        info: "‚ÑπÔ∏è",
        money: "üí∞",
        calculation: "üßÆ",
        material: "üì¶"
    }
};

// ==============================================
// HLAVN√Å FUNKCIA
// ==============================================

function main() {
    try {
        utils.addDebug(currentEntry, CONFIG.icons.start + " === ≈†TART " + CONFIG.scriptName + " v" + CONFIG.version + " ===");

        // Z√≠skanie d√°tumu pre urƒçenie platnej sadzby DPH
        var datum = utils.safeGet(currentEntry, CONFIG.fields.date, moment().toDate());
        utils.addDebug(currentEntry, CONFIG.icons.info + " D√°tum pre sadzbu: " + utils.formatDate(datum));

        // Z√≠skanie polo≈æiek materi√°lu
        var items = utils.safeGet(currentEntry, CONFIG.fields.items, []);
        if (!items || items.length === 0) {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " ≈Ωiadne polo≈æky materi√°lu na prepoƒçet");
            clearCalculatedFields();
            return true;
        }

        utils.addDebug(currentEntry, CONFIG.icons.info + " Poƒçet polo≈æiek: " + items.length);

        // Prepoƒçet polo≈æiek materi√°lu s kontrolou a prepoƒçtom cien
        var calculationResult = calculateMaterialItems(items, datum);
        if (!calculationResult.success) {
            utils.addError(currentEntry, calculationResult.error, "main");
            message(CONFIG.icons.error + " " + calculationResult.error);
            return false;
        }

        var totalSum = calculationResult.totalSum;
        utils.addDebug(currentEntry, CONFIG.icons.success + " Celkov√° suma materi√°lu: " + utils.formatMoney(totalSum));

        // Pridanie ceny za prepravu
        var transportPrice = utils.safeGet(currentEntry, CONFIG.fields.transportPrice, 0) || 0;
        if (transportPrice > 0) {
            totalSum += transportPrice;
            utils.addDebug(currentEntry, CONFIG.icons.info + " Pripoƒç√≠tan√° preprava: " + utils.formatMoney(transportPrice));
        }

        // Nastavenie celkovej sumy bez DPH
        utils.safeSet(currentEntry, CONFIG.fields.sum, totalSum);
        utils.addDebug(currentEntry, CONFIG.icons.money + " Celkov√° suma bez DPH: " + utils.formatMoney(totalSum));

        // Z√≠skanie platnej sadzby DPH (pou≈æijeme z√°kladn√∫ sadzbu)
        var vatRate = 0;
        try {
            vatRate = utils.getValidVatRate(datum, "z√°kladn√°");
            utils.addDebug(currentEntry, CONFIG.icons.success + " Platn√° sadzba DPH: " + vatRate + "%");
        } catch (error) {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " Chyba pri z√≠skavan√≠ DPH sadzby, pou≈æije sa 0%: " + error.toString());
            vatRate = 0;
        }

        // V√Ωpoƒçet DPH a sumy s DPH
        var vatAmount = totalSum * (vatRate / 100);
        var sumWithVat = totalSum + vatAmount;

        // Nastavenie hodn√¥t
        utils.safeSet(currentEntry, CONFIG.fields.vat, vatAmount);
        utils.safeSet(currentEntry, CONFIG.fields.sumWithVat, sumWithVat);

        // Vytvorenie info z√°znamu
        createInfoRecord(totalSum, vatAmount, sumWithVat, vatRate, calculationResult.processedItems, calculationResult.updatedMaterials);

        utils.addDebug(currentEntry, CONFIG.icons.success + " === PREPOƒåET MATERI√ÅLU DOKONƒåEN√ù ===");

        return true;

    } catch (error) {
        utils.addError(currentEntry, "Kritick√° chyba v hlavnej funkcii", "main", error);
        message(CONFIG.icons.error + " Kritick√° chyba!\n\n" + error.toString());
        return false;
    }
}

// ==============================================
// V√ùPOƒåTOV√â FUNKCIE
// ==============================================

function calculateMaterialItems(items, documentDate) {
    try {
        var totalSum = 0;
        var processedItems = 0;
        var updatedMaterials = 0;

        utils.addDebug(currentEntry, CONFIG.icons.calculation + " Sp√∫≈°≈•am prepoƒçet materi√°lnych polo≈æiek...");

        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (!item) {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Polo≈æka[" + i + "] je pr√°zdna - preskakujem");
                continue;
            }

            // Z√≠skanie mno≈æstva
            var quantity = parseFloat(item.attr(CONFIG.itemAttributes.quantity) || 0);
            if (quantity <= 0) {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Polo≈æka[" + i + "] nem√° platn√© mno≈æstvo - preskakujem");
                continue;
            }

            // Z√≠skanie n√°kupnej ceny (mus√≠ by≈• zadan√° ruƒçne)
            var purchasePrice = parseFloat(item.attr(CONFIG.itemAttributes.price) || 0);
            if (purchasePrice <= 0) {
                utils.addDebug(currentEntry, CONFIG.icons.warning + " Polo≈æka[" + i + "] nem√° zadan√∫ n√°kupn√∫ cenu - preskakujem");
                continue;
            }

            // Kontrola a prepoƒçet cien pre dan√Ω materi√°l
            var priceResult = calculateAndUpdateMaterialPrices(item, purchasePrice, documentDate);
            if (priceResult.updated) {
                updatedMaterials++;
            }

            // V√Ωpoƒçet celkovej ceny polo≈æky (na z√°klade n√°kupnej ceny)
            var itemTotal = quantity * purchasePrice;

            // Nastavenie celkovej ceny sp√§≈• do atrib√∫tu
            item.setAttr(CONFIG.itemAttributes.totalPrice, itemTotal);

            totalSum += itemTotal;
            processedItems++;

            // Z√≠skaj n√°zov materi√°lu pre debug
            var materialName = utils.safeGet(item, CONFIG.materialFields.name, "Nezn√°my materi√°l");

            utils.addDebug(currentEntry, CONFIG.icons.material + " " + materialName + ": " + quantity + " x " + utils.formatMoney(purchasePrice) + " = " + utils.formatMoney(itemTotal));
        }

        utils.addDebug(currentEntry, CONFIG.icons.success + " Spracovan√Ωch polo≈æiek: " + processedItems + "/" + items.length);
        utils.addDebug(currentEntry, CONFIG.icons.info + " Aktualizovan√Ωch materi√°lov: " + updatedMaterials);

        return {
            success: true,
            totalSum: totalSum,
            processedItems: processedItems,
            updatedMaterials: updatedMaterials
        };

    } catch (error) {
        return {
            success: false,
            error: "Chyba pri prepoƒçte polo≈æiek: " + error.toString()
        };
    }
}

function calculateAndUpdateMaterialPrices(item, purchasePrice, documentDate) {
    try {
        var materialName = utils.safeGet(item, CONFIG.materialFields.name, "Nezn√°my materi√°l");
        var updated = false;

        // 1. Zisti≈• nastavenie poƒæa Prepoƒçet ceny
        var priceCalculation = utils.safeGet(item, CONFIG.materialFields.priceCalculation, "");
        utils.addDebug(currentEntry, CONFIG.icons.info + " " + materialName + " - Prepoƒçet ceny: " + priceCalculation);

        var sellingPrice = purchasePrice;
        var vatRate = 0;

        // 2. Ak je "Podƒæa prir√°≈æky", vypoƒç√≠ta≈• predajn√∫ cenu
        if (priceCalculation === "Podƒæa prir√°≈æky") {
            var markupPercentage = parseFloat(utils.safeGet(item, CONFIG.materialFields.markupPercentage, 0));
            if (markupPercentage > 0) {
                sellingPrice = purchasePrice * (1 + markupPercentage / 100);
                utils.addDebug(currentEntry, CONFIG.icons.calculation + " " + materialName + " - Prir√°≈æka " + markupPercentage + "%: " + utils.formatMoney(purchasePrice) + " -> " + utils.formatMoney(sellingPrice));
            }
        }

        // 3. Zisti≈• sadzbu DPH
        var vatRateType = utils.safeGet(item, CONFIG.materialFields.vatRate, "Z√°kladn√°");
        try {
            vatRate = utils.getValidVatRate(documentDate, vatRateType.toLowerCase());
            utils.addDebug(currentEntry, CONFIG.icons.success + " " + materialName + " - Sadzba DPH (" + vatRateType + "): " + vatRate + "%");
        } catch (error) {
            utils.addDebug(currentEntry, CONFIG.icons.warning + " " + materialName + " - Chyba pri z√≠skavan√≠ DPH, pou≈æije sa 0%");
            vatRate = 0;
        }

        // 4. V√Ωpoƒçet ceny s DPH (pred zaokr√∫hlen√≠m)
        var priceWithVat = sellingPrice * (1 + vatRate / 100);
        var purchasePriceWithVat = purchasePrice * (1 + vatRate / 100);

        // 5. Zaokr√∫hƒæovanie ceny s DPH
        var roundedPriceWithVat = applyPriceRounding(item, priceWithVat, materialName + " (s DPH)");
        var roundedPurchasePriceWithVat = applyPriceRounding(item, purchasePriceWithVat, materialName + " - n√°kupn√° (s DPH)");

        // 6. Prepoƒç√≠tanie ceny bez DPH z zaokr√∫hlenej ceny s DPH
        var roundedPrice = roundedPriceWithVat / (1 + vatRate / 100);
        var roundedPurchasePrice = roundedPurchasePriceWithVat / (1 + vatRate / 100);

        // 7. Aktualizova≈• polia v materi√°li ak sa ceny zmenili
        var currentPrice = parseFloat(utils.safeGet(item, CONFIG.materialFields.price, 0));
        var currentPriceWithVat = parseFloat(utils.safeGet(item, CONFIG.materialFields.priceWithVat, 0));
        var currentPurchasePrice = parseFloat(utils.safeGet(item, CONFIG.materialFields.purchasePrice, 0));
        var currentPurchasePriceWithVat = parseFloat(utils.safeGet(item, CONFIG.materialFields.purchasePriceWithVat, 0));

        if (Math.abs(currentPrice - roundedPrice) > 0.01 ||
            Math.abs(currentPriceWithVat - roundedPriceWithVat) > 0.01 ||
            Math.abs(currentPurchasePrice - roundedPurchasePrice) > 0.01 ||
            Math.abs(currentPurchasePriceWithVat - roundedPurchasePriceWithVat) > 0.01) {

            // Aktualizova≈• ceny v z√°zname materi√°lu
            utils.safeSet(item, CONFIG.materialFields.price, roundedPrice);
            utils.safeSet(item, CONFIG.materialFields.priceWithVat, roundedPriceWithVat);
            utils.safeSet(item, CONFIG.materialFields.purchasePrice, roundedPurchasePrice);
            utils.safeSet(item, CONFIG.materialFields.purchasePriceWithVat, roundedPurchasePriceWithVat);

            // Vytvorenie info z√°znamu pre materi√°l
            createMaterialInfoRecord(item, {
                originalPurchasePrice: purchasePrice,
                originalSellingPrice: sellingPrice,
                originalPriceWithVat: priceWithVat,
                originalPurchasePriceWithVat: purchasePriceWithVat,
                finalPrice: roundedPrice,
                finalPriceWithVat: roundedPriceWithVat,
                finalPurchasePrice: roundedPurchasePrice,
                finalPurchasePriceWithVat: roundedPurchasePriceWithVat,
                vatRate: vatRate,
                vatRateType: vatRateType,
                priceCalculation: priceCalculation,
                markupPercentage: parseFloat(utils.safeGet(item, CONFIG.materialFields.markupPercentage, 0)),
                priceRounding: utils.safeGet(item, CONFIG.materialFields.priceRounding, ""),
                roundingValue: utils.safeGet(item, CONFIG.materialFields.roundingValue, ""),
                documentDate: documentDate
            });

            updated = true;

            utils.addDebug(currentEntry, CONFIG.icons.success + " " + materialName + " - Aktualizovan√© ceny:");
            utils.addDebug(currentEntry, "  N√°kupn√°: " + utils.formatMoney(roundedPurchasePrice) + " / s DPH: " + utils.formatMoney(roundedPurchasePriceWithVat));
            utils.addDebug(currentEntry, "  Predajn√°: " + utils.formatMoney(roundedPrice) + " / s DPH: " + utils.formatMoney(roundedPriceWithVat));
        }

        return {
            updated: updated,
            sellingPrice: roundedPrice,
            priceWithVat: roundedPriceWithVat
        };

    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.error + " Chyba pri prepoƒçte cien materi√°lu: " + error.toString());
        return {
            updated: false,
            sellingPrice: purchasePrice,
            priceWithVat: purchasePrice
        };
    }
}

function applyPriceRounding(item, price, materialName) {
    try {
        var priceRounding = utils.safeGet(item, CONFIG.materialFields.priceRounding, "");
        var roundingValue = utils.safeGet(item, CONFIG.materialFields.roundingValue, "");

        if (!priceRounding || priceRounding === "Nezaokr√∫hƒæova≈•") {
            return price;
        }

        var roundingFactor = 1; // Desatiny
        switch (roundingValue) {
            case "Jednotky":
                roundingFactor = 1;
                break;
            case "Desiatky":
                roundingFactor = 10;
                break;
            case "Stovky":
                roundingFactor = 100;
                break;
            case "Desatiny":
            default:
                roundingFactor = 0.1;
                break;
        }

        var roundedPrice = price;
        switch (priceRounding) {
            case "Nahor":
                roundedPrice = Math.ceil(price / roundingFactor) * roundingFactor;
                break;
            case "Nadol":
                roundedPrice = Math.floor(price / roundingFactor) * roundingFactor;
                break;
            case "Najbli≈æ≈°ie":
                roundedPrice = Math.round(price / roundingFactor) * roundingFactor;
                break;
        }

        if (Math.abs(price - roundedPrice) > 0.001) {
            utils.addDebug(currentEntry, CONFIG.icons.calculation + " " + materialName + " - Zaokr√∫hlenie (" + priceRounding + ", " + roundingValue + "): " + utils.formatMoney(price) + " -> " + utils.formatMoney(roundedPrice));
        }

        return roundedPrice;

    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.warning + " Chyba pri zaokr√∫hƒæovan√≠ ceny, pou≈æije sa p√¥vodn√°: " + error.toString());
        return price;
    }
}

// ==============================================
// POMOCN√â FUNKCIE
// ==============================================

function clearCalculatedFields() {
    try {
        utils.safeSet(currentEntry, CONFIG.fields.sum, 0);
        utils.safeSet(currentEntry, CONFIG.fields.vat, 0);
        utils.safeSet(currentEntry, CONFIG.fields.sumWithVat, 0);
        utils.addDebug(currentEntry, CONFIG.icons.info + " Vypoƒç√≠tan√© polia vyƒçisten√©");
    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.error + " Chyba pri ƒçisten√≠ pol√≠: " + error.toString());
    }
}

function createMaterialInfoRecord(item, priceData) {
    try {
        var materialName = utils.safeGet(item, CONFIG.materialFields.name, "Nezn√°my materi√°l");
        var dateFormatted = utils.formatDate(priceData.documentDate, "DD.MM.YYYY HH:mm:ss");

        var infoMessage = "üí∞ AUTOMATICK√Å AKTUALIZ√ÅCIA CIEN MATERI√ÅLU\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

        infoMessage += "üì¶ Materi√°l: " + materialName + "\n";
        infoMessage += "üìÖ D√°tum pr√≠jemky: " + dateFormatted + "\n";
        infoMessage += "üîß Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n\n";

        infoMessage += "‚öôÔ∏è NASTAVENIA PREPOƒåTU:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Prepoƒçet ceny: " + priceData.priceCalculation + "\n";
        if (priceData.markupPercentage > 0) {
            infoMessage += "‚Ä¢ Obchodn√° prir√°≈æka: " + priceData.markupPercentage + "%\n";
        }
        infoMessage += "‚Ä¢ Sadzba DPH: " + priceData.vatRateType + " (" + priceData.vatRate + "%)\n";
        if (priceData.priceRounding && priceData.priceRounding !== "Nezaokr√∫hƒæova≈•") {
            infoMessage += "‚Ä¢ Zaokr√∫hƒæovanie: " + priceData.priceRounding + " (" + priceData.roundingValue + ")\n";
        }
        infoMessage += "\n";

        infoMessage += "üí∏ PREPOƒåET N√ÅKUPN√ùCH CIEN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ P√¥vodn√° n√°kupn√° cena: " + utils.formatMoney(priceData.originalPurchasePrice) + "\n";
        infoMessage += "‚Ä¢ N√°kupn√° cena s DPH: " + utils.formatMoney(priceData.originalPurchasePriceWithVat) + "\n";
        if (priceData.priceRounding && priceData.priceRounding !== "Nezaokr√∫hƒæova≈•") {
            infoMessage += "‚Ä¢ Zaokr√∫hlen√° s DPH: " + utils.formatMoney(priceData.finalPurchasePriceWithVat) + "\n";
            infoMessage += "‚Ä¢ Fin√°lna n√°kupn√°: " + utils.formatMoney(priceData.finalPurchasePrice) + "\n";
        }
        infoMessage += "\n";

        infoMessage += "üí∞ PREPOƒåET PREDAJN√ùCH CIEN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        if (priceData.priceCalculation === "Podƒæa prir√°≈æky" && priceData.markupPercentage > 0) {
            infoMessage += "‚Ä¢ Z√°kladn√° predajn√°: " + utils.formatMoney(priceData.originalPurchasePrice) + "\n";
            infoMessage += "‚Ä¢ S prir√°≈ækou " + priceData.markupPercentage + "%: " + utils.formatMoney(priceData.originalSellingPrice) + "\n";
        } else {
            infoMessage += "‚Ä¢ Predajn√° cena (= n√°kupn√°): " + utils.formatMoney(priceData.originalSellingPrice) + "\n";
        }
        infoMessage += "‚Ä¢ Predajn√° s DPH: " + utils.formatMoney(priceData.originalPriceWithVat) + "\n";
        if (priceData.priceRounding && priceData.priceRounding !== "Nezaokr√∫hƒæova≈•") {
            infoMessage += "‚Ä¢ Zaokr√∫hlen√° s DPH: " + utils.formatMoney(priceData.finalPriceWithVat) + "\n";
            infoMessage += "‚Ä¢ Fin√°lna predajn√°: " + utils.formatMoney(priceData.finalPrice) + "\n";
        }
        infoMessage += "\n";

        infoMessage += "üìä FIN√ÅLNE HODNOTY V MATERI√ÅLI:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ N√°kupn√° cena: " + utils.formatMoney(priceData.finalPurchasePrice) + "\n";
        infoMessage += "‚Ä¢ N√°kupn√° cena s DPH: " + utils.formatMoney(priceData.finalPurchasePriceWithVat) + "\n";
        infoMessage += "‚Ä¢ Predajn√° cena: " + utils.formatMoney(priceData.finalPrice) + "\n";
        infoMessage += "‚Ä¢ Predajn√° cena s DPH: " + utils.formatMoney(priceData.finalPriceWithVat) + "\n";

        if (priceData.markupPercentage > 0) {
            var actualMargin = ((priceData.finalPrice - priceData.finalPurchasePrice) / priceData.finalPurchasePrice) * 100;
            infoMessage += "‚Ä¢ Skutoƒçn√° mar≈æa: " + utils.formatNumber(actualMargin, 2) + "%\n";
        }

        infoMessage += "\n‚úÖ CENY AKTUALIZOVAN√â √öSPE≈†NE";

        // Nastavenie info z√°znamu do materi√°lu
        var materialInfoField = CONFIG.fields.info;
        utils.safeSet(item, materialInfoField, infoMessage);

        utils.addDebug(currentEntry, CONFIG.icons.success + " Info z√°znam vytvoren√Ω pre materi√°l: " + materialName);

        return true;

    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.error + " Chyba pri vytv√°ran√≠ info z√°znamu pre materi√°l: " + error.toString());
        return false;
    }
}

function createInfoRecord(totalSum, vatAmount, sumWithVat, vatRate, processedItems, updatedMaterials) {
    try {
        var date = utils.safeGet(currentEntry, CONFIG.fields.date, moment().toDate());
        var dateFormatted = utils.formatDate(date, "DD.MM.YYYY");
        var dayName = utils.getDayNameSK(moment(date).day()).toUpperCase();

        var infoMessage = "üì¶ PR√çJEMKY MATERI√ÅLU - AUTOMATICK√ù PREPOƒåET\n";
        infoMessage += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

        infoMessage += "üìÖ D√°tum: " + dateFormatted + " (" + dayName + ")\n\n";

        // Info o dod√°vateƒæovi/partnerovi
        var supplier = utils.safeGet(currentEntry, CONFIG.fields.supplier, null);
        var partner = utils.safeGet(currentEntry, CONFIG.fields.partner, null);

        if (supplier && supplier.length > 0) {
            var supplierName = utils.safeGet(supplier[0], "N√°zov", "Nezn√°my dod√°vateƒæ");
            infoMessage += "üè≠ Dod√°vateƒæ: " + supplierName + "\n";
        }
        if (partner && partner.length > 0) {
            var partnerName = utils.safeGet(partner[0], "N√°zov", "Nezn√°my partner");
            infoMessage += "ü§ù Partner: " + partnerName + "\n";
        }
        if ((supplier && supplier.length > 0) || (partner && partner.length > 0)) {
            infoMessage += "\n";
        }

        infoMessage += "üìä POLO≈ΩKY MATERI√ÅLU:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Spracovan√© polo≈æky: " + processedItems + "\n";
        infoMessage += "‚Ä¢ Aktualizovan√© materi√°ly: " + updatedMaterials + "\n";

        // Z√≠skaj polo≈æky pre detail
        var items = utils.safeGet(currentEntry, CONFIG.fields.items, []);
        for (var i = 0; i < Math.min(items.length, 5); i++) { // Zobraz max 5 polo≈æiek
            var item = items[i];
            if (item) {
                var materialName = utils.safeGet(item, CONFIG.materialFields.name, "Nezn√°my materi√°l");
                var quantity = parseFloat(item.attr(CONFIG.itemAttributes.quantity) || 0);
                var price = parseFloat(item.attr(CONFIG.itemAttributes.price) || 0);
                var itemTotal = parseFloat(item.attr(CONFIG.itemAttributes.totalPrice) || 0);

                if (quantity > 0 && price > 0) {
                    infoMessage += "üì¶ " + (i+1) + ": " + materialName + "\n";
                    infoMessage += "   " + quantity + " x " + utils.formatMoney(price) + " = " + utils.formatMoney(itemTotal) + "\n";
                }
            }
        }

        if (items.length > 5) {
            infoMessage += "   ... a " + (items.length - 5) + " ƒèal≈°√≠ch polo≈æiek\n";
        }

        infoMessage += "\nüí∞ S√öHRN:\n";
        infoMessage += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        infoMessage += "‚Ä¢ Suma bez DPH: " + utils.formatMoney(totalSum) + "\n";
        infoMessage += "‚Ä¢ DPH (" + vatRate + "%): " + utils.formatMoney(vatAmount) + "\n";
        infoMessage += "‚Ä¢ Suma s DPH: " + utils.formatMoney(sumWithVat) + "\n\n";

        var transportPrice = utils.safeGet(currentEntry, CONFIG.fields.transportPrice, 0);
        if (transportPrice > 0) {
            infoMessage += "üöö Preprava: " + utils.formatMoney(transportPrice) + "\n\n";
        }

        infoMessage += "üîß TECHNICK√â INFO:\n";
        infoMessage += "‚Ä¢ Script: " + CONFIG.scriptName + " v" + CONFIG.version + "\n";
        infoMessage += "‚Ä¢ ƒåas spracovania: " + moment().format("HH:mm:ss") + "\n";
        infoMessage += "‚Ä¢ MementoUtils: v" + (utils.version || "N/A") + "\n";

        if (typeof MementoConfig !== 'undefined') {
            infoMessage += "‚Ä¢ MementoConfig: v" + MementoConfig.version + "\n";
        }

        infoMessage += "\n‚úÖ PREPOƒåET DOKONƒåEN√ù √öSPE≈†NE";

        currentEntry.set(CONFIG.fields.info, infoMessage);

        utils.addDebug(currentEntry, CONFIG.icons.success + " Info z√°znam vytvoren√Ω");

        return true;

    } catch (error) {
        utils.addDebug(currentEntry, CONFIG.icons.error + " Chyba pri vytv√°ran√≠ info z√°znamu: " + error.toString());
        return false;
    }
}

// ==============================================
// SPUSTENIE
// ==============================================

main();